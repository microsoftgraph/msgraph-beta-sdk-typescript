/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createItemBodyFromDiscriminatorValue, createTimeCardFromDiscriminatorValue, serializeItemBody, serializeTimeCard, type ItemBody, type TimeCard } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ClockOutPostRequestBody extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The atApprovedLocation property
     */
    atApprovedLocation?: boolean;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The notes property
     */
    notes?: ItemBody;
}
/**
 * Provides operations to call the clockOut method.
 */
export interface ClockOutRequestBuilder extends BaseRequestBuilder<ClockOutRequestBuilder> {
    /**
     * Clock out to end an open timeCard.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<TimeCard>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/timecard-clockout?view=graph-rest-1.0|Find more info here}
     */
     post(body: ClockOutPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<TimeCard | undefined>;
    /**
     * Clock out to end an open timeCard.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: ClockOutPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ClockOutPostRequestBody}
 */
export function createClockOutPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoClockOutPostRequestBody;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoClockOutPostRequestBody(clockOutPostRequestBody: Partial<ClockOutPostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "atApprovedLocation": n => { clockOutPostRequestBody.atApprovedLocation = n.getBooleanValue(); },
        "backingStoreEnabled": n => { clockOutPostRequestBody.backingStoreEnabled = true; },
        "notes": n => { clockOutPostRequestBody.notes = n.getObjectValue<ItemBody>(createItemBodyFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeClockOutPostRequestBody(writer: SerializationWriter, clockOutPostRequestBody: Partial<ClockOutPostRequestBody> | undefined = {}) : void {
    writer.writeBooleanValue("atApprovedLocation", clockOutPostRequestBody.atApprovedLocation);
    writer.writeObjectValue<ItemBody>("notes", clockOutPostRequestBody.notes, serializeItemBody);
    writer.writeAdditionalData(clockOutPostRequestBody.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const ClockOutRequestBuilderUriTemplate = "{+baseurl}/teamTemplateDefinition/{teamTemplateDefinition%2Did}/teamDefinition/schedule/timeCards/{timeCard%2Did}/clockOut";
/**
 * Metadata for all the requests in the request builder.
 */
export const ClockOutRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: ClockOutRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createTimeCardFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeClockOutPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
