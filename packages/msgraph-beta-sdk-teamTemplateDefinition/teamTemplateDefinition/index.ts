/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createTeamTemplateDefinitionCollectionResponseFromDiscriminatorValue, createTeamTemplateDefinitionFromDiscriminatorValue, serializeTeamTemplateDefinition, type TeamTemplateDefinition, type TeamTemplateDefinitionCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { TeamTemplateDefinitionItemRequestBuilderNavigationMetadata, TeamTemplateDefinitionItemRequestBuilderRequestsMetadata, type TeamTemplateDefinitionItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the collection of teamTemplateDefinition entities.
 */
export interface TeamTemplateDefinitionRequestBuilder extends BaseRequestBuilder<TeamTemplateDefinitionRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the collection of teamTemplateDefinition entities.
     * @param teamTemplateDefinitionId The unique identifier of teamTemplateDefinition
     * @returns {TeamTemplateDefinitionItemRequestBuilder}
     */
     byTeamTemplateDefinitionId(teamTemplateDefinitionId: string) : TeamTemplateDefinitionItemRequestBuilder;
    /**
     * Get entities from teamTemplateDefinition
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<TeamTemplateDefinitionCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<TeamTemplateDefinitionRequestBuilderGetQueryParameters> | undefined) : Promise<TeamTemplateDefinitionCollectionResponse | undefined>;
    /**
     * Add new entity to teamTemplateDefinition
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<TeamTemplateDefinition>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: TeamTemplateDefinition, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<TeamTemplateDefinition | undefined>;
    /**
     * Get entities from teamTemplateDefinition
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<TeamTemplateDefinitionRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Add new entity to teamTemplateDefinition
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: TeamTemplateDefinition, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get entities from teamTemplateDefinition
 */
export interface TeamTemplateDefinitionRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Uri template for the request builder.
 */
export const TeamTemplateDefinitionRequestBuilderUriTemplate = "{+baseurl}/teamTemplateDefinition{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Provides operations to manage the collection of teamTemplateDefinition entities.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    TeamDefinition: "teamDefinition",
} as const;
/**
 * Provides operations to manage the collection of teamTemplateDefinition entities.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    Audience: "audience",
    AudienceDesc: "audience desc",
    Categories: "categories",
    CategoriesDesc: "categories desc",
    Description: "description",
    DescriptionDesc: "description desc",
    DisplayName: "displayName",
    DisplayNameDesc: "displayName desc",
    IconUrl: "iconUrl",
    IconUrlDesc: "iconUrl desc",
    LanguageTag: "languageTag",
    LanguageTagDesc: "languageTag desc",
    LastModifiedBy: "lastModifiedBy",
    LastModifiedByDesc: "lastModifiedBy desc",
    LastModifiedDateTime: "lastModifiedDateTime",
    LastModifiedDateTimeDesc: "lastModifiedDateTime desc",
    ParentTemplateId: "parentTemplateId",
    ParentTemplateIdDesc: "parentTemplateId desc",
    PublisherName: "publisherName",
    PublisherNameDesc: "publisherName desc",
    ShortDescription: "shortDescription",
    ShortDescriptionDesc: "shortDescription desc",
} as const;
/**
 * Provides operations to manage the collection of teamTemplateDefinition entities.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    Audience: "audience",
    Categories: "categories",
    Description: "description",
    DisplayName: "displayName",
    IconUrl: "iconUrl",
    LanguageTag: "languageTag",
    LastModifiedBy: "lastModifiedBy",
    LastModifiedDateTime: "lastModifiedDateTime",
    ParentTemplateId: "parentTemplateId",
    PublisherName: "publisherName",
    ShortDescription: "shortDescription",
    TeamDefinition: "teamDefinition",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const TeamTemplateDefinitionRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const TeamTemplateDefinitionRequestBuilderNavigationMetadata: Record<Exclude<keyof TeamTemplateDefinitionRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byTeamTemplateDefinitionId: {
        requestsMetadata: TeamTemplateDefinitionItemRequestBuilderRequestsMetadata,
        navigationMetadata: TeamTemplateDefinitionItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["teamTemplateDefinition%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const TeamTemplateDefinitionRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: TeamTemplateDefinitionRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createTeamTemplateDefinitionCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: TeamTemplateDefinitionRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: TeamTemplateDefinitionRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createTeamTemplateDefinitionFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeTeamTemplateDefinition,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
