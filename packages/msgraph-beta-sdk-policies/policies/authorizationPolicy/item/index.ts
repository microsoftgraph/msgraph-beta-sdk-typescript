/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createAuthorizationPolicyFromDiscriminatorValue, serializeAuthorizationPolicy, type AuthorizationPolicy } from '@microsoft/msgraph-beta-sdk/models/';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
// @ts-ignore
import { DefaultUserRoleOverridesRequestBuilderNavigationMetadata, DefaultUserRoleOverridesRequestBuilderRequestsMetadata, type DefaultUserRoleOverridesRequestBuilder } from './defaultUserRoleOverrides/';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the authorizationPolicy property of the microsoft.graph.policyRoot entity.
 */
export interface AuthorizationPolicyItemRequestBuilder extends BaseRequestBuilder<AuthorizationPolicyItemRequestBuilder> {
    /**
     * Provides operations to manage the defaultUserRoleOverrides property of the microsoft.graph.authorizationPolicy entity.
     */
    get defaultUserRoleOverrides(): DefaultUserRoleOverridesRequestBuilder;
    /**
     * Delete navigation property authorizationPolicy for policies
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * The policy that controls Microsoft Entra authorization settings.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<AuthorizationPolicy>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<AuthorizationPolicyItemRequestBuilderGetQueryParameters> | undefined) : Promise<AuthorizationPolicy | undefined>;
    /**
     * Update the navigation property authorizationPolicy in policies
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<AuthorizationPolicy>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: AuthorizationPolicy, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<AuthorizationPolicy | undefined>;
    /**
     * Delete navigation property authorizationPolicy for policies
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * The policy that controls Microsoft Entra authorization settings.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<AuthorizationPolicyItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property authorizationPolicy in policies
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: AuthorizationPolicy, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * The policy that controls Microsoft Entra authorization settings.
 */
export interface AuthorizationPolicyItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const AuthorizationPolicyItemRequestBuilderUriTemplate = "{+baseurl}/policies/authorizationPolicy/{authorizationPolicy%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const AuthorizationPolicyItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const AuthorizationPolicyItemRequestBuilderNavigationMetadata: Record<Exclude<keyof AuthorizationPolicyItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    defaultUserRoleOverrides: {
        requestsMetadata: DefaultUserRoleOverridesRequestBuilderRequestsMetadata,
        navigationMetadata: DefaultUserRoleOverridesRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const AuthorizationPolicyItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: AuthorizationPolicyItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: AuthorizationPolicyItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createAuthorizationPolicyFromDiscriminatorValue,
        queryParametersMapper: AuthorizationPolicyItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: AuthorizationPolicyItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createAuthorizationPolicyFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeAuthorizationPolicy,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
