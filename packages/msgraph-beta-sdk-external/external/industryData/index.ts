/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createIndustryDataRootFromDiscriminatorValue, type IndustryDataRoot } from '@microsoft/msgraph-beta-sdk/models/industryData/';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
// @ts-ignore
import { DataConnectorsRequestBuilderNavigationMetadata, DataConnectorsRequestBuilderRequestsMetadata, type DataConnectorsRequestBuilder } from './dataConnectors/';
// @ts-ignore
import { InboundFlowsRequestBuilderNavigationMetadata, InboundFlowsRequestBuilderRequestsMetadata, type InboundFlowsRequestBuilder } from './inboundFlows/';
// @ts-ignore
import { OperationsRequestBuilderNavigationMetadata, OperationsRequestBuilderRequestsMetadata, type OperationsRequestBuilder } from './operations/';
// @ts-ignore
import { ReferenceDefinitionsRequestBuilderNavigationMetadata, ReferenceDefinitionsRequestBuilderRequestsMetadata, type ReferenceDefinitionsRequestBuilder } from './referenceDefinitions/';
// @ts-ignore
import { RoleGroupsRequestBuilderNavigationMetadata, RoleGroupsRequestBuilderRequestsMetadata, type RoleGroupsRequestBuilder } from './roleGroups/';
// @ts-ignore
import { RunsRequestBuilderNavigationMetadata, RunsRequestBuilderRequestsMetadata, type RunsRequestBuilder } from './runs/';
// @ts-ignore
import { SourceSystemsRequestBuilderNavigationMetadata, SourceSystemsRequestBuilderRequestsMetadata, type SourceSystemsRequestBuilder } from './sourceSystems/';
// @ts-ignore
import { type YearsRequestBuilder, YearsRequestBuilderNavigationMetadata, YearsRequestBuilderRequestsMetadata } from './years/';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the industryData property of the microsoft.graph.externalConnectors.external entity.
 */
export interface IndustryDataRequestBuilder extends BaseRequestBuilder<IndustryDataRequestBuilder> {
    /**
     * Provides operations to manage the dataConnectors property of the microsoft.graph.industryData.industryDataRoot entity.
     */
    get dataConnectors(): DataConnectorsRequestBuilder;
    /**
     * Provides operations to manage the inboundFlows property of the microsoft.graph.industryData.industryDataRoot entity.
     */
    get inboundFlows(): InboundFlowsRequestBuilder;
    /**
     * Provides operations to manage the operations property of the microsoft.graph.industryData.industryDataRoot entity.
     */
    get operations(): OperationsRequestBuilder;
    /**
     * Provides operations to manage the referenceDefinitions property of the microsoft.graph.industryData.industryDataRoot entity.
     */
    get referenceDefinitions(): ReferenceDefinitionsRequestBuilder;
    /**
     * Provides operations to manage the roleGroups property of the microsoft.graph.industryData.industryDataRoot entity.
     */
    get roleGroups(): RoleGroupsRequestBuilder;
    /**
     * Provides operations to manage the runs property of the microsoft.graph.industryData.industryDataRoot entity.
     */
    get runs(): RunsRequestBuilder;
    /**
     * Provides operations to manage the sourceSystems property of the microsoft.graph.industryData.industryDataRoot entity.
     */
    get sourceSystems(): SourceSystemsRequestBuilder;
    /**
     * Provides operations to manage the years property of the microsoft.graph.industryData.industryDataRoot entity.
     */
    get years(): YearsRequestBuilder;
    /**
     * Get industryData from external
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<IndustryDataRoot>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<IndustryDataRequestBuilderGetQueryParameters> | undefined) : Promise<IndustryDataRoot | undefined>;
    /**
     * Get industryData from external
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<IndustryDataRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Get industryData from external
 */
export interface IndustryDataRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const IndustryDataRequestBuilderUriTemplate = "{+baseurl}/external/industryData{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const IndustryDataRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const IndustryDataRequestBuilderNavigationMetadata: Record<Exclude<keyof IndustryDataRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    dataConnectors: {
        requestsMetadata: DataConnectorsRequestBuilderRequestsMetadata,
        navigationMetadata: DataConnectorsRequestBuilderNavigationMetadata,
    },
    inboundFlows: {
        requestsMetadata: InboundFlowsRequestBuilderRequestsMetadata,
        navigationMetadata: InboundFlowsRequestBuilderNavigationMetadata,
    },
    operations: {
        requestsMetadata: OperationsRequestBuilderRequestsMetadata,
        navigationMetadata: OperationsRequestBuilderNavigationMetadata,
    },
    referenceDefinitions: {
        requestsMetadata: ReferenceDefinitionsRequestBuilderRequestsMetadata,
        navigationMetadata: ReferenceDefinitionsRequestBuilderNavigationMetadata,
    },
    roleGroups: {
        requestsMetadata: RoleGroupsRequestBuilderRequestsMetadata,
        navigationMetadata: RoleGroupsRequestBuilderNavigationMetadata,
    },
    runs: {
        requestsMetadata: RunsRequestBuilderRequestsMetadata,
        navigationMetadata: RunsRequestBuilderNavigationMetadata,
    },
    sourceSystems: {
        requestsMetadata: SourceSystemsRequestBuilderRequestsMetadata,
        navigationMetadata: SourceSystemsRequestBuilderNavigationMetadata,
    },
    years: {
        requestsMetadata: YearsRequestBuilderRequestsMetadata,
        navigationMetadata: YearsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const IndustryDataRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: IndustryDataRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createIndustryDataRootFromDiscriminatorValue,
        queryParametersMapper: IndustryDataRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
