/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createPrivilegedRoleFromDiscriminatorValue, serializePrivilegedRole, type PrivilegedRole } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { AssignmentsRequestBuilderNavigationMetadata, AssignmentsRequestBuilderRequestsMetadata, AssignmentsRequestBuilderUriTemplate, type AssignmentsRequestBuilder } from './assignments/';
import { SelfActivateRequestBuilderRequestsMetadata, SelfActivateRequestBuilderUriTemplate, type SelfActivateRequestBuilder } from './selfActivate/';
import { SelfDeactivateRequestBuilderRequestsMetadata, SelfDeactivateRequestBuilderUriTemplate, type SelfDeactivateRequestBuilder } from './selfDeactivate/';
import { SettingsRequestBuilderRequestsMetadata, SettingsRequestBuilderUriTemplate, type SettingsRequestBuilder } from './settings/';
import { SummaryRequestBuilderRequestsMetadata, SummaryRequestBuilderUriTemplate, type SummaryRequestBuilder } from './summary/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the roleInfo property of the microsoft.graph.privilegedRoleAssignmentRequest entity.
 */
export interface RoleInfoRequestBuilder extends BaseRequestBuilder<RoleInfoRequestBuilder> {
    /**
     * Provides operations to manage the assignments property of the microsoft.graph.privilegedRole entity.
     */
    get assignments(): AssignmentsRequestBuilder;
    /**
     * Provides operations to call the selfActivate method.
     */
    get selfActivate(): SelfActivateRequestBuilder;
    /**
     * Provides operations to call the selfDeactivate method.
     */
    get selfDeactivate(): SelfDeactivateRequestBuilder;
    /**
     * Provides operations to manage the settings property of the microsoft.graph.privilegedRole entity.
     */
    get settings(): SettingsRequestBuilder;
    /**
     * Provides operations to manage the summary property of the microsoft.graph.privilegedRole entity.
     */
    get summary(): SummaryRequestBuilder;
    /**
     * Delete navigation property roleInfo for privilegedRoleAssignmentRequests
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get roleInfo from privilegedRoleAssignmentRequests
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of PrivilegedRole
     */
     get(requestConfiguration?: RequestConfiguration<RoleInfoRequestBuilderGetQueryParameters> | undefined) : Promise<PrivilegedRole | undefined>;
    /**
     * Update the navigation property roleInfo in privilegedRoleAssignmentRequests
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of PrivilegedRole
     */
     patch(body: PrivilegedRole, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<PrivilegedRole | undefined>;
    /**
     * Delete navigation property roleInfo for privilegedRoleAssignmentRequests
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Get roleInfo from privilegedRoleAssignmentRequests
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<RoleInfoRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property roleInfo in privilegedRoleAssignmentRequests
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: PrivilegedRole, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get roleInfo from privilegedRoleAssignmentRequests
 */
export interface RoleInfoRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const RoleInfoRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const RoleInfoRequestBuilderNavigationMetadata: Record<Exclude<keyof RoleInfoRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    assignments: {
        uriTemplate: AssignmentsRequestBuilderUriTemplate,
        requestsMetadata: AssignmentsRequestBuilderRequestsMetadata,
        navigationMetadata: AssignmentsRequestBuilderNavigationMetadata,
    },
    selfActivate: {
        uriTemplate: SelfActivateRequestBuilderUriTemplate,
        requestsMetadata: SelfActivateRequestBuilderRequestsMetadata,
    },
    selfDeactivate: {
        uriTemplate: SelfDeactivateRequestBuilderUriTemplate,
        requestsMetadata: SelfDeactivateRequestBuilderRequestsMetadata,
    },
    settings: {
        uriTemplate: SettingsRequestBuilderUriTemplate,
        requestsMetadata: SettingsRequestBuilderRequestsMetadata,
    },
    summary: {
        uriTemplate: SummaryRequestBuilderUriTemplate,
        requestsMetadata: SummaryRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const RoleInfoRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createPrivilegedRoleFromDiscriminatorValue,
        queryParametersMapper: RoleInfoRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createPrivilegedRoleFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializePrivilegedRole,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const RoleInfoRequestBuilderUriTemplate = "{+baseurl}/privilegedRoleAssignmentRequests/{privilegedRoleAssignmentRequest%2Did}/roleInfo{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
