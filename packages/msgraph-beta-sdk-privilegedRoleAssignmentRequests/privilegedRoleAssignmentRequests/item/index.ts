/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createPrivilegedRoleAssignmentRequestFromDiscriminatorValue, serializePrivilegedRoleAssignmentRequest, type PrivilegedRoleAssignmentRequest } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CancelRequestBuilderRequestsMetadata, type CancelRequestBuilder } from './cancel/';
import { RoleInfoRequestBuilderNavigationMetadata, RoleInfoRequestBuilderRequestsMetadata, type RoleInfoRequestBuilder } from './roleInfo/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the collection of privilegedRoleAssignmentRequest entities.
 */
export interface PrivilegedRoleAssignmentRequestItemRequestBuilder extends BaseRequestBuilder<PrivilegedRoleAssignmentRequestItemRequestBuilder> {
    /**
     * Provides operations to call the cancel method.
     */
    get cancel(): CancelRequestBuilder;
    /**
     * Provides operations to manage the roleInfo property of the microsoft.graph.privilegedRoleAssignmentRequest entity.
     */
    get roleInfo(): RoleInfoRequestBuilder;
    /**
     * Delete entity from privilegedRoleAssignmentRequests
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get entity from privilegedRoleAssignmentRequests by key
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<PrivilegedRoleAssignmentRequest>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<PrivilegedRoleAssignmentRequestItemRequestBuilderGetQueryParameters> | undefined) : Promise<PrivilegedRoleAssignmentRequest | undefined>;
    /**
     * Update entity in privilegedRoleAssignmentRequests
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<PrivilegedRoleAssignmentRequest>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: PrivilegedRoleAssignmentRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<PrivilegedRoleAssignmentRequest | undefined>;
    /**
     * Delete entity from privilegedRoleAssignmentRequests
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Get entity from privilegedRoleAssignmentRequests by key
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<PrivilegedRoleAssignmentRequestItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update entity in privilegedRoleAssignmentRequests
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: PrivilegedRoleAssignmentRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get entity from privilegedRoleAssignmentRequests by key
 */
export interface PrivilegedRoleAssignmentRequestItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
}
/**
 * Uri template for the request builder.
 */
export const PrivilegedRoleAssignmentRequestItemRequestBuilderUriTemplate = "{+baseurl}/privilegedRoleAssignmentRequests/{privilegedRoleAssignmentRequest%2Did}{?%24expand,%24select}";
/**
 * Provides operations to manage the collection of privilegedRoleAssignmentRequest entities.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    RoleInfo: "roleInfo",
} as const;
/**
 * Provides operations to manage the collection of privilegedRoleAssignmentRequest entities.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    AssignmentState: "assignmentState",
    Duration: "duration",
    Reason: "reason",
    RequestedDateTime: "requestedDateTime",
    RoleId: "roleId",
    Schedule: "schedule",
    Status: "status",
    TicketNumber: "ticketNumber",
    TicketSystem: "ticketSystem",
    Type: "type",
    UserId: "userId",
    RoleInfo: "roleInfo",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const PrivilegedRoleAssignmentRequestItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const PrivilegedRoleAssignmentRequestItemRequestBuilderNavigationMetadata: Record<Exclude<keyof PrivilegedRoleAssignmentRequestItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    cancel: {
        requestsMetadata: CancelRequestBuilderRequestsMetadata,
    },
    roleInfo: {
        requestsMetadata: RoleInfoRequestBuilderRequestsMetadata,
        navigationMetadata: RoleInfoRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const PrivilegedRoleAssignmentRequestItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: PrivilegedRoleAssignmentRequestItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: PrivilegedRoleAssignmentRequestItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createPrivilegedRoleAssignmentRequestFromDiscriminatorValue,
        queryParametersMapper: PrivilegedRoleAssignmentRequestItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: PrivilegedRoleAssignmentRequestItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createPrivilegedRoleAssignmentRequestFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializePrivilegedRoleAssignmentRequest,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
