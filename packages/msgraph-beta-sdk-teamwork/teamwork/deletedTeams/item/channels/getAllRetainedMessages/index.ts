/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createChatMessageFromDiscriminatorValue, deserializeIntoBaseCollectionPaginationCountResponse, serializeBaseCollectionPaginationCountResponse, serializeChatMessage, type BaseCollectionPaginationCountResponse, type ChatMessage } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {GetAllRetainedMessagesGetResponse}
 */
export function createGetAllRetainedMessagesGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoGetAllRetainedMessagesGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoGetAllRetainedMessagesGetResponse(getAllRetainedMessagesGetResponse: Partial<GetAllRetainedMessagesGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(getAllRetainedMessagesGetResponse),
        "value": n => { getAllRetainedMessagesGetResponse.value = n.getCollectionOfObjectValues<ChatMessage>(createChatMessageFromDiscriminatorValue); },
    }
}
export interface GetAllRetainedMessagesGetResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: ChatMessage[];
}
/**
 * Provides operations to call the getAllRetainedMessages method.
 */
export interface GetAllRetainedMessagesRequestBuilder extends BaseRequestBuilder<GetAllRetainedMessagesRequestBuilder> {
    /**
     * Invoke function getAllRetainedMessages
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<GetAllRetainedMessagesGetResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<GetAllRetainedMessagesRequestBuilderGetQueryParameters> | undefined) : Promise<GetAllRetainedMessagesGetResponse | undefined>;
    /**
     * Invoke function getAllRetainedMessages
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<GetAllRetainedMessagesRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Invoke function getAllRetainedMessages
 */
export interface GetAllRetainedMessagesRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeGetAllRetainedMessagesGetResponse(writer: SerializationWriter, getAllRetainedMessagesGetResponse: Partial<GetAllRetainedMessagesGetResponse> | undefined = {}) : void {
    serializeBaseCollectionPaginationCountResponse(writer, getAllRetainedMessagesGetResponse)
    writer.writeCollectionOfObjectValues<ChatMessage>("value", getAllRetainedMessagesGetResponse.value, serializeChatMessage);
}
/**
 * Uri template for the request builder.
 */
export const GetAllRetainedMessagesRequestBuilderUriTemplate = "{+baseurl}/teamwork/deletedTeams/{deletedTeam%2Did}/channels/getAllRetainedMessages(){?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const GetAllRetainedMessagesRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const GetAllRetainedMessagesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: GetAllRetainedMessagesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createGetAllRetainedMessagesGetResponseFromDiscriminatorValue,
        queryParametersMapper: GetAllRetainedMessagesRequestBuilderGetQueryParametersMapper,
    },
};
/**
 * Provides operations to call the getAllRetainedMessages method.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    HostedContents: "hostedContents",
    Replies: "replies",
} as const;
/**
 * Provides operations to call the getAllRetainedMessages method.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    Attachments: "attachments",
    AttachmentsDesc: "attachments desc",
    Body: "body",
    BodyDesc: "body desc",
    ChannelIdentity: "channelIdentity",
    ChannelIdentityDesc: "channelIdentity desc",
    ChatId: "chatId",
    ChatIdDesc: "chatId desc",
    CreatedDateTime: "createdDateTime",
    CreatedDateTimeDesc: "createdDateTime desc",
    DeletedDateTime: "deletedDateTime",
    DeletedDateTimeDesc: "deletedDateTime desc",
    Etag: "etag",
    EtagDesc: "etag desc",
    EventDetail: "eventDetail",
    EventDetailDesc: "eventDetail desc",
    From: "from",
    FromDesc: "from desc",
    Importance: "importance",
    ImportanceDesc: "importance desc",
    LastEditedDateTime: "lastEditedDateTime",
    LastEditedDateTimeDesc: "lastEditedDateTime desc",
    LastModifiedDateTime: "lastModifiedDateTime",
    LastModifiedDateTimeDesc: "lastModifiedDateTime desc",
    Locale: "locale",
    LocaleDesc: "locale desc",
    Mentions: "mentions",
    MentionsDesc: "mentions desc",
    MessageHistory: "messageHistory",
    MessageHistoryDesc: "messageHistory desc",
    MessageType: "messageType",
    MessageTypeDesc: "messageType desc",
    OnBehalfOf: "onBehalfOf",
    OnBehalfOfDesc: "onBehalfOf desc",
    PolicyViolation: "policyViolation",
    PolicyViolationDesc: "policyViolation desc",
    Reactions: "reactions",
    ReactionsDesc: "reactions desc",
    ReplyToId: "replyToId",
    ReplyToIdDesc: "replyToId desc",
    Subject: "subject",
    SubjectDesc: "subject desc",
    Summary: "summary",
    SummaryDesc: "summary desc",
    WebUrl: "webUrl",
    WebUrlDesc: "webUrl desc",
} as const;
/**
 * Provides operations to call the getAllRetainedMessages method.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    Attachments: "attachments",
    Body: "body",
    ChannelIdentity: "channelIdentity",
    ChatId: "chatId",
    CreatedDateTime: "createdDateTime",
    DeletedDateTime: "deletedDateTime",
    Etag: "etag",
    EventDetail: "eventDetail",
    From: "from",
    Importance: "importance",
    LastEditedDateTime: "lastEditedDateTime",
    LastModifiedDateTime: "lastModifiedDateTime",
    Locale: "locale",
    Mentions: "mentions",
    MessageHistory: "messageHistory",
    MessageType: "messageType",
    OnBehalfOf: "onBehalfOf",
    PolicyViolation: "policyViolation",
    Reactions: "reactions",
    ReplyToId: "replyToId",
    Subject: "subject",
    Summary: "summary",
    WebUrl: "webUrl",
    HostedContents: "hostedContents",
    Replies: "replies",
} as const;
/* tslint:enable */
/* eslint-enable */
