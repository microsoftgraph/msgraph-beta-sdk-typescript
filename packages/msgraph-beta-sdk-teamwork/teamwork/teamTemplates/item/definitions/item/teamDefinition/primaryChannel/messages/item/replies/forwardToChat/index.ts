/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createActionResultPartFromDiscriminatorValue, createChatMessageFromDiscriminatorValue, deserializeIntoBaseCollectionPaginationCountResponse, serializeActionResultPart, serializeBaseCollectionPaginationCountResponse, serializeChatMessage, type ActionResultPart, type BaseCollectionPaginationCountResponse, type ChatMessage } from '@microsoft/msgraph-beta-sdk/models/index.js';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ForwardToChatPostRequestBody}
 */
// @ts-ignore
export function createForwardToChatPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoForwardToChatPostRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ForwardToChatPostResponse}
 */
// @ts-ignore
export function createForwardToChatPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoForwardToChatPostResponse;
}
/**
 * The deserialization information for the current model
 * @param ForwardToChatPostRequestBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoForwardToChatPostRequestBody(forwardToChatPostRequestBody: Partial<ForwardToChatPostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "additionalMessage": n => { forwardToChatPostRequestBody.additionalMessage = n.getObjectValue<ChatMessage>(createChatMessageFromDiscriminatorValue); },
        "backingStoreEnabled": n => { forwardToChatPostRequestBody.backingStoreEnabled = true; },
        "messageIds": n => { forwardToChatPostRequestBody.messageIds = n.getCollectionOfPrimitiveValues<string>(); },
        "targetChatIds": n => { forwardToChatPostRequestBody.targetChatIds = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * The deserialization information for the current model
 * @param ForwardToChatPostResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoForwardToChatPostResponse(forwardToChatPostResponse: Partial<ForwardToChatPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(forwardToChatPostResponse),
        "value": n => { forwardToChatPostResponse.value = n.getCollectionOfObjectValues<ActionResultPart>(createActionResultPartFromDiscriminatorValue); },
    }
}
export interface ForwardToChatPostRequestBody extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * The additionalMessage property
     */
    additionalMessage?: ChatMessage | null;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The messageIds property
     */
    messageIds?: string[] | null;
    /**
     * The targetChatIds property
     */
    targetChatIds?: string[] | null;
}
export interface ForwardToChatPostResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: ActionResultPart[] | null;
}
/**
 * Provides operations to call the forwardToChat method.
 */
export interface ForwardToChatRequestBuilder extends BaseRequestBuilder<ForwardToChatRequestBuilder> {
    /**
     * Forward a chat message, a channel message, or a channel message reply to a chat.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ForwardToChatPostResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/chatmessage-forwardtochat?view=graph-rest-beta|Find more info here}
     */
     post(body: ForwardToChatPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ForwardToChatPostResponse | undefined>;
    /**
     * Forward a chat message, a channel message, or a channel message reply to a chat.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: ForwardToChatPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param ForwardToChatPostRequestBody The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeForwardToChatPostRequestBody(writer: SerializationWriter, forwardToChatPostRequestBody: Partial<ForwardToChatPostRequestBody> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!forwardToChatPostRequestBody || isSerializingDerivedType) { return; }
    writer.writeObjectValue<ChatMessage>("additionalMessage", forwardToChatPostRequestBody.additionalMessage, serializeChatMessage);
    writer.writeCollectionOfPrimitiveValues<string>("messageIds", forwardToChatPostRequestBody.messageIds);
    writer.writeCollectionOfPrimitiveValues<string>("targetChatIds", forwardToChatPostRequestBody.targetChatIds);
    writer.writeAdditionalData(forwardToChatPostRequestBody.additionalData);
}
/**
 * Serializes information the current object
 * @param ForwardToChatPostResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeForwardToChatPostResponse(writer: SerializationWriter, forwardToChatPostResponse: Partial<ForwardToChatPostResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!forwardToChatPostResponse || isSerializingDerivedType) { return; }
    serializeBaseCollectionPaginationCountResponse(writer, forwardToChatPostResponse, isSerializingDerivedType)
    writer.writeCollectionOfObjectValues<ActionResultPart>("value", forwardToChatPostResponse.value, serializeActionResultPart);
}
/**
 * Uri template for the request builder.
 */
export const ForwardToChatRequestBuilderUriTemplate = "{+baseurl}/teamwork/teamTemplates/{teamTemplate%2Did}/definitions/{teamTemplateDefinition%2Did}/teamDefinition/primaryChannel/messages/{chatMessage%2Did}/replies/forwardToChat";
/**
 * Metadata for all the requests in the request builder.
 */
export const ForwardToChatRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: ForwardToChatRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createForwardToChatPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeForwardToChatPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
