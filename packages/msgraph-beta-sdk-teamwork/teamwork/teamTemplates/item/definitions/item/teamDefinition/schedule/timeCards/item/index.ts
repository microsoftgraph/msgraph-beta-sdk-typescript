/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createTimeCardFromDiscriminatorValue, serializeTimeCard, type TimeCard } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { ClockOutRequestBuilderRequestsMetadata, type ClockOutRequestBuilder } from './clockOut/';
import { ConfirmRequestBuilderRequestsMetadata, type ConfirmRequestBuilder } from './confirm/';
import { EndBreakRequestBuilderRequestsMetadata, type EndBreakRequestBuilder } from './endBreak/';
import { StartBreakRequestBuilderRequestsMetadata, type StartBreakRequestBuilder } from './startBreak/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the timeCards property of the microsoft.graph.schedule entity.
 */
export interface TimeCardItemRequestBuilder extends BaseRequestBuilder<TimeCardItemRequestBuilder> {
    /**
     * Provides operations to call the clockOut method.
     */
    get clockOut(): ClockOutRequestBuilder;
    /**
     * Provides operations to call the confirm method.
     */
    get confirm(): ConfirmRequestBuilder;
    /**
     * Provides operations to call the endBreak method.
     */
    get endBreak(): EndBreakRequestBuilder;
    /**
     * Provides operations to call the startBreak method.
     */
    get startBreak(): StartBreakRequestBuilder;
    /**
     * Delete a timeCard instance in a schedule.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/timecard-delete?view=graph-rest-1.0|Find more info here}
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get the properties and relationships of a timeCard object by ID.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<TimeCard>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/timecard-get?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<TimeCardItemRequestBuilderGetQueryParameters> | undefined) : Promise<TimeCard | undefined>;
    /**
     * Replace an existing timeCard with updated values.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<TimeCard>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/timecard-replace?view=graph-rest-1.0|Find more info here}
     */
     patch(body: TimeCard, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<TimeCard | undefined>;
    /**
     * Delete a timeCard instance in a schedule.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Get the properties and relationships of a timeCard object by ID.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<TimeCardItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Replace an existing timeCard with updated values.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: TimeCard, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get the properties and relationships of a timeCard object by ID.
 */
export interface TimeCardItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const TimeCardItemRequestBuilderUriTemplate = "{+baseurl}/teamwork/teamTemplates/{teamTemplate%2Did}/definitions/{teamTemplateDefinition%2Did}/teamDefinition/schedule/timeCards/{timeCard%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const TimeCardItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const TimeCardItemRequestBuilderNavigationMetadata: Record<Exclude<keyof TimeCardItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    clockOut: {
        requestsMetadata: ClockOutRequestBuilderRequestsMetadata,
    },
    confirm: {
        requestsMetadata: ConfirmRequestBuilderRequestsMetadata,
    },
    endBreak: {
        requestsMetadata: EndBreakRequestBuilderRequestsMetadata,
    },
    startBreak: {
        requestsMetadata: StartBreakRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const TimeCardItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: TimeCardItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: TimeCardItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createTimeCardFromDiscriminatorValue,
        queryParametersMapper: TimeCardItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: TimeCardItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createTimeCardFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeTimeCard,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
