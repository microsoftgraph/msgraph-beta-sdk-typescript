/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createTeamworkDeviceOperationCollectionResponseFromDiscriminatorValue, createTeamworkDeviceOperationFromDiscriminatorValue, serializeTeamworkDeviceOperation, type TeamworkDeviceOperation, type TeamworkDeviceOperationCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { TeamworkDeviceOperationItemRequestBuilderRequestsMetadata, type TeamworkDeviceOperationItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the operations property of the microsoft.graph.teamworkDevice entity.
 */
export interface OperationsRequestBuilder extends BaseRequestBuilder<OperationsRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the operations property of the microsoft.graph.teamworkDevice entity.
     * @param teamworkDeviceOperationId The unique identifier of teamworkDeviceOperation
     * @returns {TeamworkDeviceOperationItemRequestBuilder}
     */
     byTeamworkDeviceOperationId(teamworkDeviceOperationId: string) : TeamworkDeviceOperationItemRequestBuilder;
    /**
     * Get a list of the operations that are running on a Microsoft Teams-enabled device.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<TeamworkDeviceOperationCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/teamworkdeviceoperation-list?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<OperationsRequestBuilderGetQueryParameters> | undefined) : Promise<TeamworkDeviceOperationCollectionResponse | undefined>;
    /**
     * Create new navigation property to operations for teamwork
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<TeamworkDeviceOperation>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: TeamworkDeviceOperation, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<TeamworkDeviceOperation | undefined>;
    /**
     * Get a list of the operations that are running on a Microsoft Teams-enabled device.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<OperationsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create new navigation property to operations for teamwork
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: TeamworkDeviceOperation, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get a list of the operations that are running on a Microsoft Teams-enabled device.
 */
export interface OperationsRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Uri template for the request builder.
 */
export const OperationsRequestBuilderUriTemplate = "{+baseurl}/teamwork/devices/{teamworkDevice%2Did}/operations{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Provides operations to manage the operations property of the microsoft.graph.teamworkDevice entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
} as const;
/**
 * Provides operations to manage the operations property of the microsoft.graph.teamworkDevice entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    CompletedDateTime: "completedDateTime",
    CompletedDateTimeDesc: "completedDateTime desc",
    CreatedBy: "createdBy",
    CreatedByDesc: "createdBy desc",
    CreatedDateTime: "createdDateTime",
    CreatedDateTimeDesc: "createdDateTime desc",
    ErrorEscaped: "error",
    ErrorDesc: "error desc",
    LastActionBy: "lastActionBy",
    LastActionByDesc: "lastActionBy desc",
    LastActionDateTime: "lastActionDateTime",
    LastActionDateTimeDesc: "lastActionDateTime desc",
    OperationType: "operationType",
    OperationTypeDesc: "operationType desc",
    StartedDateTime: "startedDateTime",
    StartedDateTimeDesc: "startedDateTime desc",
    Status: "status",
    StatusDesc: "status desc",
} as const;
/**
 * Provides operations to manage the operations property of the microsoft.graph.teamworkDevice entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    CompletedDateTime: "completedDateTime",
    CreatedBy: "createdBy",
    CreatedDateTime: "createdDateTime",
    ErrorEscaped: "error",
    LastActionBy: "lastActionBy",
    LastActionDateTime: "lastActionDateTime",
    OperationType: "operationType",
    StartedDateTime: "startedDateTime",
    Status: "status",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const OperationsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const OperationsRequestBuilderNavigationMetadata: Record<Exclude<keyof OperationsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byTeamworkDeviceOperationId: {
        requestsMetadata: TeamworkDeviceOperationItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["teamworkDeviceOperation%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const OperationsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: OperationsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createTeamworkDeviceOperationCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: OperationsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: OperationsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createTeamworkDeviceOperationFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeTeamworkDeviceOperation,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
