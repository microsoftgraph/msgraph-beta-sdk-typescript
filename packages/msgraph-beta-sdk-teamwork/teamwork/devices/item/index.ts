/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createTeamworkDeviceFromDiscriminatorValue, serializeTeamworkDevice, type TeamworkDevice } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { ActivityRequestBuilderRequestsMetadata, ActivityRequestBuilderUriTemplate, type ActivityRequestBuilder } from './activity/';
import { ConfigurationRequestBuilderRequestsMetadata, ConfigurationRequestBuilderUriTemplate, type ConfigurationRequestBuilder } from './configuration/';
import { HealthRequestBuilderRequestsMetadata, HealthRequestBuilderUriTemplate, type HealthRequestBuilder } from './health/';
import { OperationsRequestBuilderNavigationMetadata, OperationsRequestBuilderRequestsMetadata, OperationsRequestBuilderUriTemplate, type OperationsRequestBuilder } from './operations/';
import { RestartRequestBuilderRequestsMetadata, RestartRequestBuilderUriTemplate, type RestartRequestBuilder } from './restart/';
import { RunDiagnosticsRequestBuilderRequestsMetadata, RunDiagnosticsRequestBuilderUriTemplate, type RunDiagnosticsRequestBuilder } from './runDiagnostics/';
import { type UpdateSoftwareRequestBuilder, UpdateSoftwareRequestBuilderRequestsMetadata, UpdateSoftwareRequestBuilderUriTemplate } from './updateSoftware/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the devices property of the microsoft.graph.teamwork entity.
 */
export interface TeamworkDeviceItemRequestBuilder extends BaseRequestBuilder<TeamworkDeviceItemRequestBuilder> {
    /**
     * Provides operations to manage the activity property of the microsoft.graph.teamworkDevice entity.
     */
    get activity(): ActivityRequestBuilder;
    /**
     * Provides operations to manage the configuration property of the microsoft.graph.teamworkDevice entity.
     */
    get configuration(): ConfigurationRequestBuilder;
    /**
     * Provides operations to manage the health property of the microsoft.graph.teamworkDevice entity.
     */
    get health(): HealthRequestBuilder;
    /**
     * Provides operations to manage the operations property of the microsoft.graph.teamworkDevice entity.
     */
    get operations(): OperationsRequestBuilder;
    /**
     * Provides operations to call the restart method.
     */
    get restart(): RestartRequestBuilder;
    /**
     * Provides operations to call the runDiagnostics method.
     */
    get runDiagnostics(): RunDiagnosticsRequestBuilder;
    /**
     * Provides operations to call the updateSoftware method.
     */
    get updateSoftware(): UpdateSoftwareRequestBuilder;
    /**
     * Delete navigation property devices for teamwork
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get the properties of a Microsoft Teams-enabled device. For example, you can use this method to get the device type, hardware detail, activity state, and health status information for a device that's enabled for Teams.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of TeamworkDevice
     * @see {@link https://learn.microsoft.com/graph/api/teamworkdevice-get?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<TeamworkDeviceItemRequestBuilderGetQueryParameters> | undefined) : Promise<TeamworkDevice | undefined>;
    /**
     * Update the navigation property devices in teamwork
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of TeamworkDevice
     */
     patch(body: TeamworkDevice, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<TeamworkDevice | undefined>;
    /**
     * Delete navigation property devices for teamwork
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Get the properties of a Microsoft Teams-enabled device. For example, you can use this method to get the device type, hardware detail, activity state, and health status information for a device that's enabled for Teams.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<TeamworkDeviceItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property devices in teamwork
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: TeamworkDevice, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get the properties of a Microsoft Teams-enabled device. For example, you can use this method to get the device type, hardware detail, activity state, and health status information for a device that's enabled for Teams.
 */
export interface TeamworkDeviceItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const TeamworkDeviceItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const TeamworkDeviceItemRequestBuilderNavigationMetadata: Record<Exclude<keyof TeamworkDeviceItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    activity: {
        uriTemplate: ActivityRequestBuilderUriTemplate,
        requestsMetadata: ActivityRequestBuilderRequestsMetadata,
    },
    configuration: {
        uriTemplate: ConfigurationRequestBuilderUriTemplate,
        requestsMetadata: ConfigurationRequestBuilderRequestsMetadata,
    },
    health: {
        uriTemplate: HealthRequestBuilderUriTemplate,
        requestsMetadata: HealthRequestBuilderRequestsMetadata,
    },
    operations: {
        uriTemplate: OperationsRequestBuilderUriTemplate,
        requestsMetadata: OperationsRequestBuilderRequestsMetadata,
        navigationMetadata: OperationsRequestBuilderNavigationMetadata,
    },
    restart: {
        uriTemplate: RestartRequestBuilderUriTemplate,
        requestsMetadata: RestartRequestBuilderRequestsMetadata,
    },
    runDiagnostics: {
        uriTemplate: RunDiagnosticsRequestBuilderUriTemplate,
        requestsMetadata: RunDiagnosticsRequestBuilderRequestsMetadata,
    },
    updateSoftware: {
        uriTemplate: UpdateSoftwareRequestBuilderUriTemplate,
        requestsMetadata: UpdateSoftwareRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const TeamworkDeviceItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createTeamworkDeviceFromDiscriminatorValue,
        queryParametersMapper: TeamworkDeviceItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createTeamworkDeviceFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeTeamworkDevice,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const TeamworkDeviceItemRequestBuilderUriTemplate = "{+baseurl}/teamwork/devices/{teamworkDevice%2Did}{?%24expand,%24select}";
/* tslint:enable */
/* eslint-enable */
