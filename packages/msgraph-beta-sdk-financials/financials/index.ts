/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createFinancialsFromDiscriminatorValue, serializeFinancials, type Financials } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CompaniesRequestBuilderNavigationMetadata, CompaniesRequestBuilderRequestsMetadata, CompaniesRequestBuilderUriTemplate, type CompaniesRequestBuilder } from './companies/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the financials singleton.
 */
export interface FinancialsRequestBuilder extends BaseRequestBuilder<FinancialsRequestBuilder> {
    /**
     * Provides operations to manage the companies property of the microsoft.graph.financials entity.
     */
    get companies(): CompaniesRequestBuilder;
    /**
     * Get financials
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of Financials
     */
     get(requestConfiguration?: RequestConfiguration<FinancialsRequestBuilderGetQueryParameters> | undefined) : Promise<Financials | undefined>;
    /**
     * Update financials
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of Financials
     */
     patch(body: Financials, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Financials | undefined>;
    /**
     * Get financials
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<FinancialsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update financials
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: Financials, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get financials
 */
export interface FinancialsRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const FinancialsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const FinancialsRequestBuilderNavigationMetadata: Record<Exclude<keyof FinancialsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    companies: {
        uriTemplate: CompaniesRequestBuilderUriTemplate,
        requestsMetadata: CompaniesRequestBuilderRequestsMetadata,
        navigationMetadata: CompaniesRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const FinancialsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createFinancialsFromDiscriminatorValue,
        queryParametersMapper: FinancialsRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createFinancialsFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeFinancials,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const FinancialsRequestBuilderUriTemplate = "{+baseurl}/financials{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
