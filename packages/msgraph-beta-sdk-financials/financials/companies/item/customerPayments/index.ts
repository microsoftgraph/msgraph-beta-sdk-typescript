/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createCustomerPaymentCollectionResponseFromDiscriminatorValue, createCustomerPaymentFromDiscriminatorValue, serializeCustomerPayment, type CustomerPayment, type CustomerPaymentCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { CustomerPaymentItemRequestBuilderNavigationMetadata, CustomerPaymentItemRequestBuilderRequestsMetadata, type CustomerPaymentItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';
import { type Guid } from 'guid-typescript';

/**
 * Provides operations to manage the customerPayments property of the microsoft.graph.company entity.
 */
export interface CustomerPaymentsRequestBuilder extends BaseRequestBuilder<CustomerPaymentsRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the customerPayments property of the microsoft.graph.company entity.
     * @param customerPaymentId The unique identifier of customerPayment
     * @returns {CustomerPaymentItemRequestBuilder}
     */
     byCustomerPaymentId(customerPaymentId: Guid) : CustomerPaymentItemRequestBuilder;
    /**
     * Get customerPayments from financials
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<CustomerPaymentCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<CustomerPaymentsRequestBuilderGetQueryParameters> | undefined) : Promise<CustomerPaymentCollectionResponse | undefined>;
    /**
     * Create new navigation property to customerPayments for financials
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<CustomerPayment>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: CustomerPayment, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<CustomerPayment | undefined>;
    /**
     * Get customerPayments from financials
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<CustomerPaymentsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create new navigation property to customerPayments for financials
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: CustomerPayment, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get customerPayments from financials
 */
export interface CustomerPaymentsRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Uri template for the request builder.
 */
export const CustomerPaymentsRequestBuilderUriTemplate = "{+baseurl}/financials/companies/{company%2Did}/customerPayments{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const CustomerPaymentsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const CustomerPaymentsRequestBuilderNavigationMetadata: Record<Exclude<keyof CustomerPaymentsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byCustomerPaymentId: {
        requestsMetadata: CustomerPaymentItemRequestBuilderRequestsMetadata,
        navigationMetadata: CustomerPaymentItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["customerPayment%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const CustomerPaymentsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: CustomerPaymentsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createCustomerPaymentCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: CustomerPaymentsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: CustomerPaymentsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createCustomerPaymentFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCustomerPayment,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Provides operations to manage the customerPayments property of the microsoft.graph.company entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    Customer: "customer",
} as const;
/**
 * Provides operations to manage the customerPayments property of the microsoft.graph.company entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Amount: "amount",
    AmountDesc: "amount desc",
    AppliesToInvoiceId: "appliesToInvoiceId",
    AppliesToInvoiceIdDesc: "appliesToInvoiceId desc",
    AppliesToInvoiceNumber: "appliesToInvoiceNumber",
    AppliesToInvoiceNumberDesc: "appliesToInvoiceNumber desc",
    Comment: "comment",
    CommentDesc: "comment desc",
    ContactId: "contactId",
    ContactIdDesc: "contactId desc",
    CustomerId: "customerId",
    CustomerIdDesc: "customerId desc",
    CustomerNumber: "customerNumber",
    CustomerNumberDesc: "customerNumber desc",
    Description: "description",
    DescriptionDesc: "description desc",
    DocumentNumber: "documentNumber",
    DocumentNumberDesc: "documentNumber desc",
    ExternalDocumentNumber: "externalDocumentNumber",
    ExternalDocumentNumberDesc: "externalDocumentNumber desc",
    Id: "id",
    IdDesc: "id desc",
    JournalDisplayName: "journalDisplayName",
    JournalDisplayNameDesc: "journalDisplayName desc",
    LastModifiedDateTime: "lastModifiedDateTime",
    LastModifiedDateTimeDesc: "lastModifiedDateTime desc",
    LineNumber: "lineNumber",
    LineNumberDesc: "lineNumber desc",
    PostingDate: "postingDate",
    PostingDateDesc: "postingDate desc",
} as const;
/**
 * Provides operations to manage the customerPayments property of the microsoft.graph.company entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Amount: "amount",
    AppliesToInvoiceId: "appliesToInvoiceId",
    AppliesToInvoiceNumber: "appliesToInvoiceNumber",
    Comment: "comment",
    ContactId: "contactId",
    CustomerId: "customerId",
    CustomerNumber: "customerNumber",
    Description: "description",
    DocumentNumber: "documentNumber",
    ExternalDocumentNumber: "externalDocumentNumber",
    Id: "id",
    JournalDisplayName: "journalDisplayName",
    LastModifiedDateTime: "lastModifiedDateTime",
    LineNumber: "lineNumber",
    PostingDate: "postingDate",
    Customer: "customer",
} as const;
/* tslint:enable */
/* eslint-enable */
