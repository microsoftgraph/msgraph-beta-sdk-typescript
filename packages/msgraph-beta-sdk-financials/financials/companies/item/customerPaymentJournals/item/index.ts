/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createCustomerPaymentJournalFromDiscriminatorValue, serializeCustomerPaymentJournal, type CustomerPaymentJournal } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { AccountRequestBuilderRequestsMetadata, type AccountRequestBuilder } from './account/';
import { CustomerPaymentsRequestBuilderNavigationMetadata, CustomerPaymentsRequestBuilderRequestsMetadata, type CustomerPaymentsRequestBuilder } from './customerPayments/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the customerPaymentJournals property of the microsoft.graph.company entity.
 */
export interface CustomerPaymentJournalItemRequestBuilder extends BaseRequestBuilder<CustomerPaymentJournalItemRequestBuilder> {
    /**
     * Provides operations to manage the account property of the microsoft.graph.customerPaymentJournal entity.
     */
    get account(): AccountRequestBuilder;
    /**
     * Provides operations to manage the customerPayments property of the microsoft.graph.customerPaymentJournal entity.
     */
    get customerPayments(): CustomerPaymentsRequestBuilder;
    /**
     * Delete navigation property customerPaymentJournals for financials
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get customerPaymentJournals from financials
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<CustomerPaymentJournal>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<CustomerPaymentJournalItemRequestBuilderGetQueryParameters> | undefined) : Promise<CustomerPaymentJournal | undefined>;
    /**
     * Update the navigation property customerPaymentJournals in financials
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<CustomerPaymentJournal>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: CustomerPaymentJournal, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<CustomerPaymentJournal | undefined>;
    /**
     * Delete navigation property customerPaymentJournals for financials
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Get customerPaymentJournals from financials
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<CustomerPaymentJournalItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property customerPaymentJournals in financials
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: CustomerPaymentJournal, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get customerPaymentJournals from financials
 */
export interface CustomerPaymentJournalItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const CustomerPaymentJournalItemRequestBuilderUriTemplate = "{+baseurl}/financials/companies/{company%2Did}/customerPaymentJournals/{customerPaymentJournal%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const CustomerPaymentJournalItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const CustomerPaymentJournalItemRequestBuilderNavigationMetadata: Record<Exclude<keyof CustomerPaymentJournalItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    account: {
        requestsMetadata: AccountRequestBuilderRequestsMetadata,
    },
    customerPayments: {
        requestsMetadata: CustomerPaymentsRequestBuilderRequestsMetadata,
        navigationMetadata: CustomerPaymentsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const CustomerPaymentJournalItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: CustomerPaymentJournalItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: CustomerPaymentJournalItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createCustomerPaymentJournalFromDiscriminatorValue,
        queryParametersMapper: CustomerPaymentJournalItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: CustomerPaymentJournalItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createCustomerPaymentJournalFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCustomerPaymentJournal,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
