/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createSalesQuoteFromDiscriminatorValue, serializeSalesQuote, type SalesQuote } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CurrencyRequestBuilderRequestsMetadata, type CurrencyRequestBuilder } from './currency/';
import { CustomerRequestBuilderNavigationMetadata, CustomerRequestBuilderRequestsMetadata, type CustomerRequestBuilder } from './customer/';
import { MakeInvoiceRequestBuilderRequestsMetadata, type MakeInvoiceRequestBuilder } from './makeInvoice/';
import { PaymentTermRequestBuilderRequestsMetadata, type PaymentTermRequestBuilder } from './paymentTerm/';
import { SalesQuoteLinesRequestBuilderNavigationMetadata, SalesQuoteLinesRequestBuilderRequestsMetadata, type SalesQuoteLinesRequestBuilder } from './salesQuoteLines/';
import { SendRequestBuilderRequestsMetadata, type SendRequestBuilder } from './send/';
import { ShipmentMethodRequestBuilderRequestsMetadata, type ShipmentMethodRequestBuilder } from './shipmentMethod/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the salesQuotes property of the microsoft.graph.company entity.
 */
export interface SalesQuoteItemRequestBuilder extends BaseRequestBuilder<SalesQuoteItemRequestBuilder> {
    /**
     * Provides operations to manage the currency property of the microsoft.graph.salesQuote entity.
     */
    get currency(): CurrencyRequestBuilder;
    /**
     * Provides operations to manage the customer property of the microsoft.graph.salesQuote entity.
     */
    get customer(): CustomerRequestBuilder;
    /**
     * Provides operations to call the makeInvoice method.
     */
    get makeInvoice(): MakeInvoiceRequestBuilder;
    /**
     * Provides operations to manage the paymentTerm property of the microsoft.graph.salesQuote entity.
     */
    get paymentTerm(): PaymentTermRequestBuilder;
    /**
     * Provides operations to manage the salesQuoteLines property of the microsoft.graph.salesQuote entity.
     */
    get salesQuoteLines(): SalesQuoteLinesRequestBuilder;
    /**
     * Provides operations to call the send method.
     */
    get send(): SendRequestBuilder;
    /**
     * Provides operations to manage the shipmentMethod property of the microsoft.graph.salesQuote entity.
     */
    get shipmentMethod(): ShipmentMethodRequestBuilder;
    /**
     * Get salesQuotes from financials
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<SalesQuote>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<SalesQuoteItemRequestBuilderGetQueryParameters> | undefined) : Promise<SalesQuote | undefined>;
    /**
     * Update the navigation property salesQuotes in financials
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<SalesQuote>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: SalesQuote, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<SalesQuote | undefined>;
    /**
     * Get salesQuotes from financials
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<SalesQuoteItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property salesQuotes in financials
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: SalesQuote, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get salesQuotes from financials
 */
export interface SalesQuoteItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
}
/**
 * Uri template for the request builder.
 */
export const SalesQuoteItemRequestBuilderUriTemplate = "{+baseurl}/financials/companies/{company%2Did}/salesQuotes/{salesQuote%2Did}{?%24expand,%24select}";
/**
 * Provides operations to manage the salesQuotes property of the microsoft.graph.company entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    Currency: "currency",
    Customer: "customer",
    PaymentTerm: "paymentTerm",
    SalesQuoteLines: "salesQuoteLines",
    ShipmentMethod: "shipmentMethod",
} as const;
/**
 * Provides operations to manage the salesQuotes property of the microsoft.graph.company entity.
 */
export const GetSelectQueryParameterTypeObject = {
    AcceptedDate: "acceptedDate",
    BillingPostalAddress: "billingPostalAddress",
    BillToCustomerId: "billToCustomerId",
    BillToCustomerNumber: "billToCustomerNumber",
    BillToName: "billToName",
    CurrencyCode: "currencyCode",
    CurrencyId: "currencyId",
    CustomerId: "customerId",
    CustomerName: "customerName",
    CustomerNumber: "customerNumber",
    DiscountAmount: "discountAmount",
    DocumentDate: "documentDate",
    DueDate: "dueDate",
    Email: "email",
    ExternalDocumentNumber: "externalDocumentNumber",
    Id: "id",
    LastModifiedDateTime: "lastModifiedDateTime",
    Number: "number",
    PaymentTermsId: "paymentTermsId",
    PhoneNumber: "phoneNumber",
    Salesperson: "salesperson",
    SellingPostalAddress: "sellingPostalAddress",
    SentDate: "sentDate",
    ShipmentMethodId: "shipmentMethodId",
    ShippingPostalAddress: "shippingPostalAddress",
    ShipToContact: "shipToContact",
    ShipToName: "shipToName",
    Status: "status",
    TotalAmountExcludingTax: "totalAmountExcludingTax",
    TotalAmountIncludingTax: "totalAmountIncludingTax",
    TotalTaxAmount: "totalTaxAmount",
    ValidUntilDate: "validUntilDate",
    Currency: "currency",
    Customer: "customer",
    PaymentTerm: "paymentTerm",
    SalesQuoteLines: "salesQuoteLines",
    ShipmentMethod: "shipmentMethod",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const SalesQuoteItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const SalesQuoteItemRequestBuilderNavigationMetadata: Record<Exclude<keyof SalesQuoteItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    currency: {
        requestsMetadata: CurrencyRequestBuilderRequestsMetadata,
    },
    customer: {
        requestsMetadata: CustomerRequestBuilderRequestsMetadata,
        navigationMetadata: CustomerRequestBuilderNavigationMetadata,
    },
    makeInvoice: {
        requestsMetadata: MakeInvoiceRequestBuilderRequestsMetadata,
    },
    paymentTerm: {
        requestsMetadata: PaymentTermRequestBuilderRequestsMetadata,
    },
    salesQuoteLines: {
        requestsMetadata: SalesQuoteLinesRequestBuilderRequestsMetadata,
        navigationMetadata: SalesQuoteLinesRequestBuilderNavigationMetadata,
    },
    send: {
        requestsMetadata: SendRequestBuilderRequestsMetadata,
    },
    shipmentMethod: {
        requestsMetadata: ShipmentMethodRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const SalesQuoteItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: SalesQuoteItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createSalesQuoteFromDiscriminatorValue,
        queryParametersMapper: SalesQuoteItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: SalesQuoteItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createSalesQuoteFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeSalesQuote,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
