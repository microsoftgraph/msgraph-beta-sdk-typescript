/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createCustomerFromDiscriminatorValue, serializeCustomer, type Customer } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CurrencyRequestBuilderRequestsMetadata, type CurrencyRequestBuilder } from './currency/';
import { PaymentMethodRequestBuilderRequestsMetadata, type PaymentMethodRequestBuilder } from './paymentMethod/';
import { PaymentTermRequestBuilderRequestsMetadata, type PaymentTermRequestBuilder } from './paymentTerm/';
import { PictureRequestBuilderNavigationMetadata, PictureRequestBuilderRequestsMetadata, type PictureRequestBuilder } from './picture/';
import { ShipmentMethodRequestBuilderRequestsMetadata, type ShipmentMethodRequestBuilder } from './shipmentMethod/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the customer property of the microsoft.graph.salesQuote entity.
 */
export interface CustomerRequestBuilder extends BaseRequestBuilder<CustomerRequestBuilder> {
    /**
     * Provides operations to manage the currency property of the microsoft.graph.customer entity.
     */
    get currency(): CurrencyRequestBuilder;
    /**
     * Provides operations to manage the paymentMethod property of the microsoft.graph.customer entity.
     */
    get paymentMethod(): PaymentMethodRequestBuilder;
    /**
     * Provides operations to manage the paymentTerm property of the microsoft.graph.customer entity.
     */
    get paymentTerm(): PaymentTermRequestBuilder;
    /**
     * Provides operations to manage the picture property of the microsoft.graph.customer entity.
     */
    get picture(): PictureRequestBuilder;
    /**
     * Provides operations to manage the shipmentMethod property of the microsoft.graph.customer entity.
     */
    get shipmentMethod(): ShipmentMethodRequestBuilder;
    /**
     * Delete navigation property customer for financials
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get customer from financials
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Customer>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<CustomerRequestBuilderGetQueryParameters> | undefined) : Promise<Customer | undefined>;
    /**
     * Update the navigation property customer in financials
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Customer>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: Customer, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Customer | undefined>;
    /**
     * Delete navigation property customer for financials
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Get customer from financials
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<CustomerRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property customer in financials
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: Customer, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get customer from financials
 */
export interface CustomerRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const CustomerRequestBuilderUriTemplate = "{+baseurl}/financials/companies/{company%2Did}/salesQuotes/{salesQuote%2Did}/customer{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const CustomerRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const CustomerRequestBuilderNavigationMetadata: Record<Exclude<keyof CustomerRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    currency: {
        requestsMetadata: CurrencyRequestBuilderRequestsMetadata,
    },
    paymentMethod: {
        requestsMetadata: PaymentMethodRequestBuilderRequestsMetadata,
    },
    paymentTerm: {
        requestsMetadata: PaymentTermRequestBuilderRequestsMetadata,
    },
    picture: {
        requestsMetadata: PictureRequestBuilderRequestsMetadata,
        navigationMetadata: PictureRequestBuilderNavigationMetadata,
    },
    shipmentMethod: {
        requestsMetadata: ShipmentMethodRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const CustomerRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: CustomerRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        uriTemplate: CustomerRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createCustomerFromDiscriminatorValue,
        queryParametersMapper: CustomerRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: CustomerRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createCustomerFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCustomer,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
