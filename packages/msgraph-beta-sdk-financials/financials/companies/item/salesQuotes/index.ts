/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createSalesQuoteCollectionResponseFromDiscriminatorValue, type SalesQuoteCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { SalesQuoteItemRequestBuilderNavigationMetadata, SalesQuoteItemRequestBuilderRequestsMetadata, type SalesQuoteItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';
import { type Guid } from 'guid-typescript';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the salesQuotes property of the microsoft.graph.company entity.
 */
export interface SalesQuotesRequestBuilder extends BaseRequestBuilder<SalesQuotesRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the salesQuotes property of the microsoft.graph.company entity.
     * @param salesQuoteId The unique identifier of salesQuote
     * @returns {SalesQuoteItemRequestBuilder}
     */
     bySalesQuoteId(salesQuoteId: Guid) : SalesQuoteItemRequestBuilder;
    /**
     * Get salesQuotes from financials
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<SalesQuoteCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<SalesQuotesRequestBuilderGetQueryParameters> | undefined) : Promise<SalesQuoteCollectionResponse | undefined>;
    /**
     * Get salesQuotes from financials
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<SalesQuotesRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Get salesQuotes from financials
 */
export interface SalesQuotesRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Uri template for the request builder.
 */
export const SalesQuotesRequestBuilderUriTemplate = "{+baseurl}/financials/companies/{company%2Did}/salesQuotes{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Provides operations to manage the salesQuotes property of the microsoft.graph.company entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    Currency: "currency",
    Customer: "customer",
    PaymentTerm: "paymentTerm",
    SalesQuoteLines: "salesQuoteLines",
    ShipmentMethod: "shipmentMethod",
} as const;
/**
 * Provides operations to manage the salesQuotes property of the microsoft.graph.company entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    AcceptedDate: "acceptedDate",
    AcceptedDateDesc: "acceptedDate desc",
    BillingPostalAddress: "billingPostalAddress",
    BillingPostalAddressDesc: "billingPostalAddress desc",
    BillToCustomerId: "billToCustomerId",
    BillToCustomerIdDesc: "billToCustomerId desc",
    BillToCustomerNumber: "billToCustomerNumber",
    BillToCustomerNumberDesc: "billToCustomerNumber desc",
    BillToName: "billToName",
    BillToNameDesc: "billToName desc",
    CurrencyCode: "currencyCode",
    CurrencyCodeDesc: "currencyCode desc",
    CurrencyId: "currencyId",
    CurrencyIdDesc: "currencyId desc",
    CustomerId: "customerId",
    CustomerIdDesc: "customerId desc",
    CustomerName: "customerName",
    CustomerNameDesc: "customerName desc",
    CustomerNumber: "customerNumber",
    CustomerNumberDesc: "customerNumber desc",
    DiscountAmount: "discountAmount",
    DiscountAmountDesc: "discountAmount desc",
    DocumentDate: "documentDate",
    DocumentDateDesc: "documentDate desc",
    DueDate: "dueDate",
    DueDateDesc: "dueDate desc",
    Email: "email",
    EmailDesc: "email desc",
    ExternalDocumentNumber: "externalDocumentNumber",
    ExternalDocumentNumberDesc: "externalDocumentNumber desc",
    Id: "id",
    IdDesc: "id desc",
    LastModifiedDateTime: "lastModifiedDateTime",
    LastModifiedDateTimeDesc: "lastModifiedDateTime desc",
    Number: "number",
    NumberDesc: "number desc",
    PaymentTermsId: "paymentTermsId",
    PaymentTermsIdDesc: "paymentTermsId desc",
    PhoneNumber: "phoneNumber",
    PhoneNumberDesc: "phoneNumber desc",
    Salesperson: "salesperson",
    SalespersonDesc: "salesperson desc",
    SellingPostalAddress: "sellingPostalAddress",
    SellingPostalAddressDesc: "sellingPostalAddress desc",
    SentDate: "sentDate",
    SentDateDesc: "sentDate desc",
    ShipmentMethodId: "shipmentMethodId",
    ShipmentMethodIdDesc: "shipmentMethodId desc",
    ShippingPostalAddress: "shippingPostalAddress",
    ShippingPostalAddressDesc: "shippingPostalAddress desc",
    ShipToContact: "shipToContact",
    ShipToContactDesc: "shipToContact desc",
    ShipToName: "shipToName",
    ShipToNameDesc: "shipToName desc",
    Status: "status",
    StatusDesc: "status desc",
    TotalAmountExcludingTax: "totalAmountExcludingTax",
    TotalAmountExcludingTaxDesc: "totalAmountExcludingTax desc",
    TotalAmountIncludingTax: "totalAmountIncludingTax",
    TotalAmountIncludingTaxDesc: "totalAmountIncludingTax desc",
    TotalTaxAmount: "totalTaxAmount",
    TotalTaxAmountDesc: "totalTaxAmount desc",
    ValidUntilDate: "validUntilDate",
    ValidUntilDateDesc: "validUntilDate desc",
} as const;
/**
 * Provides operations to manage the salesQuotes property of the microsoft.graph.company entity.
 */
export const GetSelectQueryParameterTypeObject = {
    AcceptedDate: "acceptedDate",
    BillingPostalAddress: "billingPostalAddress",
    BillToCustomerId: "billToCustomerId",
    BillToCustomerNumber: "billToCustomerNumber",
    BillToName: "billToName",
    CurrencyCode: "currencyCode",
    CurrencyId: "currencyId",
    CustomerId: "customerId",
    CustomerName: "customerName",
    CustomerNumber: "customerNumber",
    DiscountAmount: "discountAmount",
    DocumentDate: "documentDate",
    DueDate: "dueDate",
    Email: "email",
    ExternalDocumentNumber: "externalDocumentNumber",
    Id: "id",
    LastModifiedDateTime: "lastModifiedDateTime",
    Number: "number",
    PaymentTermsId: "paymentTermsId",
    PhoneNumber: "phoneNumber",
    Salesperson: "salesperson",
    SellingPostalAddress: "sellingPostalAddress",
    SentDate: "sentDate",
    ShipmentMethodId: "shipmentMethodId",
    ShippingPostalAddress: "shippingPostalAddress",
    ShipToContact: "shipToContact",
    ShipToName: "shipToName",
    Status: "status",
    TotalAmountExcludingTax: "totalAmountExcludingTax",
    TotalAmountIncludingTax: "totalAmountIncludingTax",
    TotalTaxAmount: "totalTaxAmount",
    ValidUntilDate: "validUntilDate",
    Currency: "currency",
    Customer: "customer",
    PaymentTerm: "paymentTerm",
    SalesQuoteLines: "salesQuoteLines",
    ShipmentMethod: "shipmentMethod",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const SalesQuotesRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const SalesQuotesRequestBuilderNavigationMetadata: Record<Exclude<keyof SalesQuotesRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    bySalesQuoteId: {
        requestsMetadata: SalesQuoteItemRequestBuilderRequestsMetadata,
        navigationMetadata: SalesQuoteItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["salesQuote%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const SalesQuotesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: SalesQuotesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createSalesQuoteCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: SalesQuotesRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
