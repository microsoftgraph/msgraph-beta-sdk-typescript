/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createJournalFromDiscriminatorValue, serializeJournal, type Journal } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { AccountRequestBuilderRequestsMetadata, type AccountRequestBuilder } from './account/';
import { JournalLinesRequestBuilderNavigationMetadata, JournalLinesRequestBuilderRequestsMetadata, type JournalLinesRequestBuilder } from './journalLines/';
import { PostRequestBuilderRequestsMetadata, type PostRequestBuilder } from './post/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the journals property of the microsoft.graph.company entity.
 */
export interface JournalItemRequestBuilder extends BaseRequestBuilder<JournalItemRequestBuilder> {
    /**
     * Provides operations to manage the account property of the microsoft.graph.journal entity.
     */
    get account(): AccountRequestBuilder;
    /**
     * Provides operations to manage the journalLines property of the microsoft.graph.journal entity.
     */
    get journalLines(): JournalLinesRequestBuilder;
    /**
     * Provides operations to call the post method.
     */
    get postPath(): PostRequestBuilder;
    /**
     * Delete navigation property journals for financials
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get journals from financials
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Journal>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<JournalItemRequestBuilderGetQueryParameters> | undefined) : Promise<Journal | undefined>;
    /**
     * Update the navigation property journals in financials
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Journal>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: Journal, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Journal | undefined>;
    /**
     * Delete navigation property journals for financials
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Get journals from financials
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<JournalItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property journals in financials
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: Journal, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get journals from financials
 */
export interface JournalItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const JournalItemRequestBuilderUriTemplate = "{+baseurl}/financials/companies/{company%2Did}/journals/{journal%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const JournalItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const JournalItemRequestBuilderNavigationMetadata: Record<Exclude<keyof JournalItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    account: {
        requestsMetadata: AccountRequestBuilderRequestsMetadata,
    },
    journalLines: {
        requestsMetadata: JournalLinesRequestBuilderRequestsMetadata,
        navigationMetadata: JournalLinesRequestBuilderNavigationMetadata,
    },
    postPath: {
        requestsMetadata: PostRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const JournalItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: JournalItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        uriTemplate: JournalItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createJournalFromDiscriminatorValue,
        queryParametersMapper: JournalItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: JournalItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createJournalFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeJournal,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
