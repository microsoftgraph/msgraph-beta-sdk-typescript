/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createCustomerFromDiscriminatorValue, serializeCustomer, type Customer } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CurrencyRequestBuilderRequestsMetadata, type CurrencyRequestBuilder } from './currency/';
import { PaymentMethodRequestBuilderRequestsMetadata, type PaymentMethodRequestBuilder } from './paymentMethod/';
import { PaymentTermRequestBuilderRequestsMetadata, type PaymentTermRequestBuilder } from './paymentTerm/';
import { PictureRequestBuilderNavigationMetadata, PictureRequestBuilderRequestsMetadata, type PictureRequestBuilder } from './picture/';
import { ShipmentMethodRequestBuilderRequestsMetadata, type ShipmentMethodRequestBuilder } from './shipmentMethod/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the customers property of the microsoft.graph.company entity.
 */
export interface CustomerItemRequestBuilder extends BaseRequestBuilder<CustomerItemRequestBuilder> {
    /**
     * Provides operations to manage the currency property of the microsoft.graph.customer entity.
     */
    get currency(): CurrencyRequestBuilder;
    /**
     * Provides operations to manage the paymentMethod property of the microsoft.graph.customer entity.
     */
    get paymentMethod(): PaymentMethodRequestBuilder;
    /**
     * Provides operations to manage the paymentTerm property of the microsoft.graph.customer entity.
     */
    get paymentTerm(): PaymentTermRequestBuilder;
    /**
     * Provides operations to manage the picture property of the microsoft.graph.customer entity.
     */
    get picture(): PictureRequestBuilder;
    /**
     * Provides operations to manage the shipmentMethod property of the microsoft.graph.customer entity.
     */
    get shipmentMethod(): ShipmentMethodRequestBuilder;
    /**
     * Delete navigation property customers for financials
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get customers from financials
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Customer>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<CustomerItemRequestBuilderGetQueryParameters> | undefined) : Promise<Customer | undefined>;
    /**
     * Update the navigation property customers in financials
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Customer>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: Customer, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Customer | undefined>;
    /**
     * Delete navigation property customers for financials
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Get customers from financials
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<CustomerItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property customers in financials
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: Customer, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get customers from financials
 */
export interface CustomerItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
}
export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Uri template for the request builder.
 */
export const CustomerItemRequestBuilderUriTemplate = "{+baseurl}/financials/companies/{company%2Did}/customers/{customer%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const CustomerItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const CustomerItemRequestBuilderNavigationMetadata: Record<Exclude<keyof CustomerItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    currency: {
        requestsMetadata: CurrencyRequestBuilderRequestsMetadata,
    },
    paymentMethod: {
        requestsMetadata: PaymentMethodRequestBuilderRequestsMetadata,
    },
    paymentTerm: {
        requestsMetadata: PaymentTermRequestBuilderRequestsMetadata,
    },
    picture: {
        requestsMetadata: PictureRequestBuilderRequestsMetadata,
        navigationMetadata: PictureRequestBuilderNavigationMetadata,
    },
    shipmentMethod: {
        requestsMetadata: ShipmentMethodRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const CustomerItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: CustomerItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: CustomerItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createCustomerFromDiscriminatorValue,
        queryParametersMapper: CustomerItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: CustomerItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createCustomerFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCustomer,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Provides operations to manage the customers property of the microsoft.graph.company entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    Currency: "currency",
    PaymentMethod: "paymentMethod",
    PaymentTerm: "paymentTerm",
    Picture: "picture",
    ShipmentMethod: "shipmentMethod",
} as const;
/**
 * Provides operations to manage the customers property of the microsoft.graph.company entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Address: "address",
    Blocked: "blocked",
    CurrencyCode: "currencyCode",
    CurrencyId: "currencyId",
    DisplayName: "displayName",
    Email: "email",
    Id: "id",
    LastModifiedDateTime: "lastModifiedDateTime",
    Number: "number",
    PaymentMethodId: "paymentMethodId",
    PaymentTermsId: "paymentTermsId",
    PhoneNumber: "phoneNumber",
    ShipmentMethodId: "shipmentMethodId",
    TaxAreaDisplayName: "taxAreaDisplayName",
    TaxAreaId: "taxAreaId",
    TaxLiable: "taxLiable",
    TaxRegistrationNumber: "taxRegistrationNumber",
    Type: "type",
    Website: "website",
    Currency: "currency",
    PaymentMethod: "paymentMethod",
    PaymentTerm: "paymentTerm",
    Picture: "picture",
    ShipmentMethod: "shipmentMethod",
} as const;
/* tslint:enable */
/* eslint-enable */
