/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createCustomerCollectionResponseFromDiscriminatorValue, createCustomerFromDiscriminatorValue, serializeCustomer, type Customer, type CustomerCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { CustomerItemRequestBuilderNavigationMetadata, CustomerItemRequestBuilderRequestsMetadata, type CustomerItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';
import { type Guid } from 'guid-typescript';

/**
 * Provides operations to manage the customers property of the microsoft.graph.company entity.
 */
export interface CustomersRequestBuilder extends BaseRequestBuilder<CustomersRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the customers property of the microsoft.graph.company entity.
     * @param customerId The unique identifier of customer
     * @returns {CustomerItemRequestBuilder}
     */
     byCustomerId(customerId: Guid) : CustomerItemRequestBuilder;
    /**
     * Get customers from financials
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<CustomerCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<CustomersRequestBuilderGetQueryParameters> | undefined) : Promise<CustomerCollectionResponse | undefined>;
    /**
     * Create new navigation property to customers for financials
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Customer>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: Customer, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Customer | undefined>;
    /**
     * Get customers from financials
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<CustomersRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create new navigation property to customers for financials
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Customer, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get customers from financials
 */
export interface CustomersRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Uri template for the request builder.
 */
export const CustomersRequestBuilderUriTemplate = "{+baseurl}/financials/companies/{company%2Did}/customers{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const CustomersRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const CustomersRequestBuilderNavigationMetadata: Record<Exclude<keyof CustomersRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byCustomerId: {
        requestsMetadata: CustomerItemRequestBuilderRequestsMetadata,
        navigationMetadata: CustomerItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["customer%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const CustomersRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: CustomersRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createCustomerCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: CustomersRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: CustomersRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createCustomerFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCustomer,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Provides operations to manage the customers property of the microsoft.graph.company entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    Currency: "currency",
    PaymentMethod: "paymentMethod",
    PaymentTerm: "paymentTerm",
    Picture: "picture",
    ShipmentMethod: "shipmentMethod",
} as const;
/**
 * Provides operations to manage the customers property of the microsoft.graph.company entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Address: "address",
    AddressDesc: "address desc",
    Blocked: "blocked",
    BlockedDesc: "blocked desc",
    CurrencyCode: "currencyCode",
    CurrencyCodeDesc: "currencyCode desc",
    CurrencyId: "currencyId",
    CurrencyIdDesc: "currencyId desc",
    DisplayName: "displayName",
    DisplayNameDesc: "displayName desc",
    Email: "email",
    EmailDesc: "email desc",
    Id: "id",
    IdDesc: "id desc",
    LastModifiedDateTime: "lastModifiedDateTime",
    LastModifiedDateTimeDesc: "lastModifiedDateTime desc",
    Number: "number",
    NumberDesc: "number desc",
    PaymentMethodId: "paymentMethodId",
    PaymentMethodIdDesc: "paymentMethodId desc",
    PaymentTermsId: "paymentTermsId",
    PaymentTermsIdDesc: "paymentTermsId desc",
    PhoneNumber: "phoneNumber",
    PhoneNumberDesc: "phoneNumber desc",
    ShipmentMethodId: "shipmentMethodId",
    ShipmentMethodIdDesc: "shipmentMethodId desc",
    TaxAreaDisplayName: "taxAreaDisplayName",
    TaxAreaDisplayNameDesc: "taxAreaDisplayName desc",
    TaxAreaId: "taxAreaId",
    TaxAreaIdDesc: "taxAreaId desc",
    TaxLiable: "taxLiable",
    TaxLiableDesc: "taxLiable desc",
    TaxRegistrationNumber: "taxRegistrationNumber",
    TaxRegistrationNumberDesc: "taxRegistrationNumber desc",
    Type: "type",
    TypeDesc: "type desc",
    Website: "website",
    WebsiteDesc: "website desc",
} as const;
/**
 * Provides operations to manage the customers property of the microsoft.graph.company entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Address: "address",
    Blocked: "blocked",
    CurrencyCode: "currencyCode",
    CurrencyId: "currencyId",
    DisplayName: "displayName",
    Email: "email",
    Id: "id",
    LastModifiedDateTime: "lastModifiedDateTime",
    Number: "number",
    PaymentMethodId: "paymentMethodId",
    PaymentTermsId: "paymentTermsId",
    PhoneNumber: "phoneNumber",
    ShipmentMethodId: "shipmentMethodId",
    TaxAreaDisplayName: "taxAreaDisplayName",
    TaxAreaId: "taxAreaId",
    TaxLiable: "taxLiable",
    TaxRegistrationNumber: "taxRegistrationNumber",
    Type: "type",
    Website: "website",
    Currency: "currency",
    PaymentMethod: "paymentMethod",
    PaymentTerm: "paymentTerm",
    Picture: "picture",
    ShipmentMethod: "shipmentMethod",
} as const;
/* tslint:enable */
/* eslint-enable */
