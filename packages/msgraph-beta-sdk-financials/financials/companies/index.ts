/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createCompanyCollectionResponseFromDiscriminatorValue, type CompanyCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { CompanyItemRequestBuilderNavigationMetadata, CompanyItemRequestBuilderRequestsMetadata, type CompanyItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';
import { type Guid } from 'guid-typescript';

/**
 * Provides operations to manage the companies property of the microsoft.graph.financials entity.
 */
export interface CompaniesRequestBuilder extends BaseRequestBuilder<CompaniesRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the companies property of the microsoft.graph.financials entity.
     * @param companyId The unique identifier of company
     * @returns {CompanyItemRequestBuilder}
     */
     byCompanyId(companyId: Guid) : CompanyItemRequestBuilder;
    /**
     * Get companies from financials
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<CompanyCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<CompaniesRequestBuilderGetQueryParameters> | undefined) : Promise<CompanyCollectionResponse | undefined>;
    /**
     * Get companies from financials
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<CompaniesRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Get companies from financials
 */
export interface CompaniesRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Uri template for the request builder.
 */
export const CompaniesRequestBuilderUriTemplate = "{+baseurl}/financials/companies{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const CompaniesRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const CompaniesRequestBuilderNavigationMetadata: Record<Exclude<keyof CompaniesRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byCompanyId: {
        requestsMetadata: CompanyItemRequestBuilderRequestsMetadata,
        navigationMetadata: CompanyItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["company%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const CompaniesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: CompaniesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createCompanyCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: CompaniesRequestBuilderGetQueryParametersMapper,
    },
};
/**
 * Provides operations to manage the companies property of the microsoft.graph.financials entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    Accounts: "accounts",
    AgedAccountsPayable: "agedAccountsPayable",
    AgedAccountsReceivable: "agedAccountsReceivable",
    CompanyInformation: "companyInformation",
    CountriesRegions: "countriesRegions",
    Currencies: "currencies",
    CustomerPaymentJournals: "customerPaymentJournals",
    CustomerPayments: "customerPayments",
    Customers: "customers",
    Dimensions: "dimensions",
    DimensionValues: "dimensionValues",
    Employees: "employees",
    GeneralLedgerEntries: "generalLedgerEntries",
    ItemCategories: "itemCategories",
    Items: "items",
    JournalLines: "journalLines",
    Journals: "journals",
    PaymentMethods: "paymentMethods",
    PaymentTerms: "paymentTerms",
    Picture: "picture",
    PurchaseInvoiceLines: "purchaseInvoiceLines",
    PurchaseInvoices: "purchaseInvoices",
    SalesCreditMemoLines: "salesCreditMemoLines",
    SalesCreditMemos: "salesCreditMemos",
    SalesInvoiceLines: "salesInvoiceLines",
    SalesInvoices: "salesInvoices",
    SalesOrderLines: "salesOrderLines",
    SalesOrders: "salesOrders",
    SalesQuoteLines: "salesQuoteLines",
    SalesQuotes: "salesQuotes",
    ShipmentMethods: "shipmentMethods",
    TaxAreas: "taxAreas",
    TaxGroups: "taxGroups",
    UnitsOfMeasure: "unitsOfMeasure",
    Vendors: "vendors",
} as const;
/**
 * Provides operations to manage the companies property of the microsoft.graph.financials entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    BusinessProfileId: "businessProfileId",
    BusinessProfileIdDesc: "businessProfileId desc",
    DisplayName: "displayName",
    DisplayNameDesc: "displayName desc",
    Id: "id",
    IdDesc: "id desc",
    Name: "name",
    NameDesc: "name desc",
    SystemVersion: "systemVersion",
    SystemVersionDesc: "systemVersion desc",
} as const;
/**
 * Provides operations to manage the companies property of the microsoft.graph.financials entity.
 */
export const GetSelectQueryParameterTypeObject = {
    BusinessProfileId: "businessProfileId",
    DisplayName: "displayName",
    Id: "id",
    Name: "name",
    SystemVersion: "systemVersion",
    Accounts: "accounts",
    AgedAccountsPayable: "agedAccountsPayable",
    AgedAccountsReceivable: "agedAccountsReceivable",
    CompanyInformation: "companyInformation",
    CountriesRegions: "countriesRegions",
    Currencies: "currencies",
    CustomerPaymentJournals: "customerPaymentJournals",
    CustomerPayments: "customerPayments",
    Customers: "customers",
    Dimensions: "dimensions",
    DimensionValues: "dimensionValues",
    Employees: "employees",
    GeneralLedgerEntries: "generalLedgerEntries",
    ItemCategories: "itemCategories",
    Items: "items",
    JournalLines: "journalLines",
    Journals: "journals",
    PaymentMethods: "paymentMethods",
    PaymentTerms: "paymentTerms",
    Picture: "picture",
    PurchaseInvoiceLines: "purchaseInvoiceLines",
    PurchaseInvoices: "purchaseInvoices",
    SalesCreditMemoLines: "salesCreditMemoLines",
    SalesCreditMemos: "salesCreditMemos",
    SalesInvoiceLines: "salesInvoiceLines",
    SalesInvoices: "salesInvoices",
    SalesOrderLines: "salesOrderLines",
    SalesOrders: "salesOrders",
    SalesQuoteLines: "salesQuoteLines",
    SalesQuotes: "salesQuotes",
    ShipmentMethods: "shipmentMethods",
    TaxAreas: "taxAreas",
    TaxGroups: "taxGroups",
    UnitsOfMeasure: "unitsOfMeasure",
    Vendors: "vendors",
} as const;
/* tslint:enable */
/* eslint-enable */
