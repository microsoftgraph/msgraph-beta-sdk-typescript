/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createInformationProtectionFromDiscriminatorValue, serializeInformationProtection, type InformationProtection } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { BitlockerRequestBuilderNavigationMetadata, BitlockerRequestBuilderRequestsMetadata, BitlockerRequestBuilderUriTemplate, type BitlockerRequestBuilder } from './bitlocker/';
import { DataLossPreventionPoliciesRequestBuilderNavigationMetadata, DataLossPreventionPoliciesRequestBuilderRequestsMetadata, DataLossPreventionPoliciesRequestBuilderUriTemplate, type DataLossPreventionPoliciesRequestBuilder } from './dataLossPreventionPolicies/';
import { DecryptBufferRequestBuilderRequestsMetadata, DecryptBufferRequestBuilderUriTemplate, type DecryptBufferRequestBuilder } from './decryptBuffer/';
import { EncryptBufferRequestBuilderRequestsMetadata, EncryptBufferRequestBuilderUriTemplate, type EncryptBufferRequestBuilder } from './encryptBuffer/';
import { PolicyRequestBuilderNavigationMetadata, PolicyRequestBuilderRequestsMetadata, PolicyRequestBuilderUriTemplate, type PolicyRequestBuilder } from './policy/';
import { SensitivityLabelsRequestBuilderNavigationMetadata, SensitivityLabelsRequestBuilderRequestsMetadata, SensitivityLabelsRequestBuilderUriTemplate, type SensitivityLabelsRequestBuilder } from './sensitivityLabels/';
import { SensitivityPolicySettingsRequestBuilderRequestsMetadata, SensitivityPolicySettingsRequestBuilderUriTemplate, type SensitivityPolicySettingsRequestBuilder } from './sensitivityPolicySettings/';
import { SignDigestRequestBuilderRequestsMetadata, SignDigestRequestBuilderUriTemplate, type SignDigestRequestBuilder } from './signDigest/';
import { ThreatAssessmentRequestsRequestBuilderNavigationMetadata, ThreatAssessmentRequestsRequestBuilderRequestsMetadata, ThreatAssessmentRequestsRequestBuilderUriTemplate, type ThreatAssessmentRequestsRequestBuilder } from './threatAssessmentRequests/';
import { type VerifySignatureRequestBuilder, VerifySignatureRequestBuilderRequestsMetadata, VerifySignatureRequestBuilderUriTemplate } from './verifySignature/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the informationProtection property of the microsoft.graph.site entity.
 */
export interface InformationProtectionRequestBuilder extends BaseRequestBuilder<InformationProtectionRequestBuilder> {
    /**
     * Provides operations to manage the bitlocker property of the microsoft.graph.informationProtection entity.
     */
    get bitlocker(): BitlockerRequestBuilder;
    /**
     * Provides operations to manage the dataLossPreventionPolicies property of the microsoft.graph.informationProtection entity.
     */
    get dataLossPreventionPolicies(): DataLossPreventionPoliciesRequestBuilder;
    /**
     * Provides operations to call the decryptBuffer method.
     */
    get decryptBuffer(): DecryptBufferRequestBuilder;
    /**
     * Provides operations to call the encryptBuffer method.
     */
    get encryptBuffer(): EncryptBufferRequestBuilder;
    /**
     * Provides operations to manage the policy property of the microsoft.graph.informationProtection entity.
     */
    get policy(): PolicyRequestBuilder;
    /**
     * Provides operations to manage the sensitivityLabels property of the microsoft.graph.informationProtection entity.
     */
    get sensitivityLabels(): SensitivityLabelsRequestBuilder;
    /**
     * Provides operations to manage the sensitivityPolicySettings property of the microsoft.graph.informationProtection entity.
     */
    get sensitivityPolicySettings(): SensitivityPolicySettingsRequestBuilder;
    /**
     * Provides operations to call the signDigest method.
     */
    get signDigest(): SignDigestRequestBuilder;
    /**
     * Provides operations to manage the threatAssessmentRequests property of the microsoft.graph.informationProtection entity.
     */
    get threatAssessmentRequests(): ThreatAssessmentRequestsRequestBuilder;
    /**
     * Provides operations to call the verifySignature method.
     */
    get verifySignature(): VerifySignatureRequestBuilder;
    /**
     * Delete navigation property informationProtection for sites
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get informationProtection from sites
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of InformationProtection
     */
     get(requestConfiguration?: RequestConfiguration<InformationProtectionRequestBuilderGetQueryParameters> | undefined) : Promise<InformationProtection | undefined>;
    /**
     * Update the navigation property informationProtection in sites
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of InformationProtection
     */
     patch(body: InformationProtection, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<InformationProtection | undefined>;
    /**
     * Delete navigation property informationProtection for sites
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Get informationProtection from sites
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<InformationProtectionRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property informationProtection in sites
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: InformationProtection, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get informationProtection from sites
 */
export interface InformationProtectionRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const InformationProtectionRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const InformationProtectionRequestBuilderNavigationMetadata: Record<Exclude<keyof InformationProtectionRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    bitlocker: {
        uriTemplate: BitlockerRequestBuilderUriTemplate,
        requestsMetadata: BitlockerRequestBuilderRequestsMetadata,
        navigationMetadata: BitlockerRequestBuilderNavigationMetadata,
    },
    dataLossPreventionPolicies: {
        uriTemplate: DataLossPreventionPoliciesRequestBuilderUriTemplate,
        requestsMetadata: DataLossPreventionPoliciesRequestBuilderRequestsMetadata,
        navigationMetadata: DataLossPreventionPoliciesRequestBuilderNavigationMetadata,
    },
    decryptBuffer: {
        uriTemplate: DecryptBufferRequestBuilderUriTemplate,
        requestsMetadata: DecryptBufferRequestBuilderRequestsMetadata,
    },
    encryptBuffer: {
        uriTemplate: EncryptBufferRequestBuilderUriTemplate,
        requestsMetadata: EncryptBufferRequestBuilderRequestsMetadata,
    },
    policy: {
        uriTemplate: PolicyRequestBuilderUriTemplate,
        requestsMetadata: PolicyRequestBuilderRequestsMetadata,
        navigationMetadata: PolicyRequestBuilderNavigationMetadata,
    },
    sensitivityLabels: {
        uriTemplate: SensitivityLabelsRequestBuilderUriTemplate,
        requestsMetadata: SensitivityLabelsRequestBuilderRequestsMetadata,
        navigationMetadata: SensitivityLabelsRequestBuilderNavigationMetadata,
    },
    sensitivityPolicySettings: {
        uriTemplate: SensitivityPolicySettingsRequestBuilderUriTemplate,
        requestsMetadata: SensitivityPolicySettingsRequestBuilderRequestsMetadata,
    },
    signDigest: {
        uriTemplate: SignDigestRequestBuilderUriTemplate,
        requestsMetadata: SignDigestRequestBuilderRequestsMetadata,
    },
    threatAssessmentRequests: {
        uriTemplate: ThreatAssessmentRequestsRequestBuilderUriTemplate,
        requestsMetadata: ThreatAssessmentRequestsRequestBuilderRequestsMetadata,
        navigationMetadata: ThreatAssessmentRequestsRequestBuilderNavigationMetadata,
    },
    verifySignature: {
        uriTemplate: VerifySignatureRequestBuilderUriTemplate,
        requestsMetadata: VerifySignatureRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const InformationProtectionRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createInformationProtectionFromDiscriminatorValue,
        queryParametersMapper: InformationProtectionRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createInformationProtectionFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeInformationProtection,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const InformationProtectionRequestBuilderUriTemplate = "{+baseurl}/sites/{site%2Did}/informationProtection{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
