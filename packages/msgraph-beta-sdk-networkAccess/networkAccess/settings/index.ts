/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createSettingsFromDiscriminatorValue, serializeSettings, type Settings } from '@microsoft/msgraph-beta-sdk/models/networkaccess/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { ConditionalAccessRequestBuilderRequestsMetadata, ConditionalAccessRequestBuilderUriTemplate, type ConditionalAccessRequestBuilder } from './conditionalAccess/';
import { CrossTenantAccessRequestBuilderRequestsMetadata, CrossTenantAccessRequestBuilderUriTemplate, type CrossTenantAccessRequestBuilder } from './crossTenantAccess/';
import { EnrichedAuditLogsRequestBuilderRequestsMetadata, EnrichedAuditLogsRequestBuilderUriTemplate, type EnrichedAuditLogsRequestBuilder } from './enrichedAuditLogs/';
import { ForwardingOptionsRequestBuilderRequestsMetadata, ForwardingOptionsRequestBuilderUriTemplate, type ForwardingOptionsRequestBuilder } from './forwardingOptions/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the settings property of the microsoft.graph.networkaccess.networkAccessRoot entity.
 */
export interface SettingsRequestBuilder extends BaseRequestBuilder<SettingsRequestBuilder> {
    /**
     * Provides operations to manage the conditionalAccess property of the microsoft.graph.networkaccess.settings entity.
     */
    get conditionalAccess(): ConditionalAccessRequestBuilder;
    /**
     * Provides operations to manage the crossTenantAccess property of the microsoft.graph.networkaccess.settings entity.
     */
    get crossTenantAccess(): CrossTenantAccessRequestBuilder;
    /**
     * Provides operations to manage the enrichedAuditLogs property of the microsoft.graph.networkaccess.settings entity.
     */
    get enrichedAuditLogs(): EnrichedAuditLogsRequestBuilder;
    /**
     * Provides operations to manage the forwardingOptions property of the microsoft.graph.networkaccess.settings entity.
     */
    get forwardingOptions(): ForwardingOptionsRequestBuilder;
    /**
     * Delete navigation property settings for networkAccess
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Global Secure Access settings.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of Settings
     */
     get(requestConfiguration?: RequestConfiguration<SettingsRequestBuilderGetQueryParameters> | undefined) : Promise<Settings | undefined>;
    /**
     * Update the navigation property settings in networkAccess
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of Settings
     */
     patch(body: Settings, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Settings | undefined>;
    /**
     * Delete navigation property settings for networkAccess
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Global Secure Access settings.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<SettingsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property settings in networkAccess
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: Settings, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Global Secure Access settings.
 */
export interface SettingsRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const SettingsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const SettingsRequestBuilderNavigationMetadata: Record<Exclude<keyof SettingsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    conditionalAccess: {
        uriTemplate: ConditionalAccessRequestBuilderUriTemplate,
        requestsMetadata: ConditionalAccessRequestBuilderRequestsMetadata,
    },
    crossTenantAccess: {
        uriTemplate: CrossTenantAccessRequestBuilderUriTemplate,
        requestsMetadata: CrossTenantAccessRequestBuilderRequestsMetadata,
    },
    enrichedAuditLogs: {
        uriTemplate: EnrichedAuditLogsRequestBuilderUriTemplate,
        requestsMetadata: EnrichedAuditLogsRequestBuilderRequestsMetadata,
    },
    forwardingOptions: {
        uriTemplate: ForwardingOptionsRequestBuilderUriTemplate,
        requestsMetadata: ForwardingOptionsRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const SettingsRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createSettingsFromDiscriminatorValue,
        queryParametersMapper: SettingsRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createSettingsFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeSettings,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const SettingsRequestBuilderUriTemplate = "{+baseurl}/networkAccess/settings{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
