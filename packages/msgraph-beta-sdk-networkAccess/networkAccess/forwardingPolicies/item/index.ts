/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createForwardingPolicyFromDiscriminatorValue, serializeForwardingPolicy, type ForwardingPolicy } from '@microsoft/msgraph-beta-sdk/models/networkaccess/';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
// @ts-ignore
import { MicrosoftGraphNetworkaccessUpdatePolicyRulesRequestBuilderRequestsMetadata, type MicrosoftGraphNetworkaccessUpdatePolicyRulesRequestBuilder } from './microsoftGraphNetworkaccessUpdatePolicyRules/';
// @ts-ignore
import { PolicyRulesRequestBuilderNavigationMetadata, PolicyRulesRequestBuilderRequestsMetadata, type PolicyRulesRequestBuilder } from './policyRules/';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the forwardingPolicies property of the microsoft.graph.networkaccess.networkAccessRoot entity.
 */
export interface ForwardingPolicyItemRequestBuilder extends BaseRequestBuilder<ForwardingPolicyItemRequestBuilder> {
    /**
     * Provides operations to call the updatePolicyRules method.
     */
    get microsoftGraphNetworkaccessUpdatePolicyRules(): MicrosoftGraphNetworkaccessUpdatePolicyRulesRequestBuilder;
    /**
     * Provides operations to manage the policyRules property of the microsoft.graph.networkaccess.policy entity.
     */
    get policyRules(): PolicyRulesRequestBuilder;
    /**
     * Delete navigation property forwardingPolicies for networkAccess
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Retrieve information about a specific forwarding policy.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ForwardingPolicy>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/networkaccess-forwardingpolicy-get?view=graph-rest-beta|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<ForwardingPolicyItemRequestBuilderGetQueryParameters> | undefined) : Promise<ForwardingPolicy | undefined>;
    /**
     * Update the navigation property forwardingPolicies in networkAccess
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ForwardingPolicy>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: ForwardingPolicy, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ForwardingPolicy | undefined>;
    /**
     * Delete navigation property forwardingPolicies for networkAccess
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Retrieve information about a specific forwarding policy.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ForwardingPolicyItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property forwardingPolicies in networkAccess
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: ForwardingPolicy, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Retrieve information about a specific forwarding policy.
 */
export interface ForwardingPolicyItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const ForwardingPolicyItemRequestBuilderUriTemplate = "{+baseurl}/networkAccess/forwardingPolicies/{forwardingPolicy%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ForwardingPolicyItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ForwardingPolicyItemRequestBuilderNavigationMetadata: Record<Exclude<keyof ForwardingPolicyItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    microsoftGraphNetworkaccessUpdatePolicyRules: {
        requestsMetadata: MicrosoftGraphNetworkaccessUpdatePolicyRulesRequestBuilderRequestsMetadata,
    },
    policyRules: {
        requestsMetadata: PolicyRulesRequestBuilderRequestsMetadata,
        navigationMetadata: PolicyRulesRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ForwardingPolicyItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: ForwardingPolicyItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: ForwardingPolicyItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createForwardingPolicyFromDiscriminatorValue,
        queryParametersMapper: ForwardingPolicyItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: ForwardingPolicyItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createForwardingPolicyFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeForwardingPolicy,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
