/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createRemoteNetworkCollectionResponseFromDiscriminatorValue, createRemoteNetworkFromDiscriminatorValue, serializeRemoteNetwork, type RemoteNetwork, type RemoteNetworkCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/networkaccess/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { RemoteNetworkItemRequestBuilderNavigationMetadata, RemoteNetworkItemRequestBuilderRequestsMetadata, type RemoteNetworkItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the remoteNetworks property of the microsoft.graph.networkaccess.connectivity entity.
 */
export interface RemoteNetworksRequestBuilder extends BaseRequestBuilder<RemoteNetworksRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the remoteNetworks property of the microsoft.graph.networkaccess.connectivity entity.
     * @param remoteNetworkId The unique identifier of remoteNetwork
     * @returns {RemoteNetworkItemRequestBuilder}
     */
     byRemoteNetworkId(remoteNetworkId: string) : RemoteNetworkItemRequestBuilder;
    /**
     * Get remoteNetworks from networkAccess
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<RemoteNetworkCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<RemoteNetworksRequestBuilderGetQueryParameters> | undefined) : Promise<RemoteNetworkCollectionResponse | undefined>;
    /**
     * Create new navigation property to remoteNetworks for networkAccess
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<RemoteNetwork>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: RemoteNetwork, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<RemoteNetwork | undefined>;
    /**
     * Get remoteNetworks from networkAccess
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<RemoteNetworksRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create new navigation property to remoteNetworks for networkAccess
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: RemoteNetwork, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get remoteNetworks from networkAccess
 */
export interface RemoteNetworksRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Uri template for the request builder.
 */
export const RemoteNetworksRequestBuilderUriTemplate = "{+baseurl}/networkAccess/connectivity/remoteNetworks{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Provides operations to manage the remoteNetworks property of the microsoft.graph.networkaccess.connectivity entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    ConnectivityConfiguration: "connectivityConfiguration",
    DeviceLinks: "deviceLinks",
    ForwardingProfiles: "forwardingProfiles",
} as const;
/**
 * Provides operations to manage the remoteNetworks property of the microsoft.graph.networkaccess.connectivity entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    BandwidthCapacity: "bandwidthCapacity",
    BandwidthCapacityDesc: "bandwidthCapacity desc",
    ConnectivityState: "connectivityState",
    ConnectivityStateDesc: "connectivityState desc",
    Country: "country",
    CountryDesc: "country desc",
    LastModifiedDateTime: "lastModifiedDateTime",
    LastModifiedDateTimeDesc: "lastModifiedDateTime desc",
    Name: "name",
    NameDesc: "name desc",
    Region: "region",
    RegionDesc: "region desc",
    Version: "version",
    VersionDesc: "version desc",
} as const;
/**
 * Provides operations to manage the remoteNetworks property of the microsoft.graph.networkaccess.connectivity entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    BandwidthCapacity: "bandwidthCapacity",
    ConnectivityState: "connectivityState",
    Country: "country",
    LastModifiedDateTime: "lastModifiedDateTime",
    Name: "name",
    Region: "region",
    Version: "version",
    ConnectivityConfiguration: "connectivityConfiguration",
    DeviceLinks: "deviceLinks",
    ForwardingProfiles: "forwardingProfiles",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const RemoteNetworksRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const RemoteNetworksRequestBuilderNavigationMetadata: Record<Exclude<keyof RemoteNetworksRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byRemoteNetworkId: {
        requestsMetadata: RemoteNetworkItemRequestBuilderRequestsMetadata,
        navigationMetadata: RemoteNetworkItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["remoteNetwork%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const RemoteNetworksRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: RemoteNetworksRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createRemoteNetworkCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: RemoteNetworksRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: RemoteNetworksRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createRemoteNetworkFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeRemoteNetwork,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
