/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createRemoteNetworkConnectivityConfigurationFromDiscriminatorValue, serializeRemoteNetworkConnectivityConfiguration, type RemoteNetworkConnectivityConfiguration } from '@microsoft/msgraph-beta-sdk/models/networkaccess/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { LinksRequestBuilderNavigationMetadata, LinksRequestBuilderRequestsMetadata, type LinksRequestBuilder } from './links/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the connectivityConfiguration property of the microsoft.graph.networkaccess.remoteNetwork entity.
 */
export interface ConnectivityConfigurationRequestBuilder extends BaseRequestBuilder<ConnectivityConfigurationRequestBuilder> {
    /**
     * Provides operations to manage the links property of the microsoft.graph.networkaccess.remoteNetworkConnectivityConfiguration entity.
     */
    get links(): LinksRequestBuilder;
    /**
     * Delete navigation property connectivityConfiguration for networkAccess
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get connectivityConfiguration from networkAccess
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<RemoteNetworkConnectivityConfiguration>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<ConnectivityConfigurationRequestBuilderGetQueryParameters> | undefined) : Promise<RemoteNetworkConnectivityConfiguration | undefined>;
    /**
     * Update the navigation property connectivityConfiguration in networkAccess
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<RemoteNetworkConnectivityConfiguration>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: RemoteNetworkConnectivityConfiguration, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<RemoteNetworkConnectivityConfiguration | undefined>;
    /**
     * Delete navigation property connectivityConfiguration for networkAccess
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Get connectivityConfiguration from networkAccess
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ConnectivityConfigurationRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property connectivityConfiguration in networkAccess
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: RemoteNetworkConnectivityConfiguration, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get connectivityConfiguration from networkAccess
 */
export interface ConnectivityConfigurationRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const ConnectivityConfigurationRequestBuilderUriTemplate = "{+baseurl}/networkAccess/connectivity/remoteNetworks/{remoteNetwork%2Did}/connectivityConfiguration{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ConnectivityConfigurationRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ConnectivityConfigurationRequestBuilderNavigationMetadata: Record<Exclude<keyof ConnectivityConfigurationRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    links: {
        requestsMetadata: LinksRequestBuilderRequestsMetadata,
        navigationMetadata: LinksRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ConnectivityConfigurationRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: ConnectivityConfigurationRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: ConnectivityConfigurationRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createRemoteNetworkConnectivityConfigurationFromDiscriminatorValue,
        queryParametersMapper: ConnectivityConfigurationRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: ConnectivityConfigurationRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createRemoteNetworkConnectivityConfigurationFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeRemoteNetworkConnectivityConfiguration,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
