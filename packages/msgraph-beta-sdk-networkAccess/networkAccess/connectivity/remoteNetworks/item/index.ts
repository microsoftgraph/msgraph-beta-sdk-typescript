/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createRemoteNetworkFromDiscriminatorValue, serializeRemoteNetwork, type RemoteNetwork } from '@microsoft/msgraph-beta-sdk/models/networkaccess/';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
// @ts-ignore
import { ConnectivityConfigurationRequestBuilderNavigationMetadata, ConnectivityConfigurationRequestBuilderRequestsMetadata, type ConnectivityConfigurationRequestBuilder } from './connectivityConfiguration/';
// @ts-ignore
import { DeviceLinksRequestBuilderNavigationMetadata, DeviceLinksRequestBuilderRequestsMetadata, type DeviceLinksRequestBuilder } from './deviceLinks/';
// @ts-ignore
import { ForwardingProfilesRequestBuilderNavigationMetadata, ForwardingProfilesRequestBuilderRequestsMetadata, type ForwardingProfilesRequestBuilder } from './forwardingProfiles/';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the remoteNetworks property of the microsoft.graph.networkaccess.connectivity entity.
 */
export interface RemoteNetworkItemRequestBuilder extends BaseRequestBuilder<RemoteNetworkItemRequestBuilder> {
    /**
     * Provides operations to manage the connectivityConfiguration property of the microsoft.graph.networkaccess.remoteNetwork entity.
     */
    get connectivityConfiguration(): ConnectivityConfigurationRequestBuilder;
    /**
     * Provides operations to manage the deviceLinks property of the microsoft.graph.networkaccess.remoteNetwork entity.
     */
    get deviceLinks(): DeviceLinksRequestBuilder;
    /**
     * Provides operations to manage the forwardingProfiles property of the microsoft.graph.networkaccess.remoteNetwork entity.
     */
    get forwardingProfiles(): ForwardingProfilesRequestBuilder;
    /**
     * Delete navigation property remoteNetworks for networkAccess
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Represent locations, such as branches, that are connected to Global Secure Access services through an IPsec tunnel.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<RemoteNetwork>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<RemoteNetworkItemRequestBuilderGetQueryParameters> | undefined) : Promise<RemoteNetwork | undefined>;
    /**
     * Update the navigation property remoteNetworks in networkAccess
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<RemoteNetwork>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: RemoteNetwork, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<RemoteNetwork | undefined>;
    /**
     * Delete navigation property remoteNetworks for networkAccess
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Represent locations, such as branches, that are connected to Global Secure Access services through an IPsec tunnel.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<RemoteNetworkItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property remoteNetworks in networkAccess
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: RemoteNetwork, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Represent locations, such as branches, that are connected to Global Secure Access services through an IPsec tunnel.
 */
export interface RemoteNetworkItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const RemoteNetworkItemRequestBuilderUriTemplate = "{+baseurl}/networkAccess/connectivity/remoteNetworks/{remoteNetwork%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const RemoteNetworkItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const RemoteNetworkItemRequestBuilderNavigationMetadata: Record<Exclude<keyof RemoteNetworkItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    connectivityConfiguration: {
        requestsMetadata: ConnectivityConfigurationRequestBuilderRequestsMetadata,
        navigationMetadata: ConnectivityConfigurationRequestBuilderNavigationMetadata,
    },
    deviceLinks: {
        requestsMetadata: DeviceLinksRequestBuilderRequestsMetadata,
        navigationMetadata: DeviceLinksRequestBuilderNavigationMetadata,
    },
    forwardingProfiles: {
        requestsMetadata: ForwardingProfilesRequestBuilderRequestsMetadata,
        navigationMetadata: ForwardingProfilesRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const RemoteNetworkItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: RemoteNetworkItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: RemoteNetworkItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createRemoteNetworkFromDiscriminatorValue,
        queryParametersMapper: RemoteNetworkItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: RemoteNetworkItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createRemoteNetworkFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeRemoteNetwork,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
