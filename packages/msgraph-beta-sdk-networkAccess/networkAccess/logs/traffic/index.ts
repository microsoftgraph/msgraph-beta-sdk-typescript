/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createNetworkAccessTrafficCollectionResponseFromDiscriminatorValue, createNetworkAccessTrafficFromDiscriminatorValue, serializeNetworkAccessTraffic, type NetworkAccessTraffic, type NetworkAccessTrafficCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/networkaccess/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { NetworkAccessTrafficTransactionItemRequestBuilderRequestsMetadata, type NetworkAccessTrafficTransactionItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the traffic property of the microsoft.graph.networkaccess.logs entity.
 */
export interface TrafficRequestBuilder extends BaseRequestBuilder<TrafficRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the traffic property of the microsoft.graph.networkaccess.logs entity.
     * @param networkAccessTrafficTransactionId The unique identifier of networkAccessTraffic
     * @returns {NetworkAccessTrafficTransactionItemRequestBuilder}
     */
     byNetworkAccessTrafficTransactionId(networkAccessTrafficTransactionId: string) : NetworkAccessTrafficTransactionItemRequestBuilder;
    /**
     * Get a list of log events for traffic routed through the Global Secure Access services.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<NetworkAccessTrafficCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/networkaccess-logs-list-traffic?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<TrafficRequestBuilderGetQueryParameters> | undefined) : Promise<NetworkAccessTrafficCollectionResponse | undefined>;
    /**
     * Create new navigation property to traffic for networkAccess
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<NetworkAccessTraffic>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: NetworkAccessTraffic, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<NetworkAccessTraffic | undefined>;
    /**
     * Get a list of log events for traffic routed through the Global Secure Access services.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<TrafficRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create new navigation property to traffic for networkAccess
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: NetworkAccessTraffic, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get a list of log events for traffic routed through the Global Secure Access services.
 */
export interface TrafficRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Uri template for the request builder.
 */
export const TrafficRequestBuilderUriTemplate = "{+baseurl}/networkAccess/logs/traffic{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Provides operations to manage the traffic property of the microsoft.graph.networkaccess.logs entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
} as const;
/**
 * Provides operations to manage the traffic property of the microsoft.graph.networkaccess.logs entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Action: "action",
    ActionDesc: "action desc",
    AgentVersion: "agentVersion",
    AgentVersionDesc: "agentVersion desc",
    ApplicationSnapshot: "applicationSnapshot",
    ApplicationSnapshotDesc: "applicationSnapshot desc",
    ConnectionId: "connectionId",
    ConnectionIdDesc: "connectionId desc",
    CreatedDateTime: "createdDateTime",
    CreatedDateTimeDesc: "createdDateTime desc",
    DestinationFQDN: "destinationFQDN",
    DestinationFQDNDesc: "destinationFQDN desc",
    DestinationIp: "destinationIp",
    DestinationIpDesc: "destinationIp desc",
    DestinationPort: "destinationPort",
    DestinationPortDesc: "destinationPort desc",
    DestinationUrl: "destinationUrl",
    DestinationUrlDesc: "destinationUrl desc",
    DestinationWebCategory: "destinationWebCategory",
    DestinationWebCategoryDesc: "destinationWebCategory desc",
    DeviceCategory: "deviceCategory",
    DeviceCategoryDesc: "deviceCategory desc",
    DeviceId: "deviceId",
    DeviceIdDesc: "deviceId desc",
    DeviceOperatingSystem: "deviceOperatingSystem",
    DeviceOperatingSystemDesc: "deviceOperatingSystem desc",
    DeviceOperatingSystemVersion: "deviceOperatingSystemVersion",
    DeviceOperatingSystemVersionDesc: "deviceOperatingSystemVersion desc",
    FilteringProfileId: "filteringProfileId",
    FilteringProfileIdDesc: "filteringProfileId desc",
    FilteringProfileName: "filteringProfileName",
    FilteringProfileNameDesc: "filteringProfileName desc",
    Headers: "headers",
    HeadersDesc: "headers desc",
    InitiatingProcessName: "initiatingProcessName",
    InitiatingProcessNameDesc: "initiatingProcessName desc",
    NetworkProtocol: "networkProtocol",
    NetworkProtocolDesc: "networkProtocol desc",
    PolicyId: "policyId",
    PolicyIdDesc: "policyId desc",
    PolicyName: "policyName",
    PolicyNameDesc: "policyName desc",
    PolicyRuleId: "policyRuleId",
    PolicyRuleIdDesc: "policyRuleId desc",
    PolicyRuleName: "policyRuleName",
    PolicyRuleNameDesc: "policyRuleName desc",
    PrivateAccessDetails: "privateAccessDetails",
    PrivateAccessDetailsDesc: "privateAccessDetails desc",
    ReceivedBytes: "receivedBytes",
    ReceivedBytesDesc: "receivedBytes desc",
    ResourceTenantId: "resourceTenantId",
    ResourceTenantIdDesc: "resourceTenantId desc",
    SentBytes: "sentBytes",
    SentBytesDesc: "sentBytes desc",
    SessionId: "sessionId",
    SessionIdDesc: "sessionId desc",
    SourceIp: "sourceIp",
    SourceIpDesc: "sourceIp desc",
    SourcePort: "sourcePort",
    SourcePortDesc: "sourcePort desc",
    TenantId: "tenantId",
    TenantIdDesc: "tenantId desc",
    ThreatType: "threatType",
    ThreatTypeDesc: "threatType desc",
    TrafficType: "trafficType",
    TrafficTypeDesc: "trafficType desc",
    TransactionId: "transactionId",
    TransactionIdDesc: "transactionId desc",
    TransportProtocol: "transportProtocol",
    TransportProtocolDesc: "transportProtocol desc",
    UserId: "userId",
    UserIdDesc: "userId desc",
    UserPrincipalName: "userPrincipalName",
    UserPrincipalNameDesc: "userPrincipalName desc",
} as const;
/**
 * Provides operations to manage the traffic property of the microsoft.graph.networkaccess.logs entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Action: "action",
    AgentVersion: "agentVersion",
    ApplicationSnapshot: "applicationSnapshot",
    ConnectionId: "connectionId",
    CreatedDateTime: "createdDateTime",
    DestinationFQDN: "destinationFQDN",
    DestinationIp: "destinationIp",
    DestinationPort: "destinationPort",
    DestinationUrl: "destinationUrl",
    DestinationWebCategory: "destinationWebCategory",
    DeviceCategory: "deviceCategory",
    DeviceId: "deviceId",
    DeviceOperatingSystem: "deviceOperatingSystem",
    DeviceOperatingSystemVersion: "deviceOperatingSystemVersion",
    FilteringProfileId: "filteringProfileId",
    FilteringProfileName: "filteringProfileName",
    Headers: "headers",
    InitiatingProcessName: "initiatingProcessName",
    NetworkProtocol: "networkProtocol",
    PolicyId: "policyId",
    PolicyName: "policyName",
    PolicyRuleId: "policyRuleId",
    PolicyRuleName: "policyRuleName",
    PrivateAccessDetails: "privateAccessDetails",
    ReceivedBytes: "receivedBytes",
    ResourceTenantId: "resourceTenantId",
    SentBytes: "sentBytes",
    SessionId: "sessionId",
    SourceIp: "sourceIp",
    SourcePort: "sourcePort",
    TenantId: "tenantId",
    ThreatType: "threatType",
    TrafficType: "trafficType",
    TransactionId: "transactionId",
    TransportProtocol: "transportProtocol",
    UserId: "userId",
    UserPrincipalName: "userPrincipalName",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const TrafficRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const TrafficRequestBuilderNavigationMetadata: Record<Exclude<keyof TrafficRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byNetworkAccessTrafficTransactionId: {
        requestsMetadata: NetworkAccessTrafficTransactionItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["networkAccessTraffic%2DtransactionId"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const TrafficRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: TrafficRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createNetworkAccessTrafficCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: TrafficRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: TrafficRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createNetworkAccessTrafficFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeNetworkAccessTraffic,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
