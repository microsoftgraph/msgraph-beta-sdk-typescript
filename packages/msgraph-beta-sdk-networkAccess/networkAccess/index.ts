/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createNetworkAccessRootFromDiscriminatorValue, serializeNetworkAccessRoot, type NetworkAccessRoot } from '@microsoft/msgraph-beta-sdk/models/networkaccess/index.js';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/index.js';
// @ts-ignore
import { AlertsRequestBuilderNavigationMetadata, AlertsRequestBuilderRequestsMetadata, type AlertsRequestBuilder } from './alerts/index.js';
// @ts-ignore
import { ConnectivityRequestBuilderNavigationMetadata, ConnectivityRequestBuilderRequestsMetadata, type ConnectivityRequestBuilder } from './connectivity/index.js';
// @ts-ignore
import { FilteringPoliciesRequestBuilderNavigationMetadata, FilteringPoliciesRequestBuilderRequestsMetadata, type FilteringPoliciesRequestBuilder } from './filteringPolicies/index.js';
// @ts-ignore
import { FilteringProfilesRequestBuilderNavigationMetadata, FilteringProfilesRequestBuilderRequestsMetadata, type FilteringProfilesRequestBuilder } from './filteringProfiles/index.js';
// @ts-ignore
import { ForwardingPoliciesRequestBuilderNavigationMetadata, ForwardingPoliciesRequestBuilderRequestsMetadata, type ForwardingPoliciesRequestBuilder } from './forwardingPolicies/index.js';
// @ts-ignore
import { ForwardingProfilesRequestBuilderNavigationMetadata, ForwardingProfilesRequestBuilderRequestsMetadata, type ForwardingProfilesRequestBuilder } from './forwardingProfiles/index.js';
// @ts-ignore
import { LogsRequestBuilderNavigationMetadata, LogsRequestBuilderRequestsMetadata, type LogsRequestBuilder } from './logs/index.js';
// @ts-ignore
import { MicrosoftGraphNetworkaccessOnboardRequestBuilderRequestsMetadata, type MicrosoftGraphNetworkaccessOnboardRequestBuilder } from './microsoftGraphNetworkaccessOnboard/index.js';
// @ts-ignore
import { ReportsRequestBuilderNavigationMetadata, ReportsRequestBuilderRequestsMetadata, type ReportsRequestBuilder } from './reports/index.js';
// @ts-ignore
import { SettingsRequestBuilderNavigationMetadata, SettingsRequestBuilderRequestsMetadata, type SettingsRequestBuilder } from './settings/index.js';
// @ts-ignore
import { TenantStatusRequestBuilderRequestsMetadata, type TenantStatusRequestBuilder } from './tenantStatus/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the networkAccessRoot singleton.
 */
export interface NetworkAccessRequestBuilder extends BaseRequestBuilder<NetworkAccessRequestBuilder> {
    /**
     * Provides operations to manage the alerts property of the microsoft.graph.networkaccess.networkAccessRoot entity.
     */
    get alerts(): AlertsRequestBuilder;
    /**
     * Provides operations to manage the connectivity property of the microsoft.graph.networkaccess.networkAccessRoot entity.
     */
    get connectivity(): ConnectivityRequestBuilder;
    /**
     * Provides operations to manage the filteringPolicies property of the microsoft.graph.networkaccess.networkAccessRoot entity.
     */
    get filteringPolicies(): FilteringPoliciesRequestBuilder;
    /**
     * Provides operations to manage the filteringProfiles property of the microsoft.graph.networkaccess.networkAccessRoot entity.
     */
    get filteringProfiles(): FilteringProfilesRequestBuilder;
    /**
     * Provides operations to manage the forwardingPolicies property of the microsoft.graph.networkaccess.networkAccessRoot entity.
     */
    get forwardingPolicies(): ForwardingPoliciesRequestBuilder;
    /**
     * Provides operations to manage the forwardingProfiles property of the microsoft.graph.networkaccess.networkAccessRoot entity.
     */
    get forwardingProfiles(): ForwardingProfilesRequestBuilder;
    /**
     * Provides operations to manage the logs property of the microsoft.graph.networkaccess.networkAccessRoot entity.
     */
    get logs(): LogsRequestBuilder;
    /**
     * Provides operations to call the onboard method.
     */
    get microsoftGraphNetworkaccessOnboard(): MicrosoftGraphNetworkaccessOnboardRequestBuilder;
    /**
     * Provides operations to manage the reports property of the microsoft.graph.networkaccess.networkAccessRoot entity.
     */
    get reports(): ReportsRequestBuilder;
    /**
     * Provides operations to manage the settings property of the microsoft.graph.networkaccess.networkAccessRoot entity.
     */
    get settings(): SettingsRequestBuilder;
    /**
     * Provides operations to manage the tenantStatus property of the microsoft.graph.networkaccess.networkAccessRoot entity.
     */
    get tenantStatus(): TenantStatusRequestBuilder;
    /**
     * Get networkAccess
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<NetworkAccessRoot>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<NetworkAccessRequestBuilderGetQueryParameters> | undefined) : Promise<NetworkAccessRoot | undefined>;
    /**
     * Update networkAccess
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<NetworkAccessRoot>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: NetworkAccessRoot, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<NetworkAccessRoot | undefined>;
    /**
     * Get networkAccess
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<NetworkAccessRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update networkAccess
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: NetworkAccessRoot, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get networkAccess
 */
export interface NetworkAccessRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const NetworkAccessRequestBuilderUriTemplate = "{+baseurl}/networkAccess{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const NetworkAccessRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const NetworkAccessRequestBuilderNavigationMetadata: Record<Exclude<keyof NetworkAccessRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    alerts: {
        requestsMetadata: AlertsRequestBuilderRequestsMetadata,
        navigationMetadata: AlertsRequestBuilderNavigationMetadata,
    },
    connectivity: {
        requestsMetadata: ConnectivityRequestBuilderRequestsMetadata,
        navigationMetadata: ConnectivityRequestBuilderNavigationMetadata,
    },
    filteringPolicies: {
        requestsMetadata: FilteringPoliciesRequestBuilderRequestsMetadata,
        navigationMetadata: FilteringPoliciesRequestBuilderNavigationMetadata,
    },
    filteringProfiles: {
        requestsMetadata: FilteringProfilesRequestBuilderRequestsMetadata,
        navigationMetadata: FilteringProfilesRequestBuilderNavigationMetadata,
    },
    forwardingPolicies: {
        requestsMetadata: ForwardingPoliciesRequestBuilderRequestsMetadata,
        navigationMetadata: ForwardingPoliciesRequestBuilderNavigationMetadata,
    },
    forwardingProfiles: {
        requestsMetadata: ForwardingProfilesRequestBuilderRequestsMetadata,
        navigationMetadata: ForwardingProfilesRequestBuilderNavigationMetadata,
    },
    logs: {
        requestsMetadata: LogsRequestBuilderRequestsMetadata,
        navigationMetadata: LogsRequestBuilderNavigationMetadata,
    },
    microsoftGraphNetworkaccessOnboard: {
        requestsMetadata: MicrosoftGraphNetworkaccessOnboardRequestBuilderRequestsMetadata,
    },
    reports: {
        requestsMetadata: ReportsRequestBuilderRequestsMetadata,
        navigationMetadata: ReportsRequestBuilderNavigationMetadata,
    },
    settings: {
        requestsMetadata: SettingsRequestBuilderRequestsMetadata,
        navigationMetadata: SettingsRequestBuilderNavigationMetadata,
    },
    tenantStatus: {
        requestsMetadata: TenantStatusRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const NetworkAccessRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: NetworkAccessRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createNetworkAccessRootFromDiscriminatorValue,
        queryParametersMapper: NetworkAccessRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: NetworkAccessRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createNetworkAccessRootFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeNetworkAccessRoot,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
