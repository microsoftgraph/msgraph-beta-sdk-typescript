/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createFilteringProfileCollectionResponseFromDiscriminatorValue, createFilteringProfileFromDiscriminatorValue, serializeFilteringProfile, type FilteringProfile, type FilteringProfileCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/networkaccess/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { FilteringProfileItemRequestBuilderNavigationMetadata, FilteringProfileItemRequestBuilderRequestsMetadata, type FilteringProfileItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the filteringProfiles property of the microsoft.graph.networkaccess.networkAccessRoot entity.
 */
export interface FilteringProfilesRequestBuilder extends BaseRequestBuilder<FilteringProfilesRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the filteringProfiles property of the microsoft.graph.networkaccess.networkAccessRoot entity.
     * @param filteringProfileId The unique identifier of filteringProfile
     * @returns {FilteringProfileItemRequestBuilder}
     */
     byFilteringProfileId(filteringProfileId: string) : FilteringProfileItemRequestBuilder;
    /**
     * Get a list of the filteringProfile objects and their properties.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<FilteringProfileCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/networkaccess-filteringprofile-list?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<FilteringProfilesRequestBuilderGetQueryParameters> | undefined) : Promise<FilteringProfileCollectionResponse | undefined>;
    /**
     * Create new navigation property to filteringProfiles for networkAccess
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<FilteringProfile>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: FilteringProfile, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<FilteringProfile | undefined>;
    /**
     * Get a list of the filteringProfile objects and their properties.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<FilteringProfilesRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create new navigation property to filteringProfiles for networkAccess
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: FilteringProfile, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get a list of the filteringProfile objects and their properties.
 */
export interface FilteringProfilesRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: string[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: string[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Uri template for the request builder.
 */
export const FilteringProfilesRequestBuilderUriTemplate = "{+baseurl}/networkAccess/filteringProfiles{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const FilteringProfilesRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const FilteringProfilesRequestBuilderNavigationMetadata: Record<Exclude<keyof FilteringProfilesRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byFilteringProfileId: {
        requestsMetadata: FilteringProfileItemRequestBuilderRequestsMetadata,
        navigationMetadata: FilteringProfileItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["filteringProfile%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const FilteringProfilesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: FilteringProfilesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createFilteringProfileCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: FilteringProfilesRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: FilteringProfilesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createFilteringProfileFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeFilteringProfile,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
