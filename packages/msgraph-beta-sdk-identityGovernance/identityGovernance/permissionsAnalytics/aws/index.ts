/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createPermissionsAnalyticsFromDiscriminatorValue, serializePermissionsAnalytics, type PermissionsAnalytics } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { FindingsRequestBuilderNavigationMetadata, FindingsRequestBuilderRequestsMetadata, type FindingsRequestBuilder } from './findings/';
import { PermissionsCreepIndexDistributionsRequestBuilderNavigationMetadata, PermissionsCreepIndexDistributionsRequestBuilderRequestsMetadata, type PermissionsCreepIndexDistributionsRequestBuilder } from './permissionsCreepIndexDistributions/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the aws property of the microsoft.graph.permissionsAnalyticsAggregation entity.
 */
export interface AwsRequestBuilder extends BaseRequestBuilder<AwsRequestBuilder> {
    /**
     * Provides operations to manage the findings property of the microsoft.graph.permissionsAnalytics entity.
     */
    get findings(): FindingsRequestBuilder;
    /**
     * Provides operations to manage the permissionsCreepIndexDistributions property of the microsoft.graph.permissionsAnalytics entity.
     */
    get permissionsCreepIndexDistributions(): PermissionsCreepIndexDistributionsRequestBuilder;
    /**
     * Delete navigation property aws for identityGovernance
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * AWS permissions analytics findings.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<PermissionsAnalytics>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<AwsRequestBuilderGetQueryParameters> | undefined) : Promise<PermissionsAnalytics | undefined>;
    /**
     * Update the navigation property aws in identityGovernance
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<PermissionsAnalytics>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: PermissionsAnalytics, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<PermissionsAnalytics | undefined>;
    /**
     * Delete navigation property aws for identityGovernance
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * AWS permissions analytics findings.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<AwsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property aws in identityGovernance
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: PermissionsAnalytics, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * AWS permissions analytics findings.
 */
export interface AwsRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
}
export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Uri template for the request builder.
 */
export const AwsRequestBuilderUriTemplate = "{+baseurl}/identityGovernance/permissionsAnalytics/aws{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const AwsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const AwsRequestBuilderNavigationMetadata: Record<Exclude<keyof AwsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    findings: {
        requestsMetadata: FindingsRequestBuilderRequestsMetadata,
        navigationMetadata: FindingsRequestBuilderNavigationMetadata,
    },
    permissionsCreepIndexDistributions: {
        requestsMetadata: PermissionsCreepIndexDistributionsRequestBuilderRequestsMetadata,
        navigationMetadata: PermissionsCreepIndexDistributionsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const AwsRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: AwsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: AwsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createPermissionsAnalyticsFromDiscriminatorValue,
        queryParametersMapper: AwsRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: AwsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createPermissionsAnalyticsFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializePermissionsAnalytics,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Provides operations to manage the aws property of the microsoft.graph.permissionsAnalyticsAggregation entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    Findings: "findings",
    PermissionsCreepIndexDistributions: "permissionsCreepIndexDistributions",
} as const;
/**
 * Provides operations to manage the aws property of the microsoft.graph.permissionsAnalyticsAggregation entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    Findings: "findings",
    PermissionsCreepIndexDistributions: "permissionsCreepIndexDistributions",
} as const;
/* tslint:enable */
/* eslint-enable */
