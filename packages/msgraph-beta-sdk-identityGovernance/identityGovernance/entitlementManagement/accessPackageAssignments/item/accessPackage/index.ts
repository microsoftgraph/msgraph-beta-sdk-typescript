/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createAccessPackageFromDiscriminatorValue, serializeAccessPackage, type AccessPackage } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { AccessPackageAssignmentPoliciesRequestBuilderNavigationMetadata, AccessPackageAssignmentPoliciesRequestBuilderRequestsMetadata, AccessPackageAssignmentPoliciesRequestBuilderUriTemplate, type AccessPackageAssignmentPoliciesRequestBuilder } from './accessPackageAssignmentPolicies/';
import { AccessPackageCatalogRequestBuilderRequestsMetadata, AccessPackageCatalogRequestBuilderUriTemplate, type AccessPackageCatalogRequestBuilder } from './accessPackageCatalog/';
import { AccessPackageResourceRoleScopesRequestBuilderNavigationMetadata, AccessPackageResourceRoleScopesRequestBuilderRequestsMetadata, AccessPackageResourceRoleScopesRequestBuilderUriTemplate, type AccessPackageResourceRoleScopesRequestBuilder } from './accessPackageResourceRoleScopes/';
import { AccessPackagesIncompatibleWithRequestBuilderNavigationMetadata, AccessPackagesIncompatibleWithRequestBuilderRequestsMetadata, AccessPackagesIncompatibleWithRequestBuilderUriTemplate, type AccessPackagesIncompatibleWithRequestBuilder } from './accessPackagesIncompatibleWith/';
import { GetApplicablePolicyRequirementsRequestBuilderRequestsMetadata, GetApplicablePolicyRequirementsRequestBuilderUriTemplate, type GetApplicablePolicyRequirementsRequestBuilder } from './getApplicablePolicyRequirements/';
import { IncompatibleAccessPackagesRequestBuilderNavigationMetadata, IncompatibleAccessPackagesRequestBuilderRequestsMetadata, IncompatibleAccessPackagesRequestBuilderUriTemplate, type IncompatibleAccessPackagesRequestBuilder } from './incompatibleAccessPackages/';
import { IncompatibleGroupsRequestBuilderNavigationMetadata, IncompatibleGroupsRequestBuilderRequestsMetadata, IncompatibleGroupsRequestBuilderUriTemplate, type IncompatibleGroupsRequestBuilder } from './incompatibleGroups/';
import { MoveToCatalogRequestBuilderRequestsMetadata, MoveToCatalogRequestBuilderUriTemplate, type MoveToCatalogRequestBuilder } from './moveToCatalog/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the accessPackage property of the microsoft.graph.accessPackageAssignment entity.
 */
export interface AccessPackageRequestBuilder extends BaseRequestBuilder<AccessPackageRequestBuilder> {
    /**
     * Provides operations to manage the accessPackageAssignmentPolicies property of the microsoft.graph.accessPackage entity.
     */
    get accessPackageAssignmentPolicies(): AccessPackageAssignmentPoliciesRequestBuilder;
    /**
     * Provides operations to manage the accessPackageCatalog property of the microsoft.graph.accessPackage entity.
     */
    get accessPackageCatalog(): AccessPackageCatalogRequestBuilder;
    /**
     * Provides operations to manage the accessPackageResourceRoleScopes property of the microsoft.graph.accessPackage entity.
     */
    get accessPackageResourceRoleScopes(): AccessPackageResourceRoleScopesRequestBuilder;
    /**
     * Provides operations to manage the accessPackagesIncompatibleWith property of the microsoft.graph.accessPackage entity.
     */
    get accessPackagesIncompatibleWith(): AccessPackagesIncompatibleWithRequestBuilder;
    /**
     * Provides operations to call the getApplicablePolicyRequirements method.
     */
    get getApplicablePolicyRequirements(): GetApplicablePolicyRequirementsRequestBuilder;
    /**
     * Provides operations to manage the incompatibleAccessPackages property of the microsoft.graph.accessPackage entity.
     */
    get incompatibleAccessPackages(): IncompatibleAccessPackagesRequestBuilder;
    /**
     * Provides operations to manage the incompatibleGroups property of the microsoft.graph.accessPackage entity.
     */
    get incompatibleGroups(): IncompatibleGroupsRequestBuilder;
    /**
     * Provides operations to call the moveToCatalog method.
     */
    get moveToCatalog(): MoveToCatalogRequestBuilder;
    /**
     * Delete navigation property accessPackage for identityGovernance
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Read-only. Nullable. Supports $filter (eq) on the id property and $expand query parameters.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of AccessPackage
     */
     get(requestConfiguration?: RequestConfiguration<AccessPackageRequestBuilderGetQueryParameters> | undefined) : Promise<AccessPackage | undefined>;
    /**
     * Update the navigation property accessPackage in identityGovernance
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of AccessPackage
     */
     patch(body: AccessPackage, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<AccessPackage | undefined>;
    /**
     * Delete navigation property accessPackage for identityGovernance
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Read-only. Nullable. Supports $filter (eq) on the id property and $expand query parameters.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<AccessPackageRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property accessPackage in identityGovernance
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: AccessPackage, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Read-only. Nullable. Supports $filter (eq) on the id property and $expand query parameters.
 */
export interface AccessPackageRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const AccessPackageRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const AccessPackageRequestBuilderNavigationMetadata: Record<Exclude<keyof AccessPackageRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    accessPackageAssignmentPolicies: {
        uriTemplate: AccessPackageAssignmentPoliciesRequestBuilderUriTemplate,
        requestsMetadata: AccessPackageAssignmentPoliciesRequestBuilderRequestsMetadata,
        navigationMetadata: AccessPackageAssignmentPoliciesRequestBuilderNavigationMetadata,
    },
    accessPackageCatalog: {
        uriTemplate: AccessPackageCatalogRequestBuilderUriTemplate,
        requestsMetadata: AccessPackageCatalogRequestBuilderRequestsMetadata,
    },
    accessPackageResourceRoleScopes: {
        uriTemplate: AccessPackageResourceRoleScopesRequestBuilderUriTemplate,
        requestsMetadata: AccessPackageResourceRoleScopesRequestBuilderRequestsMetadata,
        navigationMetadata: AccessPackageResourceRoleScopesRequestBuilderNavigationMetadata,
    },
    accessPackagesIncompatibleWith: {
        uriTemplate: AccessPackagesIncompatibleWithRequestBuilderUriTemplate,
        requestsMetadata: AccessPackagesIncompatibleWithRequestBuilderRequestsMetadata,
        navigationMetadata: AccessPackagesIncompatibleWithRequestBuilderNavigationMetadata,
    },
    getApplicablePolicyRequirements: {
        uriTemplate: GetApplicablePolicyRequirementsRequestBuilderUriTemplate,
        requestsMetadata: GetApplicablePolicyRequirementsRequestBuilderRequestsMetadata,
    },
    incompatibleAccessPackages: {
        uriTemplate: IncompatibleAccessPackagesRequestBuilderUriTemplate,
        requestsMetadata: IncompatibleAccessPackagesRequestBuilderRequestsMetadata,
        navigationMetadata: IncompatibleAccessPackagesRequestBuilderNavigationMetadata,
    },
    incompatibleGroups: {
        uriTemplate: IncompatibleGroupsRequestBuilderUriTemplate,
        requestsMetadata: IncompatibleGroupsRequestBuilderRequestsMetadata,
        navigationMetadata: IncompatibleGroupsRequestBuilderNavigationMetadata,
    },
    moveToCatalog: {
        uriTemplate: MoveToCatalogRequestBuilderUriTemplate,
        requestsMetadata: MoveToCatalogRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const AccessPackageRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createAccessPackageFromDiscriminatorValue,
        queryParametersMapper: AccessPackageRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createAccessPackageFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeAccessPackage,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const AccessPackageRequestBuilderUriTemplate = "{+baseurl}/identityGovernance/entitlementManagement/accessPackageAssignments/{accessPackageAssignment%2Did}/accessPackage{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
