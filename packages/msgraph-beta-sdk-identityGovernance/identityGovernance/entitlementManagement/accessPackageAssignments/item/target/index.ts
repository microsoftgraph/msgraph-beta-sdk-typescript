/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createAccessPackageSubjectFromDiscriminatorValue, serializeAccessPackageSubject, type AccessPackageSubject } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { ConnectedOrganizationRequestBuilderRequestsMetadata, type ConnectedOrganizationRequestBuilder } from './connectedOrganization/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the target property of the microsoft.graph.accessPackageAssignment entity.
 */
export interface TargetRequestBuilder extends BaseRequestBuilder<TargetRequestBuilder> {
    /**
     * Provides operations to manage the connectedOrganization property of the microsoft.graph.accessPackageSubject entity.
     */
    get connectedOrganization(): ConnectedOrganizationRequestBuilder;
    /**
     * Delete navigation property target for identityGovernance
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * The subject of the access package assignment. Read-only. Nullable. Supports $expand. Supports $filter (eq) on objectId.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<AccessPackageSubject>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<TargetRequestBuilderGetQueryParameters> | undefined) : Promise<AccessPackageSubject | undefined>;
    /**
     * Update the navigation property target in identityGovernance
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<AccessPackageSubject>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: AccessPackageSubject, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<AccessPackageSubject | undefined>;
    /**
     * Delete navigation property target for identityGovernance
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * The subject of the access package assignment. Read-only. Nullable. Supports $expand. Supports $filter (eq) on objectId.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<TargetRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property target in identityGovernance
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: AccessPackageSubject, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * The subject of the access package assignment. Read-only. Nullable. Supports $expand. Supports $filter (eq) on objectId.
 */
export interface TargetRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
}
/**
 * Uri template for the request builder.
 */
export const TargetRequestBuilderUriTemplate = "{+baseurl}/identityGovernance/entitlementManagement/accessPackageAssignments/{accessPackageAssignment%2Did}/target{?%24expand,%24select}";
/**
 * Provides operations to manage the target property of the microsoft.graph.accessPackageAssignment entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    ConnectedOrganization: "connectedOrganization",
} as const;
/**
 * Provides operations to manage the target property of the microsoft.graph.accessPackageAssignment entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    AltSecId: "altSecId",
    CleanupScheduledDateTime: "cleanupScheduledDateTime",
    ConnectedOrganizationId: "connectedOrganizationId",
    DisplayName: "displayName",
    Email: "email",
    ObjectId: "objectId",
    OnPremisesSecurityIdentifier: "onPremisesSecurityIdentifier",
    PrincipalName: "principalName",
    SubjectLifecycle: "subjectLifecycle",
    Type: "type",
    ConnectedOrganization: "connectedOrganization",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const TargetRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const TargetRequestBuilderNavigationMetadata: Record<Exclude<keyof TargetRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    connectedOrganization: {
        requestsMetadata: ConnectedOrganizationRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const TargetRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: TargetRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: TargetRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createAccessPackageSubjectFromDiscriminatorValue,
        queryParametersMapper: TargetRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: TargetRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createAccessPackageSubjectFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeAccessPackageSubject,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
