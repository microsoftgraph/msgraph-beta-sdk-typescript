/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createPermissionsManagementFromDiscriminatorValue, serializePermissionsManagement, type PermissionsManagement } from '@microsoft/msgraph-beta-sdk/models/';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
// @ts-ignore
import { PermissionsRequestChangesRequestBuilderNavigationMetadata, PermissionsRequestChangesRequestBuilderRequestsMetadata, type PermissionsRequestChangesRequestBuilder } from './permissionsRequestChanges/';
// @ts-ignore
import { ScheduledPermissionsApprovalsRequestBuilderNavigationMetadata, ScheduledPermissionsApprovalsRequestBuilderRequestsMetadata, type ScheduledPermissionsApprovalsRequestBuilder } from './scheduledPermissionsApprovals/';
// @ts-ignore
import { ScheduledPermissionsRequestsRequestBuilderNavigationMetadata, ScheduledPermissionsRequestsRequestBuilderRequestsMetadata, type ScheduledPermissionsRequestsRequestBuilder } from './scheduledPermissionsRequests/';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the permissionsManagement property of the microsoft.graph.identityGovernance entity.
 */
export interface PermissionsManagementRequestBuilder extends BaseRequestBuilder<PermissionsManagementRequestBuilder> {
    /**
     * Provides operations to manage the permissionsRequestChanges property of the microsoft.graph.permissionsManagement entity.
     */
    get permissionsRequestChanges(): PermissionsRequestChangesRequestBuilder;
    /**
     * Provides operations to manage the scheduledPermissionsApprovals property of the microsoft.graph.permissionsManagement entity.
     */
    get scheduledPermissionsApprovals(): ScheduledPermissionsApprovalsRequestBuilder;
    /**
     * Provides operations to manage the scheduledPermissionsRequests property of the microsoft.graph.permissionsManagement entity.
     */
    get scheduledPermissionsRequests(): ScheduledPermissionsRequestsRequestBuilder;
    /**
     * Delete navigation property permissionsManagement for identityGovernance
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get permissionsManagement from identityGovernance
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<PermissionsManagement>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<PermissionsManagementRequestBuilderGetQueryParameters> | undefined) : Promise<PermissionsManagement | undefined>;
    /**
     * Update the navigation property permissionsManagement in identityGovernance
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<PermissionsManagement>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: PermissionsManagement, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<PermissionsManagement | undefined>;
    /**
     * Delete navigation property permissionsManagement for identityGovernance
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Get permissionsManagement from identityGovernance
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<PermissionsManagementRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property permissionsManagement in identityGovernance
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: PermissionsManagement, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get permissionsManagement from identityGovernance
 */
export interface PermissionsManagementRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const PermissionsManagementRequestBuilderUriTemplate = "{+baseurl}/identityGovernance/permissionsManagement{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const PermissionsManagementRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const PermissionsManagementRequestBuilderNavigationMetadata: Record<Exclude<keyof PermissionsManagementRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    permissionsRequestChanges: {
        requestsMetadata: PermissionsRequestChangesRequestBuilderRequestsMetadata,
        navigationMetadata: PermissionsRequestChangesRequestBuilderNavigationMetadata,
    },
    scheduledPermissionsApprovals: {
        requestsMetadata: ScheduledPermissionsApprovalsRequestBuilderRequestsMetadata,
        navigationMetadata: ScheduledPermissionsApprovalsRequestBuilderNavigationMetadata,
    },
    scheduledPermissionsRequests: {
        requestsMetadata: ScheduledPermissionsRequestsRequestBuilderRequestsMetadata,
        navigationMetadata: ScheduledPermissionsRequestsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const PermissionsManagementRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: PermissionsManagementRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: PermissionsManagementRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createPermissionsManagementFromDiscriminatorValue,
        queryParametersMapper: PermissionsManagementRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: PermissionsManagementRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createPermissionsManagementFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializePermissionsManagement,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
