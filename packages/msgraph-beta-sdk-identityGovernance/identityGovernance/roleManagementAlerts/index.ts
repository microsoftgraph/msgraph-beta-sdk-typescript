/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createRoleManagementAlertFromDiscriminatorValue, serializeRoleManagementAlert, type RoleManagementAlert } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { AlertConfigurationsRequestBuilderNavigationMetadata, AlertConfigurationsRequestBuilderRequestsMetadata, type AlertConfigurationsRequestBuilder } from './alertConfigurations/';
import { AlertDefinitionsRequestBuilderNavigationMetadata, AlertDefinitionsRequestBuilderRequestsMetadata, type AlertDefinitionsRequestBuilder } from './alertDefinitions/';
import { AlertsRequestBuilderNavigationMetadata, AlertsRequestBuilderRequestsMetadata, type AlertsRequestBuilder } from './alerts/';
import { OperationsRequestBuilderNavigationMetadata, OperationsRequestBuilderRequestsMetadata, type OperationsRequestBuilder } from './operations/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the roleManagementAlerts property of the microsoft.graph.identityGovernance entity.
 */
export interface RoleManagementAlertsRequestBuilder extends BaseRequestBuilder<RoleManagementAlertsRequestBuilder> {
    /**
     * Provides operations to manage the alertConfigurations property of the microsoft.graph.roleManagementAlert entity.
     */
    get alertConfigurations(): AlertConfigurationsRequestBuilder;
    /**
     * Provides operations to manage the alertDefinitions property of the microsoft.graph.roleManagementAlert entity.
     */
    get alertDefinitions(): AlertDefinitionsRequestBuilder;
    /**
     * Provides operations to manage the alerts property of the microsoft.graph.roleManagementAlert entity.
     */
    get alerts(): AlertsRequestBuilder;
    /**
     * Provides operations to manage the operations property of the microsoft.graph.roleManagementAlert entity.
     */
    get operations(): OperationsRequestBuilder;
    /**
     * Delete navigation property roleManagementAlerts for identityGovernance
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get roleManagementAlerts from identityGovernance
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<RoleManagementAlert>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<RoleManagementAlertsRequestBuilderGetQueryParameters> | undefined) : Promise<RoleManagementAlert | undefined>;
    /**
     * Update the navigation property roleManagementAlerts in identityGovernance
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<RoleManagementAlert>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: RoleManagementAlert, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<RoleManagementAlert | undefined>;
    /**
     * Delete navigation property roleManagementAlerts for identityGovernance
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Get roleManagementAlerts from identityGovernance
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<RoleManagementAlertsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property roleManagementAlerts in identityGovernance
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: RoleManagementAlert, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get roleManagementAlerts from identityGovernance
 */
export interface RoleManagementAlertsRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const RoleManagementAlertsRequestBuilderUriTemplate = "{+baseurl}/identityGovernance/roleManagementAlerts{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const RoleManagementAlertsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const RoleManagementAlertsRequestBuilderNavigationMetadata: Record<Exclude<keyof RoleManagementAlertsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    alertConfigurations: {
        requestsMetadata: AlertConfigurationsRequestBuilderRequestsMetadata,
        navigationMetadata: AlertConfigurationsRequestBuilderNavigationMetadata,
    },
    alertDefinitions: {
        requestsMetadata: AlertDefinitionsRequestBuilderRequestsMetadata,
        navigationMetadata: AlertDefinitionsRequestBuilderNavigationMetadata,
    },
    alerts: {
        requestsMetadata: AlertsRequestBuilderRequestsMetadata,
        navigationMetadata: AlertsRequestBuilderNavigationMetadata,
    },
    operations: {
        requestsMetadata: OperationsRequestBuilderRequestsMetadata,
        navigationMetadata: OperationsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const RoleManagementAlertsRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: RoleManagementAlertsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        uriTemplate: RoleManagementAlertsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createRoleManagementAlertFromDiscriminatorValue,
        queryParametersMapper: RoleManagementAlertsRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: RoleManagementAlertsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createRoleManagementAlertFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeRoleManagementAlert,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
