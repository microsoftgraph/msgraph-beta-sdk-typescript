/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createDeviceFromDiscriminatorValue, createKeyCredentialFromDiscriminatorValue, serializeDevice, serializeKeyCredential, type Device, type KeyCredential } from '@microsoft/msgraph-beta-sdk/models/index.js';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CreateDeviceFromTemplatePostRequestBody}
 */
// @ts-ignore
export function createCreateDeviceFromTemplatePostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCreateDeviceFromTemplatePostRequestBody;
}
export interface CreateDeviceFromTemplatePostRequestBody extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * The accountEnabled property
     */
    accountEnabled?: boolean | null;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The alternativeNames property
     */
    alternativeNames?: string[] | null;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The externalDeviceId property
     */
    externalDeviceId?: string | null;
    /**
     * The externalSourceName property
     */
    externalSourceName?: string | null;
    /**
     * The keyCredential property
     */
    keyCredential?: KeyCredential | null;
    /**
     * The operatingSystemVersion property
     */
    operatingSystemVersion?: string | null;
}
/**
 * Provides operations to call the createDeviceFromTemplate method.
 */
export interface CreateDeviceFromTemplateRequestBuilder extends BaseRequestBuilder<CreateDeviceFromTemplateRequestBuilder> {
    /**
     * Invoke action createDeviceFromTemplate
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Device>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: CreateDeviceFromTemplatePostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Device | undefined>;
    /**
     * Invoke action createDeviceFromTemplate
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: CreateDeviceFromTemplatePostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCreateDeviceFromTemplatePostRequestBody(createDeviceFromTemplatePostRequestBody: Partial<CreateDeviceFromTemplatePostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "accountEnabled": n => { createDeviceFromTemplatePostRequestBody.accountEnabled = n.getBooleanValue(); },
        "alternativeNames": n => { createDeviceFromTemplatePostRequestBody.alternativeNames = n.getCollectionOfPrimitiveValues<string>(); },
        "backingStoreEnabled": n => { createDeviceFromTemplatePostRequestBody.backingStoreEnabled = true; },
        "externalDeviceId": n => { createDeviceFromTemplatePostRequestBody.externalDeviceId = n.getStringValue(); },
        "externalSourceName": n => { createDeviceFromTemplatePostRequestBody.externalSourceName = n.getStringValue(); },
        "keyCredential": n => { createDeviceFromTemplatePostRequestBody.keyCredential = n.getObjectValue<KeyCredential>(createKeyCredentialFromDiscriminatorValue); },
        "operatingSystemVersion": n => { createDeviceFromTemplatePostRequestBody.operatingSystemVersion = n.getStringValue(); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCreateDeviceFromTemplatePostRequestBody(writer: SerializationWriter, createDeviceFromTemplatePostRequestBody: Partial<CreateDeviceFromTemplatePostRequestBody> | undefined | null = {}) : void {
    if (createDeviceFromTemplatePostRequestBody) {
        writer.writeBooleanValue("accountEnabled", createDeviceFromTemplatePostRequestBody.accountEnabled);
        writer.writeCollectionOfPrimitiveValues<string>("alternativeNames", createDeviceFromTemplatePostRequestBody.alternativeNames);
        writer.writeStringValue("externalDeviceId", createDeviceFromTemplatePostRequestBody.externalDeviceId);
        writer.writeStringValue("externalSourceName", createDeviceFromTemplatePostRequestBody.externalSourceName);
        writer.writeObjectValue<KeyCredential>("keyCredential", createDeviceFromTemplatePostRequestBody.keyCredential, serializeKeyCredential);
        writer.writeStringValue("operatingSystemVersion", createDeviceFromTemplatePostRequestBody.operatingSystemVersion);
        writer.writeAdditionalData(createDeviceFromTemplatePostRequestBody.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const CreateDeviceFromTemplateRequestBuilderUriTemplate = "{+baseurl}/directory/templates/deviceTemplates/{deviceTemplate%2Did}/createDeviceFromTemplate";
/**
 * Metadata for all the requests in the request builder.
 */
export const CreateDeviceFromTemplateRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: CreateDeviceFromTemplateRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDeviceFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCreateDeviceFromTemplatePostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
