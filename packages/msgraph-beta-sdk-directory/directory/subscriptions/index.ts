/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createCompanySubscriptionCollectionResponseFromDiscriminatorValue, createCompanySubscriptionFromDiscriminatorValue, serializeCompanySubscription, type CompanySubscription, type CompanySubscriptionCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { CompanySubscriptionItemRequestBuilderRequestsMetadata, type CompanySubscriptionItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the subscriptions property of the microsoft.graph.directory entity.
 */
export interface SubscriptionsRequestBuilder extends BaseRequestBuilder<SubscriptionsRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the subscriptions property of the microsoft.graph.directory entity.
     * @param companySubscriptionId The unique identifier of companySubscription
     * @returns {CompanySubscriptionItemRequestBuilder}
     */
     byCompanySubscriptionId(companySubscriptionId: string) : CompanySubscriptionItemRequestBuilder;
    /**
     * Get the list of commercial subscriptions that an organization has acquired.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<CompanySubscriptionCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/directory-list-subscriptions?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<SubscriptionsRequestBuilderGetQueryParameters> | undefined) : Promise<CompanySubscriptionCollectionResponse | undefined>;
    /**
     * Create new navigation property to subscriptions for directory
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<CompanySubscription>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: CompanySubscription, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<CompanySubscription | undefined>;
    /**
     * Get the list of commercial subscriptions that an organization has acquired.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<SubscriptionsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create new navigation property to subscriptions for directory
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: CompanySubscription, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get the list of commercial subscriptions that an organization has acquired.
 */
export interface SubscriptionsRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Uri template for the request builder.
 */
export const SubscriptionsRequestBuilderUriTemplate = "{+baseurl}/directory/subscriptions{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Provides operations to manage the subscriptions property of the microsoft.graph.directory entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
} as const;
/**
 * Provides operations to manage the subscriptions property of the microsoft.graph.directory entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    CommerceSubscriptionId: "commerceSubscriptionId",
    CommerceSubscriptionIdDesc: "commerceSubscriptionId desc",
    CreatedDateTime: "createdDateTime",
    CreatedDateTimeDesc: "createdDateTime desc",
    IsTrial: "isTrial",
    IsTrialDesc: "isTrial desc",
    NextLifecycleDateTime: "nextLifecycleDateTime",
    NextLifecycleDateTimeDesc: "nextLifecycleDateTime desc",
    OcpSubscriptionId: "ocpSubscriptionId",
    OcpSubscriptionIdDesc: "ocpSubscriptionId desc",
    OwnerId: "ownerId",
    OwnerIdDesc: "ownerId desc",
    OwnerTenantId: "ownerTenantId",
    OwnerTenantIdDesc: "ownerTenantId desc",
    OwnerType: "ownerType",
    OwnerTypeDesc: "ownerType desc",
    ServiceStatus: "serviceStatus",
    ServiceStatusDesc: "serviceStatus desc",
    SkuId: "skuId",
    SkuIdDesc: "skuId desc",
    SkuPartNumber: "skuPartNumber",
    SkuPartNumberDesc: "skuPartNumber desc",
    Status: "status",
    StatusDesc: "status desc",
    TotalLicenses: "totalLicenses",
    TotalLicensesDesc: "totalLicenses desc",
} as const;
/**
 * Provides operations to manage the subscriptions property of the microsoft.graph.directory entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    CommerceSubscriptionId: "commerceSubscriptionId",
    CreatedDateTime: "createdDateTime",
    IsTrial: "isTrial",
    NextLifecycleDateTime: "nextLifecycleDateTime",
    OcpSubscriptionId: "ocpSubscriptionId",
    OwnerId: "ownerId",
    OwnerTenantId: "ownerTenantId",
    OwnerType: "ownerType",
    ServiceStatus: "serviceStatus",
    SkuId: "skuId",
    SkuPartNumber: "skuPartNumber",
    Status: "status",
    TotalLicenses: "totalLicenses",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const SubscriptionsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const SubscriptionsRequestBuilderNavigationMetadata: Record<Exclude<keyof SubscriptionsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byCompanySubscriptionId: {
        requestsMetadata: CompanySubscriptionItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["companySubscription%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const SubscriptionsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: SubscriptionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createCompanySubscriptionCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: SubscriptionsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: SubscriptionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createCompanySubscriptionFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCompanySubscription,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
