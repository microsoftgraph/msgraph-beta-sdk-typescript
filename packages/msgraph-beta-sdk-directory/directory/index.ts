/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createDirectoryFromDiscriminatorValue, serializeDirectory, type Directory } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { AdministrativeUnitsRequestBuilderNavigationMetadata, AdministrativeUnitsRequestBuilderRequestsMetadata, AdministrativeUnitsRequestBuilderUriTemplate, type AdministrativeUnitsRequestBuilder } from './administrativeUnits/';
import { AttributeSetsRequestBuilderNavigationMetadata, AttributeSetsRequestBuilderRequestsMetadata, AttributeSetsRequestBuilderUriTemplate, type AttributeSetsRequestBuilder } from './attributeSets/';
import { CertificateAuthoritiesRequestBuilderNavigationMetadata, CertificateAuthoritiesRequestBuilderRequestsMetadata, CertificateAuthoritiesRequestBuilderUriTemplate, type CertificateAuthoritiesRequestBuilder } from './certificateAuthorities/';
import { CustomSecurityAttributeDefinitionsRequestBuilderNavigationMetadata, CustomSecurityAttributeDefinitionsRequestBuilderRequestsMetadata, CustomSecurityAttributeDefinitionsRequestBuilderUriTemplate, type CustomSecurityAttributeDefinitionsRequestBuilder } from './customSecurityAttributeDefinitions/';
import { DeletedItemsRequestBuilderNavigationMetadata, DeletedItemsRequestBuilderRequestsMetadata, DeletedItemsRequestBuilderUriTemplate, type DeletedItemsRequestBuilder } from './deletedItems/';
import { DeviceLocalCredentialsRequestBuilderNavigationMetadata, DeviceLocalCredentialsRequestBuilderRequestsMetadata, DeviceLocalCredentialsRequestBuilderUriTemplate, type DeviceLocalCredentialsRequestBuilder } from './deviceLocalCredentials/';
import { FeatureRolloutPoliciesRequestBuilderNavigationMetadata, FeatureRolloutPoliciesRequestBuilderRequestsMetadata, FeatureRolloutPoliciesRequestBuilderUriTemplate, type FeatureRolloutPoliciesRequestBuilder } from './featureRolloutPolicies/';
import { FederationConfigurationsRequestBuilderNavigationMetadata, FederationConfigurationsRequestBuilderRequestsMetadata, FederationConfigurationsRequestBuilderUriTemplate, type FederationConfigurationsRequestBuilder } from './federationConfigurations/';
import { ImpactedResourcesRequestBuilderNavigationMetadata, ImpactedResourcesRequestBuilderRequestsMetadata, ImpactedResourcesRequestBuilderUriTemplate, type ImpactedResourcesRequestBuilder } from './impactedResources/';
import { InboundSharedUserProfilesRequestBuilderNavigationMetadata, InboundSharedUserProfilesRequestBuilderRequestsMetadata, InboundSharedUserProfilesRequestBuilderUriTemplate, type InboundSharedUserProfilesRequestBuilder } from './inboundSharedUserProfiles/';
import { OnPremisesSynchronizationRequestBuilderNavigationMetadata, OnPremisesSynchronizationRequestBuilderRequestsMetadata, OnPremisesSynchronizationRequestBuilderUriTemplate, type OnPremisesSynchronizationRequestBuilder } from './onPremisesSynchronization/';
import { OutboundSharedUserProfilesRequestBuilderNavigationMetadata, OutboundSharedUserProfilesRequestBuilderRequestsMetadata, OutboundSharedUserProfilesRequestBuilderUriTemplate, type OutboundSharedUserProfilesRequestBuilder } from './outboundSharedUserProfiles/';
import { RecommendationsRequestBuilderNavigationMetadata, RecommendationsRequestBuilderRequestsMetadata, RecommendationsRequestBuilderUriTemplate, type RecommendationsRequestBuilder } from './recommendations/';
import { SharedEmailDomainsRequestBuilderNavigationMetadata, SharedEmailDomainsRequestBuilderRequestsMetadata, SharedEmailDomainsRequestBuilderUriTemplate, type SharedEmailDomainsRequestBuilder } from './sharedEmailDomains/';
import { SubscriptionsRequestBuilderNavigationMetadata, SubscriptionsRequestBuilderRequestsMetadata, SubscriptionsRequestBuilderUriTemplate, type SubscriptionsRequestBuilder } from './subscriptions/';
import { SubscriptionsWithCommerceSubscriptionIdRequestBuilderRequestsMetadata, SubscriptionsWithCommerceSubscriptionIdRequestBuilderUriTemplate, type SubscriptionsWithCommerceSubscriptionIdRequestBuilder } from './subscriptionsWithCommerceSubscriptionId/';
import { SubscriptionsWithOcpSubscriptionIdRequestBuilderRequestsMetadata, SubscriptionsWithOcpSubscriptionIdRequestBuilderUriTemplate, type SubscriptionsWithOcpSubscriptionIdRequestBuilder } from './subscriptionsWithOcpSubscriptionId/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the directory singleton.
 */
export interface DirectoryRequestBuilder extends BaseRequestBuilder<DirectoryRequestBuilder> {
    /**
     * Provides operations to manage the administrativeUnits property of the microsoft.graph.directory entity.
     */
    get administrativeUnits(): AdministrativeUnitsRequestBuilder;
    /**
     * Provides operations to manage the attributeSets property of the microsoft.graph.directory entity.
     */
    get attributeSets(): AttributeSetsRequestBuilder;
    /**
     * Provides operations to manage the certificateAuthorities property of the microsoft.graph.directory entity.
     */
    get certificateAuthorities(): CertificateAuthoritiesRequestBuilder;
    /**
     * Provides operations to manage the customSecurityAttributeDefinitions property of the microsoft.graph.directory entity.
     */
    get customSecurityAttributeDefinitions(): CustomSecurityAttributeDefinitionsRequestBuilder;
    /**
     * Provides operations to manage the deletedItems property of the microsoft.graph.directory entity.
     */
    get deletedItems(): DeletedItemsRequestBuilder;
    /**
     * Provides operations to manage the deviceLocalCredentials property of the microsoft.graph.directory entity.
     */
    get deviceLocalCredentials(): DeviceLocalCredentialsRequestBuilder;
    /**
     * Provides operations to manage the featureRolloutPolicies property of the microsoft.graph.directory entity.
     */
    get featureRolloutPolicies(): FeatureRolloutPoliciesRequestBuilder;
    /**
     * Provides operations to manage the federationConfigurations property of the microsoft.graph.directory entity.
     */
    get federationConfigurations(): FederationConfigurationsRequestBuilder;
    /**
     * Provides operations to manage the impactedResources property of the microsoft.graph.directory entity.
     */
    get impactedResources(): ImpactedResourcesRequestBuilder;
    /**
     * Provides operations to manage the inboundSharedUserProfiles property of the microsoft.graph.directory entity.
     */
    get inboundSharedUserProfiles(): InboundSharedUserProfilesRequestBuilder;
    /**
     * Provides operations to manage the onPremisesSynchronization property of the microsoft.graph.directory entity.
     */
    get onPremisesSynchronization(): OnPremisesSynchronizationRequestBuilder;
    /**
     * Provides operations to manage the outboundSharedUserProfiles property of the microsoft.graph.directory entity.
     */
    get outboundSharedUserProfiles(): OutboundSharedUserProfilesRequestBuilder;
    /**
     * Provides operations to manage the recommendations property of the microsoft.graph.directory entity.
     */
    get recommendations(): RecommendationsRequestBuilder;
    /**
     * Provides operations to manage the sharedEmailDomains property of the microsoft.graph.directory entity.
     */
    get sharedEmailDomains(): SharedEmailDomainsRequestBuilder;
    /**
     * Provides operations to manage the subscriptions property of the microsoft.graph.directory entity.
     */
    get subscriptions(): SubscriptionsRequestBuilder;
    /**
     * Get directory
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of Directory
     */
     get(requestConfiguration?: RequestConfiguration<DirectoryRequestBuilderGetQueryParameters> | undefined) : Promise<Directory | undefined>;
    /**
     * Update directory
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of Directory
     */
     patch(body: Directory, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Directory | undefined>;
    /**
     * Provides operations to manage the subscriptions property of the microsoft.graph.directory entity.
     * @param commerceSubscriptionId Alternate key of companySubscription
     * @returns a subscriptionsWithCommerceSubscriptionIdRequestBuilder
     */
     subscriptionsWithCommerceSubscriptionId(commerceSubscriptionId: string | undefined) : SubscriptionsWithCommerceSubscriptionIdRequestBuilder;
    /**
     * Provides operations to manage the subscriptions property of the microsoft.graph.directory entity.
     * @param ocpSubscriptionId Alternate key of companySubscription
     * @returns a subscriptionsWithOcpSubscriptionIdRequestBuilder
     */
     subscriptionsWithOcpSubscriptionId(ocpSubscriptionId: string | undefined) : SubscriptionsWithOcpSubscriptionIdRequestBuilder;
    /**
     * Get directory
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<DirectoryRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update directory
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: Directory, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get directory
 */
export interface DirectoryRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const DirectoryRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const DirectoryRequestBuilderNavigationMetadata: Record<Exclude<keyof DirectoryRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    subscriptionsWithCommerceSubscriptionId: {
        uriTemplate: SubscriptionsWithCommerceSubscriptionIdRequestBuilderUriTemplate,
        requestsMetadata: SubscriptionsWithCommerceSubscriptionIdRequestBuilderRequestsMetadata,
    },
    subscriptionsWithOcpSubscriptionId: {
        uriTemplate: SubscriptionsWithOcpSubscriptionIdRequestBuilderUriTemplate,
        requestsMetadata: SubscriptionsWithOcpSubscriptionIdRequestBuilderRequestsMetadata,
    },
    administrativeUnits: {
        uriTemplate: AdministrativeUnitsRequestBuilderUriTemplate,
        requestsMetadata: AdministrativeUnitsRequestBuilderRequestsMetadata,
        navigationMetadata: AdministrativeUnitsRequestBuilderNavigationMetadata,
    },
    attributeSets: {
        uriTemplate: AttributeSetsRequestBuilderUriTemplate,
        requestsMetadata: AttributeSetsRequestBuilderRequestsMetadata,
        navigationMetadata: AttributeSetsRequestBuilderNavigationMetadata,
    },
    certificateAuthorities: {
        uriTemplate: CertificateAuthoritiesRequestBuilderUriTemplate,
        requestsMetadata: CertificateAuthoritiesRequestBuilderRequestsMetadata,
        navigationMetadata: CertificateAuthoritiesRequestBuilderNavigationMetadata,
    },
    customSecurityAttributeDefinitions: {
        uriTemplate: CustomSecurityAttributeDefinitionsRequestBuilderUriTemplate,
        requestsMetadata: CustomSecurityAttributeDefinitionsRequestBuilderRequestsMetadata,
        navigationMetadata: CustomSecurityAttributeDefinitionsRequestBuilderNavigationMetadata,
    },
    deletedItems: {
        uriTemplate: DeletedItemsRequestBuilderUriTemplate,
        requestsMetadata: DeletedItemsRequestBuilderRequestsMetadata,
        navigationMetadata: DeletedItemsRequestBuilderNavigationMetadata,
    },
    deviceLocalCredentials: {
        uriTemplate: DeviceLocalCredentialsRequestBuilderUriTemplate,
        requestsMetadata: DeviceLocalCredentialsRequestBuilderRequestsMetadata,
        navigationMetadata: DeviceLocalCredentialsRequestBuilderNavigationMetadata,
    },
    featureRolloutPolicies: {
        uriTemplate: FeatureRolloutPoliciesRequestBuilderUriTemplate,
        requestsMetadata: FeatureRolloutPoliciesRequestBuilderRequestsMetadata,
        navigationMetadata: FeatureRolloutPoliciesRequestBuilderNavigationMetadata,
    },
    federationConfigurations: {
        uriTemplate: FederationConfigurationsRequestBuilderUriTemplate,
        requestsMetadata: FederationConfigurationsRequestBuilderRequestsMetadata,
        navigationMetadata: FederationConfigurationsRequestBuilderNavigationMetadata,
    },
    impactedResources: {
        uriTemplate: ImpactedResourcesRequestBuilderUriTemplate,
        requestsMetadata: ImpactedResourcesRequestBuilderRequestsMetadata,
        navigationMetadata: ImpactedResourcesRequestBuilderNavigationMetadata,
    },
    inboundSharedUserProfiles: {
        uriTemplate: InboundSharedUserProfilesRequestBuilderUriTemplate,
        requestsMetadata: InboundSharedUserProfilesRequestBuilderRequestsMetadata,
        navigationMetadata: InboundSharedUserProfilesRequestBuilderNavigationMetadata,
    },
    onPremisesSynchronization: {
        uriTemplate: OnPremisesSynchronizationRequestBuilderUriTemplate,
        requestsMetadata: OnPremisesSynchronizationRequestBuilderRequestsMetadata,
        navigationMetadata: OnPremisesSynchronizationRequestBuilderNavigationMetadata,
    },
    outboundSharedUserProfiles: {
        uriTemplate: OutboundSharedUserProfilesRequestBuilderUriTemplate,
        requestsMetadata: OutboundSharedUserProfilesRequestBuilderRequestsMetadata,
        navigationMetadata: OutboundSharedUserProfilesRequestBuilderNavigationMetadata,
    },
    recommendations: {
        uriTemplate: RecommendationsRequestBuilderUriTemplate,
        requestsMetadata: RecommendationsRequestBuilderRequestsMetadata,
        navigationMetadata: RecommendationsRequestBuilderNavigationMetadata,
    },
    sharedEmailDomains: {
        uriTemplate: SharedEmailDomainsRequestBuilderUriTemplate,
        requestsMetadata: SharedEmailDomainsRequestBuilderRequestsMetadata,
        navigationMetadata: SharedEmailDomainsRequestBuilderNavigationMetadata,
    },
    subscriptions: {
        uriTemplate: SubscriptionsRequestBuilderUriTemplate,
        requestsMetadata: SubscriptionsRequestBuilderRequestsMetadata,
        navigationMetadata: SubscriptionsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const DirectoryRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createDirectoryFromDiscriminatorValue,
        queryParametersMapper: DirectoryRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createDirectoryFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeDirectory,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const DirectoryRequestBuilderUriTemplate = "{+baseurl}/directory{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
