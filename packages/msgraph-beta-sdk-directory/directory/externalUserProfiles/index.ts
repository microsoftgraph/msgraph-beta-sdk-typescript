/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createExternalUserProfileCollectionResponseFromDiscriminatorValue, createExternalUserProfileFromDiscriminatorValue, serializeExternalUserProfile, type ExternalUserProfile, type ExternalUserProfileCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { ExternalUserProfileItemRequestBuilderRequestsMetadata, type ExternalUserProfileItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the externalUserProfiles property of the microsoft.graph.directory entity.
 */
export interface ExternalUserProfilesRequestBuilder extends BaseRequestBuilder<ExternalUserProfilesRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the externalUserProfiles property of the microsoft.graph.directory entity.
     * @param externalUserProfileId The unique identifier of externalUserProfile
     * @returns {ExternalUserProfileItemRequestBuilder}
     */
     byExternalUserProfileId(externalUserProfileId: string) : ExternalUserProfileItemRequestBuilder;
    /**
     * Retrieve the properties of all externalUserProfiles
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ExternalUserProfileCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/directory-list-externaluserprofiles?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<ExternalUserProfilesRequestBuilderGetQueryParameters> | undefined) : Promise<ExternalUserProfileCollectionResponse | undefined>;
    /**
     * Create new navigation property to externalUserProfiles for directory
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ExternalUserProfile>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: ExternalUserProfile, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ExternalUserProfile | undefined>;
    /**
     * Retrieve the properties of all externalUserProfiles
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ExternalUserProfilesRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create new navigation property to externalUserProfiles for directory
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: ExternalUserProfile, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Retrieve the properties of all externalUserProfiles
 */
export interface ExternalUserProfilesRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Uri template for the request builder.
 */
export const ExternalUserProfilesRequestBuilderUriTemplate = "{+baseurl}/directory/externalUserProfiles{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ExternalUserProfilesRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ExternalUserProfilesRequestBuilderNavigationMetadata: Record<Exclude<keyof ExternalUserProfilesRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byExternalUserProfileId: {
        requestsMetadata: ExternalUserProfileItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["externalUserProfile%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ExternalUserProfilesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ExternalUserProfilesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createExternalUserProfileCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: ExternalUserProfilesRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: ExternalUserProfilesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createExternalUserProfileFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeExternalUserProfile,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Provides operations to manage the externalUserProfiles property of the microsoft.graph.directory entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
} as const;
/**
 * Provides operations to manage the externalUserProfiles property of the microsoft.graph.directory entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    DeletedDateTime: "deletedDateTime",
    DeletedDateTimeDesc: "deletedDateTime desc",
    Address: "address",
    AddressDesc: "address desc",
    CompanyName: "companyName",
    CompanyNameDesc: "companyName desc",
    CreatedBy: "createdBy",
    CreatedByDesc: "createdBy desc",
    CreatedDateTime: "createdDateTime",
    CreatedDateTimeDesc: "createdDateTime desc",
    Department: "department",
    DepartmentDesc: "department desc",
    DisplayName: "displayName",
    DisplayNameDesc: "displayName desc",
    IsDiscoverable: "isDiscoverable",
    IsDiscoverableDesc: "isDiscoverable desc",
    IsEnabled: "isEnabled",
    IsEnabledDesc: "isEnabled desc",
    JobTitle: "jobTitle",
    JobTitleDesc: "jobTitle desc",
    PhoneNumber: "phoneNumber",
    PhoneNumberDesc: "phoneNumber desc",
    SupervisorId: "supervisorId",
    SupervisorIdDesc: "supervisorId desc",
} as const;
/**
 * Provides operations to manage the externalUserProfiles property of the microsoft.graph.directory entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    DeletedDateTime: "deletedDateTime",
    Address: "address",
    CompanyName: "companyName",
    CreatedBy: "createdBy",
    CreatedDateTime: "createdDateTime",
    Department: "department",
    DisplayName: "displayName",
    IsDiscoverable: "isDiscoverable",
    IsEnabled: "isEnabled",
    JobTitle: "jobTitle",
    PhoneNumber: "phoneNumber",
    SupervisorId: "supervisorId",
} as const;
/* tslint:enable */
/* eslint-enable */
