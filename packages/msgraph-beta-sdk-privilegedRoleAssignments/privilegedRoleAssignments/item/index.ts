/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createPrivilegedRoleAssignmentFromDiscriminatorValue, serializePrivilegedRoleAssignment, type PrivilegedRoleAssignment } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { MakeEligibleRequestBuilderRequestsMetadata, MakeEligibleRequestBuilderUriTemplate, type MakeEligibleRequestBuilder } from './makeEligible/';
import { MakePermanentRequestBuilderRequestsMetadata, MakePermanentRequestBuilderUriTemplate, type MakePermanentRequestBuilder } from './makePermanent/';
import { RoleInfoRequestBuilderNavigationMetadata, RoleInfoRequestBuilderRequestsMetadata, RoleInfoRequestBuilderUriTemplate, type RoleInfoRequestBuilder } from './roleInfo/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the collection of privilegedRoleAssignment entities.
 */
export interface PrivilegedRoleAssignmentItemRequestBuilder extends BaseRequestBuilder<PrivilegedRoleAssignmentItemRequestBuilder> {
    /**
     * Provides operations to call the makeEligible method.
     */
    get makeEligible(): MakeEligibleRequestBuilder;
    /**
     * Provides operations to call the makePermanent method.
     */
    get makePermanent(): MakePermanentRequestBuilder;
    /**
     * Provides operations to manage the roleInfo property of the microsoft.graph.privilegedRoleAssignment entity.
     */
    get roleInfo(): RoleInfoRequestBuilder;
    /**
     * Delete entity from privilegedRoleAssignments
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get entity from privilegedRoleAssignments by key
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of PrivilegedRoleAssignment
     */
     get(requestConfiguration?: RequestConfiguration<PrivilegedRoleAssignmentItemRequestBuilderGetQueryParameters> | undefined) : Promise<PrivilegedRoleAssignment | undefined>;
    /**
     * Update entity in privilegedRoleAssignments
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of PrivilegedRoleAssignment
     */
     patch(body: PrivilegedRoleAssignment, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<PrivilegedRoleAssignment | undefined>;
    /**
     * Delete entity from privilegedRoleAssignments
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Get entity from privilegedRoleAssignments by key
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<PrivilegedRoleAssignmentItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update entity in privilegedRoleAssignments
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: PrivilegedRoleAssignment, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get entity from privilegedRoleAssignments by key
 */
export interface PrivilegedRoleAssignmentItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const PrivilegedRoleAssignmentItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const PrivilegedRoleAssignmentItemRequestBuilderNavigationMetadata: Record<Exclude<keyof PrivilegedRoleAssignmentItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    makeEligible: {
        uriTemplate: MakeEligibleRequestBuilderUriTemplate,
        requestsMetadata: MakeEligibleRequestBuilderRequestsMetadata,
    },
    makePermanent: {
        uriTemplate: MakePermanentRequestBuilderUriTemplate,
        requestsMetadata: MakePermanentRequestBuilderRequestsMetadata,
    },
    roleInfo: {
        uriTemplate: RoleInfoRequestBuilderUriTemplate,
        requestsMetadata: RoleInfoRequestBuilderRequestsMetadata,
        navigationMetadata: RoleInfoRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const PrivilegedRoleAssignmentItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createPrivilegedRoleAssignmentFromDiscriminatorValue,
        queryParametersMapper: PrivilegedRoleAssignmentItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createPrivilegedRoleAssignmentFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializePrivilegedRoleAssignment,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const PrivilegedRoleAssignmentItemRequestBuilderUriTemplate = "{+baseurl}/privilegedRoleAssignments/{privilegedRoleAssignment%2Did}{?%24expand,%24select}";
/* tslint:enable */
/* eslint-enable */
