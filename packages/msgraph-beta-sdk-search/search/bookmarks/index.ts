/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { createBookmarkCollectionResponseFromDiscriminatorValue, createBookmarkFromDiscriminatorValue, serializeBookmark, type Bookmark, type BookmarkCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/search/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { BookmarkItemRequestBuilderRequestsMetadata, type BookmarkItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the bookmarks property of the microsoft.graph.searchEntity entity.
 */
export interface BookmarksRequestBuilder extends BaseRequestBuilder<BookmarksRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the bookmarks property of the microsoft.graph.searchEntity entity.
     * @param bookmarkId The unique identifier of bookmark
     * @returns {BookmarkItemRequestBuilder}
     */
     byBookmarkId(bookmarkId: string) : BookmarkItemRequestBuilder;
    /**
     * Get a list of bookmark objects and their properties.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<BookmarkCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/search-searchentity-list-bookmarks?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<BookmarksRequestBuilderGetQueryParameters> | undefined) : Promise<BookmarkCollectionResponse | undefined>;
    /**
     * Create a new bookmark object.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Bookmark>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/search-searchentity-post-bookmarks?view=graph-rest-1.0|Find more info here}
     */
     post(body: Bookmark, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Bookmark | undefined>;
    /**
     * Get a list of bookmark objects and their properties.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<BookmarksRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create a new bookmark object.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Bookmark, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get a list of bookmark objects and their properties.
 */
export interface BookmarksRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Uri template for the request builder.
 */
export const BookmarksRequestBuilderUriTemplate = "{+baseurl}/search/bookmarks{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const BookmarksRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const BookmarksRequestBuilderNavigationMetadata: Record<Exclude<keyof BookmarksRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byBookmarkId: {
        requestsMetadata: BookmarkItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["bookmark%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const BookmarksRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: BookmarksRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createBookmarkCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: BookmarksRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: BookmarksRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createBookmarkFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeBookmark,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Provides operations to manage the bookmarks property of the microsoft.graph.searchEntity entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
} as const;
/**
 * Provides operations to manage the bookmarks property of the microsoft.graph.searchEntity entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    Description: "description",
    DescriptionDesc: "description desc",
    DisplayName: "displayName",
    DisplayNameDesc: "displayName desc",
    LastModifiedBy: "lastModifiedBy",
    LastModifiedByDesc: "lastModifiedBy desc",
    LastModifiedDateTime: "lastModifiedDateTime",
    LastModifiedDateTimeDesc: "lastModifiedDateTime desc",
    WebUrl: "webUrl",
    WebUrlDesc: "webUrl desc",
    AvailabilityEndDateTime: "availabilityEndDateTime",
    AvailabilityEndDateTimeDesc: "availabilityEndDateTime desc",
    AvailabilityStartDateTime: "availabilityStartDateTime",
    AvailabilityStartDateTimeDesc: "availabilityStartDateTime desc",
    Categories: "categories",
    CategoriesDesc: "categories desc",
    GroupIds: "groupIds",
    GroupIdsDesc: "groupIds desc",
    IsSuggested: "isSuggested",
    IsSuggestedDesc: "isSuggested desc",
    Keywords: "keywords",
    KeywordsDesc: "keywords desc",
    LanguageTags: "languageTags",
    LanguageTagsDesc: "languageTags desc",
    Platforms: "platforms",
    PlatformsDesc: "platforms desc",
    PowerAppIds: "powerAppIds",
    PowerAppIdsDesc: "powerAppIds desc",
    State: "state",
    StateDesc: "state desc",
    TargetedVariations: "targetedVariations",
    TargetedVariationsDesc: "targetedVariations desc",
} as const;
/**
 * Provides operations to manage the bookmarks property of the microsoft.graph.searchEntity entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    Description: "description",
    DisplayName: "displayName",
    LastModifiedBy: "lastModifiedBy",
    LastModifiedDateTime: "lastModifiedDateTime",
    WebUrl: "webUrl",
    AvailabilityEndDateTime: "availabilityEndDateTime",
    AvailabilityStartDateTime: "availabilityStartDateTime",
    Categories: "categories",
    GroupIds: "groupIds",
    IsSuggested: "isSuggested",
    Keywords: "keywords",
    LanguageTags: "languageTags",
    Platforms: "platforms",
    PowerAppIds: "powerAppIds",
    State: "state",
    TargetedVariations: "targetedVariations",
} as const;
/* tslint:enable */
/* eslint-enable */
