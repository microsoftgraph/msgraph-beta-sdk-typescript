/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createMultiTenantOrganizationMemberCollectionResponseFromDiscriminatorValue, createMultiTenantOrganizationMemberFromDiscriminatorValue, serializeMultiTenantOrganizationMember, type MultiTenantOrganizationMember, type MultiTenantOrganizationMemberCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
// @ts-ignore
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
// @ts-ignore
import { MultiTenantOrganizationMemberItemRequestBuilderRequestsMetadata, type MultiTenantOrganizationMemberItemRequestBuilder } from './item/';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the tenants property of the microsoft.graph.multiTenantOrganization entity.
 */
export interface TenantsRequestBuilder extends BaseRequestBuilder<TenantsRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the tenants property of the microsoft.graph.multiTenantOrganization entity.
     * @param multiTenantOrganizationMemberId The unique identifier of multiTenantOrganizationMember
     * @returns {MultiTenantOrganizationMemberItemRequestBuilder}
     */
     byMultiTenantOrganizationMemberId(multiTenantOrganizationMemberId: string) : MultiTenantOrganizationMemberItemRequestBuilder;
    /**
     * List the tenants and their properties in the multi-tenant organization.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<MultiTenantOrganizationMemberCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/multitenantorganization-list-tenants?view=graph-rest-beta|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<TenantsRequestBuilderGetQueryParameters> | undefined) : Promise<MultiTenantOrganizationMemberCollectionResponse | undefined>;
    /**
     * Add a tenant to a multitenant organization. The administrator of an owner tenant has the permissions to add tenants to the multitenant organization. The added tenant is in the pending state until the administrator of the added tenant joins the multitenant organization by submitting a join request. A tenant can be part of only one multitenant organization.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<MultiTenantOrganizationMember>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/multitenantorganization-post-tenants?view=graph-rest-beta|Find more info here}
     */
     post(body: MultiTenantOrganizationMember, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<MultiTenantOrganizationMember | undefined>;
    /**
     * List the tenants and their properties in the multi-tenant organization.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<TenantsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Add a tenant to a multitenant organization. The administrator of an owner tenant has the permissions to add tenants to the multitenant organization. The added tenant is in the pending state until the administrator of the added tenant joins the multitenant organization by submitting a join request. A tenant can be part of only one multitenant organization.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: MultiTenantOrganizationMember, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * List the tenants and their properties in the multi-tenant organization.
 */
export interface TenantsRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: string[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: string[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Uri template for the request builder.
 */
export const TenantsRequestBuilderUriTemplate = "{+baseurl}/tenantRelationships/multiTenantOrganization/tenants{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const TenantsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const TenantsRequestBuilderNavigationMetadata: Record<Exclude<keyof TenantsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byMultiTenantOrganizationMemberId: {
        requestsMetadata: MultiTenantOrganizationMemberItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["multiTenantOrganizationMember%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const TenantsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: TenantsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createMultiTenantOrganizationMemberCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: TenantsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: TenantsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createMultiTenantOrganizationMemberFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeMultiTenantOrganizationMember,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
