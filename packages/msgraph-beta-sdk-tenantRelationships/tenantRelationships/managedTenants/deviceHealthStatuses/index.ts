/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createDeviceHealthStatusCollectionResponseFromDiscriminatorValue, createDeviceHealthStatusFromDiscriminatorValue, serializeDeviceHealthStatus, type DeviceHealthStatus, type DeviceHealthStatusCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/managedTenants/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { DeviceHealthStatusItemRequestBuilderRequestsMetadata, type DeviceHealthStatusItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the deviceHealthStatuses property of the microsoft.graph.managedTenants.managedTenant entity.
 */
export interface DeviceHealthStatusesRequestBuilder extends BaseRequestBuilder<DeviceHealthStatusesRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the deviceHealthStatuses property of the microsoft.graph.managedTenants.managedTenant entity.
     * @param deviceHealthStatusId The unique identifier of deviceHealthStatus
     * @returns {DeviceHealthStatusItemRequestBuilder}
     */
     byDeviceHealthStatusId(deviceHealthStatusId: string) : DeviceHealthStatusItemRequestBuilder;
    /**
     * Get deviceHealthStatuses from tenantRelationships
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DeviceHealthStatusCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<DeviceHealthStatusesRequestBuilderGetQueryParameters> | undefined) : Promise<DeviceHealthStatusCollectionResponse | undefined>;
    /**
     * Create new navigation property to deviceHealthStatuses for tenantRelationships
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DeviceHealthStatus>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: DeviceHealthStatus, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<DeviceHealthStatus | undefined>;
    /**
     * Get deviceHealthStatuses from tenantRelationships
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<DeviceHealthStatusesRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create new navigation property to deviceHealthStatuses for tenantRelationships
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: DeviceHealthStatus, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get deviceHealthStatuses from tenantRelationships
 */
export interface DeviceHealthStatusesRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Uri template for the request builder.
 */
export const DeviceHealthStatusesRequestBuilderUriTemplate = "{+baseurl}/tenantRelationships/managedTenants/deviceHealthStatuses{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const DeviceHealthStatusesRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const DeviceHealthStatusesRequestBuilderNavigationMetadata: Record<Exclude<keyof DeviceHealthStatusesRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byDeviceHealthStatusId: {
        requestsMetadata: DeviceHealthStatusItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["deviceHealthStatus%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const DeviceHealthStatusesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: DeviceHealthStatusesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDeviceHealthStatusCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: DeviceHealthStatusesRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: DeviceHealthStatusesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDeviceHealthStatusFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeDeviceHealthStatus,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Provides operations to manage the deviceHealthStatuses property of the microsoft.graph.managedTenants.managedTenant entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
} as const;
/**
 * Provides operations to manage the deviceHealthStatuses property of the microsoft.graph.managedTenants.managedTenant entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    BlueScreenCount: "blueScreenCount",
    BlueScreenCountDesc: "blueScreenCount desc",
    BootTotalDurationInSeconds: "bootTotalDurationInSeconds",
    BootTotalDurationInSecondsDesc: "bootTotalDurationInSeconds desc",
    DeviceId: "deviceId",
    DeviceIdDesc: "deviceId desc",
    DeviceMake: "deviceMake",
    DeviceMakeDesc: "deviceMake desc",
    DeviceModel: "deviceModel",
    DeviceModelDesc: "deviceModel desc",
    DeviceName: "deviceName",
    DeviceNameDesc: "deviceName desc",
    HealthStatus: "healthStatus",
    HealthStatusDesc: "healthStatus desc",
    LastUpdatedDateTime: "lastUpdatedDateTime",
    LastUpdatedDateTimeDesc: "lastUpdatedDateTime desc",
    OsVersion: "osVersion",
    OsVersionDesc: "osVersion desc",
    PrimaryDiskType: "primaryDiskType",
    PrimaryDiskTypeDesc: "primaryDiskType desc",
    RestartCount: "restartCount",
    RestartCountDesc: "restartCount desc",
    StartupPerformanceScore: "startupPerformanceScore",
    StartupPerformanceScoreDesc: "startupPerformanceScore desc",
    TenantDisplayName: "tenantDisplayName",
    TenantDisplayNameDesc: "tenantDisplayName desc",
    TenantId: "tenantId",
    TenantIdDesc: "tenantId desc",
    TopProcesses: "topProcesses",
    TopProcessesDesc: "topProcesses desc",
} as const;
/**
 * Provides operations to manage the deviceHealthStatuses property of the microsoft.graph.managedTenants.managedTenant entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    BlueScreenCount: "blueScreenCount",
    BootTotalDurationInSeconds: "bootTotalDurationInSeconds",
    DeviceId: "deviceId",
    DeviceMake: "deviceMake",
    DeviceModel: "deviceModel",
    DeviceName: "deviceName",
    HealthStatus: "healthStatus",
    LastUpdatedDateTime: "lastUpdatedDateTime",
    OsVersion: "osVersion",
    PrimaryDiskType: "primaryDiskType",
    RestartCount: "restartCount",
    StartupPerformanceScore: "startupPerformanceScore",
    TenantDisplayName: "tenantDisplayName",
    TenantId: "tenantId",
    TopProcesses: "topProcesses",
} as const;
/* tslint:enable */
/* eslint-enable */
