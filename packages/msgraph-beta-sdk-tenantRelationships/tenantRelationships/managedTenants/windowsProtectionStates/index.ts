/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createWindowsProtectionStateCollectionResponseFromDiscriminatorValue, createWindowsProtectionStateFromDiscriminatorValue, serializeWindowsProtectionState, type WindowsProtectionState, type WindowsProtectionStateCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/managedTenants/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { type WindowsProtectionStateItemRequestBuilder, WindowsProtectionStateItemRequestBuilderRequestsMetadata } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the windowsProtectionStates property of the microsoft.graph.managedTenants.managedTenant entity.
 */
export interface WindowsProtectionStatesRequestBuilder extends BaseRequestBuilder<WindowsProtectionStatesRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the windowsProtectionStates property of the microsoft.graph.managedTenants.managedTenant entity.
     * @param windowsProtectionStateId The unique identifier of windowsProtectionState
     * @returns {WindowsProtectionStateItemRequestBuilder}
     */
     byWindowsProtectionStateId(windowsProtectionStateId: string) : WindowsProtectionStateItemRequestBuilder;
    /**
     * Get a list of the windowsProtectionState objects and their properties.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WindowsProtectionStateCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/managedtenants-managedtenant-list-windowsprotectionstates?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<WindowsProtectionStatesRequestBuilderGetQueryParameters> | undefined) : Promise<WindowsProtectionStateCollectionResponse | undefined>;
    /**
     * Create new navigation property to windowsProtectionStates for tenantRelationships
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WindowsProtectionState>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: WindowsProtectionState, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WindowsProtectionState | undefined>;
    /**
     * Get a list of the windowsProtectionState objects and their properties.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<WindowsProtectionStatesRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create new navigation property to windowsProtectionStates for tenantRelationships
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: WindowsProtectionState, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get a list of the windowsProtectionState objects and their properties.
 */
export interface WindowsProtectionStatesRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Uri template for the request builder.
 */
export const WindowsProtectionStatesRequestBuilderUriTemplate = "{+baseurl}/tenantRelationships/managedTenants/windowsProtectionStates{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Provides operations to manage the windowsProtectionStates property of the microsoft.graph.managedTenants.managedTenant entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
} as const;
/**
 * Provides operations to manage the windowsProtectionStates property of the microsoft.graph.managedTenants.managedTenant entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    AntiMalwareVersion: "antiMalwareVersion",
    AntiMalwareVersionDesc: "antiMalwareVersion desc",
    AttentionRequired: "attentionRequired",
    AttentionRequiredDesc: "attentionRequired desc",
    DeviceDeleted: "deviceDeleted",
    DeviceDeletedDesc: "deviceDeleted desc",
    DevicePropertyRefreshDateTime: "devicePropertyRefreshDateTime",
    DevicePropertyRefreshDateTimeDesc: "devicePropertyRefreshDateTime desc",
    EngineVersion: "engineVersion",
    EngineVersionDesc: "engineVersion desc",
    FullScanOverdue: "fullScanOverdue",
    FullScanOverdueDesc: "fullScanOverdue desc",
    FullScanRequired: "fullScanRequired",
    FullScanRequiredDesc: "fullScanRequired desc",
    LastFullScanDateTime: "lastFullScanDateTime",
    LastFullScanDateTimeDesc: "lastFullScanDateTime desc",
    LastFullScanSignatureVersion: "lastFullScanSignatureVersion",
    LastFullScanSignatureVersionDesc: "lastFullScanSignatureVersion desc",
    LastQuickScanDateTime: "lastQuickScanDateTime",
    LastQuickScanDateTimeDesc: "lastQuickScanDateTime desc",
    LastQuickScanSignatureVersion: "lastQuickScanSignatureVersion",
    LastQuickScanSignatureVersionDesc: "lastQuickScanSignatureVersion desc",
    LastRefreshedDateTime: "lastRefreshedDateTime",
    LastRefreshedDateTimeDesc: "lastRefreshedDateTime desc",
    LastReportedDateTime: "lastReportedDateTime",
    LastReportedDateTimeDesc: "lastReportedDateTime desc",
    MalwareProtectionEnabled: "malwareProtectionEnabled",
    MalwareProtectionEnabledDesc: "malwareProtectionEnabled desc",
    ManagedDeviceHealthState: "managedDeviceHealthState",
    ManagedDeviceHealthStateDesc: "managedDeviceHealthState desc",
    ManagedDeviceId: "managedDeviceId",
    ManagedDeviceIdDesc: "managedDeviceId desc",
    ManagedDeviceName: "managedDeviceName",
    ManagedDeviceNameDesc: "managedDeviceName desc",
    NetworkInspectionSystemEnabled: "networkInspectionSystemEnabled",
    NetworkInspectionSystemEnabledDesc: "networkInspectionSystemEnabled desc",
    QuickScanOverdue: "quickScanOverdue",
    QuickScanOverdueDesc: "quickScanOverdue desc",
    RealTimeProtectionEnabled: "realTimeProtectionEnabled",
    RealTimeProtectionEnabledDesc: "realTimeProtectionEnabled desc",
    RebootRequired: "rebootRequired",
    RebootRequiredDesc: "rebootRequired desc",
    SignatureUpdateOverdue: "signatureUpdateOverdue",
    SignatureUpdateOverdueDesc: "signatureUpdateOverdue desc",
    SignatureVersion: "signatureVersion",
    SignatureVersionDesc: "signatureVersion desc",
    TenantDisplayName: "tenantDisplayName",
    TenantDisplayNameDesc: "tenantDisplayName desc",
    TenantId: "tenantId",
    TenantIdDesc: "tenantId desc",
} as const;
/**
 * Provides operations to manage the windowsProtectionStates property of the microsoft.graph.managedTenants.managedTenant entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    AntiMalwareVersion: "antiMalwareVersion",
    AttentionRequired: "attentionRequired",
    DeviceDeleted: "deviceDeleted",
    DevicePropertyRefreshDateTime: "devicePropertyRefreshDateTime",
    EngineVersion: "engineVersion",
    FullScanOverdue: "fullScanOverdue",
    FullScanRequired: "fullScanRequired",
    LastFullScanDateTime: "lastFullScanDateTime",
    LastFullScanSignatureVersion: "lastFullScanSignatureVersion",
    LastQuickScanDateTime: "lastQuickScanDateTime",
    LastQuickScanSignatureVersion: "lastQuickScanSignatureVersion",
    LastRefreshedDateTime: "lastRefreshedDateTime",
    LastReportedDateTime: "lastReportedDateTime",
    MalwareProtectionEnabled: "malwareProtectionEnabled",
    ManagedDeviceHealthState: "managedDeviceHealthState",
    ManagedDeviceId: "managedDeviceId",
    ManagedDeviceName: "managedDeviceName",
    NetworkInspectionSystemEnabled: "networkInspectionSystemEnabled",
    QuickScanOverdue: "quickScanOverdue",
    RealTimeProtectionEnabled: "realTimeProtectionEnabled",
    RebootRequired: "rebootRequired",
    SignatureUpdateOverdue: "signatureUpdateOverdue",
    SignatureVersion: "signatureVersion",
    TenantDisplayName: "tenantDisplayName",
    TenantId: "tenantId",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const WindowsProtectionStatesRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WindowsProtectionStatesRequestBuilderNavigationMetadata: Record<Exclude<keyof WindowsProtectionStatesRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byWindowsProtectionStateId: {
        requestsMetadata: WindowsProtectionStateItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["windowsProtectionState%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WindowsProtectionStatesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: WindowsProtectionStatesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWindowsProtectionStateCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: WindowsProtectionStatesRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: WindowsProtectionStatesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWindowsProtectionStateFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeWindowsProtectionState,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
