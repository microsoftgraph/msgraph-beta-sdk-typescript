/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createManagedTenantAlertCollectionResponseFromDiscriminatorValue, createManagedTenantAlertFromDiscriminatorValue, serializeManagedTenantAlert, type ManagedTenantAlert, type ManagedTenantAlertCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/managedTenants/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { ManagedTenantAlertItemRequestBuilderNavigationMetadata, ManagedTenantAlertItemRequestBuilderRequestsMetadata, type ManagedTenantAlertItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the managedTenantAlerts property of the microsoft.graph.managedTenants.managedTenant entity.
 */
export interface ManagedTenantAlertsRequestBuilder extends BaseRequestBuilder<ManagedTenantAlertsRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the managedTenantAlerts property of the microsoft.graph.managedTenants.managedTenant entity.
     * @param managedTenantAlertId The unique identifier of managedTenantAlert
     * @returns {ManagedTenantAlertItemRequestBuilder}
     */
     byManagedTenantAlertId(managedTenantAlertId: string) : ManagedTenantAlertItemRequestBuilder;
    /**
     * Get managedTenantAlerts from tenantRelationships
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ManagedTenantAlertCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<ManagedTenantAlertsRequestBuilderGetQueryParameters> | undefined) : Promise<ManagedTenantAlertCollectionResponse | undefined>;
    /**
     * Create new navigation property to managedTenantAlerts for tenantRelationships
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ManagedTenantAlert>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: ManagedTenantAlert, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ManagedTenantAlert | undefined>;
    /**
     * Get managedTenantAlerts from tenantRelationships
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ManagedTenantAlertsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create new navigation property to managedTenantAlerts for tenantRelationships
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: ManagedTenantAlert, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get managedTenantAlerts from tenantRelationships
 */
export interface ManagedTenantAlertsRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Uri template for the request builder.
 */
export const ManagedTenantAlertsRequestBuilderUriTemplate = "{+baseurl}/tenantRelationships/managedTenants/managedTenantAlerts{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Provides operations to manage the managedTenantAlerts property of the microsoft.graph.managedTenants.managedTenant entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    AlertLogs: "alertLogs",
    AlertRule: "alertRule",
    ApiNotifications: "apiNotifications",
    EmailNotifications: "emailNotifications",
} as const;
/**
 * Provides operations to manage the managedTenantAlerts property of the microsoft.graph.managedTenants.managedTenant entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    AlertData: "alertData",
    AlertDataDesc: "alertData desc",
    AlertDataReferenceStrings: "alertDataReferenceStrings",
    AlertDataReferenceStringsDesc: "alertDataReferenceStrings desc",
    AlertRuleDisplayName: "alertRuleDisplayName",
    AlertRuleDisplayNameDesc: "alertRuleDisplayName desc",
    AssignedToUserId: "assignedToUserId",
    AssignedToUserIdDesc: "assignedToUserId desc",
    CorrelationCount: "correlationCount",
    CorrelationCountDesc: "correlationCount desc",
    CorrelationId: "correlationId",
    CorrelationIdDesc: "correlationId desc",
    CreatedByUserId: "createdByUserId",
    CreatedByUserIdDesc: "createdByUserId desc",
    CreatedDateTime: "createdDateTime",
    CreatedDateTimeDesc: "createdDateTime desc",
    LastActionByUserId: "lastActionByUserId",
    LastActionByUserIdDesc: "lastActionByUserId desc",
    LastActionDateTime: "lastActionDateTime",
    LastActionDateTimeDesc: "lastActionDateTime desc",
    Message: "message",
    MessageDesc: "message desc",
    Severity: "severity",
    SeverityDesc: "severity desc",
    Status: "status",
    StatusDesc: "status desc",
    TenantId: "tenantId",
    TenantIdDesc: "tenantId desc",
    Title: "title",
    TitleDesc: "title desc",
} as const;
/**
 * Provides operations to manage the managedTenantAlerts property of the microsoft.graph.managedTenants.managedTenant entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    AlertData: "alertData",
    AlertDataReferenceStrings: "alertDataReferenceStrings",
    AlertRuleDisplayName: "alertRuleDisplayName",
    AssignedToUserId: "assignedToUserId",
    CorrelationCount: "correlationCount",
    CorrelationId: "correlationId",
    CreatedByUserId: "createdByUserId",
    CreatedDateTime: "createdDateTime",
    LastActionByUserId: "lastActionByUserId",
    LastActionDateTime: "lastActionDateTime",
    Message: "message",
    Severity: "severity",
    Status: "status",
    TenantId: "tenantId",
    Title: "title",
    AlertLogs: "alertLogs",
    AlertRule: "alertRule",
    ApiNotifications: "apiNotifications",
    EmailNotifications: "emailNotifications",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ManagedTenantAlertsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ManagedTenantAlertsRequestBuilderNavigationMetadata: Record<Exclude<keyof ManagedTenantAlertsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byManagedTenantAlertId: {
        requestsMetadata: ManagedTenantAlertItemRequestBuilderRequestsMetadata,
        navigationMetadata: ManagedTenantAlertItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["managedTenantAlert%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ManagedTenantAlertsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ManagedTenantAlertsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createManagedTenantAlertCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: ManagedTenantAlertsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: ManagedTenantAlertsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createManagedTenantAlertFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeManagedTenantAlert,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
