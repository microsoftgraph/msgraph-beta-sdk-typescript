/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createManagementTemplateStepDeploymentFromDiscriminatorValue, serializeManagementTemplateStepDeployment, type ManagementTemplateStepDeployment } from '@microsoft/msgraph-beta-sdk/models/managedTenants/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { MicrosoftGraphManagedTenantsChangeDeploymentStatusRequestBuilderRequestsMetadata, MicrosoftGraphManagedTenantsChangeDeploymentStatusRequestBuilderUriTemplate, type MicrosoftGraphManagedTenantsChangeDeploymentStatusRequestBuilder } from './microsoftGraphManagedTenantsChangeDeploymentStatus/';
import { TemplateStepVersionRequestBuilderRequestsMetadata, TemplateStepVersionRequestBuilderUriTemplate, type TemplateStepVersionRequestBuilder } from './templateStepVersion/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the deployments property of the microsoft.graph.managedTenants.managementTemplateStepVersion entity.
 */
export interface ManagementTemplateStepDeploymentItemRequestBuilder extends BaseRequestBuilder<ManagementTemplateStepDeploymentItemRequestBuilder> {
    /**
     * Provides operations to call the changeDeploymentStatus method.
     */
    get microsoftGraphManagedTenantsChangeDeploymentStatus(): MicrosoftGraphManagedTenantsChangeDeploymentStatusRequestBuilder;
    /**
     * Provides operations to manage the templateStepVersion property of the microsoft.graph.managedTenants.managementTemplateStepDeployment entity.
     */
    get templateStepVersion(): TemplateStepVersionRequestBuilder;
    /**
     * Delete navigation property deployments for tenantRelationships
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get deployments from tenantRelationships
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of ManagementTemplateStepDeployment
     */
     get(requestConfiguration?: RequestConfiguration<ManagementTemplateStepDeploymentItemRequestBuilderGetQueryParameters> | undefined) : Promise<ManagementTemplateStepDeployment | undefined>;
    /**
     * Update the navigation property deployments in tenantRelationships
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of ManagementTemplateStepDeployment
     */
     patch(body: ManagementTemplateStepDeployment, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ManagementTemplateStepDeployment | undefined>;
    /**
     * Delete navigation property deployments for tenantRelationships
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Get deployments from tenantRelationships
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ManagementTemplateStepDeploymentItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property deployments in tenantRelationships
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: ManagementTemplateStepDeployment, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get deployments from tenantRelationships
 */
export interface ManagementTemplateStepDeploymentItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ManagementTemplateStepDeploymentItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ManagementTemplateStepDeploymentItemRequestBuilderNavigationMetadata: Record<Exclude<keyof ManagementTemplateStepDeploymentItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    microsoftGraphManagedTenantsChangeDeploymentStatus: {
        uriTemplate: MicrosoftGraphManagedTenantsChangeDeploymentStatusRequestBuilderUriTemplate,
        requestsMetadata: MicrosoftGraphManagedTenantsChangeDeploymentStatusRequestBuilderRequestsMetadata,
    },
    templateStepVersion: {
        uriTemplate: TemplateStepVersionRequestBuilderUriTemplate,
        requestsMetadata: TemplateStepVersionRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ManagementTemplateStepDeploymentItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createManagementTemplateStepDeploymentFromDiscriminatorValue,
        queryParametersMapper: ManagementTemplateStepDeploymentItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createManagementTemplateStepDeploymentFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeManagementTemplateStepDeployment,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const ManagementTemplateStepDeploymentItemRequestBuilderUriTemplate = "{+baseurl}/tenantRelationships/managedTenants/managementTemplateStepVersions/{managementTemplateStepVersion%2Did}/deployments/{managementTemplateStepDeployment%2Did}{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
