/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createDeviceFromDiscriminatorValue, serializeDevice, type Device } from '@microsoft/msgraph-beta-sdk/models/';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
// @ts-ignore
import { CommandsRequestBuilderNavigationMetadata, CommandsRequestBuilderRequestsMetadata, type CommandsRequestBuilder } from './commands/';
// @ts-ignore
import { ExtensionsRequestBuilderNavigationMetadata, ExtensionsRequestBuilderRequestsMetadata, type ExtensionsRequestBuilder } from './extensions/';
// @ts-ignore
import { MemberOfRequestBuilderNavigationMetadata, MemberOfRequestBuilderRequestsMetadata, type MemberOfRequestBuilder } from './memberOf/';
// @ts-ignore
import { RegisteredOwnersRequestBuilderNavigationMetadata, RegisteredOwnersRequestBuilderRequestsMetadata, type RegisteredOwnersRequestBuilder } from './registeredOwners/';
// @ts-ignore
import { RegisteredUsersRequestBuilderNavigationMetadata, RegisteredUsersRequestBuilderRequestsMetadata, type RegisteredUsersRequestBuilder } from './registeredUsers/';
// @ts-ignore
import { TransitiveMemberOfRequestBuilderNavigationMetadata, TransitiveMemberOfRequestBuilderRequestsMetadata, type TransitiveMemberOfRequestBuilder } from './transitiveMemberOf/';
// @ts-ignore
import { type UsageRightsRequestBuilder, UsageRightsRequestBuilderNavigationMetadata, UsageRightsRequestBuilderRequestsMetadata } from './usageRights/';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the devices property of the microsoft.graph.user entity.
 */
export interface DeviceItemRequestBuilder extends BaseRequestBuilder<DeviceItemRequestBuilder> {
    /**
     * Provides operations to manage the commands property of the microsoft.graph.device entity.
     */
    get commands(): CommandsRequestBuilder;
    /**
     * Provides operations to manage the extensions property of the microsoft.graph.device entity.
     */
    get extensions(): ExtensionsRequestBuilder;
    /**
     * Provides operations to manage the memberOf property of the microsoft.graph.device entity.
     */
    get memberOf(): MemberOfRequestBuilder;
    /**
     * Provides operations to manage the registeredOwners property of the microsoft.graph.device entity.
     */
    get registeredOwners(): RegisteredOwnersRequestBuilder;
    /**
     * Provides operations to manage the registeredUsers property of the microsoft.graph.device entity.
     */
    get registeredUsers(): RegisteredUsersRequestBuilder;
    /**
     * Provides operations to manage the transitiveMemberOf property of the microsoft.graph.device entity.
     */
    get transitiveMemberOf(): TransitiveMemberOfRequestBuilder;
    /**
     * Provides operations to manage the usageRights property of the microsoft.graph.device entity.
     */
    get usageRights(): UsageRightsRequestBuilder;
    /**
     * Delete navigation property devices for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get devices from users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Device>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<DeviceItemRequestBuilderGetQueryParameters> | undefined) : Promise<Device | undefined>;
    /**
     * Update the navigation property devices in users
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Device>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: Device, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Device | undefined>;
    /**
     * Delete navigation property devices for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Get devices from users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<DeviceItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property devices in users
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: Device, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get devices from users
 */
export interface DeviceItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const DeviceItemRequestBuilderUriTemplate = "{+baseurl}/users/{user%2Did}/devices/{device%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const DeviceItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const DeviceItemRequestBuilderNavigationMetadata: Record<Exclude<keyof DeviceItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    commands: {
        requestsMetadata: CommandsRequestBuilderRequestsMetadata,
        navigationMetadata: CommandsRequestBuilderNavigationMetadata,
    },
    extensions: {
        requestsMetadata: ExtensionsRequestBuilderRequestsMetadata,
        navigationMetadata: ExtensionsRequestBuilderNavigationMetadata,
    },
    memberOf: {
        requestsMetadata: MemberOfRequestBuilderRequestsMetadata,
        navigationMetadata: MemberOfRequestBuilderNavigationMetadata,
    },
    registeredOwners: {
        requestsMetadata: RegisteredOwnersRequestBuilderRequestsMetadata,
        navigationMetadata: RegisteredOwnersRequestBuilderNavigationMetadata,
    },
    registeredUsers: {
        requestsMetadata: RegisteredUsersRequestBuilderRequestsMetadata,
        navigationMetadata: RegisteredUsersRequestBuilderNavigationMetadata,
    },
    transitiveMemberOf: {
        requestsMetadata: TransitiveMemberOfRequestBuilderRequestsMetadata,
        navigationMetadata: TransitiveMemberOfRequestBuilderNavigationMetadata,
    },
    usageRights: {
        requestsMetadata: UsageRightsRequestBuilderRequestsMetadata,
        navigationMetadata: UsageRightsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const DeviceItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: DeviceItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: DeviceItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDeviceFromDiscriminatorValue,
        queryParametersMapper: DeviceItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: DeviceItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDeviceFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeDevice,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
