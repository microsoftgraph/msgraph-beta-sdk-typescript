/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createDeviceCollectionResponseFromDiscriminatorValue, createDeviceFromDiscriminatorValue, serializeDevice, type Device, type DeviceCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { DeltaRequestBuilderRequestsMetadata, type DeltaRequestBuilder } from './delta/';
import { DeviceItemRequestBuilderNavigationMetadata, DeviceItemRequestBuilderRequestsMetadata, type DeviceItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the devices property of the microsoft.graph.user entity.
 */
export interface DevicesRequestBuilder extends BaseRequestBuilder<DevicesRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to call the delta method.
     */
    get delta(): DeltaRequestBuilder;
    /**
     * Provides operations to manage the devices property of the microsoft.graph.user entity.
     * @param deviceId The unique identifier of device
     * @returns {DeviceItemRequestBuilder}
     */
     byDeviceId(deviceId: string) : DeviceItemRequestBuilder;
    /**
     * Get devices from users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DeviceCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<DevicesRequestBuilderGetQueryParameters> | undefined) : Promise<DeviceCollectionResponse | undefined>;
    /**
     * Create new navigation property to devices for users
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Device>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: Device, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Device | undefined>;
    /**
     * Get devices from users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<DevicesRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create new navigation property to devices for users
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Device, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get devices from users
 */
export interface DevicesRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Uri template for the request builder.
 */
export const DevicesRequestBuilderUriTemplate = "{+baseurl}/users/{user%2Did}/devices{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const DevicesRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const DevicesRequestBuilderNavigationMetadata: Record<Exclude<keyof DevicesRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byDeviceId: {
        requestsMetadata: DeviceItemRequestBuilderRequestsMetadata,
        navigationMetadata: DeviceItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["device%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
    delta: {
        requestsMetadata: DeltaRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const DevicesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: DevicesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDeviceCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: DevicesRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: DevicesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDeviceFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeDevice,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Provides operations to manage the devices property of the microsoft.graph.user entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    Commands: "commands",
    Extensions: "extensions",
    MemberOf: "memberOf",
    RegisteredOwners: "registeredOwners",
    RegisteredUsers: "registeredUsers",
    TransitiveMemberOf: "transitiveMemberOf",
    UsageRights: "usageRights",
} as const;
/**
 * Provides operations to manage the devices property of the microsoft.graph.user entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    DeletedDateTime: "deletedDateTime",
    DeletedDateTimeDesc: "deletedDateTime desc",
    AccountEnabled: "accountEnabled",
    AccountEnabledDesc: "accountEnabled desc",
    AlternativeSecurityIds: "alternativeSecurityIds",
    AlternativeSecurityIdsDesc: "alternativeSecurityIds desc",
    ApproximateLastSignInDateTime: "approximateLastSignInDateTime",
    ApproximateLastSignInDateTimeDesc: "approximateLastSignInDateTime desc",
    ComplianceExpirationDateTime: "complianceExpirationDateTime",
    ComplianceExpirationDateTimeDesc: "complianceExpirationDateTime desc",
    DeviceCategory: "deviceCategory",
    DeviceCategoryDesc: "deviceCategory desc",
    DeviceId: "deviceId",
    DeviceIdDesc: "deviceId desc",
    DeviceMetadata: "deviceMetadata",
    DeviceMetadataDesc: "deviceMetadata desc",
    DeviceOwnership: "deviceOwnership",
    DeviceOwnershipDesc: "deviceOwnership desc",
    DeviceVersion: "deviceVersion",
    DeviceVersionDesc: "deviceVersion desc",
    DisplayName: "displayName",
    DisplayNameDesc: "displayName desc",
    DomainName: "domainName",
    DomainNameDesc: "domainName desc",
    EnrollmentProfileName: "enrollmentProfileName",
    EnrollmentProfileNameDesc: "enrollmentProfileName desc",
    EnrollmentType: "enrollmentType",
    EnrollmentTypeDesc: "enrollmentType desc",
    ExtensionAttributes: "extensionAttributes",
    ExtensionAttributesDesc: "extensionAttributes desc",
    Hostnames: "hostnames",
    HostnamesDesc: "hostnames desc",
    IsCompliant: "isCompliant",
    IsCompliantDesc: "isCompliant desc",
    IsManaged: "isManaged",
    IsManagedDesc: "isManaged desc",
    IsManagementRestricted: "isManagementRestricted",
    IsManagementRestrictedDesc: "isManagementRestricted desc",
    IsRooted: "isRooted",
    IsRootedDesc: "isRooted desc",
    Kind: "kind",
    KindDesc: "kind desc",
    ManagementType: "managementType",
    ManagementTypeDesc: "managementType desc",
    Manufacturer: "manufacturer",
    ManufacturerDesc: "manufacturer desc",
    MdmAppId: "mdmAppId",
    MdmAppIdDesc: "mdmAppId desc",
    Model: "model",
    ModelDesc: "model desc",
    Name: "name",
    NameDesc: "name desc",
    OnPremisesLastSyncDateTime: "onPremisesLastSyncDateTime",
    OnPremisesLastSyncDateTimeDesc: "onPremisesLastSyncDateTime desc",
    OnPremisesSecurityIdentifier: "onPremisesSecurityIdentifier",
    OnPremisesSecurityIdentifierDesc: "onPremisesSecurityIdentifier desc",
    OnPremisesSyncEnabled: "onPremisesSyncEnabled",
    OnPremisesSyncEnabledDesc: "onPremisesSyncEnabled desc",
    OperatingSystem: "operatingSystem",
    OperatingSystemDesc: "operatingSystem desc",
    OperatingSystemVersion: "operatingSystemVersion",
    OperatingSystemVersionDesc: "operatingSystemVersion desc",
    PhysicalIds: "physicalIds",
    PhysicalIdsDesc: "physicalIds desc",
    Platform: "platform",
    PlatformDesc: "platform desc",
    ProfileType: "profileType",
    ProfileTypeDesc: "profileType desc",
    RegistrationDateTime: "registrationDateTime",
    RegistrationDateTimeDesc: "registrationDateTime desc",
    Status: "status",
    StatusDesc: "status desc",
    SystemLabels: "systemLabels",
    SystemLabelsDesc: "systemLabels desc",
    TrustType: "trustType",
    TrustTypeDesc: "trustType desc",
} as const;
/**
 * Provides operations to manage the devices property of the microsoft.graph.user entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    DeletedDateTime: "deletedDateTime",
    AccountEnabled: "accountEnabled",
    AlternativeSecurityIds: "alternativeSecurityIds",
    ApproximateLastSignInDateTime: "approximateLastSignInDateTime",
    ComplianceExpirationDateTime: "complianceExpirationDateTime",
    DeviceCategory: "deviceCategory",
    DeviceId: "deviceId",
    DeviceMetadata: "deviceMetadata",
    DeviceOwnership: "deviceOwnership",
    DeviceVersion: "deviceVersion",
    DisplayName: "displayName",
    DomainName: "domainName",
    EnrollmentProfileName: "enrollmentProfileName",
    EnrollmentType: "enrollmentType",
    ExtensionAttributes: "extensionAttributes",
    Hostnames: "hostnames",
    IsCompliant: "isCompliant",
    IsManaged: "isManaged",
    IsManagementRestricted: "isManagementRestricted",
    IsRooted: "isRooted",
    Kind: "kind",
    ManagementType: "managementType",
    Manufacturer: "manufacturer",
    MdmAppId: "mdmAppId",
    Model: "model",
    Name: "name",
    OnPremisesLastSyncDateTime: "onPremisesLastSyncDateTime",
    OnPremisesSecurityIdentifier: "onPremisesSecurityIdentifier",
    OnPremisesSyncEnabled: "onPremisesSyncEnabled",
    OperatingSystem: "operatingSystem",
    OperatingSystemVersion: "operatingSystemVersion",
    PhysicalIds: "physicalIds",
    Platform: "platform",
    ProfileType: "profileType",
    RegistrationDateTime: "registrationDateTime",
    Status: "status",
    SystemLabels: "systemLabels",
    TrustType: "trustType",
    Commands: "commands",
    Extensions: "extensions",
    MemberOf: "memberOf",
    RegisteredOwners: "registeredOwners",
    RegisteredUsers: "registeredUsers",
    TransitiveMemberOf: "transitiveMemberOf",
    UsageRights: "usageRights",
} as const;
/* tslint:enable */
/* eslint-enable */
