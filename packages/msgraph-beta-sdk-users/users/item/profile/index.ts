/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createProfileFromDiscriminatorValue, serializeProfile, type Profile } from '@microsoft/msgraph-beta-sdk/models/index.js';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/index.js';
// @ts-ignore
import { AccountRequestBuilderNavigationMetadata, AccountRequestBuilderRequestsMetadata, type AccountRequestBuilder } from './account/index.js';
// @ts-ignore
import { AddressesRequestBuilderNavigationMetadata, AddressesRequestBuilderRequestsMetadata, type AddressesRequestBuilder } from './addresses/index.js';
// @ts-ignore
import { AnniversariesRequestBuilderNavigationMetadata, AnniversariesRequestBuilderRequestsMetadata, type AnniversariesRequestBuilder } from './anniversaries/index.js';
// @ts-ignore
import { AwardsRequestBuilderNavigationMetadata, AwardsRequestBuilderRequestsMetadata, type AwardsRequestBuilder } from './awards/index.js';
// @ts-ignore
import { CertificationsRequestBuilderNavigationMetadata, CertificationsRequestBuilderRequestsMetadata, type CertificationsRequestBuilder } from './certifications/index.js';
// @ts-ignore
import { EducationalActivitiesRequestBuilderNavigationMetadata, EducationalActivitiesRequestBuilderRequestsMetadata, type EducationalActivitiesRequestBuilder } from './educationalActivities/index.js';
// @ts-ignore
import { EmailsRequestBuilderNavigationMetadata, EmailsRequestBuilderRequestsMetadata, type EmailsRequestBuilder } from './emails/index.js';
// @ts-ignore
import { InterestsRequestBuilderNavigationMetadata, InterestsRequestBuilderRequestsMetadata, type InterestsRequestBuilder } from './interests/index.js';
// @ts-ignore
import { LanguagesRequestBuilderNavigationMetadata, LanguagesRequestBuilderRequestsMetadata, type LanguagesRequestBuilder } from './languages/index.js';
// @ts-ignore
import { NamesRequestBuilderNavigationMetadata, NamesRequestBuilderRequestsMetadata, type NamesRequestBuilder } from './names/index.js';
// @ts-ignore
import { NotesRequestBuilderNavigationMetadata, NotesRequestBuilderRequestsMetadata, type NotesRequestBuilder } from './notes/index.js';
// @ts-ignore
import { PatentsRequestBuilderNavigationMetadata, PatentsRequestBuilderRequestsMetadata, type PatentsRequestBuilder } from './patents/index.js';
// @ts-ignore
import { PhonesRequestBuilderNavigationMetadata, PhonesRequestBuilderRequestsMetadata, type PhonesRequestBuilder } from './phones/index.js';
// @ts-ignore
import { PositionsRequestBuilderNavigationMetadata, PositionsRequestBuilderRequestsMetadata, type PositionsRequestBuilder } from './positions/index.js';
// @ts-ignore
import { ProjectsRequestBuilderNavigationMetadata, ProjectsRequestBuilderRequestsMetadata, type ProjectsRequestBuilder } from './projects/index.js';
// @ts-ignore
import { PublicationsRequestBuilderNavigationMetadata, PublicationsRequestBuilderRequestsMetadata, type PublicationsRequestBuilder } from './publications/index.js';
// @ts-ignore
import { SkillsRequestBuilderNavigationMetadata, SkillsRequestBuilderRequestsMetadata, type SkillsRequestBuilder } from './skills/index.js';
// @ts-ignore
import { type WebAccountsRequestBuilder, WebAccountsRequestBuilderNavigationMetadata, WebAccountsRequestBuilderRequestsMetadata } from './webAccounts/index.js';
// @ts-ignore
import { type WebsitesRequestBuilder, WebsitesRequestBuilderNavigationMetadata, WebsitesRequestBuilderRequestsMetadata } from './websites/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the profile property of the microsoft.graph.user entity.
 */
export interface ProfileRequestBuilder extends BaseRequestBuilder<ProfileRequestBuilder> {
    /**
     * Provides operations to manage the account property of the microsoft.graph.profile entity.
     */
    get account(): AccountRequestBuilder;
    /**
     * Provides operations to manage the addresses property of the microsoft.graph.profile entity.
     */
    get addresses(): AddressesRequestBuilder;
    /**
     * Provides operations to manage the anniversaries property of the microsoft.graph.profile entity.
     */
    get anniversaries(): AnniversariesRequestBuilder;
    /**
     * Provides operations to manage the awards property of the microsoft.graph.profile entity.
     */
    get awards(): AwardsRequestBuilder;
    /**
     * Provides operations to manage the certifications property of the microsoft.graph.profile entity.
     */
    get certifications(): CertificationsRequestBuilder;
    /**
     * Provides operations to manage the educationalActivities property of the microsoft.graph.profile entity.
     */
    get educationalActivities(): EducationalActivitiesRequestBuilder;
    /**
     * Provides operations to manage the emails property of the microsoft.graph.profile entity.
     */
    get emails(): EmailsRequestBuilder;
    /**
     * Provides operations to manage the interests property of the microsoft.graph.profile entity.
     */
    get interests(): InterestsRequestBuilder;
    /**
     * Provides operations to manage the languages property of the microsoft.graph.profile entity.
     */
    get languages(): LanguagesRequestBuilder;
    /**
     * Provides operations to manage the names property of the microsoft.graph.profile entity.
     */
    get names(): NamesRequestBuilder;
    /**
     * Provides operations to manage the notes property of the microsoft.graph.profile entity.
     */
    get notes(): NotesRequestBuilder;
    /**
     * Provides operations to manage the patents property of the microsoft.graph.profile entity.
     */
    get patents(): PatentsRequestBuilder;
    /**
     * Provides operations to manage the phones property of the microsoft.graph.profile entity.
     */
    get phones(): PhonesRequestBuilder;
    /**
     * Provides operations to manage the positions property of the microsoft.graph.profile entity.
     */
    get positions(): PositionsRequestBuilder;
    /**
     * Provides operations to manage the projects property of the microsoft.graph.profile entity.
     */
    get projects(): ProjectsRequestBuilder;
    /**
     * Provides operations to manage the publications property of the microsoft.graph.profile entity.
     */
    get publications(): PublicationsRequestBuilder;
    /**
     * Provides operations to manage the skills property of the microsoft.graph.profile entity.
     */
    get skills(): SkillsRequestBuilder;
    /**
     * Provides operations to manage the webAccounts property of the microsoft.graph.profile entity.
     */
    get webAccounts(): WebAccountsRequestBuilder;
    /**
     * Provides operations to manage the websites property of the microsoft.graph.profile entity.
     */
    get websites(): WebsitesRequestBuilder;
    /**
     * Delete navigation property profile for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Represents properties that are descriptive of a user in a tenant.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Profile>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<ProfileRequestBuilderGetQueryParameters> | undefined) : Promise<Profile | undefined>;
    /**
     * Update the navigation property profile in users
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Profile>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: Profile, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Profile | undefined>;
    /**
     * Delete navigation property profile for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Represents properties that are descriptive of a user in a tenant.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ProfileRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property profile in users
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: Profile, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Represents properties that are descriptive of a user in a tenant.
 */
export interface ProfileRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const ProfileRequestBuilderUriTemplate = "{+baseurl}/users/{user%2Did}/profile{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ProfileRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ProfileRequestBuilderNavigationMetadata: Record<Exclude<keyof ProfileRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    account: {
        requestsMetadata: AccountRequestBuilderRequestsMetadata,
        navigationMetadata: AccountRequestBuilderNavigationMetadata,
    },
    addresses: {
        requestsMetadata: AddressesRequestBuilderRequestsMetadata,
        navigationMetadata: AddressesRequestBuilderNavigationMetadata,
    },
    anniversaries: {
        requestsMetadata: AnniversariesRequestBuilderRequestsMetadata,
        navigationMetadata: AnniversariesRequestBuilderNavigationMetadata,
    },
    awards: {
        requestsMetadata: AwardsRequestBuilderRequestsMetadata,
        navigationMetadata: AwardsRequestBuilderNavigationMetadata,
    },
    certifications: {
        requestsMetadata: CertificationsRequestBuilderRequestsMetadata,
        navigationMetadata: CertificationsRequestBuilderNavigationMetadata,
    },
    educationalActivities: {
        requestsMetadata: EducationalActivitiesRequestBuilderRequestsMetadata,
        navigationMetadata: EducationalActivitiesRequestBuilderNavigationMetadata,
    },
    emails: {
        requestsMetadata: EmailsRequestBuilderRequestsMetadata,
        navigationMetadata: EmailsRequestBuilderNavigationMetadata,
    },
    interests: {
        requestsMetadata: InterestsRequestBuilderRequestsMetadata,
        navigationMetadata: InterestsRequestBuilderNavigationMetadata,
    },
    languages: {
        requestsMetadata: LanguagesRequestBuilderRequestsMetadata,
        navigationMetadata: LanguagesRequestBuilderNavigationMetadata,
    },
    names: {
        requestsMetadata: NamesRequestBuilderRequestsMetadata,
        navigationMetadata: NamesRequestBuilderNavigationMetadata,
    },
    notes: {
        requestsMetadata: NotesRequestBuilderRequestsMetadata,
        navigationMetadata: NotesRequestBuilderNavigationMetadata,
    },
    patents: {
        requestsMetadata: PatentsRequestBuilderRequestsMetadata,
        navigationMetadata: PatentsRequestBuilderNavigationMetadata,
    },
    phones: {
        requestsMetadata: PhonesRequestBuilderRequestsMetadata,
        navigationMetadata: PhonesRequestBuilderNavigationMetadata,
    },
    positions: {
        requestsMetadata: PositionsRequestBuilderRequestsMetadata,
        navigationMetadata: PositionsRequestBuilderNavigationMetadata,
    },
    projects: {
        requestsMetadata: ProjectsRequestBuilderRequestsMetadata,
        navigationMetadata: ProjectsRequestBuilderNavigationMetadata,
    },
    publications: {
        requestsMetadata: PublicationsRequestBuilderRequestsMetadata,
        navigationMetadata: PublicationsRequestBuilderNavigationMetadata,
    },
    skills: {
        requestsMetadata: SkillsRequestBuilderRequestsMetadata,
        navigationMetadata: SkillsRequestBuilderNavigationMetadata,
    },
    webAccounts: {
        requestsMetadata: WebAccountsRequestBuilderRequestsMetadata,
        navigationMetadata: WebAccountsRequestBuilderNavigationMetadata,
    },
    websites: {
        requestsMetadata: WebsitesRequestBuilderRequestsMetadata,
        navigationMetadata: WebsitesRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ProfileRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: ProfileRequestBuilderUriTemplate,
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: ProfileRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createProfileFromDiscriminatorValue,
        queryParametersMapper: ProfileRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: ProfileRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createProfileFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeProfile,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
