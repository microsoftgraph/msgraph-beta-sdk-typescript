/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createItemPatentCollectionResponseFromDiscriminatorValue, createItemPatentFromDiscriminatorValue, serializeItemPatent, type ItemPatent, type ItemPatentCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { ItemPatentItemRequestBuilderRequestsMetadata, type ItemPatentItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the patents property of the microsoft.graph.profile entity.
 */
export interface PatentsRequestBuilder extends BaseRequestBuilder<PatentsRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the patents property of the microsoft.graph.profile entity.
     * @param itemPatentId The unique identifier of itemPatent
     * @returns {ItemPatentItemRequestBuilder}
     */
     byItemPatentId(itemPatentId: string) : ItemPatentItemRequestBuilder;
    /**
     * Retrieve a list of itemPatent objects from a user's profile.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ItemPatentCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/profile-list-patents?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<PatentsRequestBuilderGetQueryParameters> | undefined) : Promise<ItemPatentCollectionResponse | undefined>;
    /**
     * Create a new itemPatent object within a user's profile.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ItemPatent>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/profile-post-patents?view=graph-rest-1.0|Find more info here}
     */
     post(body: ItemPatent, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ItemPatent | undefined>;
    /**
     * Retrieve a list of itemPatent objects from a user's profile.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<PatentsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create a new itemPatent object within a user's profile.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: ItemPatent, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Retrieve a list of itemPatent objects from a user's profile.
 */
export interface PatentsRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Uri template for the request builder.
 */
export const PatentsRequestBuilderUriTemplate = "{+baseurl}/users/{user%2Did}/profile/patents{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Provides operations to manage the patents property of the microsoft.graph.profile entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
} as const;
/**
 * Provides operations to manage the patents property of the microsoft.graph.profile entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    AllowedAudiences: "allowedAudiences",
    AllowedAudiencesDesc: "allowedAudiences desc",
    CreatedBy: "createdBy",
    CreatedByDesc: "createdBy desc",
    CreatedDateTime: "createdDateTime",
    CreatedDateTimeDesc: "createdDateTime desc",
    Inference: "inference",
    InferenceDesc: "inference desc",
    IsSearchable: "isSearchable",
    IsSearchableDesc: "isSearchable desc",
    LastModifiedBy: "lastModifiedBy",
    LastModifiedByDesc: "lastModifiedBy desc",
    LastModifiedDateTime: "lastModifiedDateTime",
    LastModifiedDateTimeDesc: "lastModifiedDateTime desc",
    Source: "source",
    SourceDesc: "source desc",
    Description: "description",
    DescriptionDesc: "description desc",
    DisplayName: "displayName",
    DisplayNameDesc: "displayName desc",
    IsPending: "isPending",
    IsPendingDesc: "isPending desc",
    IssuedDate: "issuedDate",
    IssuedDateDesc: "issuedDate desc",
    IssuingAuthority: "issuingAuthority",
    IssuingAuthorityDesc: "issuingAuthority desc",
    Number: "number",
    NumberDesc: "number desc",
    WebUrl: "webUrl",
    WebUrlDesc: "webUrl desc",
} as const;
/**
 * Provides operations to manage the patents property of the microsoft.graph.profile entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    AllowedAudiences: "allowedAudiences",
    CreatedBy: "createdBy",
    CreatedDateTime: "createdDateTime",
    Inference: "inference",
    IsSearchable: "isSearchable",
    LastModifiedBy: "lastModifiedBy",
    LastModifiedDateTime: "lastModifiedDateTime",
    Source: "source",
    Description: "description",
    DisplayName: "displayName",
    IsPending: "isPending",
    IssuedDate: "issuedDate",
    IssuingAuthority: "issuingAuthority",
    Number: "number",
    WebUrl: "webUrl",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const PatentsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const PatentsRequestBuilderNavigationMetadata: Record<Exclude<keyof PatentsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byItemPatentId: {
        requestsMetadata: ItemPatentItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["itemPatent%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const PatentsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: PatentsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createItemPatentCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: PatentsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: PatentsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createItemPatentFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeItemPatent,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
