/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createPersonCollectionResponseFromDiscriminatorValue, type PersonCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { PersonItemRequestBuilderRequestsMetadata, type PersonItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the people property of the microsoft.graph.user entity.
 */
export interface PeopleRequestBuilder extends BaseRequestBuilder<PeopleRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the people property of the microsoft.graph.user entity.
     * @param personId The unique identifier of person
     * @returns {PersonItemRequestBuilder}
     */
     byPersonId(personId: string) : PersonItemRequestBuilder;
    /**
     * Retrieve a list of person objects ordered by their relevance to the user, which is determined by the user's communication and collaboration patterns, and business relationships.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<PersonCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/user-list-people?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<PeopleRequestBuilderGetQueryParameters> | undefined) : Promise<PersonCollectionResponse | undefined>;
    /**
     * Retrieve a list of person objects ordered by their relevance to the user, which is determined by the user's communication and collaboration patterns, and business relationships.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<PeopleRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Retrieve a list of person objects ordered by their relevance to the user, which is determined by the user's communication and collaboration patterns, and business relationships.
 */
export interface PeopleRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Uri template for the request builder.
 */
export const PeopleRequestBuilderUriTemplate = "{+baseurl}/users/{user%2Did}/people{?%24count,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Provides operations to manage the people property of the microsoft.graph.user entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    Birthday: "birthday",
    BirthdayDesc: "birthday desc",
    CompanyName: "companyName",
    CompanyNameDesc: "companyName desc",
    Department: "department",
    DepartmentDesc: "department desc",
    DisplayName: "displayName",
    DisplayNameDesc: "displayName desc",
    EmailAddresses: "emailAddresses",
    EmailAddressesDesc: "emailAddresses desc",
    GivenName: "givenName",
    GivenNameDesc: "givenName desc",
    IsFavorite: "isFavorite",
    IsFavoriteDesc: "isFavorite desc",
    MailboxType: "mailboxType",
    MailboxTypeDesc: "mailboxType desc",
    OfficeLocation: "officeLocation",
    OfficeLocationDesc: "officeLocation desc",
    PersonNotes: "personNotes",
    PersonNotesDesc: "personNotes desc",
    PersonType: "personType",
    PersonTypeDesc: "personType desc",
    Phones: "phones",
    PhonesDesc: "phones desc",
    PostalAddresses: "postalAddresses",
    PostalAddressesDesc: "postalAddresses desc",
    Profession: "profession",
    ProfessionDesc: "profession desc",
    Sources: "sources",
    SourcesDesc: "sources desc",
    Surname: "surname",
    SurnameDesc: "surname desc",
    Title: "title",
    TitleDesc: "title desc",
    UserPrincipalName: "userPrincipalName",
    UserPrincipalNameDesc: "userPrincipalName desc",
    Websites: "websites",
    WebsitesDesc: "websites desc",
    YomiCompany: "yomiCompany",
    YomiCompanyDesc: "yomiCompany desc",
} as const;
/**
 * Provides operations to manage the people property of the microsoft.graph.user entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    Birthday: "birthday",
    CompanyName: "companyName",
    Department: "department",
    DisplayName: "displayName",
    EmailAddresses: "emailAddresses",
    GivenName: "givenName",
    IsFavorite: "isFavorite",
    MailboxType: "mailboxType",
    OfficeLocation: "officeLocation",
    PersonNotes: "personNotes",
    PersonType: "personType",
    Phones: "phones",
    PostalAddresses: "postalAddresses",
    Profession: "profession",
    Sources: "sources",
    Surname: "surname",
    Title: "title",
    UserPrincipalName: "userPrincipalName",
    Websites: "websites",
    YomiCompany: "yomiCompany",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const PeopleRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const PeopleRequestBuilderNavigationMetadata: Record<Exclude<keyof PeopleRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byPersonId: {
        requestsMetadata: PersonItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["person%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const PeopleRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: PeopleRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createPersonCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: PeopleRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
