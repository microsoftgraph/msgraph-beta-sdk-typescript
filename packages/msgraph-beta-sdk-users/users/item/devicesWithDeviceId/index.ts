/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createDeviceFromDiscriminatorValue, serializeDevice, type Device } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the devices property of the microsoft.graph.user entity.
 */
export interface DevicesWithDeviceIdRequestBuilder extends BaseRequestBuilder<DevicesWithDeviceIdRequestBuilder> {
    /**
     * Delete navigation property devices for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get devices from users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Device>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<DevicesWithDeviceIdRequestBuilderGetQueryParameters> | undefined) : Promise<Device | undefined>;
    /**
     * Update the navigation property devices in users
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Device>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: Device, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Device | undefined>;
    /**
     * Delete navigation property devices for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Get devices from users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<DevicesWithDeviceIdRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property devices in users
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: Device, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get devices from users
 */
export interface DevicesWithDeviceIdRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
}
export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Uri template for the request builder.
 */
export const DevicesWithDeviceIdRequestBuilderUriTemplate = "{+baseurl}/users/{user%2Did}/devices(deviceId='{deviceId}'){?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const DevicesWithDeviceIdRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const DevicesWithDeviceIdRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: DevicesWithDeviceIdRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: DevicesWithDeviceIdRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDeviceFromDiscriminatorValue,
        queryParametersMapper: DevicesWithDeviceIdRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: DevicesWithDeviceIdRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDeviceFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeDevice,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Provides operations to manage the devices property of the microsoft.graph.user entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    Commands: "commands",
    Extensions: "extensions",
    MemberOf: "memberOf",
    RegisteredOwners: "registeredOwners",
    RegisteredUsers: "registeredUsers",
    TransitiveMemberOf: "transitiveMemberOf",
    UsageRights: "usageRights",
} as const;
/**
 * Provides operations to manage the devices property of the microsoft.graph.user entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    DeletedDateTime: "deletedDateTime",
    AccountEnabled: "accountEnabled",
    AlternativeSecurityIds: "alternativeSecurityIds",
    ApproximateLastSignInDateTime: "approximateLastSignInDateTime",
    ComplianceExpirationDateTime: "complianceExpirationDateTime",
    DeviceCategory: "deviceCategory",
    DeviceId: "deviceId",
    DeviceMetadata: "deviceMetadata",
    DeviceOwnership: "deviceOwnership",
    DeviceVersion: "deviceVersion",
    DisplayName: "displayName",
    DomainName: "domainName",
    EnrollmentProfileName: "enrollmentProfileName",
    EnrollmentType: "enrollmentType",
    ExtensionAttributes: "extensionAttributes",
    Hostnames: "hostnames",
    IsCompliant: "isCompliant",
    IsManaged: "isManaged",
    IsManagementRestricted: "isManagementRestricted",
    IsRooted: "isRooted",
    Kind: "kind",
    ManagementType: "managementType",
    Manufacturer: "manufacturer",
    MdmAppId: "mdmAppId",
    Model: "model",
    Name: "name",
    OnPremisesLastSyncDateTime: "onPremisesLastSyncDateTime",
    OnPremisesSecurityIdentifier: "onPremisesSecurityIdentifier",
    OnPremisesSyncEnabled: "onPremisesSyncEnabled",
    OperatingSystem: "operatingSystem",
    OperatingSystemVersion: "operatingSystemVersion",
    PhysicalIds: "physicalIds",
    Platform: "platform",
    ProfileType: "profileType",
    RegistrationDateTime: "registrationDateTime",
    Status: "status",
    SystemLabels: "systemLabels",
    TrustType: "trustType",
    Commands: "commands",
    Extensions: "extensions",
    MemberOf: "memberOf",
    RegisteredOwners: "registeredOwners",
    RegisteredUsers: "registeredUsers",
    TransitiveMemberOf: "transitiveMemberOf",
    UsageRights: "usageRights",
} as const;
/* tslint:enable */
/* eslint-enable */
