/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createOutlookTaskCollectionResponseFromDiscriminatorValue, createOutlookTaskFromDiscriminatorValue, serializeOutlookTask, type OutlookTask, type OutlookTaskCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { OutlookTaskItemRequestBuilderNavigationMetadata, OutlookTaskItemRequestBuilderRequestsMetadata, type OutlookTaskItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the tasks property of the microsoft.graph.outlookTaskFolder entity.
 */
export interface TasksRequestBuilder extends BaseRequestBuilder<TasksRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     * @deprecated The Outlook tasks API is deprecated and will stop returning data on February 20, 2023. Please use the new To Do API. For more details, please visit https://developer.microsoft.com/en-us/office/blogs/announcing-the-general-availability-of-microsoft-to-do-apis-on-graph/ as of 2020-08/Outlook_Tasks
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the tasks property of the microsoft.graph.outlookTaskFolder entity.
     * @param outlookTaskId The unique identifier of outlookTask
     * @returns {OutlookTaskItemRequestBuilder}
     * @deprecated The Outlook tasks API is deprecated and will stop returning data on February 20, 2023. Please use the new To Do API. For more details, please visit https://developer.microsoft.com/en-us/office/blogs/announcing-the-general-availability-of-microsoft-to-do-apis-on-graph/ as of 2020-08/Outlook_Tasks
     */
     byOutlookTaskId(outlookTaskId: string) : OutlookTaskItemRequestBuilder;
    /**
     * Get all the Outlook tasks in the specified folder. By default, this operation (and the POST, PATCH, and complete task operations) returnsdate-related properties in UTC.  You can use a Prefer: outlook.timezone request header to have all the date-related properties in the response represented in a time zonedifferent than UTC. See an example for getting a single task. You can apply the header similarly to get multiple tasks. If there is more than one task group, and you want to get all the tasks in a specific task group, firstget all the task folders in that task group,and then get the tasks in each of these task folders.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<OutlookTaskCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @deprecated The Outlook tasks API is deprecated and will stop returning data on February 20, 2023. Please use the new To Do API. For more details, please visit https://developer.microsoft.com/en-us/office/blogs/announcing-the-general-availability-of-microsoft-to-do-apis-on-graph/ as of 2020-08/Outlook_Tasks
     * @see {@link https://learn.microsoft.com/graph/api/outlooktaskfolder-list-tasks?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<TasksRequestBuilderGetQueryParameters> | undefined) : Promise<OutlookTaskCollectionResponse | undefined>;
    /**
     * Create an Outlook task in the specified task folder. The POST method always ignores the time portion of startDateTime and dueDateTime in the request body, and assumes the time to be always midnight in the specified time zone.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<OutlookTask>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @deprecated The Outlook tasks API is deprecated and will stop returning data on February 20, 2023. Please use the new To Do API. For more details, please visit https://developer.microsoft.com/en-us/office/blogs/announcing-the-general-availability-of-microsoft-to-do-apis-on-graph/ as of 2020-08/Outlook_Tasks
     * @see {@link https://learn.microsoft.com/graph/api/outlooktaskfolder-post-tasks?view=graph-rest-1.0|Find more info here}
     */
     post(body: OutlookTask, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<OutlookTask | undefined>;
    /**
     * Get all the Outlook tasks in the specified folder. By default, this operation (and the POST, PATCH, and complete task operations) returnsdate-related properties in UTC.  You can use a Prefer: outlook.timezone request header to have all the date-related properties in the response represented in a time zonedifferent than UTC. See an example for getting a single task. You can apply the header similarly to get multiple tasks. If there is more than one task group, and you want to get all the tasks in a specific task group, firstget all the task folders in that task group,and then get the tasks in each of these task folders.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     * @deprecated The Outlook tasks API is deprecated and will stop returning data on February 20, 2023. Please use the new To Do API. For more details, please visit https://developer.microsoft.com/en-us/office/blogs/announcing-the-general-availability-of-microsoft-to-do-apis-on-graph/ as of 2020-08/Outlook_Tasks
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<TasksRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create an Outlook task in the specified task folder. The POST method always ignores the time portion of startDateTime and dueDateTime in the request body, and assumes the time to be always midnight in the specified time zone.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     * @deprecated The Outlook tasks API is deprecated and will stop returning data on February 20, 2023. Please use the new To Do API. For more details, please visit https://developer.microsoft.com/en-us/office/blogs/announcing-the-general-availability-of-microsoft-to-do-apis-on-graph/ as of 2020-08/Outlook_Tasks
     */
     toPostRequestInformation(body: OutlookTask, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get all the Outlook tasks in the specified folder. By default, this operation (and the POST, PATCH, and complete task operations) returnsdate-related properties in UTC.  You can use a Prefer: outlook.timezone request header to have all the date-related properties in the response represented in a time zonedifferent than UTC. See an example for getting a single task. You can apply the header similarly to get multiple tasks. If there is more than one task group, and you want to get all the tasks in a specific task group, firstget all the task folders in that task group,and then get the tasks in each of these task folders.
 */
export interface TasksRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Uri template for the request builder.
 */
export const TasksRequestBuilderUriTemplate = "{+baseurl}/users/{user%2Did}/outlook/taskGroups/{outlookTaskGroup%2Did}/taskFolders/{outlookTaskFolder%2Did}/tasks{?%24count,%24filter,%24orderby,%24select,%24skip,%24top}";
/**
 * Provides operations to manage the tasks property of the microsoft.graph.outlookTaskFolder entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    Categories: "categories",
    CategoriesDesc: "categories desc",
    ChangeKey: "changeKey",
    ChangeKeyDesc: "changeKey desc",
    CreatedDateTime: "createdDateTime",
    CreatedDateTimeDesc: "createdDateTime desc",
    LastModifiedDateTime: "lastModifiedDateTime",
    LastModifiedDateTimeDesc: "lastModifiedDateTime desc",
    AssignedTo: "assignedTo",
    AssignedToDesc: "assignedTo desc",
    Body: "body",
    BodyDesc: "body desc",
    CompletedDateTime: "completedDateTime",
    CompletedDateTimeDesc: "completedDateTime desc",
    DueDateTime: "dueDateTime",
    DueDateTimeDesc: "dueDateTime desc",
    HasAttachments: "hasAttachments",
    HasAttachmentsDesc: "hasAttachments desc",
    Importance: "importance",
    ImportanceDesc: "importance desc",
    IsReminderOn: "isReminderOn",
    IsReminderOnDesc: "isReminderOn desc",
    Owner: "owner",
    OwnerDesc: "owner desc",
    ParentFolderId: "parentFolderId",
    ParentFolderIdDesc: "parentFolderId desc",
    Recurrence: "recurrence",
    RecurrenceDesc: "recurrence desc",
    ReminderDateTime: "reminderDateTime",
    ReminderDateTimeDesc: "reminderDateTime desc",
    Sensitivity: "sensitivity",
    SensitivityDesc: "sensitivity desc",
    StartDateTime: "startDateTime",
    StartDateTimeDesc: "startDateTime desc",
    Status: "status",
    StatusDesc: "status desc",
    Subject: "subject",
    SubjectDesc: "subject desc",
} as const;
/**
 * Provides operations to manage the tasks property of the microsoft.graph.outlookTaskFolder entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    Categories: "categories",
    ChangeKey: "changeKey",
    CreatedDateTime: "createdDateTime",
    LastModifiedDateTime: "lastModifiedDateTime",
    AssignedTo: "assignedTo",
    Body: "body",
    CompletedDateTime: "completedDateTime",
    DueDateTime: "dueDateTime",
    HasAttachments: "hasAttachments",
    Importance: "importance",
    IsReminderOn: "isReminderOn",
    Owner: "owner",
    ParentFolderId: "parentFolderId",
    Recurrence: "recurrence",
    ReminderDateTime: "reminderDateTime",
    Sensitivity: "sensitivity",
    StartDateTime: "startDateTime",
    Status: "status",
    Subject: "subject",
    Attachments: "attachments",
    MultiValueExtendedProperties: "multiValueExtendedProperties",
    SingleValueExtendedProperties: "singleValueExtendedProperties",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const TasksRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const TasksRequestBuilderNavigationMetadata: Record<Exclude<keyof TasksRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byOutlookTaskId: {
        requestsMetadata: OutlookTaskItemRequestBuilderRequestsMetadata,
        navigationMetadata: OutlookTaskItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["outlookTask%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const TasksRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: TasksRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createOutlookTaskCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: TasksRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: TasksRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createOutlookTaskFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeOutlookTask,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
