/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createServicePrincipalFromDiscriminatorValue, type ServicePrincipal } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the appRoleAssignedResources property of the microsoft.graph.user entity.
 */
export interface ServicePrincipalItemRequestBuilder extends BaseRequestBuilder<ServicePrincipalItemRequestBuilder> {
    /**
     * Get appRoleAssignedResources from users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ServicePrincipal>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<ServicePrincipalItemRequestBuilderGetQueryParameters> | undefined) : Promise<ServicePrincipal | undefined>;
    /**
     * Get appRoleAssignedResources from users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ServicePrincipalItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Get appRoleAssignedResources from users
 */
export interface ServicePrincipalItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
}
/**
 * Uri template for the request builder.
 */
export const ServicePrincipalItemRequestBuilderUriTemplate = "{+baseurl}/users/{user%2Did}/appRoleAssignedResources/{servicePrincipal%2Did}{?%24expand,%24select}";
/**
 * Provides operations to manage the appRoleAssignedResources property of the microsoft.graph.user entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    AppManagementPolicies: "appManagementPolicies",
    AppRoleAssignedTo: "appRoleAssignedTo",
    AppRoleAssignments: "appRoleAssignments",
    ClaimsMappingPolicies: "claimsMappingPolicies",
    CreatedObjects: "createdObjects",
    DelegatedPermissionClassifications: "delegatedPermissionClassifications",
    Endpoints: "endpoints",
    FederatedIdentityCredentials: "federatedIdentityCredentials",
    HomeRealmDiscoveryPolicies: "homeRealmDiscoveryPolicies",
    LicenseDetails: "licenseDetails",
    MemberOf: "memberOf",
    Oauth2PermissionGrants: "oauth2PermissionGrants",
    OwnedObjects: "ownedObjects",
    Owners: "owners",
    RemoteDesktopSecurityConfiguration: "remoteDesktopSecurityConfiguration",
    Synchronization: "synchronization",
    TokenIssuancePolicies: "tokenIssuancePolicies",
    TokenLifetimePolicies: "tokenLifetimePolicies",
    TransitiveMemberOf: "transitiveMemberOf",
} as const;
/**
 * Provides operations to manage the appRoleAssignedResources property of the microsoft.graph.user entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    DeletedDateTime: "deletedDateTime",
    AccountEnabled: "accountEnabled",
    AddIns: "addIns",
    AlternativeNames: "alternativeNames",
    AppDescription: "appDescription",
    AppDisplayName: "appDisplayName",
    AppId: "appId",
    ApplicationTemplateId: "applicationTemplateId",
    AppOwnerOrganizationId: "appOwnerOrganizationId",
    AppRoleAssignmentRequired: "appRoleAssignmentRequired",
    AppRoles: "appRoles",
    CustomSecurityAttributes: "customSecurityAttributes",
    Description: "description",
    DisabledByMicrosoftStatus: "disabledByMicrosoftStatus",
    DisplayName: "displayName",
    ErrorUrl: "errorUrl",
    Homepage: "homepage",
    Info: "info",
    KeyCredentials: "keyCredentials",
    LoginUrl: "loginUrl",
    LogoutUrl: "logoutUrl",
    Notes: "notes",
    NotificationEmailAddresses: "notificationEmailAddresses",
    PasswordCredentials: "passwordCredentials",
    PasswordSingleSignOnSettings: "passwordSingleSignOnSettings",
    PreferredSingleSignOnMode: "preferredSingleSignOnMode",
    PreferredTokenSigningKeyEndDateTime: "preferredTokenSigningKeyEndDateTime",
    PreferredTokenSigningKeyThumbprint: "preferredTokenSigningKeyThumbprint",
    PublishedPermissionScopes: "publishedPermissionScopes",
    PublisherName: "publisherName",
    ReplyUrls: "replyUrls",
    SamlMetadataUrl: "samlMetadataUrl",
    SamlSingleSignOnSettings: "samlSingleSignOnSettings",
    ServicePrincipalNames: "servicePrincipalNames",
    ServicePrincipalType: "servicePrincipalType",
    SignInAudience: "signInAudience",
    Tags: "tags",
    TokenEncryptionKeyId: "tokenEncryptionKeyId",
    VerifiedPublisher: "verifiedPublisher",
    AppManagementPolicies: "appManagementPolicies",
    AppRoleAssignedTo: "appRoleAssignedTo",
    AppRoleAssignments: "appRoleAssignments",
    ClaimsMappingPolicies: "claimsMappingPolicies",
    CreatedObjects: "createdObjects",
    DelegatedPermissionClassifications: "delegatedPermissionClassifications",
    Endpoints: "endpoints",
    FederatedIdentityCredentials: "federatedIdentityCredentials",
    HomeRealmDiscoveryPolicies: "homeRealmDiscoveryPolicies",
    LicenseDetails: "licenseDetails",
    MemberOf: "memberOf",
    Oauth2PermissionGrants: "oauth2PermissionGrants",
    OwnedObjects: "ownedObjects",
    Owners: "owners",
    RemoteDesktopSecurityConfiguration: "remoteDesktopSecurityConfiguration",
    Synchronization: "synchronization",
    TokenIssuancePolicies: "tokenIssuancePolicies",
    TokenLifetimePolicies: "tokenLifetimePolicies",
    TransitiveMemberOf: "transitiveMemberOf",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ServicePrincipalItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ServicePrincipalItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ServicePrincipalItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createServicePrincipalFromDiscriminatorValue,
        queryParametersMapper: ServicePrincipalItemRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
