/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createPlannerUserFromDiscriminatorValue, serializePlannerUser, type PlannerUser } from '@microsoft/msgraph-beta-sdk/models/';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
// @ts-ignore
import { AllRequestBuilderNavigationMetadata, AllRequestBuilderRequestsMetadata, type AllRequestBuilder } from './all/';
// @ts-ignore
import { FavoritePlansRequestBuilderNavigationMetadata, FavoritePlansRequestBuilderRequestsMetadata, type FavoritePlansRequestBuilder } from './favoritePlans/';
// @ts-ignore
import { MyDayTasksRequestBuilderNavigationMetadata, MyDayTasksRequestBuilderRequestsMetadata, type MyDayTasksRequestBuilder } from './myDayTasks/';
// @ts-ignore
import { PlansRequestBuilderNavigationMetadata, PlansRequestBuilderRequestsMetadata, type PlansRequestBuilder } from './plans/';
// @ts-ignore
import { RecentPlansRequestBuilderNavigationMetadata, RecentPlansRequestBuilderRequestsMetadata, type RecentPlansRequestBuilder } from './recentPlans/';
// @ts-ignore
import { RosterPlansRequestBuilderNavigationMetadata, RosterPlansRequestBuilderRequestsMetadata, type RosterPlansRequestBuilder } from './rosterPlans/';
// @ts-ignore
import { TasksRequestBuilderNavigationMetadata, TasksRequestBuilderRequestsMetadata, type TasksRequestBuilder } from './tasks/';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the planner property of the microsoft.graph.user entity.
 */
export interface PlannerRequestBuilder extends BaseRequestBuilder<PlannerRequestBuilder> {
    /**
     * Provides operations to manage the all property of the microsoft.graph.plannerUser entity.
     */
    get all(): AllRequestBuilder;
    /**
     * Provides operations to manage the favoritePlans property of the microsoft.graph.plannerUser entity.
     */
    get favoritePlans(): FavoritePlansRequestBuilder;
    /**
     * Provides operations to manage the myDayTasks property of the microsoft.graph.plannerUser entity.
     */
    get myDayTasks(): MyDayTasksRequestBuilder;
    /**
     * Provides operations to manage the plans property of the microsoft.graph.plannerUser entity.
     */
    get plans(): PlansRequestBuilder;
    /**
     * Provides operations to manage the recentPlans property of the microsoft.graph.plannerUser entity.
     */
    get recentPlans(): RecentPlansRequestBuilder;
    /**
     * Provides operations to manage the rosterPlans property of the microsoft.graph.plannerUser entity.
     */
    get rosterPlans(): RosterPlansRequestBuilder;
    /**
     * Provides operations to manage the tasks property of the microsoft.graph.plannerUser entity.
     */
    get tasks(): TasksRequestBuilder;
    /**
     * Delete navigation property planner for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Retrieve the properties and relationships of a plannerUser object. The returned properties include the user's favorite plans and recently viewed plans. 
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<PlannerUser>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/planneruser-get?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<PlannerRequestBuilderGetQueryParameters> | undefined) : Promise<PlannerUser | undefined>;
    /**
     * Update the navigation property planner in users
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<PlannerUser>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/planneruser-update?view=graph-rest-1.0|Find more info here}
     */
     patch(body: PlannerUser, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<PlannerUser | undefined>;
    /**
     * Delete navigation property planner for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Retrieve the properties and relationships of a plannerUser object. The returned properties include the user's favorite plans and recently viewed plans. 
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<PlannerRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property planner in users
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: PlannerUser, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Retrieve the properties and relationships of a plannerUser object. The returned properties include the user's favorite plans and recently viewed plans. 
 */
export interface PlannerRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const PlannerRequestBuilderUriTemplate = "{+baseurl}/users/{user%2Did}/planner{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const PlannerRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const PlannerRequestBuilderNavigationMetadata: Record<Exclude<keyof PlannerRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    all: {
        requestsMetadata: AllRequestBuilderRequestsMetadata,
        navigationMetadata: AllRequestBuilderNavigationMetadata,
    },
    favoritePlans: {
        requestsMetadata: FavoritePlansRequestBuilderRequestsMetadata,
        navigationMetadata: FavoritePlansRequestBuilderNavigationMetadata,
    },
    myDayTasks: {
        requestsMetadata: MyDayTasksRequestBuilderRequestsMetadata,
        navigationMetadata: MyDayTasksRequestBuilderNavigationMetadata,
    },
    plans: {
        requestsMetadata: PlansRequestBuilderRequestsMetadata,
        navigationMetadata: PlansRequestBuilderNavigationMetadata,
    },
    recentPlans: {
        requestsMetadata: RecentPlansRequestBuilderRequestsMetadata,
        navigationMetadata: RecentPlansRequestBuilderNavigationMetadata,
    },
    rosterPlans: {
        requestsMetadata: RosterPlansRequestBuilderRequestsMetadata,
        navigationMetadata: RosterPlansRequestBuilderNavigationMetadata,
    },
    tasks: {
        requestsMetadata: TasksRequestBuilderRequestsMetadata,
        navigationMetadata: TasksRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const PlannerRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: PlannerRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: PlannerRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createPlannerUserFromDiscriminatorValue,
        queryParametersMapper: PlannerRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: PlannerRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createPlannerUserFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializePlannerUser,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
