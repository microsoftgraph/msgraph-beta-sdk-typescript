/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createPlannerPlanCollectionResponseFromDiscriminatorValue, type PlannerPlanCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, CountRequestBuilderUriTemplate, type CountRequestBuilder } from './count/';
import { PlannerPlanItemRequestBuilderRequestsMetadata, PlannerPlanItemRequestBuilderUriTemplate, type PlannerPlanItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the favoritePlans property of the microsoft.graph.plannerUser entity.
 */
export interface FavoritePlansRequestBuilder extends BaseRequestBuilder<FavoritePlansRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the favoritePlans property of the microsoft.graph.plannerUser entity.
     * @param plannerPlanId The unique identifier of plannerPlan
     * @returns a PlannerPlanItemRequestBuilder
     */
     byPlannerPlanId(plannerPlanId: string) : PlannerPlanItemRequestBuilder;
    /**
     * Retrieve a list of plannerPlans that are marked as favorite by a user. You can mark a plan as favorite by updating the plannerUser resource.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of PlannerPlanCollectionResponse
     * @see {@link https://learn.microsoft.com/graph/api/planneruser-list-favoriteplans?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<FavoritePlansRequestBuilderGetQueryParameters> | undefined) : Promise<PlannerPlanCollectionResponse | undefined>;
    /**
     * Retrieve a list of plannerPlans that are marked as favorite by a user. You can mark a plan as favorite by updating the plannerUser resource.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<FavoritePlansRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Retrieve a list of plannerPlans that are marked as favorite by a user. You can mark a plan as favorite by updating the plannerUser resource.
 */
export interface FavoritePlansRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: string[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: string[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const FavoritePlansRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const FavoritePlansRequestBuilderNavigationMetadata: Record<Exclude<keyof FavoritePlansRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byPlannerPlanId: {
        uriTemplate: PlannerPlanItemRequestBuilderUriTemplate,
        requestsMetadata: PlannerPlanItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["plannerPlan%2Did"],
    },
    count: {
        uriTemplate: CountRequestBuilderUriTemplate,
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const FavoritePlansRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createPlannerPlanCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: FavoritePlansRequestBuilderGetQueryParametersMapper,
    },
};
/**
 * Uri template for the request builder.
 */
export const FavoritePlansRequestBuilderUriTemplate = "{+baseurl}/users/{user%2Did}/planner/favoritePlans{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/* tslint:enable */
/* eslint-enable */
