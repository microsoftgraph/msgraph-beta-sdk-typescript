/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {InvalidateAllRefreshTokensPostResponse}
 */
// @ts-ignore
export function createInvalidateAllRefreshTokensPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoInvalidateAllRefreshTokensPostResponse;
}
/**
 * The deserialization information for the current model
 * @param InvalidateAllRefreshTokensPostResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoInvalidateAllRefreshTokensPostResponse(invalidateAllRefreshTokensPostResponse: Partial<InvalidateAllRefreshTokensPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { invalidateAllRefreshTokensPostResponse.backingStoreEnabled = true; },
        "value": n => { invalidateAllRefreshTokensPostResponse.value = n.getBooleanValue(); },
    }
}
export interface InvalidateAllRefreshTokensPostResponse extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The value property
     */
    value?: boolean | null;
}
/**
 * Provides operations to call the invalidateAllRefreshTokens method.
 */
export interface InvalidateAllRefreshTokensRequestBuilder extends BaseRequestBuilder<InvalidateAllRefreshTokensRequestBuilder> {
    /**
     * Invalidates all of the user's refresh tokens issued to applications and session cookies in a user's browser, by resetting the refreshTokensValidFromDateTime user property to the current date-time. Typically, this operation is performed (by the user or an administrator) if the user has a lost or stolen device. This operation would prevent access to any of the organization's data accessed through applications on the device without the user first being required to sign in again. In fact, this operation would force the user to sign in again for all applications that they have previously consented to, independent of device. For developers, if the application attempts to redeem a delegated access token for this user by using an invalidated refresh token, the application receives an error. If this happens, the application needs to acquire a new refresh token by making a request to the OAuth 2.0 /authorize endpoint, which forces the user to sign in.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<InvalidateAllRefreshTokensPostResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<InvalidateAllRefreshTokensPostResponse | undefined>;
    /**
     * Invalidates all of the user's refresh tokens issued to applications and session cookies in a user's browser, by resetting the refreshTokensValidFromDateTime user property to the current date-time. Typically, this operation is performed (by the user or an administrator) if the user has a lost or stolen device. This operation would prevent access to any of the organization's data accessed through applications on the device without the user first being required to sign in again. In fact, this operation would force the user to sign in again for all applications that they have previously consented to, independent of device. For developers, if the application attempts to redeem a delegated access token for this user by using an invalidated refresh token, the application receives an error. If this happens, the application needs to acquire a new refresh token by making a request to the OAuth 2.0 /authorize endpoint, which forces the user to sign in.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param InvalidateAllRefreshTokensPostResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeInvalidateAllRefreshTokensPostResponse(writer: SerializationWriter, invalidateAllRefreshTokensPostResponse: Partial<InvalidateAllRefreshTokensPostResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!invalidateAllRefreshTokensPostResponse || isSerializingDerivedType) { return; }
    writer.writeBooleanValue("value", invalidateAllRefreshTokensPostResponse.value);
    writer.writeAdditionalData(invalidateAllRefreshTokensPostResponse.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const InvalidateAllRefreshTokensRequestBuilderUriTemplate = "{+baseurl}/users/{user%2Did}/invalidateAllRefreshTokens";
/**
 * Metadata for all the requests in the request builder.
 */
export const InvalidateAllRefreshTokensRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: InvalidateAllRefreshTokensRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createInvalidateAllRefreshTokensPostResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
