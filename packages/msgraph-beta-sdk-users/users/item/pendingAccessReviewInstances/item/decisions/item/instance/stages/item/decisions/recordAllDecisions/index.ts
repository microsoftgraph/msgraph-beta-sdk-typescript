/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RecordAllDecisionsPostRequestBody}
 */
export function createRecordAllDecisionsPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRecordAllDecisionsPostRequestBody;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoRecordAllDecisionsPostRequestBody(recordAllDecisionsPostRequestBody: Partial<RecordAllDecisionsPostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { recordAllDecisionsPostRequestBody.backingStoreEnabled = true; },
        "decision": n => { recordAllDecisionsPostRequestBody.decision = n.getStringValue(); },
        "justification": n => { recordAllDecisionsPostRequestBody.justification = n.getStringValue(); },
        "principalId": n => { recordAllDecisionsPostRequestBody.principalId = n.getStringValue(); },
        "resourceId": n => { recordAllDecisionsPostRequestBody.resourceId = n.getStringValue(); },
    }
}
export interface RecordAllDecisionsPostRequestBody extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The decision property
     */
    decision?: string;
    /**
     * The justification property
     */
    justification?: string;
    /**
     * The principalId property
     */
    principalId?: string;
    /**
     * The resourceId property
     */
    resourceId?: string;
}
/**
 * Provides operations to call the recordAllDecisions method.
 */
export interface RecordAllDecisionsRequestBuilder extends BaseRequestBuilder<RecordAllDecisionsRequestBuilder> {
    /**
     * As a reviewer of an access review, record a decision for an accessReviewInstanceDecisionItem that is assigned to you and that matches the principal or resource IDs specified. If no IDs are specified, the decisions will apply to every accessReviewInstanceDecisionItem for which you are the reviewer.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/accessreviewinstancedecisionitem-recordalldecisions?view=graph-rest-beta|Find more info here}
     */
     post(body: RecordAllDecisionsPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * As a reviewer of an access review, record a decision for an accessReviewInstanceDecisionItem that is assigned to you and that matches the principal or resource IDs specified. If no IDs are specified, the decisions will apply to every accessReviewInstanceDecisionItem for which you are the reviewer.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: RecordAllDecisionsPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRecordAllDecisionsPostRequestBody(writer: SerializationWriter, recordAllDecisionsPostRequestBody: Partial<RecordAllDecisionsPostRequestBody> | undefined = {}) : void {
    writer.writeStringValue("decision", recordAllDecisionsPostRequestBody.decision);
    writer.writeStringValue("justification", recordAllDecisionsPostRequestBody.justification);
    writer.writeStringValue("principalId", recordAllDecisionsPostRequestBody.principalId);
    writer.writeStringValue("resourceId", recordAllDecisionsPostRequestBody.resourceId);
    writer.writeAdditionalData(recordAllDecisionsPostRequestBody.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const RecordAllDecisionsRequestBuilderUriTemplate = "{+baseurl}/users/{user%2Did}/pendingAccessReviewInstances/{accessReviewInstance%2Did}/decisions/{accessReviewInstanceDecisionItem%2Did}/instance/stages/{accessReviewStage%2Did}/decisions/recordAllDecisions";
/**
 * Metadata for all the requests in the request builder.
 */
export const RecordAllDecisionsRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: RecordAllDecisionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeRecordAllDecisionsPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
