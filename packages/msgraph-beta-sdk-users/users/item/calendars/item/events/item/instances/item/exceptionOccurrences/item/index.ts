/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createEventFromDiscriminatorValue, type Event } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { AcceptRequestBuilderRequestsMetadata, AcceptRequestBuilderUriTemplate, type AcceptRequestBuilder } from './accept/';
import { AttachmentsRequestBuilderNavigationMetadata, AttachmentsRequestBuilderRequestsMetadata, AttachmentsRequestBuilderUriTemplate, type AttachmentsRequestBuilder } from './attachments/';
import { CalendarRequestBuilderRequestsMetadata, CalendarRequestBuilderUriTemplate, type CalendarRequestBuilder } from './calendar/';
import { CancelRequestBuilderRequestsMetadata, CancelRequestBuilderUriTemplate, type CancelRequestBuilder } from './cancel/';
import { DeclineRequestBuilderRequestsMetadata, DeclineRequestBuilderUriTemplate, type DeclineRequestBuilder } from './decline/';
import { DismissReminderRequestBuilderRequestsMetadata, DismissReminderRequestBuilderUriTemplate, type DismissReminderRequestBuilder } from './dismissReminder/';
import { ExtensionsRequestBuilderNavigationMetadata, ExtensionsRequestBuilderRequestsMetadata, ExtensionsRequestBuilderUriTemplate, type ExtensionsRequestBuilder } from './extensions/';
import { ForwardRequestBuilderRequestsMetadata, ForwardRequestBuilderUriTemplate, type ForwardRequestBuilder } from './forward/';
import { SnoozeReminderRequestBuilderRequestsMetadata, SnoozeReminderRequestBuilderUriTemplate, type SnoozeReminderRequestBuilder } from './snoozeReminder/';
import { TentativelyAcceptRequestBuilderRequestsMetadata, TentativelyAcceptRequestBuilderUriTemplate, type TentativelyAcceptRequestBuilder } from './tentativelyAccept/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the exceptionOccurrences property of the microsoft.graph.event entity.
 */
export interface EventItemRequestBuilder extends BaseRequestBuilder<EventItemRequestBuilder> {
    /**
     * Provides operations to call the accept method.
     */
    get accept(): AcceptRequestBuilder;
    /**
     * Provides operations to manage the attachments property of the microsoft.graph.event entity.
     */
    get attachments(): AttachmentsRequestBuilder;
    /**
     * Provides operations to manage the calendar property of the microsoft.graph.event entity.
     */
    get calendar(): CalendarRequestBuilder;
    /**
     * Provides operations to call the cancel method.
     */
    get cancel(): CancelRequestBuilder;
    /**
     * Provides operations to call the decline method.
     */
    get decline(): DeclineRequestBuilder;
    /**
     * Provides operations to call the dismissReminder method.
     */
    get dismissReminder(): DismissReminderRequestBuilder;
    /**
     * Provides operations to manage the extensions property of the microsoft.graph.event entity.
     */
    get extensions(): ExtensionsRequestBuilder;
    /**
     * Provides operations to call the forward method.
     */
    get forward(): ForwardRequestBuilder;
    /**
     * Provides operations to call the snoozeReminder method.
     */
    get snoozeReminder(): SnoozeReminderRequestBuilder;
    /**
     * Provides operations to call the tentativelyAccept method.
     */
    get tentativelyAccept(): TentativelyAcceptRequestBuilder;
    /**
     * Get exceptionOccurrences from users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of Event
     */
     get(requestConfiguration?: RequestConfiguration<EventItemRequestBuilderGetQueryParameters> | undefined) : Promise<Event | undefined>;
    /**
     * Get exceptionOccurrences from users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<EventItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Get exceptionOccurrences from users
 */
export interface EventItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const EventItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const EventItemRequestBuilderNavigationMetadata: Record<Exclude<keyof EventItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    accept: {
        uriTemplate: AcceptRequestBuilderUriTemplate,
        requestsMetadata: AcceptRequestBuilderRequestsMetadata,
    },
    attachments: {
        uriTemplate: AttachmentsRequestBuilderUriTemplate,
        requestsMetadata: AttachmentsRequestBuilderRequestsMetadata,
        navigationMetadata: AttachmentsRequestBuilderNavigationMetadata,
    },
    calendar: {
        uriTemplate: CalendarRequestBuilderUriTemplate,
        requestsMetadata: CalendarRequestBuilderRequestsMetadata,
    },
    cancel: {
        uriTemplate: CancelRequestBuilderUriTemplate,
        requestsMetadata: CancelRequestBuilderRequestsMetadata,
    },
    decline: {
        uriTemplate: DeclineRequestBuilderUriTemplate,
        requestsMetadata: DeclineRequestBuilderRequestsMetadata,
    },
    dismissReminder: {
        uriTemplate: DismissReminderRequestBuilderUriTemplate,
        requestsMetadata: DismissReminderRequestBuilderRequestsMetadata,
    },
    extensions: {
        uriTemplate: ExtensionsRequestBuilderUriTemplate,
        requestsMetadata: ExtensionsRequestBuilderRequestsMetadata,
        navigationMetadata: ExtensionsRequestBuilderNavigationMetadata,
    },
    forward: {
        uriTemplate: ForwardRequestBuilderUriTemplate,
        requestsMetadata: ForwardRequestBuilderRequestsMetadata,
    },
    snoozeReminder: {
        uriTemplate: SnoozeReminderRequestBuilderUriTemplate,
        requestsMetadata: SnoozeReminderRequestBuilderRequestsMetadata,
    },
    tentativelyAccept: {
        uriTemplate: TentativelyAcceptRequestBuilderUriTemplate,
        requestsMetadata: TentativelyAcceptRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const EventItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createEventFromDiscriminatorValue,
        queryParametersMapper: EventItemRequestBuilderGetQueryParametersMapper,
    },
};
/**
 * Uri template for the request builder.
 */
export const EventItemRequestBuilderUriTemplate = "{+baseurl}/users/{user%2Did}/calendars/{calendar%2Did}/events/{event%2Did}/instances/{event%2Did1}/exceptionOccurrences/{event%2Did2}{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
