/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createMessageFromDiscriminatorValue, serializeMessage, type Message } from '@microsoft/msgraph-beta-sdk/models/index.js';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MarkAsJunkPostRequestBody}
 */
// @ts-ignore
export function createMarkAsJunkPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMarkAsJunkPostRequestBody;
}
/**
 * The deserialization information for the current model
 * @param MarkAsJunkPostRequestBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMarkAsJunkPostRequestBody(markAsJunkPostRequestBody: Partial<MarkAsJunkPostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { markAsJunkPostRequestBody.backingStoreEnabled = true; },
        "MoveToJunk": n => { markAsJunkPostRequestBody.moveToJunk = n.getBooleanValue(); },
    }
}
export interface MarkAsJunkPostRequestBody extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The MoveToJunk property
     */
    moveToJunk?: boolean | null;
}
/**
 * Provides operations to call the markAsJunk method.
 */
export interface MarkAsJunkRequestBuilder extends BaseRequestBuilder<MarkAsJunkRequestBuilder> {
    /**
     * Mark a message as junk. This API adds the sender to the list of blocked senders and moves the message to the Junk Email folder, when moveToJunk is true.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Message>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @deprecated The MarkAsJunk API is deprecated and will stop working from Dec 30, 2025. Please use the ReportMessage API. as of 2022-09/Mark_As_Junk on 2025-04-25 and will be removed 2025-12-30
     * @see {@link https://learn.microsoft.com/graph/api/message-markasjunk?view=graph-rest-beta|Find more info here}
     */
     post(body: MarkAsJunkPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Message | undefined>;
    /**
     * Mark a message as junk. This API adds the sender to the list of blocked senders and moves the message to the Junk Email folder, when moveToJunk is true.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     * @deprecated The MarkAsJunk API is deprecated and will stop working from Dec 30, 2025. Please use the ReportMessage API. as of 2022-09/Mark_As_Junk on 2025-04-25 and will be removed 2025-12-30
     */
     toPostRequestInformation(body: MarkAsJunkPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param MarkAsJunkPostRequestBody The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMarkAsJunkPostRequestBody(writer: SerializationWriter, markAsJunkPostRequestBody: Partial<MarkAsJunkPostRequestBody> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!markAsJunkPostRequestBody || isSerializingDerivedType) { return; }
    writer.writeBooleanValue("MoveToJunk", markAsJunkPostRequestBody.moveToJunk);
    writer.writeAdditionalData(markAsJunkPostRequestBody.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const MarkAsJunkRequestBuilderUriTemplate = "{+baseurl}/users/{user%2Did}/mailFolders/{mailFolder%2Did}/childFolders/{mailFolder%2Did1}/messages/{message%2Did}/markAsJunk";
/**
 * Metadata for all the requests in the request builder.
 */
export const MarkAsJunkRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: MarkAsJunkRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createMessageFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeMarkAsJunkPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
