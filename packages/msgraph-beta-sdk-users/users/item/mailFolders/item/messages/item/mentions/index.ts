/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createMentionCollectionResponseFromDiscriminatorValue, createMentionFromDiscriminatorValue, serializeMention, type Mention, type MentionCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { MentionItemRequestBuilderRequestsMetadata, type MentionItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the mentions property of the microsoft.graph.message entity.
 */
export interface MentionsRequestBuilder extends BaseRequestBuilder<MentionsRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the mentions property of the microsoft.graph.message entity.
     * @param mentionId The unique identifier of mention
     * @returns {MentionItemRequestBuilder}
     */
     byMentionId(mentionId: string) : MentionItemRequestBuilder;
    /**
     * A collection of mentions in the message, ordered by the createdDateTime from the newest to the oldest. By default, a GET /messages does not return this property unless you apply $expand on the property.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<MentionCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<MentionsRequestBuilderGetQueryParameters> | undefined) : Promise<MentionCollectionResponse | undefined>;
    /**
     * Create new navigation property to mentions for users
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Mention>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: Mention, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Mention | undefined>;
    /**
     * A collection of mentions in the message, ordered by the createdDateTime from the newest to the oldest. By default, a GET /messages does not return this property unless you apply $expand on the property.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<MentionsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create new navigation property to mentions for users
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Mention, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * A collection of mentions in the message, ordered by the createdDateTime from the newest to the oldest. By default, a GET /messages does not return this property unless you apply $expand on the property.
 */
export interface MentionsRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Uri template for the request builder.
 */
export const MentionsRequestBuilderUriTemplate = "{+baseurl}/users/{user%2Did}/mailFolders/{mailFolder%2Did}/messages/{message%2Did}/mentions{?%24count,%24expand,%24filter,%24orderby,%24select,%24skip,%24top}";
/**
 * Provides operations to manage the mentions property of the microsoft.graph.message entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
} as const;
/**
 * Provides operations to manage the mentions property of the microsoft.graph.message entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    Application: "application",
    ApplicationDesc: "application desc",
    ClientReference: "clientReference",
    ClientReferenceDesc: "clientReference desc",
    CreatedBy: "createdBy",
    CreatedByDesc: "createdBy desc",
    CreatedDateTime: "createdDateTime",
    CreatedDateTimeDesc: "createdDateTime desc",
    DeepLink: "deepLink",
    DeepLinkDesc: "deepLink desc",
    Mentioned: "mentioned",
    MentionedDesc: "mentioned desc",
    MentionText: "mentionText",
    MentionTextDesc: "mentionText desc",
    ServerCreatedDateTime: "serverCreatedDateTime",
    ServerCreatedDateTimeDesc: "serverCreatedDateTime desc",
} as const;
/**
 * Provides operations to manage the mentions property of the microsoft.graph.message entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    Application: "application",
    ClientReference: "clientReference",
    CreatedBy: "createdBy",
    CreatedDateTime: "createdDateTime",
    DeepLink: "deepLink",
    Mentioned: "mentioned",
    MentionText: "mentionText",
    ServerCreatedDateTime: "serverCreatedDateTime",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const MentionsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const MentionsRequestBuilderNavigationMetadata: Record<Exclude<keyof MentionsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byMentionId: {
        requestsMetadata: MentionItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["mention%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const MentionsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: MentionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createMentionCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: MentionsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: MentionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createMentionFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeMention,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
