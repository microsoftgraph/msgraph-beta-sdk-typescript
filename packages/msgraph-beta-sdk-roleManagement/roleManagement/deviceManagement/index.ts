/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createRbacApplicationMultipleFromDiscriminatorValue, serializeRbacApplicationMultiple, type RbacApplicationMultiple } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { ResourceNamespacesRequestBuilderNavigationMetadata, ResourceNamespacesRequestBuilderRequestsMetadata, type ResourceNamespacesRequestBuilder } from './resourceNamespaces/';
import { RoleAssignmentsRequestBuilderNavigationMetadata, RoleAssignmentsRequestBuilderRequestsMetadata, type RoleAssignmentsRequestBuilder } from './roleAssignments/';
import { RoleDefinitionsRequestBuilderNavigationMetadata, RoleDefinitionsRequestBuilderRequestsMetadata, type RoleDefinitionsRequestBuilder } from './roleDefinitions/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the deviceManagement property of the microsoft.graph.roleManagement entity.
 */
export interface DeviceManagementRequestBuilder extends BaseRequestBuilder<DeviceManagementRequestBuilder> {
    /**
     * Provides operations to manage the resourceNamespaces property of the microsoft.graph.rbacApplicationMultiple entity.
     */
    get resourceNamespaces(): ResourceNamespacesRequestBuilder;
    /**
     * Provides operations to manage the roleAssignments property of the microsoft.graph.rbacApplicationMultiple entity.
     */
    get roleAssignments(): RoleAssignmentsRequestBuilder;
    /**
     * Provides operations to manage the roleDefinitions property of the microsoft.graph.rbacApplicationMultiple entity.
     */
    get roleDefinitions(): RoleDefinitionsRequestBuilder;
    /**
     * Delete navigation property deviceManagement for roleManagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * The RbacApplication for Device Management
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<RbacApplicationMultiple>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<DeviceManagementRequestBuilderGetQueryParameters> | undefined) : Promise<RbacApplicationMultiple | undefined>;
    /**
     * Update the navigation property deviceManagement in roleManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<RbacApplicationMultiple>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: RbacApplicationMultiple, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<RbacApplicationMultiple | undefined>;
    /**
     * Delete navigation property deviceManagement for roleManagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * The RbacApplication for Device Management
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<DeviceManagementRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property deviceManagement in roleManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: RbacApplicationMultiple, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * The RbacApplication for Device Management
 */
export interface DeviceManagementRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const DeviceManagementRequestBuilderUriTemplate = "{+baseurl}/roleManagement/deviceManagement{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const DeviceManagementRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const DeviceManagementRequestBuilderNavigationMetadata: Record<Exclude<keyof DeviceManagementRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    resourceNamespaces: {
        requestsMetadata: ResourceNamespacesRequestBuilderRequestsMetadata,
        navigationMetadata: ResourceNamespacesRequestBuilderNavigationMetadata,
    },
    roleAssignments: {
        requestsMetadata: RoleAssignmentsRequestBuilderRequestsMetadata,
        navigationMetadata: RoleAssignmentsRequestBuilderNavigationMetadata,
    },
    roleDefinitions: {
        requestsMetadata: RoleDefinitionsRequestBuilderRequestsMetadata,
        navigationMetadata: RoleDefinitionsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const DeviceManagementRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: DeviceManagementRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        uriTemplate: DeviceManagementRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createRbacApplicationMultipleFromDiscriminatorValue,
        queryParametersMapper: DeviceManagementRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: DeviceManagementRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createRbacApplicationMultipleFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeRbacApplicationMultiple,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
