/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createRoleManagementFromDiscriminatorValue, serializeRoleManagement, type RoleManagement } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CloudPCRequestBuilderNavigationMetadata, CloudPCRequestBuilderRequestsMetadata, type CloudPCRequestBuilder } from './cloudPC/';
import { DeviceManagementRequestBuilderNavigationMetadata, DeviceManagementRequestBuilderRequestsMetadata, type DeviceManagementRequestBuilder } from './deviceManagement/';
import { DirectoryRequestBuilderNavigationMetadata, DirectoryRequestBuilderRequestsMetadata, type DirectoryRequestBuilder } from './directory/';
import { EnterpriseAppsRequestBuilderNavigationMetadata, EnterpriseAppsRequestBuilderRequestsMetadata, type EnterpriseAppsRequestBuilder } from './enterpriseApps/';
import { EntitlementManagementRequestBuilderNavigationMetadata, EntitlementManagementRequestBuilderRequestsMetadata, type EntitlementManagementRequestBuilder } from './entitlementManagement/';
import { ExchangeRequestBuilderNavigationMetadata, ExchangeRequestBuilderRequestsMetadata, type ExchangeRequestBuilder } from './exchange/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the roleManagement singleton.
 */
export interface RoleManagementRequestBuilder extends BaseRequestBuilder<RoleManagementRequestBuilder> {
    /**
     * Provides operations to manage the cloudPC property of the microsoft.graph.roleManagement entity.
     */
    get cloudPC(): CloudPCRequestBuilder;
    /**
     * Provides operations to manage the deviceManagement property of the microsoft.graph.roleManagement entity.
     */
    get deviceManagement(): DeviceManagementRequestBuilder;
    /**
     * Provides operations to manage the directory property of the microsoft.graph.roleManagement entity.
     */
    get directory(): DirectoryRequestBuilder;
    /**
     * Provides operations to manage the enterpriseApps property of the microsoft.graph.roleManagement entity.
     */
    get enterpriseApps(): EnterpriseAppsRequestBuilder;
    /**
     * Provides operations to manage the entitlementManagement property of the microsoft.graph.roleManagement entity.
     */
    get entitlementManagement(): EntitlementManagementRequestBuilder;
    /**
     * Provides operations to manage the exchange property of the microsoft.graph.roleManagement entity.
     */
    get exchange(): ExchangeRequestBuilder;
    /**
     * Get roleManagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<RoleManagement>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<RoleManagementRequestBuilderGetQueryParameters> | undefined) : Promise<RoleManagement | undefined>;
    /**
     * Update roleManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<RoleManagement>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: RoleManagement, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<RoleManagement | undefined>;
    /**
     * Get roleManagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<RoleManagementRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update roleManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: RoleManagement, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get roleManagement
 */
export interface RoleManagementRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
}
/**
 * Uri template for the request builder.
 */
export const RoleManagementRequestBuilderUriTemplate = "{+baseurl}/roleManagement{?%24expand,%24select}";
/**
 * Provides operations to manage the roleManagement singleton.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    CloudPC: "cloudPC",
    DeviceManagement: "deviceManagement",
    Directory: "directory",
    EnterpriseApps: "enterpriseApps",
    EntitlementManagement: "entitlementManagement",
    Exchange: "exchange",
} as const;
/**
 * Provides operations to manage the roleManagement singleton.
 */
export const GetSelectQueryParameterTypeObject = {
    CloudPC: "cloudPC",
    DeviceManagement: "deviceManagement",
    Directory: "directory",
    EnterpriseApps: "enterpriseApps",
    EntitlementManagement: "entitlementManagement",
    Exchange: "exchange",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const RoleManagementRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const RoleManagementRequestBuilderNavigationMetadata: Record<Exclude<keyof RoleManagementRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    cloudPC: {
        requestsMetadata: CloudPCRequestBuilderRequestsMetadata,
        navigationMetadata: CloudPCRequestBuilderNavigationMetadata,
    },
    deviceManagement: {
        requestsMetadata: DeviceManagementRequestBuilderRequestsMetadata,
        navigationMetadata: DeviceManagementRequestBuilderNavigationMetadata,
    },
    directory: {
        requestsMetadata: DirectoryRequestBuilderRequestsMetadata,
        navigationMetadata: DirectoryRequestBuilderNavigationMetadata,
    },
    enterpriseApps: {
        requestsMetadata: EnterpriseAppsRequestBuilderRequestsMetadata,
        navigationMetadata: EnterpriseAppsRequestBuilderNavigationMetadata,
    },
    entitlementManagement: {
        requestsMetadata: EntitlementManagementRequestBuilderRequestsMetadata,
        navigationMetadata: EntitlementManagementRequestBuilderNavigationMetadata,
    },
    exchange: {
        requestsMetadata: ExchangeRequestBuilderRequestsMetadata,
        navigationMetadata: ExchangeRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const RoleManagementRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: RoleManagementRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createRoleManagementFromDiscriminatorValue,
        queryParametersMapper: RoleManagementRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: RoleManagementRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createRoleManagementFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeRoleManagement,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
