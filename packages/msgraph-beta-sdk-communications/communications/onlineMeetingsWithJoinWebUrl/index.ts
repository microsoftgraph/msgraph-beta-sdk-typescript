/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createOnlineMeetingFromDiscriminatorValue, serializeOnlineMeeting, type OnlineMeeting } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { GetVirtualAppointmentJoinWebUrlRequestBuilderRequestsMetadata, type GetVirtualAppointmentJoinWebUrlRequestBuilder } from './getVirtualAppointmentJoinWebUrl/';
import { SendVirtualAppointmentReminderSmsRequestBuilderRequestsMetadata, type SendVirtualAppointmentReminderSmsRequestBuilder } from './sendVirtualAppointmentReminderSms/';
import { SendVirtualAppointmentSmsRequestBuilderRequestsMetadata, type SendVirtualAppointmentSmsRequestBuilder } from './sendVirtualAppointmentSms/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the onlineMeetings property of the microsoft.graph.cloudCommunications entity.
 */
export interface OnlineMeetingsWithJoinWebUrlRequestBuilder extends BaseRequestBuilder<OnlineMeetingsWithJoinWebUrlRequestBuilder> {
    /**
     * Provides operations to call the getVirtualAppointmentJoinWebUrl method.
     */
    get getVirtualAppointmentJoinWebUrl(): GetVirtualAppointmentJoinWebUrlRequestBuilder;
    /**
     * Provides operations to call the sendVirtualAppointmentReminderSms method.
     */
    get sendVirtualAppointmentReminderSms(): SendVirtualAppointmentReminderSmsRequestBuilder;
    /**
     * Provides operations to call the sendVirtualAppointmentSms method.
     */
    get sendVirtualAppointmentSms(): SendVirtualAppointmentSmsRequestBuilder;
    /**
     * Delete navigation property onlineMeetings for communications
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get onlineMeetings from communications
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<OnlineMeeting>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<OnlineMeetingsWithJoinWebUrlRequestBuilderGetQueryParameters> | undefined) : Promise<OnlineMeeting | undefined>;
    /**
     * Update the navigation property onlineMeetings in communications
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<OnlineMeeting>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: OnlineMeeting, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<OnlineMeeting | undefined>;
    /**
     * Delete navigation property onlineMeetings for communications
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Get onlineMeetings from communications
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<OnlineMeetingsWithJoinWebUrlRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property onlineMeetings in communications
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: OnlineMeeting, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get onlineMeetings from communications
 */
export interface OnlineMeetingsWithJoinWebUrlRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
}
/**
 * Uri template for the request builder.
 */
export const OnlineMeetingsWithJoinWebUrlRequestBuilderUriTemplate = "{+baseurl}/communications/onlineMeetings(joinWebUrl='{joinWebUrl}'){?%24expand,%24select}";
/**
 * Provides operations to manage the onlineMeetings property of the microsoft.graph.cloudCommunications entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    AttendanceReports: "attendanceReports",
    MeetingAttendanceReport: "meetingAttendanceReport",
    Recordings: "recordings",
    Registration: "registration",
    Transcripts: "transcripts",
} as const;
/**
 * Provides operations to manage the onlineMeetings property of the microsoft.graph.cloudCommunications entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    AllowAttendeeToEnableCamera: "allowAttendeeToEnableCamera",
    AllowAttendeeToEnableMic: "allowAttendeeToEnableMic",
    AllowedPresenters: "allowedPresenters",
    AllowMeetingChat: "allowMeetingChat",
    AllowParticipantsToChangeName: "allowParticipantsToChangeName",
    AllowRecording: "allowRecording",
    AllowTeamworkReactions: "allowTeamworkReactions",
    AllowTranscription: "allowTranscription",
    AnonymizeIdentityForRoles: "anonymizeIdentityForRoles",
    AudioConferencing: "audioConferencing",
    ChatInfo: "chatInfo",
    ChatRestrictions: "chatRestrictions",
    IsEndToEndEncryptionEnabled: "isEndToEndEncryptionEnabled",
    IsEntryExitAnnounced: "isEntryExitAnnounced",
    JoinInformation: "joinInformation",
    JoinMeetingIdSettings: "joinMeetingIdSettings",
    JoinWebUrl: "joinWebUrl",
    LobbyBypassSettings: "lobbyBypassSettings",
    RecordAutomatically: "recordAutomatically",
    ShareMeetingChatHistoryDefault: "shareMeetingChatHistoryDefault",
    Subject: "subject",
    VideoTeleconferenceId: "videoTeleconferenceId",
    WatermarkProtection: "watermarkProtection",
    AlternativeRecording: "alternativeRecording",
    AttendeeReport: "attendeeReport",
    BroadcastRecording: "broadcastRecording",
    BroadcastSettings: "broadcastSettings",
    Capabilities: "capabilities",
    CreationDateTime: "creationDateTime",
    EndDateTime: "endDateTime",
    ExternalId: "externalId",
    IsBroadcast: "isBroadcast",
    JoinUrl: "joinUrl",
    MeetingTemplateId: "meetingTemplateId",
    Participants: "participants",
    Recording: "recording",
    StartDateTime: "startDateTime",
    AttendanceReports: "attendanceReports",
    MeetingAttendanceReport: "meetingAttendanceReport",
    Recordings: "recordings",
    Registration: "registration",
    Transcripts: "transcripts",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const OnlineMeetingsWithJoinWebUrlRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const OnlineMeetingsWithJoinWebUrlRequestBuilderNavigationMetadata: Record<Exclude<keyof OnlineMeetingsWithJoinWebUrlRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    getVirtualAppointmentJoinWebUrl: {
        requestsMetadata: GetVirtualAppointmentJoinWebUrlRequestBuilderRequestsMetadata,
    },
    sendVirtualAppointmentReminderSms: {
        requestsMetadata: SendVirtualAppointmentReminderSmsRequestBuilderRequestsMetadata,
    },
    sendVirtualAppointmentSms: {
        requestsMetadata: SendVirtualAppointmentSmsRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const OnlineMeetingsWithJoinWebUrlRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: OnlineMeetingsWithJoinWebUrlRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: OnlineMeetingsWithJoinWebUrlRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createOnlineMeetingFromDiscriminatorValue,
        queryParametersMapper: OnlineMeetingsWithJoinWebUrlRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: OnlineMeetingsWithJoinWebUrlRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createOnlineMeetingFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeOnlineMeeting,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
