/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createTeamCollectionResponseFromDiscriminatorValue, createTeamFromDiscriminatorValue, serializeTeam, type Team, type TeamCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/index.js';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/index.js';
// @ts-ignore
import { AllMessagesRequestBuilderRequestsMetadata, type AllMessagesRequestBuilder } from './allMessages/index.js';
// @ts-ignore
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/index.js';
// @ts-ignore
import { GetAllMessagesRequestBuilderRequestsMetadata, type GetAllMessagesRequestBuilder } from './getAllMessages/index.js';
// @ts-ignore
import { GetOpenShiftsRequestBuilderRequestsMetadata, type GetOpenShiftsRequestBuilder } from './getOpenShifts/index.js';
// @ts-ignore
import { GetShiftsRequestBuilderRequestsMetadata, type GetShiftsRequestBuilder } from './getShifts/index.js';
// @ts-ignore
import { GetTimesOffRequestBuilderRequestsMetadata, type GetTimesOffRequestBuilder } from './getTimesOff/index.js';
// @ts-ignore
import { TeamItemRequestBuilderNavigationMetadata, TeamItemRequestBuilderRequestsMetadata, type TeamItemRequestBuilder } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the collection of team entities.
 */
export interface TeamsRequestBuilder extends BaseRequestBuilder<TeamsRequestBuilder> {
    /**
     * Provides operations to call the allMessages method.
     */
    get allMessages(): AllMessagesRequestBuilder;
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to call the getAllMessages method.
     */
    get getAllMessages(): GetAllMessagesRequestBuilder;
    /**
     * Provides operations to call the getOpenShifts method.
     */
    get getOpenShifts(): GetOpenShiftsRequestBuilder;
    /**
     * Provides operations to call the getShifts method.
     */
    get getShifts(): GetShiftsRequestBuilder;
    /**
     * Provides operations to call the getTimesOff method.
     */
    get getTimesOff(): GetTimesOffRequestBuilder;
    /**
     * Provides operations to manage the collection of team entities.
     * @param teamId The unique identifier of team
     * @returns {TeamItemRequestBuilder}
     */
     byTeamId(teamId: string) : TeamItemRequestBuilder;
    /**
     * List all teams in an organization.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<TeamCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/teams-list?view=graph-rest-beta|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<TeamsRequestBuilderGetQueryParameters> | undefined) : Promise<TeamCollectionResponse | undefined>;
    /**
     * Create a new team.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Team>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/team-post?view=graph-rest-beta|Find more info here}
     */
     post(body: Team, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Team | undefined>;
    /**
     * List all teams in an organization.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<TeamsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create a new team.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Team, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * List all teams in an organization.
 */
export interface TeamsRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: string[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: string[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Uri template for the request builder.
 */
export const TeamsRequestBuilderUriTemplate = "{+baseurl}/teams{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const TeamsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const TeamsRequestBuilderNavigationMetadata: Record<Exclude<keyof TeamsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byTeamId: {
        requestsMetadata: TeamItemRequestBuilderRequestsMetadata,
        navigationMetadata: TeamItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["team%2Did"],
    },
    allMessages: {
        requestsMetadata: AllMessagesRequestBuilderRequestsMetadata,
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
    getAllMessages: {
        requestsMetadata: GetAllMessagesRequestBuilderRequestsMetadata,
    },
    getOpenShifts: {
        requestsMetadata: GetOpenShiftsRequestBuilderRequestsMetadata,
    },
    getShifts: {
        requestsMetadata: GetShiftsRequestBuilderRequestsMetadata,
    },
    getTimesOff: {
        requestsMetadata: GetTimesOffRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const TeamsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: TeamsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createTeamCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: TeamsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: TeamsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createTeamFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeTeam,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
