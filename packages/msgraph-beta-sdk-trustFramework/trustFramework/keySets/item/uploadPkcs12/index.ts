/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createTrustFrameworkKeyFromDiscriminatorValue, serializeTrustFrameworkKey, type TrustFrameworkKey } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a uploadPkcs12PostRequestBody
 */
export function createUploadPkcs12PostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUploadPkcs12PostRequestBody;
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoUploadPkcs12PostRequestBody(uploadPkcs12PostRequestBody: Partial<UploadPkcs12PostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { uploadPkcs12PostRequestBody.backingStoreEnabled = true; },
        "key": n => { uploadPkcs12PostRequestBody.key = n.getStringValue(); },
        "password": n => { uploadPkcs12PostRequestBody.password = n.getStringValue(); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeUploadPkcs12PostRequestBody(writer: SerializationWriter, uploadPkcs12PostRequestBody: Partial<UploadPkcs12PostRequestBody> | undefined = {}) : void {
    writer.writeStringValue("key", uploadPkcs12PostRequestBody.key);
    writer.writeStringValue("password", uploadPkcs12PostRequestBody.password);
    writer.writeAdditionalData(uploadPkcs12PostRequestBody.additionalData);
}
export interface UploadPkcs12PostRequestBody extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The key property
     */
    key?: string;
    /**
     * The password property
     */
    password?: string;
}
/**
 * Provides operations to call the uploadPkcs12 method.
 */
export interface UploadPkcs12RequestBuilder extends BaseRequestBuilder<UploadPkcs12RequestBuilder> {
    /**
     * Upload a PKCS12 format key (PFX) to a trustFrameworkKeyset. The input is a base-64 encoded value of the Pfx certificate contents. This method returns trustFrameworkKey.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of TrustFrameworkKey
     * @see {@link https://learn.microsoft.com/graph/api/trustframeworkkeyset-uploadpkcs12?view=graph-rest-1.0|Find more info here}
     */
     post(body: UploadPkcs12PostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<TrustFrameworkKey | undefined>;
    /**
     * Upload a PKCS12 format key (PFX) to a trustFrameworkKeyset. The input is a base-64 encoded value of the Pfx certificate contents. This method returns trustFrameworkKey.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPostRequestInformation(body: UploadPkcs12PostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Metadata for all the requests in the request builder.
 */
export const UploadPkcs12RequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createTrustFrameworkKeyFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeUploadPkcs12PostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const UploadPkcs12RequestBuilderUriTemplate = "{+baseurl}/trustFramework/keySets/{trustFrameworkKeySet%2Did}/uploadPkcs12";
/* tslint:enable */
/* eslint-enable */
