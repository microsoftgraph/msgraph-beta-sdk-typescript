/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createTrustFrameworkKeyFromDiscriminatorValue, serializeTrustFrameworkKey, type TrustFrameworkKey } from '@microsoft/msgraph-beta-sdk/models/index.js';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UploadSecretPostRequestBody}
 */
// @ts-ignore
export function createUploadSecretPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUploadSecretPostRequestBody;
}
/**
 * The deserialization information for the current model
 * @param UploadSecretPostRequestBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUploadSecretPostRequestBody(uploadSecretPostRequestBody: Partial<UploadSecretPostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { uploadSecretPostRequestBody.backingStoreEnabled = true; },
        "exp": n => { uploadSecretPostRequestBody.exp = n.getNumberValue(); },
        "k": n => { uploadSecretPostRequestBody.k = n.getStringValue(); },
        "nbf": n => { uploadSecretPostRequestBody.nbf = n.getNumberValue(); },
        "use": n => { uploadSecretPostRequestBody.use = n.getStringValue(); },
    }
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param UploadSecretPostRequestBody The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUploadSecretPostRequestBody(writer: SerializationWriter, uploadSecretPostRequestBody: Partial<UploadSecretPostRequestBody> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!uploadSecretPostRequestBody || isSerializingDerivedType) { return; }
    writer.writeNumberValue("exp", uploadSecretPostRequestBody.exp);
    writer.writeStringValue("k", uploadSecretPostRequestBody.k);
    writer.writeNumberValue("nbf", uploadSecretPostRequestBody.nbf);
    writer.writeStringValue("use", uploadSecretPostRequestBody.use);
    writer.writeAdditionalData(uploadSecretPostRequestBody.additionalData);
}
export interface UploadSecretPostRequestBody extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The exp property
     */
    exp?: number | null;
    /**
     * The k property
     */
    k?: string | null;
    /**
     * The nbf property
     */
    nbf?: number | null;
    /**
     * The use property
     */
    use?: string | null;
}
/**
 * Provides operations to call the uploadSecret method.
 */
export interface UploadSecretRequestBuilder extends BaseRequestBuilder<UploadSecretRequestBuilder> {
    /**
     * Upload a plain text secret to a trustFrameworkKeyset. Examples of secrets are application secrets in Microsoft Entra ID, Google, Facebook, or any other identity provider. his method returns trustFrameworkKey.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<TrustFrameworkKey>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: UploadSecretPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<TrustFrameworkKey | undefined>;
    /**
     * Upload a plain text secret to a trustFrameworkKeyset. Examples of secrets are application secrets in Microsoft Entra ID, Google, Facebook, or any other identity provider. his method returns trustFrameworkKey.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: UploadSecretPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const UploadSecretRequestBuilderUriTemplate = "{+baseurl}/trustFramework/keySets/{trustFrameworkKeySet%2Did}/uploadSecret";
/**
 * Metadata for all the requests in the request builder.
 */
export const UploadSecretRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: UploadSecretRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createTrustFrameworkKeyFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeUploadSecretPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
