/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createTrustFrameworkFromDiscriminatorValue, serializeTrustFramework, type TrustFramework } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { KeySetsRequestBuilderNavigationMetadata, KeySetsRequestBuilderRequestsMetadata, KeySetsRequestBuilderUriTemplate, type KeySetsRequestBuilder } from './keySets/';
import { PoliciesRequestBuilderNavigationMetadata, PoliciesRequestBuilderRequestsMetadata, PoliciesRequestBuilderUriTemplate, type PoliciesRequestBuilder } from './policies/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the trustFramework singleton.
 */
export interface TrustFrameworkRequestBuilder extends BaseRequestBuilder<TrustFrameworkRequestBuilder> {
    /**
     * Provides operations to manage the keySets property of the microsoft.graph.trustFramework entity.
     */
    get keySets(): KeySetsRequestBuilder;
    /**
     * Provides operations to manage the policies property of the microsoft.graph.trustFramework entity.
     */
    get policies(): PoliciesRequestBuilder;
    /**
     * Get trustFramework
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of TrustFramework
     */
     get(requestConfiguration?: RequestConfiguration<TrustFrameworkRequestBuilderGetQueryParameters> | undefined) : Promise<TrustFramework | undefined>;
    /**
     * Update trustFramework
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of TrustFramework
     */
     patch(body: TrustFramework, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<TrustFramework | undefined>;
    /**
     * Get trustFramework
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<TrustFrameworkRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update trustFramework
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: TrustFramework, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get trustFramework
 */
export interface TrustFrameworkRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const TrustFrameworkRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const TrustFrameworkRequestBuilderNavigationMetadata: Record<Exclude<keyof TrustFrameworkRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    keySets: {
        uriTemplate: KeySetsRequestBuilderUriTemplate,
        requestsMetadata: KeySetsRequestBuilderRequestsMetadata,
        navigationMetadata: KeySetsRequestBuilderNavigationMetadata,
    },
    policies: {
        uriTemplate: PoliciesRequestBuilderUriTemplate,
        requestsMetadata: PoliciesRequestBuilderRequestsMetadata,
        navigationMetadata: PoliciesRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const TrustFrameworkRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createTrustFrameworkFromDiscriminatorValue,
        queryParametersMapper: TrustFrameworkRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createTrustFrameworkFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeTrustFramework,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const TrustFrameworkRequestBuilderUriTemplate = "{+baseurl}/trustFramework{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
