/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createUserExperienceAnalyticsDeviceScopeFromDiscriminatorValue, serializeUserExperienceAnalyticsDeviceScope, type UserExperienceAnalyticsDeviceScope } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { TriggerDeviceScopeActionRequestBuilderRequestsMetadata, type TriggerDeviceScopeActionRequestBuilder } from './triggerDeviceScopeAction/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the userExperienceAnalyticsDeviceScope property of the microsoft.graph.deviceManagement entity.
 */
export interface UserExperienceAnalyticsDeviceScopeRequestBuilder extends BaseRequestBuilder<UserExperienceAnalyticsDeviceScopeRequestBuilder> {
    /**
     * Provides operations to call the triggerDeviceScopeAction method.
     */
    get triggerDeviceScopeAction(): TriggerDeviceScopeActionRequestBuilder;
    /**
     * Delete navigation property userExperienceAnalyticsDeviceScope for deviceManagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * The user experience analytics device scope entity endpoint to trigger on the service to either START or STOP computing metrics data based on a device scope configuration.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<UserExperienceAnalyticsDeviceScope>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<UserExperienceAnalyticsDeviceScopeRequestBuilderGetQueryParameters> | undefined) : Promise<UserExperienceAnalyticsDeviceScope | undefined>;
    /**
     * Update the navigation property userExperienceAnalyticsDeviceScope in deviceManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<UserExperienceAnalyticsDeviceScope>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: UserExperienceAnalyticsDeviceScope, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<UserExperienceAnalyticsDeviceScope | undefined>;
    /**
     * Delete navigation property userExperienceAnalyticsDeviceScope for deviceManagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * The user experience analytics device scope entity endpoint to trigger on the service to either START or STOP computing metrics data based on a device scope configuration.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<UserExperienceAnalyticsDeviceScopeRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property userExperienceAnalyticsDeviceScope in deviceManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: UserExperienceAnalyticsDeviceScope, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * The user experience analytics device scope entity endpoint to trigger on the service to either START or STOP computing metrics data based on a device scope configuration.
 */
export interface UserExperienceAnalyticsDeviceScopeRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
}
/**
 * Uri template for the request builder.
 */
export const UserExperienceAnalyticsDeviceScopeRequestBuilderUriTemplate = "{+baseurl}/deviceManagement/userExperienceAnalyticsDeviceScope{?%24expand,%24select}";
/**
 * Provides operations to manage the userExperienceAnalyticsDeviceScope property of the microsoft.graph.deviceManagement entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
} as const;
/**
 * Provides operations to manage the userExperienceAnalyticsDeviceScope property of the microsoft.graph.deviceManagement entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    CreatedDateTime: "createdDateTime",
    DeviceScopeName: "deviceScopeName",
    Enabled: "enabled",
    IsBuiltIn: "isBuiltIn",
    LastModifiedDateTime: "lastModifiedDateTime",
    Operator: "operator",
    OwnerId: "ownerId",
    Parameter: "parameter",
    Status: "status",
    Value: "value",
    ValueObjectId: "valueObjectId",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const UserExperienceAnalyticsDeviceScopeRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const UserExperienceAnalyticsDeviceScopeRequestBuilderNavigationMetadata: Record<Exclude<keyof UserExperienceAnalyticsDeviceScopeRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    triggerDeviceScopeAction: {
        requestsMetadata: TriggerDeviceScopeActionRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const UserExperienceAnalyticsDeviceScopeRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: UserExperienceAnalyticsDeviceScopeRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: UserExperienceAnalyticsDeviceScopeRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createUserExperienceAnalyticsDeviceScopeFromDiscriminatorValue,
        queryParametersMapper: UserExperienceAnalyticsDeviceScopeRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: UserExperienceAnalyticsDeviceScopeRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createUserExperienceAnalyticsDeviceScopeFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeUserExperienceAnalyticsDeviceScope,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
