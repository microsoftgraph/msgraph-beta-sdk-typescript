/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createAndroidForWorkSettingsFromDiscriminatorValue, serializeAndroidForWorkSettings, type AndroidForWorkSettings } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CompleteSignupRequestBuilderRequestsMetadata, CompleteSignupRequestBuilderUriTemplate, type CompleteSignupRequestBuilder } from './completeSignup/';
import { RequestSignupUrlRequestBuilderRequestsMetadata, RequestSignupUrlRequestBuilderUriTemplate, type RequestSignupUrlRequestBuilder } from './requestSignupUrl/';
import { SyncAppsRequestBuilderRequestsMetadata, SyncAppsRequestBuilderUriTemplate, type SyncAppsRequestBuilder } from './syncApps/';
import { type UnbindRequestBuilder, UnbindRequestBuilderRequestsMetadata, UnbindRequestBuilderUriTemplate } from './unbind/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the androidForWorkSettings property of the microsoft.graph.deviceManagement entity.
 */
export interface AndroidForWorkSettingsRequestBuilder extends BaseRequestBuilder<AndroidForWorkSettingsRequestBuilder> {
    /**
     * Provides operations to call the completeSignup method.
     */
    get completeSignup(): CompleteSignupRequestBuilder;
    /**
     * Provides operations to call the requestSignupUrl method.
     */
    get requestSignupUrl(): RequestSignupUrlRequestBuilder;
    /**
     * Provides operations to call the syncApps method.
     */
    get syncApps(): SyncAppsRequestBuilder;
    /**
     * Provides operations to call the unbind method.
     */
    get unbind(): UnbindRequestBuilder;
    /**
     * Delete navigation property androidForWorkSettings for deviceManagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * The singleton Android for Work settings entity.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of AndroidForWorkSettings
     */
     get(requestConfiguration?: RequestConfiguration<AndroidForWorkSettingsRequestBuilderGetQueryParameters> | undefined) : Promise<AndroidForWorkSettings | undefined>;
    /**
     * Update the navigation property androidForWorkSettings in deviceManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of AndroidForWorkSettings
     */
     patch(body: AndroidForWorkSettings, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<AndroidForWorkSettings | undefined>;
    /**
     * Delete navigation property androidForWorkSettings for deviceManagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * The singleton Android for Work settings entity.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<AndroidForWorkSettingsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property androidForWorkSettings in deviceManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: AndroidForWorkSettings, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * The singleton Android for Work settings entity.
 */
export interface AndroidForWorkSettingsRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const AndroidForWorkSettingsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const AndroidForWorkSettingsRequestBuilderNavigationMetadata: Record<Exclude<keyof AndroidForWorkSettingsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    completeSignup: {
        uriTemplate: CompleteSignupRequestBuilderUriTemplate,
        requestsMetadata: CompleteSignupRequestBuilderRequestsMetadata,
    },
    requestSignupUrl: {
        uriTemplate: RequestSignupUrlRequestBuilderUriTemplate,
        requestsMetadata: RequestSignupUrlRequestBuilderRequestsMetadata,
    },
    syncApps: {
        uriTemplate: SyncAppsRequestBuilderUriTemplate,
        requestsMetadata: SyncAppsRequestBuilderRequestsMetadata,
    },
    unbind: {
        uriTemplate: UnbindRequestBuilderUriTemplate,
        requestsMetadata: UnbindRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const AndroidForWorkSettingsRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createAndroidForWorkSettingsFromDiscriminatorValue,
        queryParametersMapper: AndroidForWorkSettingsRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createAndroidForWorkSettingsFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeAndroidForWorkSettings,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const AndroidForWorkSettingsRequestBuilderUriTemplate = "{+baseurl}/deviceManagement/androidForWorkSettings{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
