/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createCertificateConnectorDetailsFromDiscriminatorValue, serializeCertificateConnectorDetails, type CertificateConnectorDetails } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { GetHealthMetricsRequestBuilderRequestsMetadata, type GetHealthMetricsRequestBuilder } from './getHealthMetrics/';
import { GetHealthMetricTimeSeriesRequestBuilderRequestsMetadata, type GetHealthMetricTimeSeriesRequestBuilder } from './getHealthMetricTimeSeries/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the certificateConnectorDetails property of the microsoft.graph.deviceManagement entity.
 */
export interface CertificateConnectorDetailsItemRequestBuilder extends BaseRequestBuilder<CertificateConnectorDetailsItemRequestBuilder> {
    /**
     * Provides operations to call the getHealthMetrics method.
     */
    get getHealthMetrics(): GetHealthMetricsRequestBuilder;
    /**
     * Provides operations to call the getHealthMetricTimeSeries method.
     */
    get getHealthMetricTimeSeries(): GetHealthMetricTimeSeriesRequestBuilder;
    /**
     * Delete navigation property certificateConnectorDetails for deviceManagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Collection of certificate connector details, each associated with a corresponding Intune Certificate Connector.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<CertificateConnectorDetails>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<CertificateConnectorDetailsItemRequestBuilderGetQueryParameters> | undefined) : Promise<CertificateConnectorDetails | undefined>;
    /**
     * Update the navigation property certificateConnectorDetails in deviceManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<CertificateConnectorDetails>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: CertificateConnectorDetails, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<CertificateConnectorDetails | undefined>;
    /**
     * Delete navigation property certificateConnectorDetails for deviceManagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Collection of certificate connector details, each associated with a corresponding Intune Certificate Connector.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<CertificateConnectorDetailsItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property certificateConnectorDetails in deviceManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: CertificateConnectorDetails, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Collection of certificate connector details, each associated with a corresponding Intune Certificate Connector.
 */
export interface CertificateConnectorDetailsItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
}
export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Uri template for the request builder.
 */
export const CertificateConnectorDetailsItemRequestBuilderUriTemplate = "{+baseurl}/deviceManagement/certificateConnectorDetails/{certificateConnectorDetails%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const CertificateConnectorDetailsItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const CertificateConnectorDetailsItemRequestBuilderNavigationMetadata: Record<Exclude<keyof CertificateConnectorDetailsItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    getHealthMetrics: {
        requestsMetadata: GetHealthMetricsRequestBuilderRequestsMetadata,
    },
    getHealthMetricTimeSeries: {
        requestsMetadata: GetHealthMetricTimeSeriesRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const CertificateConnectorDetailsItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: CertificateConnectorDetailsItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: CertificateConnectorDetailsItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createCertificateConnectorDetailsFromDiscriminatorValue,
        queryParametersMapper: CertificateConnectorDetailsItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: CertificateConnectorDetailsItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createCertificateConnectorDetailsFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCertificateConnectorDetails,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Provides operations to manage the certificateConnectorDetails property of the microsoft.graph.deviceManagement entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
} as const;
/**
 * Provides operations to manage the certificateConnectorDetails property of the microsoft.graph.deviceManagement entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    ConnectorName: "connectorName",
    ConnectorVersion: "connectorVersion",
    EnrollmentDateTime: "enrollmentDateTime",
    LastCheckinDateTime: "lastCheckinDateTime",
    MachineName: "machineName",
} as const;
/* tslint:enable */
/* eslint-enable */
