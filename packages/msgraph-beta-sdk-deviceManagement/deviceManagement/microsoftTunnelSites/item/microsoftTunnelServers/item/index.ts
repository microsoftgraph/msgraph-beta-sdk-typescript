/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createMicrosoftTunnelServerFromDiscriminatorValue, serializeMicrosoftTunnelServer, type MicrosoftTunnelServer } from '@microsoft/msgraph-beta-sdk/models/';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
// @ts-ignore
import { CreateServerLogCollectionRequestRequestBuilderRequestsMetadata, type CreateServerLogCollectionRequestRequestBuilder } from './createServerLogCollectionRequest/';
// @ts-ignore
import { GenerateServerLogCollectionRequestRequestBuilderRequestsMetadata, type GenerateServerLogCollectionRequestRequestBuilder } from './generateServerLogCollectionRequest/';
// @ts-ignore
import { GetHealthMetricsRequestBuilderRequestsMetadata, type GetHealthMetricsRequestBuilder } from './getHealthMetrics/';
// @ts-ignore
import { GetHealthMetricTimeSeriesRequestBuilderRequestsMetadata, type GetHealthMetricTimeSeriesRequestBuilder } from './getHealthMetricTimeSeries/';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the microsoftTunnelServers property of the microsoft.graph.microsoftTunnelSite entity.
 */
export interface MicrosoftTunnelServerItemRequestBuilder extends BaseRequestBuilder<MicrosoftTunnelServerItemRequestBuilder> {
    /**
     * Provides operations to call the createServerLogCollectionRequest method.
     */
    get createServerLogCollectionRequest(): CreateServerLogCollectionRequestRequestBuilder;
    /**
     * Provides operations to call the generateServerLogCollectionRequest method.
     */
    get generateServerLogCollectionRequest(): GenerateServerLogCollectionRequestRequestBuilder;
    /**
     * Provides operations to call the getHealthMetrics method.
     */
    get getHealthMetrics(): GetHealthMetricsRequestBuilder;
    /**
     * Provides operations to call the getHealthMetricTimeSeries method.
     */
    get getHealthMetricTimeSeries(): GetHealthMetricTimeSeriesRequestBuilder;
    /**
     * Delete navigation property microsoftTunnelServers for deviceManagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * A list of MicrosoftTunnelServers that are registered to this MicrosoftTunnelSite
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<MicrosoftTunnelServer>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<MicrosoftTunnelServerItemRequestBuilderGetQueryParameters> | undefined) : Promise<MicrosoftTunnelServer | undefined>;
    /**
     * Update the navigation property microsoftTunnelServers in deviceManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<MicrosoftTunnelServer>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: MicrosoftTunnelServer, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<MicrosoftTunnelServer | undefined>;
    /**
     * Delete navigation property microsoftTunnelServers for deviceManagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * A list of MicrosoftTunnelServers that are registered to this MicrosoftTunnelSite
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<MicrosoftTunnelServerItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property microsoftTunnelServers in deviceManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: MicrosoftTunnelServer, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * A list of MicrosoftTunnelServers that are registered to this MicrosoftTunnelSite
 */
export interface MicrosoftTunnelServerItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const MicrosoftTunnelServerItemRequestBuilderUriTemplate = "{+baseurl}/deviceManagement/microsoftTunnelSites/{microsoftTunnelSite%2Did}/microsoftTunnelServers/{microsoftTunnelServer%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const MicrosoftTunnelServerItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const MicrosoftTunnelServerItemRequestBuilderNavigationMetadata: Record<Exclude<keyof MicrosoftTunnelServerItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    createServerLogCollectionRequest: {
        requestsMetadata: CreateServerLogCollectionRequestRequestBuilderRequestsMetadata,
    },
    generateServerLogCollectionRequest: {
        requestsMetadata: GenerateServerLogCollectionRequestRequestBuilderRequestsMetadata,
    },
    getHealthMetrics: {
        requestsMetadata: GetHealthMetricsRequestBuilderRequestsMetadata,
    },
    getHealthMetricTimeSeries: {
        requestsMetadata: GetHealthMetricTimeSeriesRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const MicrosoftTunnelServerItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: MicrosoftTunnelServerItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: MicrosoftTunnelServerItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createMicrosoftTunnelServerFromDiscriminatorValue,
        queryParametersMapper: MicrosoftTunnelServerItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: MicrosoftTunnelServerItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createMicrosoftTunnelServerFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeMicrosoftTunnelServer,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
