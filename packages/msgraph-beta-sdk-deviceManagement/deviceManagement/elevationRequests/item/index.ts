/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createPrivilegeManagementElevationRequestFromDiscriminatorValue, serializePrivilegeManagementElevationRequest, type PrivilegeManagementElevationRequest } from '@microsoft/msgraph-beta-sdk/models/';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
// @ts-ignore
import { ApproveRequestBuilderRequestsMetadata, type ApproveRequestBuilder } from './approve/';
// @ts-ignore
import { DenyRequestBuilderRequestsMetadata, type DenyRequestBuilder } from './deny/';
// @ts-ignore
import { GetAllElevationRequestsRequestBuilderRequestsMetadata, type GetAllElevationRequestsRequestBuilder } from './getAllElevationRequests/';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the elevationRequests property of the microsoft.graph.deviceManagement entity.
 */
export interface PrivilegeManagementElevationRequestItemRequestBuilder extends BaseRequestBuilder<PrivilegeManagementElevationRequestItemRequestBuilder> {
    /**
     * Provides operations to call the approve method.
     */
    get approve(): ApproveRequestBuilder;
    /**
     * Provides operations to call the deny method.
     */
    get deny(): DenyRequestBuilder;
    /**
     * Provides operations to call the getAllElevationRequests method.
     */
    get getAllElevationRequests(): GetAllElevationRequestsRequestBuilder;
    /**
     * Delete navigation property elevationRequests for deviceManagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * List of elevation requests
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<PrivilegeManagementElevationRequest>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<PrivilegeManagementElevationRequestItemRequestBuilderGetQueryParameters> | undefined) : Promise<PrivilegeManagementElevationRequest | undefined>;
    /**
     * Update the navigation property elevationRequests in deviceManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<PrivilegeManagementElevationRequest>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: PrivilegeManagementElevationRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<PrivilegeManagementElevationRequest | undefined>;
    /**
     * Delete navigation property elevationRequests for deviceManagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * List of elevation requests
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<PrivilegeManagementElevationRequestItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property elevationRequests in deviceManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: PrivilegeManagementElevationRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * List of elevation requests
 */
export interface PrivilegeManagementElevationRequestItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const PrivilegeManagementElevationRequestItemRequestBuilderUriTemplate = "{+baseurl}/deviceManagement/elevationRequests/{privilegeManagementElevationRequest%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const PrivilegeManagementElevationRequestItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const PrivilegeManagementElevationRequestItemRequestBuilderNavigationMetadata: Record<Exclude<keyof PrivilegeManagementElevationRequestItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    approve: {
        requestsMetadata: ApproveRequestBuilderRequestsMetadata,
    },
    deny: {
        requestsMetadata: DenyRequestBuilderRequestsMetadata,
    },
    getAllElevationRequests: {
        requestsMetadata: GetAllElevationRequestsRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const PrivilegeManagementElevationRequestItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: PrivilegeManagementElevationRequestItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: PrivilegeManagementElevationRequestItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createPrivilegeManagementElevationRequestFromDiscriminatorValue,
        queryParametersMapper: PrivilegeManagementElevationRequestItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: PrivilegeManagementElevationRequestItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createPrivilegeManagementElevationRequestFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializePrivilegeManagementElevationRequest,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
