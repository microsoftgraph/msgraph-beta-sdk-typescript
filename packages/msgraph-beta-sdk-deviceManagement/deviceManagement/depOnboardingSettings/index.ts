/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createDepOnboardingSettingCollectionResponseFromDiscriminatorValue, createDepOnboardingSettingFromDiscriminatorValue, serializeDepOnboardingSetting, type DepOnboardingSetting, type DepOnboardingSettingCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
// @ts-ignore
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
// @ts-ignore
import { GetExpiringVppTokenCountWithExpiringBeforeDateTimeRequestBuilderRequestsMetadata, type GetExpiringVppTokenCountWithExpiringBeforeDateTimeRequestBuilder } from './getExpiringVppTokenCountWithExpiringBeforeDateTime/';
// @ts-ignore
import { DepOnboardingSettingItemRequestBuilderNavigationMetadata, DepOnboardingSettingItemRequestBuilderRequestsMetadata, type DepOnboardingSettingItemRequestBuilder } from './item/';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the depOnboardingSettings property of the microsoft.graph.deviceManagement entity.
 */
export interface DepOnboardingSettingsRequestBuilder extends BaseRequestBuilder<DepOnboardingSettingsRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the depOnboardingSettings property of the microsoft.graph.deviceManagement entity.
     * @param depOnboardingSettingId The unique identifier of depOnboardingSetting
     * @returns {DepOnboardingSettingItemRequestBuilder}
     */
     byDepOnboardingSettingId(depOnboardingSettingId: string) : DepOnboardingSettingItemRequestBuilder;
    /**
     * This collections of multiple DEP tokens per-tenant.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DepOnboardingSettingCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<DepOnboardingSettingsRequestBuilderGetQueryParameters> | undefined) : Promise<DepOnboardingSettingCollectionResponse | undefined>;
    /**
     * Provides operations to call the getExpiringVppTokenCount method.
     * @param expiringBeforeDateTime Usage: expiringBeforeDateTime='{expiringBeforeDateTime}'
     * @returns {GetExpiringVppTokenCountWithExpiringBeforeDateTimeRequestBuilder}
     */
     getExpiringVppTokenCountWithExpiringBeforeDateTime(expiringBeforeDateTime: string | undefined) : GetExpiringVppTokenCountWithExpiringBeforeDateTimeRequestBuilder;
    /**
     * Create new navigation property to depOnboardingSettings for deviceManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DepOnboardingSetting>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: DepOnboardingSetting, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<DepOnboardingSetting | undefined>;
    /**
     * This collections of multiple DEP tokens per-tenant.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<DepOnboardingSettingsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create new navigation property to depOnboardingSettings for deviceManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: DepOnboardingSetting, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * This collections of multiple DEP tokens per-tenant.
 */
export interface DepOnboardingSettingsRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: string[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: string[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Uri template for the request builder.
 */
export const DepOnboardingSettingsRequestBuilderUriTemplate = "{+baseurl}/deviceManagement/depOnboardingSettings{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const DepOnboardingSettingsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const DepOnboardingSettingsRequestBuilderNavigationMetadata: Record<Exclude<keyof DepOnboardingSettingsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byDepOnboardingSettingId: {
        requestsMetadata: DepOnboardingSettingItemRequestBuilderRequestsMetadata,
        navigationMetadata: DepOnboardingSettingItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["depOnboardingSetting%2Did"],
    },
    getExpiringVppTokenCountWithExpiringBeforeDateTime: {
        requestsMetadata: GetExpiringVppTokenCountWithExpiringBeforeDateTimeRequestBuilderRequestsMetadata,
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const DepOnboardingSettingsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: DepOnboardingSettingsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDepOnboardingSettingCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: DepOnboardingSettingsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: DepOnboardingSettingsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDepOnboardingSettingFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeDepOnboardingSetting,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
