/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {GetExpiringVppTokenCountWithExpiringBeforeDateTimeGetResponse}
 */
// @ts-ignore
export function createGetExpiringVppTokenCountWithExpiringBeforeDateTimeGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoGetExpiringVppTokenCountWithExpiringBeforeDateTimeGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoGetExpiringVppTokenCountWithExpiringBeforeDateTimeGetResponse(getExpiringVppTokenCountWithExpiringBeforeDateTimeGetResponse: Partial<GetExpiringVppTokenCountWithExpiringBeforeDateTimeGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { getExpiringVppTokenCountWithExpiringBeforeDateTimeGetResponse.backingStoreEnabled = true; },
        "value": n => { getExpiringVppTokenCountWithExpiringBeforeDateTimeGetResponse.value = n.getNumberValue(); },
    }
}
export interface GetExpiringVppTokenCountWithExpiringBeforeDateTimeGetResponse extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The value property
     */
    value?: number;
}
/**
 * Provides operations to call the getExpiringVppTokenCount method.
 */
export interface GetExpiringVppTokenCountWithExpiringBeforeDateTimeRequestBuilder extends BaseRequestBuilder<GetExpiringVppTokenCountWithExpiringBeforeDateTimeRequestBuilder> {
    /**
     * Invoke function getExpiringVppTokenCount
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<GetExpiringVppTokenCountWithExpiringBeforeDateTimeGetResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<GetExpiringVppTokenCountWithExpiringBeforeDateTimeGetResponse | undefined>;
    /**
     * Invoke function getExpiringVppTokenCount
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeGetExpiringVppTokenCountWithExpiringBeforeDateTimeGetResponse(writer: SerializationWriter, getExpiringVppTokenCountWithExpiringBeforeDateTimeGetResponse: Partial<GetExpiringVppTokenCountWithExpiringBeforeDateTimeGetResponse> | undefined = {}) : void {
    writer.writeNumberValue("value", getExpiringVppTokenCountWithExpiringBeforeDateTimeGetResponse.value);
    writer.writeAdditionalData(getExpiringVppTokenCountWithExpiringBeforeDateTimeGetResponse.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const GetExpiringVppTokenCountWithExpiringBeforeDateTimeRequestBuilderUriTemplate = "{+baseurl}/deviceManagement/depOnboardingSettings/getExpiringVppTokenCount(expiringBeforeDateTime='{expiringBeforeDateTime}')";
/**
 * Metadata for all the requests in the request builder.
 */
export const GetExpiringVppTokenCountWithExpiringBeforeDateTimeRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: GetExpiringVppTokenCountWithExpiringBeforeDateTimeRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createGetExpiringVppTokenCountWithExpiringBeforeDateTimeGetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
