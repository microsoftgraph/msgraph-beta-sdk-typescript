/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createDeviceManagementAutopilotEventFromDiscriminatorValue, serializeDeviceManagementAutopilotEvent, type DeviceManagementAutopilotEvent } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { PolicyStatusDetailsRequestBuilderNavigationMetadata, PolicyStatusDetailsRequestBuilderRequestsMetadata, type PolicyStatusDetailsRequestBuilder } from './policyStatusDetails/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the autopilotEvents property of the microsoft.graph.deviceManagement entity.
 */
export interface DeviceManagementAutopilotEventItemRequestBuilder extends BaseRequestBuilder<DeviceManagementAutopilotEventItemRequestBuilder> {
    /**
     * Provides operations to manage the policyStatusDetails property of the microsoft.graph.deviceManagementAutopilotEvent entity.
     */
    get policyStatusDetails(): PolicyStatusDetailsRequestBuilder;
    /**
     * Delete navigation property autopilotEvents for deviceManagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * The list of autopilot events for the tenant.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DeviceManagementAutopilotEvent>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<DeviceManagementAutopilotEventItemRequestBuilderGetQueryParameters> | undefined) : Promise<DeviceManagementAutopilotEvent | undefined>;
    /**
     * Update the navigation property autopilotEvents in deviceManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DeviceManagementAutopilotEvent>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: DeviceManagementAutopilotEvent, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<DeviceManagementAutopilotEvent | undefined>;
    /**
     * Delete navigation property autopilotEvents for deviceManagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * The list of autopilot events for the tenant.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<DeviceManagementAutopilotEventItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property autopilotEvents in deviceManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: DeviceManagementAutopilotEvent, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * The list of autopilot events for the tenant.
 */
export interface DeviceManagementAutopilotEventItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
}
export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Uri template for the request builder.
 */
export const DeviceManagementAutopilotEventItemRequestBuilderUriTemplate = "{+baseurl}/deviceManagement/autopilotEvents/{deviceManagementAutopilotEvent%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const DeviceManagementAutopilotEventItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const DeviceManagementAutopilotEventItemRequestBuilderNavigationMetadata: Record<Exclude<keyof DeviceManagementAutopilotEventItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    policyStatusDetails: {
        requestsMetadata: PolicyStatusDetailsRequestBuilderRequestsMetadata,
        navigationMetadata: PolicyStatusDetailsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const DeviceManagementAutopilotEventItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: DeviceManagementAutopilotEventItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: DeviceManagementAutopilotEventItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDeviceManagementAutopilotEventFromDiscriminatorValue,
        queryParametersMapper: DeviceManagementAutopilotEventItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: DeviceManagementAutopilotEventItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDeviceManagementAutopilotEventFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeDeviceManagementAutopilotEvent,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Provides operations to manage the autopilotEvents property of the microsoft.graph.deviceManagement entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    PolicyStatusDetails: "policyStatusDetails",
} as const;
/**
 * Provides operations to manage the autopilotEvents property of the microsoft.graph.deviceManagement entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    AccountSetupDuration: "accountSetupDuration",
    AccountSetupStatus: "accountSetupStatus",
    DeploymentDuration: "deploymentDuration",
    DeploymentEndDateTime: "deploymentEndDateTime",
    DeploymentStartDateTime: "deploymentStartDateTime",
    DeploymentState: "deploymentState",
    DeploymentTotalDuration: "deploymentTotalDuration",
    DeviceId: "deviceId",
    DevicePreparationDuration: "devicePreparationDuration",
    DeviceRegisteredDateTime: "deviceRegisteredDateTime",
    DeviceSerialNumber: "deviceSerialNumber",
    DeviceSetupDuration: "deviceSetupDuration",
    DeviceSetupStatus: "deviceSetupStatus",
    EnrollmentFailureDetails: "enrollmentFailureDetails",
    EnrollmentStartDateTime: "enrollmentStartDateTime",
    EnrollmentState: "enrollmentState",
    EnrollmentType: "enrollmentType",
    EventDateTime: "eventDateTime",
    ManagedDeviceName: "managedDeviceName",
    OsVersion: "osVersion",
    TargetedAppCount: "targetedAppCount",
    TargetedPolicyCount: "targetedPolicyCount",
    UserPrincipalName: "userPrincipalName",
    Windows10EnrollmentCompletionPageConfigurationDisplayName: "windows10EnrollmentCompletionPageConfigurationDisplayName",
    Windows10EnrollmentCompletionPageConfigurationId: "windows10EnrollmentCompletionPageConfigurationId",
    WindowsAutopilotDeploymentProfileDisplayName: "windowsAutopilotDeploymentProfileDisplayName",
    PolicyStatusDetails: "policyStatusDetails",
} as const;
/* tslint:enable */
/* eslint-enable */
