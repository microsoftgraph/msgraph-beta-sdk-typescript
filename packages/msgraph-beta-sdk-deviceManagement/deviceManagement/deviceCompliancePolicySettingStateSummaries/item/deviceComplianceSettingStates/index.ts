/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createDeviceComplianceSettingStateCollectionResponseFromDiscriminatorValue, createDeviceComplianceSettingStateFromDiscriminatorValue, serializeDeviceComplianceSettingState, type DeviceComplianceSettingState, type DeviceComplianceSettingStateCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { DeviceComplianceSettingStateItemRequestBuilderRequestsMetadata, type DeviceComplianceSettingStateItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the deviceComplianceSettingStates property of the microsoft.graph.deviceCompliancePolicySettingStateSummary entity.
 */
export interface DeviceComplianceSettingStatesRequestBuilder extends BaseRequestBuilder<DeviceComplianceSettingStatesRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the deviceComplianceSettingStates property of the microsoft.graph.deviceCompliancePolicySettingStateSummary entity.
     * @param deviceComplianceSettingStateId The unique identifier of deviceComplianceSettingState
     * @returns {DeviceComplianceSettingStateItemRequestBuilder}
     */
     byDeviceComplianceSettingStateId(deviceComplianceSettingStateId: string) : DeviceComplianceSettingStateItemRequestBuilder;
    /**
     * Get deviceComplianceSettingStates from deviceManagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DeviceComplianceSettingStateCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<DeviceComplianceSettingStatesRequestBuilderGetQueryParameters> | undefined) : Promise<DeviceComplianceSettingStateCollectionResponse | undefined>;
    /**
     * Create new navigation property to deviceComplianceSettingStates for deviceManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DeviceComplianceSettingState>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: DeviceComplianceSettingState, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<DeviceComplianceSettingState | undefined>;
    /**
     * Get deviceComplianceSettingStates from deviceManagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<DeviceComplianceSettingStatesRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create new navigation property to deviceComplianceSettingStates for deviceManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: DeviceComplianceSettingState, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get deviceComplianceSettingStates from deviceManagement
 */
export interface DeviceComplianceSettingStatesRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Uri template for the request builder.
 */
export const DeviceComplianceSettingStatesRequestBuilderUriTemplate = "{+baseurl}/deviceManagement/deviceCompliancePolicySettingStateSummaries/{deviceCompliancePolicySettingStateSummary%2Did}/deviceComplianceSettingStates{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const DeviceComplianceSettingStatesRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const DeviceComplianceSettingStatesRequestBuilderNavigationMetadata: Record<Exclude<keyof DeviceComplianceSettingStatesRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byDeviceComplianceSettingStateId: {
        requestsMetadata: DeviceComplianceSettingStateItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["deviceComplianceSettingState%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const DeviceComplianceSettingStatesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: DeviceComplianceSettingStatesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDeviceComplianceSettingStateCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: DeviceComplianceSettingStatesRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: DeviceComplianceSettingStatesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDeviceComplianceSettingStateFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeDeviceComplianceSettingState,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Provides operations to manage the deviceComplianceSettingStates property of the microsoft.graph.deviceCompliancePolicySettingStateSummary entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
} as const;
/**
 * Provides operations to manage the deviceComplianceSettingStates property of the microsoft.graph.deviceCompliancePolicySettingStateSummary entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    ComplianceGracePeriodExpirationDateTime: "complianceGracePeriodExpirationDateTime",
    ComplianceGracePeriodExpirationDateTimeDesc: "complianceGracePeriodExpirationDateTime desc",
    DeviceId: "deviceId",
    DeviceIdDesc: "deviceId desc",
    DeviceModel: "deviceModel",
    DeviceModelDesc: "deviceModel desc",
    DeviceName: "deviceName",
    DeviceNameDesc: "deviceName desc",
    PlatformType: "platformType",
    PlatformTypeDesc: "platformType desc",
    Setting: "setting",
    SettingDesc: "setting desc",
    SettingName: "settingName",
    SettingNameDesc: "settingName desc",
    State: "state",
    StateDesc: "state desc",
    UserEmail: "userEmail",
    UserEmailDesc: "userEmail desc",
    UserId: "userId",
    UserIdDesc: "userId desc",
    UserName: "userName",
    UserNameDesc: "userName desc",
    UserPrincipalName: "userPrincipalName",
    UserPrincipalNameDesc: "userPrincipalName desc",
} as const;
/**
 * Provides operations to manage the deviceComplianceSettingStates property of the microsoft.graph.deviceCompliancePolicySettingStateSummary entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    ComplianceGracePeriodExpirationDateTime: "complianceGracePeriodExpirationDateTime",
    DeviceId: "deviceId",
    DeviceModel: "deviceModel",
    DeviceName: "deviceName",
    PlatformType: "platformType",
    Setting: "setting",
    SettingName: "settingName",
    State: "state",
    UserEmail: "userEmail",
    UserId: "userId",
    UserName: "userName",
    UserPrincipalName: "userPrincipalName",
} as const;
/* tslint:enable */
/* eslint-enable */
