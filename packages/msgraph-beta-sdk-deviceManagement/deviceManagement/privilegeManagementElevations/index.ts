/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createPrivilegeManagementElevationCollectionResponseFromDiscriminatorValue, createPrivilegeManagementElevationFromDiscriminatorValue, serializePrivilegeManagementElevation, type PrivilegeManagementElevation, type PrivilegeManagementElevationCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { PrivilegeManagementElevationItemRequestBuilderRequestsMetadata, type PrivilegeManagementElevationItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the privilegeManagementElevations property of the microsoft.graph.deviceManagement entity.
 */
export interface PrivilegeManagementElevationsRequestBuilder extends BaseRequestBuilder<PrivilegeManagementElevationsRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the privilegeManagementElevations property of the microsoft.graph.deviceManagement entity.
     * @param privilegeManagementElevationId The unique identifier of privilegeManagementElevation
     * @returns {PrivilegeManagementElevationItemRequestBuilder}
     */
     byPrivilegeManagementElevationId(privilegeManagementElevationId: string) : PrivilegeManagementElevationItemRequestBuilder;
    /**
     * The endpoint privilege management elevation event entity contains elevation details.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<PrivilegeManagementElevationCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<PrivilegeManagementElevationsRequestBuilderGetQueryParameters> | undefined) : Promise<PrivilegeManagementElevationCollectionResponse | undefined>;
    /**
     * Create new navigation property to privilegeManagementElevations for deviceManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<PrivilegeManagementElevation>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: PrivilegeManagementElevation, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<PrivilegeManagementElevation | undefined>;
    /**
     * The endpoint privilege management elevation event entity contains elevation details.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<PrivilegeManagementElevationsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create new navigation property to privilegeManagementElevations for deviceManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: PrivilegeManagementElevation, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * The endpoint privilege management elevation event entity contains elevation details.
 */
export interface PrivilegeManagementElevationsRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Uri template for the request builder.
 */
export const PrivilegeManagementElevationsRequestBuilderUriTemplate = "{+baseurl}/deviceManagement/privilegeManagementElevations{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Provides operations to manage the privilegeManagementElevations property of the microsoft.graph.deviceManagement entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
} as const;
/**
 * Provides operations to manage the privilegeManagementElevations property of the microsoft.graph.deviceManagement entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    CertificatePayload: "certificatePayload",
    CertificatePayloadDesc: "certificatePayload desc",
    CompanyName: "companyName",
    CompanyNameDesc: "companyName desc",
    DeviceId: "deviceId",
    DeviceIdDesc: "deviceId desc",
    DeviceName: "deviceName",
    DeviceNameDesc: "deviceName desc",
    ElevationType: "elevationType",
    ElevationTypeDesc: "elevationType desc",
    EventDateTime: "eventDateTime",
    EventDateTimeDesc: "eventDateTime desc",
    FileDescription: "fileDescription",
    FileDescriptionDesc: "fileDescription desc",
    FilePath: "filePath",
    FilePathDesc: "filePath desc",
    FileVersion: "fileVersion",
    FileVersionDesc: "fileVersion desc",
    Hash: "hash",
    HashDesc: "hash desc",
    InternalName: "internalName",
    InternalNameDesc: "internalName desc",
    Justification: "justification",
    JustificationDesc: "justification desc",
    ParentProcessName: "parentProcessName",
    ParentProcessNameDesc: "parentProcessName desc",
    PolicyId: "policyId",
    PolicyIdDesc: "policyId desc",
    PolicyName: "policyName",
    PolicyNameDesc: "policyName desc",
    ProcessType: "processType",
    ProcessTypeDesc: "processType desc",
    ProductName: "productName",
    ProductNameDesc: "productName desc",
    Result: "result",
    ResultDesc: "result desc",
    RuleId: "ruleId",
    RuleIdDesc: "ruleId desc",
    SystemInitiatedElevation: "systemInitiatedElevation",
    SystemInitiatedElevationDesc: "systemInitiatedElevation desc",
    Upn: "upn",
    UpnDesc: "upn desc",
    UserType: "userType",
    UserTypeDesc: "userType desc",
} as const;
/**
 * Provides operations to manage the privilegeManagementElevations property of the microsoft.graph.deviceManagement entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    CertificatePayload: "certificatePayload",
    CompanyName: "companyName",
    DeviceId: "deviceId",
    DeviceName: "deviceName",
    ElevationType: "elevationType",
    EventDateTime: "eventDateTime",
    FileDescription: "fileDescription",
    FilePath: "filePath",
    FileVersion: "fileVersion",
    Hash: "hash",
    InternalName: "internalName",
    Justification: "justification",
    ParentProcessName: "parentProcessName",
    PolicyId: "policyId",
    PolicyName: "policyName",
    ProcessType: "processType",
    ProductName: "productName",
    Result: "result",
    RuleId: "ruleId",
    SystemInitiatedElevation: "systemInitiatedElevation",
    Upn: "upn",
    UserType: "userType",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const PrivilegeManagementElevationsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const PrivilegeManagementElevationsRequestBuilderNavigationMetadata: Record<Exclude<keyof PrivilegeManagementElevationsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byPrivilegeManagementElevationId: {
        requestsMetadata: PrivilegeManagementElevationItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["privilegeManagementElevation%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const PrivilegeManagementElevationsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: PrivilegeManagementElevationsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createPrivilegeManagementElevationCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: PrivilegeManagementElevationsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: PrivilegeManagementElevationsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createPrivilegeManagementElevationFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializePrivilegeManagementElevation,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
