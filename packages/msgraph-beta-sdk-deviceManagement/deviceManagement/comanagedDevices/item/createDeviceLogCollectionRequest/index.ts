/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createDeviceLogCollectionRequestFromDiscriminatorValue, createDeviceLogCollectionResponseFromDiscriminatorValue, serializeDeviceLogCollectionRequest, serializeDeviceLogCollectionResponse, type DeviceLogCollectionRequest, type DeviceLogCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/index.js';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CreateDeviceLogCollectionRequestPostRequestBody}
 */
// @ts-ignore
export function createCreateDeviceLogCollectionRequestPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCreateDeviceLogCollectionRequestPostRequestBody;
}
export interface CreateDeviceLogCollectionRequestPostRequestBody extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The templateType property
     */
    templateType?: DeviceLogCollectionRequest | null;
}
/**
 * Provides operations to call the createDeviceLogCollectionRequest method.
 */
export interface CreateDeviceLogCollectionRequestRequestBuilder extends BaseRequestBuilder<CreateDeviceLogCollectionRequestRequestBuilder> {
    /**
     * Invoke action createDeviceLogCollectionRequest
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DeviceLogCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: CreateDeviceLogCollectionRequestPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<DeviceLogCollectionResponse | undefined>;
    /**
     * Invoke action createDeviceLogCollectionRequest
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: CreateDeviceLogCollectionRequestPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * The deserialization information for the current model
 * @param CreateDeviceLogCollectionRequestPostRequestBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCreateDeviceLogCollectionRequestPostRequestBody(createDeviceLogCollectionRequestPostRequestBody: Partial<CreateDeviceLogCollectionRequestPostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { createDeviceLogCollectionRequestPostRequestBody.backingStoreEnabled = true; },
        "templateType": n => { createDeviceLogCollectionRequestPostRequestBody.templateType = n.getObjectValue<DeviceLogCollectionRequest>(createDeviceLogCollectionRequestFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param CreateDeviceLogCollectionRequestPostRequestBody The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCreateDeviceLogCollectionRequestPostRequestBody(writer: SerializationWriter, createDeviceLogCollectionRequestPostRequestBody: Partial<CreateDeviceLogCollectionRequestPostRequestBody> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!createDeviceLogCollectionRequestPostRequestBody || isSerializingDerivedType) { return; }
    writer.writeObjectValue<DeviceLogCollectionRequest>("templateType", createDeviceLogCollectionRequestPostRequestBody.templateType, serializeDeviceLogCollectionRequest);
    writer.writeAdditionalData(createDeviceLogCollectionRequestPostRequestBody.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const CreateDeviceLogCollectionRequestRequestBuilderUriTemplate = "{+baseurl}/deviceManagement/comanagedDevices/{managedDevice%2Did}/createDeviceLogCollectionRequest";
/**
 * Metadata for all the requests in the request builder.
 */
export const CreateDeviceLogCollectionRequestRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: CreateDeviceLogCollectionRequestRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDeviceLogCollectionResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCreateDeviceLogCollectionRequestPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
