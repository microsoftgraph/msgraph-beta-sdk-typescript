/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createCloudCertificationAuthorityFromDiscriminatorValue, createTrustChainCertificateFromDiscriminatorValue, serializeCloudCertificationAuthority, serializeTrustChainCertificate, type CloudCertificationAuthority, type TrustChainCertificate } from '@microsoft/msgraph-beta-sdk/models/index.js';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UploadExternallySignedCertificationAuthorityCertificatePostRequestBody}
 */
// @ts-ignore
export function createUploadExternallySignedCertificationAuthorityCertificatePostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUploadExternallySignedCertificationAuthorityCertificatePostRequestBody;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUploadExternallySignedCertificationAuthorityCertificatePostRequestBody(uploadExternallySignedCertificationAuthorityCertificatePostRequestBody: Partial<UploadExternallySignedCertificationAuthorityCertificatePostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { uploadExternallySignedCertificationAuthorityCertificatePostRequestBody.backingStoreEnabled = true; },
        "certificationAuthorityVersion": n => { uploadExternallySignedCertificationAuthorityCertificatePostRequestBody.certificationAuthorityVersion = n.getNumberValue(); },
        "signedCertificate": n => { uploadExternallySignedCertificationAuthorityCertificatePostRequestBody.signedCertificate = n.getStringValue(); },
        "trustChainCertificates": n => { uploadExternallySignedCertificationAuthorityCertificatePostRequestBody.trustChainCertificates = n.getCollectionOfObjectValues<TrustChainCertificate>(createTrustChainCertificateFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUploadExternallySignedCertificationAuthorityCertificatePostRequestBody(writer: SerializationWriter, uploadExternallySignedCertificationAuthorityCertificatePostRequestBody: Partial<UploadExternallySignedCertificationAuthorityCertificatePostRequestBody> | undefined | null = {}) : void {
    if (uploadExternallySignedCertificationAuthorityCertificatePostRequestBody) {
        writer.writeNumberValue("certificationAuthorityVersion", uploadExternallySignedCertificationAuthorityCertificatePostRequestBody.certificationAuthorityVersion);
        writer.writeStringValue("signedCertificate", uploadExternallySignedCertificationAuthorityCertificatePostRequestBody.signedCertificate);
        writer.writeCollectionOfObjectValues<TrustChainCertificate>("trustChainCertificates", uploadExternallySignedCertificationAuthorityCertificatePostRequestBody.trustChainCertificates, serializeTrustChainCertificate);
        writer.writeAdditionalData(uploadExternallySignedCertificationAuthorityCertificatePostRequestBody.additionalData);
    }
}
export interface UploadExternallySignedCertificationAuthorityCertificatePostRequestBody extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The certificationAuthorityVersion property
     */
    certificationAuthorityVersion?: number | null;
    /**
     * The signedCertificate property
     */
    signedCertificate?: string | null;
    /**
     * The trustChainCertificates property
     */
    trustChainCertificates?: TrustChainCertificate[] | null;
}
/**
 * Provides operations to call the uploadExternallySignedCertificationAuthorityCertificate method.
 */
export interface UploadExternallySignedCertificationAuthorityCertificateRequestBuilder extends BaseRequestBuilder<UploadExternallySignedCertificationAuthorityCertificateRequestBuilder> {
    /**
     * Invoke action uploadExternallySignedCertificationAuthorityCertificate
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<CloudCertificationAuthority>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: UploadExternallySignedCertificationAuthorityCertificatePostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<CloudCertificationAuthority | undefined>;
    /**
     * Invoke action uploadExternallySignedCertificationAuthorityCertificate
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: UploadExternallySignedCertificationAuthorityCertificatePostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const UploadExternallySignedCertificationAuthorityCertificateRequestBuilderUriTemplate = "{+baseurl}/deviceManagement/cloudCertificationAuthority/{cloudCertificationAuthority%2Did}/uploadExternallySignedCertificationAuthorityCertificate";
/**
 * Metadata for all the requests in the request builder.
 */
export const UploadExternallySignedCertificationAuthorityCertificateRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: UploadExternallySignedCertificationAuthorityCertificateRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createCloudCertificationAuthorityFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeUploadExternallySignedCertificationAuthorityCertificatePostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
