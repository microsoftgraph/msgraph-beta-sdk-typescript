/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createGroupPolicyDefinitionCollectionResponseFromDiscriminatorValue, createGroupPolicyDefinitionFromDiscriminatorValue, serializeGroupPolicyDefinition, type GroupPolicyDefinition, type GroupPolicyDefinitionCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { GroupPolicyDefinitionItemRequestBuilderNavigationMetadata, GroupPolicyDefinitionItemRequestBuilderRequestsMetadata, type GroupPolicyDefinitionItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the groupPolicyDefinitions property of the microsoft.graph.deviceManagement entity.
 */
export interface GroupPolicyDefinitionsRequestBuilder extends BaseRequestBuilder<GroupPolicyDefinitionsRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the groupPolicyDefinitions property of the microsoft.graph.deviceManagement entity.
     * @param groupPolicyDefinitionId The unique identifier of groupPolicyDefinition
     * @returns {GroupPolicyDefinitionItemRequestBuilder}
     */
     byGroupPolicyDefinitionId(groupPolicyDefinitionId: string) : GroupPolicyDefinitionItemRequestBuilder;
    /**
     * The available group policy definitions for this account.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<GroupPolicyDefinitionCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<GroupPolicyDefinitionsRequestBuilderGetQueryParameters> | undefined) : Promise<GroupPolicyDefinitionCollectionResponse | undefined>;
    /**
     * Create new navigation property to groupPolicyDefinitions for deviceManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<GroupPolicyDefinition>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: GroupPolicyDefinition, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<GroupPolicyDefinition | undefined>;
    /**
     * The available group policy definitions for this account.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<GroupPolicyDefinitionsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create new navigation property to groupPolicyDefinitions for deviceManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: GroupPolicyDefinition, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * The available group policy definitions for this account.
 */
export interface GroupPolicyDefinitionsRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Uri template for the request builder.
 */
export const GroupPolicyDefinitionsRequestBuilderUriTemplate = "{+baseurl}/deviceManagement/groupPolicyDefinitions{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Provides operations to manage the groupPolicyDefinitions property of the microsoft.graph.deviceManagement entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    Category: "category",
    DefinitionFile: "definitionFile",
    NextVersionDefinition: "nextVersionDefinition",
    Presentations: "presentations",
    PreviousVersionDefinition: "previousVersionDefinition",
} as const;
/**
 * Provides operations to manage the groupPolicyDefinitions property of the microsoft.graph.deviceManagement entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    CategoryPath: "categoryPath",
    CategoryPathDesc: "categoryPath desc",
    ClassType: "classType",
    ClassTypeDesc: "classType desc",
    DisplayName: "displayName",
    DisplayNameDesc: "displayName desc",
    ExplainText: "explainText",
    ExplainTextDesc: "explainText desc",
    GroupPolicyCategoryId: "groupPolicyCategoryId",
    GroupPolicyCategoryIdDesc: "groupPolicyCategoryId desc",
    HasRelatedDefinitions: "hasRelatedDefinitions",
    HasRelatedDefinitionsDesc: "hasRelatedDefinitions desc",
    LastModifiedDateTime: "lastModifiedDateTime",
    LastModifiedDateTimeDesc: "lastModifiedDateTime desc",
    MinDeviceCspVersion: "minDeviceCspVersion",
    MinDeviceCspVersionDesc: "minDeviceCspVersion desc",
    MinUserCspVersion: "minUserCspVersion",
    MinUserCspVersionDesc: "minUserCspVersion desc",
    PolicyType: "policyType",
    PolicyTypeDesc: "policyType desc",
    SupportedOn: "supportedOn",
    SupportedOnDesc: "supportedOn desc",
    Version: "version",
    VersionDesc: "version desc",
} as const;
/**
 * Provides operations to manage the groupPolicyDefinitions property of the microsoft.graph.deviceManagement entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    CategoryPath: "categoryPath",
    ClassType: "classType",
    DisplayName: "displayName",
    ExplainText: "explainText",
    GroupPolicyCategoryId: "groupPolicyCategoryId",
    HasRelatedDefinitions: "hasRelatedDefinitions",
    LastModifiedDateTime: "lastModifiedDateTime",
    MinDeviceCspVersion: "minDeviceCspVersion",
    MinUserCspVersion: "minUserCspVersion",
    PolicyType: "policyType",
    SupportedOn: "supportedOn",
    Version: "version",
    Category: "category",
    DefinitionFile: "definitionFile",
    NextVersionDefinition: "nextVersionDefinition",
    Presentations: "presentations",
    PreviousVersionDefinition: "previousVersionDefinition",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const GroupPolicyDefinitionsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const GroupPolicyDefinitionsRequestBuilderNavigationMetadata: Record<Exclude<keyof GroupPolicyDefinitionsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byGroupPolicyDefinitionId: {
        requestsMetadata: GroupPolicyDefinitionItemRequestBuilderRequestsMetadata,
        navigationMetadata: GroupPolicyDefinitionItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["groupPolicyDefinition%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const GroupPolicyDefinitionsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: GroupPolicyDefinitionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createGroupPolicyDefinitionCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: GroupPolicyDefinitionsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: GroupPolicyDefinitionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createGroupPolicyDefinitionFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeGroupPolicyDefinition,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
