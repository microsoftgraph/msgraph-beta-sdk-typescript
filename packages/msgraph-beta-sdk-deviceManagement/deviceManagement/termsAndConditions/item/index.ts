/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createTermsAndConditionsFromDiscriminatorValue, serializeTermsAndConditions, type TermsAndConditions } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { AcceptanceStatusesRequestBuilderNavigationMetadata, AcceptanceStatusesRequestBuilderRequestsMetadata, AcceptanceStatusesRequestBuilderUriTemplate, type AcceptanceStatusesRequestBuilder } from './acceptanceStatuses/';
import { AssignmentsRequestBuilderNavigationMetadata, AssignmentsRequestBuilderRequestsMetadata, AssignmentsRequestBuilderUriTemplate, type AssignmentsRequestBuilder } from './assignments/';
import { GroupAssignmentsRequestBuilderNavigationMetadata, GroupAssignmentsRequestBuilderRequestsMetadata, GroupAssignmentsRequestBuilderUriTemplate, type GroupAssignmentsRequestBuilder } from './groupAssignments/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the termsAndConditions property of the microsoft.graph.deviceManagement entity.
 */
export interface TermsAndConditionsItemRequestBuilder extends BaseRequestBuilder<TermsAndConditionsItemRequestBuilder> {
    /**
     * Provides operations to manage the acceptanceStatuses property of the microsoft.graph.termsAndConditions entity.
     */
    get acceptanceStatuses(): AcceptanceStatusesRequestBuilder;
    /**
     * Provides operations to manage the assignments property of the microsoft.graph.termsAndConditions entity.
     */
    get assignments(): AssignmentsRequestBuilder;
    /**
     * Provides operations to manage the groupAssignments property of the microsoft.graph.termsAndConditions entity.
     */
    get groupAssignments(): GroupAssignmentsRequestBuilder;
    /**
     * Delete navigation property termsAndConditions for deviceManagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * The terms and conditions associated with device management of the company.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of TermsAndConditions
     */
     get(requestConfiguration?: RequestConfiguration<TermsAndConditionsItemRequestBuilderGetQueryParameters> | undefined) : Promise<TermsAndConditions | undefined>;
    /**
     * Update the navigation property termsAndConditions in deviceManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of TermsAndConditions
     */
     patch(body: TermsAndConditions, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<TermsAndConditions | undefined>;
    /**
     * Delete navigation property termsAndConditions for deviceManagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * The terms and conditions associated with device management of the company.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<TermsAndConditionsItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property termsAndConditions in deviceManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: TermsAndConditions, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * The terms and conditions associated with device management of the company.
 */
export interface TermsAndConditionsItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const TermsAndConditionsItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const TermsAndConditionsItemRequestBuilderNavigationMetadata: Record<Exclude<keyof TermsAndConditionsItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    acceptanceStatuses: {
        uriTemplate: AcceptanceStatusesRequestBuilderUriTemplate,
        requestsMetadata: AcceptanceStatusesRequestBuilderRequestsMetadata,
        navigationMetadata: AcceptanceStatusesRequestBuilderNavigationMetadata,
    },
    assignments: {
        uriTemplate: AssignmentsRequestBuilderUriTemplate,
        requestsMetadata: AssignmentsRequestBuilderRequestsMetadata,
        navigationMetadata: AssignmentsRequestBuilderNavigationMetadata,
    },
    groupAssignments: {
        uriTemplate: GroupAssignmentsRequestBuilderUriTemplate,
        requestsMetadata: GroupAssignmentsRequestBuilderRequestsMetadata,
        navigationMetadata: GroupAssignmentsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const TermsAndConditionsItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createTermsAndConditionsFromDiscriminatorValue,
        queryParametersMapper: TermsAndConditionsItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createTermsAndConditionsFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeTermsAndConditions,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const TermsAndConditionsItemRequestBuilderUriTemplate = "{+baseurl}/deviceManagement/termsAndConditions/{termsAndConditions%2Did}{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
