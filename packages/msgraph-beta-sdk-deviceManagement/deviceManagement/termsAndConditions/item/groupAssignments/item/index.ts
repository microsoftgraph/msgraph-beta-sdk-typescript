/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createTermsAndConditionsGroupAssignmentFromDiscriminatorValue, serializeTermsAndConditionsGroupAssignment, type TermsAndConditionsGroupAssignment } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { TermsAndConditionsRequestBuilderRequestsMetadata, type TermsAndConditionsRequestBuilder } from './termsAndConditions/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the groupAssignments property of the microsoft.graph.termsAndConditions entity.
 */
export interface TermsAndConditionsGroupAssignmentItemRequestBuilder extends BaseRequestBuilder<TermsAndConditionsGroupAssignmentItemRequestBuilder> {
    /**
     * Provides operations to manage the termsAndConditions property of the microsoft.graph.termsAndConditionsGroupAssignment entity.
     */
    get termsAndConditions(): TermsAndConditionsRequestBuilder;
    /**
     * Delete navigation property groupAssignments for deviceManagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * The list of group assignments for this T&C policy.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<TermsAndConditionsGroupAssignment>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<TermsAndConditionsGroupAssignmentItemRequestBuilderGetQueryParameters> | undefined) : Promise<TermsAndConditionsGroupAssignment | undefined>;
    /**
     * Update the navigation property groupAssignments in deviceManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<TermsAndConditionsGroupAssignment>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: TermsAndConditionsGroupAssignment, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<TermsAndConditionsGroupAssignment | undefined>;
    /**
     * Delete navigation property groupAssignments for deviceManagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * The list of group assignments for this T&C policy.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<TermsAndConditionsGroupAssignmentItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property groupAssignments in deviceManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: TermsAndConditionsGroupAssignment, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * The list of group assignments for this T&C policy.
 */
export interface TermsAndConditionsGroupAssignmentItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const TermsAndConditionsGroupAssignmentItemRequestBuilderUriTemplate = "{+baseurl}/deviceManagement/termsAndConditions/{termsAndConditions%2Did}/groupAssignments/{termsAndConditionsGroupAssignment%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const TermsAndConditionsGroupAssignmentItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const TermsAndConditionsGroupAssignmentItemRequestBuilderNavigationMetadata: Record<Exclude<keyof TermsAndConditionsGroupAssignmentItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    termsAndConditions: {
        requestsMetadata: TermsAndConditionsRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const TermsAndConditionsGroupAssignmentItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: TermsAndConditionsGroupAssignmentItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        uriTemplate: TermsAndConditionsGroupAssignmentItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createTermsAndConditionsGroupAssignmentFromDiscriminatorValue,
        queryParametersMapper: TermsAndConditionsGroupAssignmentItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: TermsAndConditionsGroupAssignmentItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createTermsAndConditionsGroupAssignmentFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeTermsAndConditionsGroupAssignment,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
