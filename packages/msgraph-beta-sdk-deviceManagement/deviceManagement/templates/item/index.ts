/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createDeviceManagementTemplateFromDiscriminatorValue, serializeDeviceManagementTemplate, type DeviceManagementTemplate } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CategoriesRequestBuilderNavigationMetadata, CategoriesRequestBuilderRequestsMetadata, type CategoriesRequestBuilder } from './categories/';
import { CompareWithTemplateIdRequestBuilderRequestsMetadata, type CompareWithTemplateIdRequestBuilder } from './compareWithTemplateId/';
import { CreateInstanceRequestBuilderRequestsMetadata, type CreateInstanceRequestBuilder } from './createInstance/';
import { MigratableToRequestBuilderNavigationMetadata, MigratableToRequestBuilderRequestsMetadata, type MigratableToRequestBuilder } from './migratableTo/';
import { SettingsRequestBuilderNavigationMetadata, SettingsRequestBuilderRequestsMetadata, type SettingsRequestBuilder } from './settings/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the templates property of the microsoft.graph.deviceManagement entity.
 */
export interface DeviceManagementTemplateItemRequestBuilder extends BaseRequestBuilder<DeviceManagementTemplateItemRequestBuilder> {
    /**
     * Provides operations to manage the categories property of the microsoft.graph.deviceManagementTemplate entity.
     */
    get categories(): CategoriesRequestBuilder;
    /**
     * Provides operations to call the createInstance method.
     */
    get createInstance(): CreateInstanceRequestBuilder;
    /**
     * Provides operations to manage the migratableTo property of the microsoft.graph.deviceManagementTemplate entity.
     */
    get migratableTo(): MigratableToRequestBuilder;
    /**
     * Provides operations to manage the settings property of the microsoft.graph.deviceManagementTemplate entity.
     */
    get settings(): SettingsRequestBuilder;
    /**
     * Provides operations to call the compare method.
     * @param templateId Usage: templateId='{templateId}'
     * @returns {CompareWithTemplateIdRequestBuilder}
     */
     compareWithTemplateId(templateId: string | undefined) : CompareWithTemplateIdRequestBuilder;
    /**
     * Delete navigation property templates for deviceManagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * The available templates
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DeviceManagementTemplate>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<DeviceManagementTemplateItemRequestBuilderGetQueryParameters> | undefined) : Promise<DeviceManagementTemplate | undefined>;
    /**
     * Update the navigation property templates in deviceManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DeviceManagementTemplate>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: DeviceManagementTemplate, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<DeviceManagementTemplate | undefined>;
    /**
     * Delete navigation property templates for deviceManagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * The available templates
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<DeviceManagementTemplateItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property templates in deviceManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: DeviceManagementTemplate, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * The available templates
 */
export interface DeviceManagementTemplateItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const DeviceManagementTemplateItemRequestBuilderUriTemplate = "{+baseurl}/deviceManagement/templates/{deviceManagementTemplate%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const DeviceManagementTemplateItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const DeviceManagementTemplateItemRequestBuilderNavigationMetadata: Record<Exclude<keyof DeviceManagementTemplateItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    compareWithTemplateId: {
        requestsMetadata: CompareWithTemplateIdRequestBuilderRequestsMetadata,
    },
    categories: {
        requestsMetadata: CategoriesRequestBuilderRequestsMetadata,
        navigationMetadata: CategoriesRequestBuilderNavigationMetadata,
    },
    createInstance: {
        requestsMetadata: CreateInstanceRequestBuilderRequestsMetadata,
    },
    migratableTo: {
        requestsMetadata: MigratableToRequestBuilderRequestsMetadata,
        navigationMetadata: MigratableToRequestBuilderNavigationMetadata,
    },
    settings: {
        requestsMetadata: SettingsRequestBuilderRequestsMetadata,
        navigationMetadata: SettingsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const DeviceManagementTemplateItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: DeviceManagementTemplateItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        uriTemplate: DeviceManagementTemplateItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createDeviceManagementTemplateFromDiscriminatorValue,
        queryParametersMapper: DeviceManagementTemplateItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: DeviceManagementTemplateItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createDeviceManagementTemplateFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeDeviceManagementTemplate,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
