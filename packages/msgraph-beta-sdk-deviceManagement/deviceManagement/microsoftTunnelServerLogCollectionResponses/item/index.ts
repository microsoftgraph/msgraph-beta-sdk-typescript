/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createMicrosoftTunnelServerLogCollectionResponseFromDiscriminatorValue, serializeMicrosoftTunnelServerLogCollectionResponse, type MicrosoftTunnelServerLogCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CreateDownloadUrlRequestBuilderRequestsMetadata, CreateDownloadUrlRequestBuilderUriTemplate, type CreateDownloadUrlRequestBuilder } from './createDownloadUrl/';
import { GenerateDownloadUrlRequestBuilderRequestsMetadata, GenerateDownloadUrlRequestBuilderUriTemplate, type GenerateDownloadUrlRequestBuilder } from './generateDownloadUrl/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the microsoftTunnelServerLogCollectionResponses property of the microsoft.graph.deviceManagement entity.
 */
export interface MicrosoftTunnelServerLogCollectionResponseItemRequestBuilder extends BaseRequestBuilder<MicrosoftTunnelServerLogCollectionResponseItemRequestBuilder> {
    /**
     * Provides operations to call the createDownloadUrl method.
     */
    get createDownloadUrl(): CreateDownloadUrlRequestBuilder;
    /**
     * Provides operations to call the generateDownloadUrl method.
     */
    get generateDownloadUrl(): GenerateDownloadUrlRequestBuilder;
    /**
     * Delete navigation property microsoftTunnelServerLogCollectionResponses for deviceManagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Collection of MicrosoftTunnelServerLogCollectionResponse settings associated with account.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of MicrosoftTunnelServerLogCollectionResponse
     */
     get(requestConfiguration?: RequestConfiguration<MicrosoftTunnelServerLogCollectionResponseItemRequestBuilderGetQueryParameters> | undefined) : Promise<MicrosoftTunnelServerLogCollectionResponse | undefined>;
    /**
     * Update the navigation property microsoftTunnelServerLogCollectionResponses in deviceManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of MicrosoftTunnelServerLogCollectionResponse
     */
     patch(body: MicrosoftTunnelServerLogCollectionResponse, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<MicrosoftTunnelServerLogCollectionResponse | undefined>;
    /**
     * Delete navigation property microsoftTunnelServerLogCollectionResponses for deviceManagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Collection of MicrosoftTunnelServerLogCollectionResponse settings associated with account.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<MicrosoftTunnelServerLogCollectionResponseItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property microsoftTunnelServerLogCollectionResponses in deviceManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: MicrosoftTunnelServerLogCollectionResponse, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Collection of MicrosoftTunnelServerLogCollectionResponse settings associated with account.
 */
export interface MicrosoftTunnelServerLogCollectionResponseItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const MicrosoftTunnelServerLogCollectionResponseItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const MicrosoftTunnelServerLogCollectionResponseItemRequestBuilderNavigationMetadata: Record<Exclude<keyof MicrosoftTunnelServerLogCollectionResponseItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    createDownloadUrl: {
        uriTemplate: CreateDownloadUrlRequestBuilderUriTemplate,
        requestsMetadata: CreateDownloadUrlRequestBuilderRequestsMetadata,
    },
    generateDownloadUrl: {
        uriTemplate: GenerateDownloadUrlRequestBuilderUriTemplate,
        requestsMetadata: GenerateDownloadUrlRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const MicrosoftTunnelServerLogCollectionResponseItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createMicrosoftTunnelServerLogCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: MicrosoftTunnelServerLogCollectionResponseItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createMicrosoftTunnelServerLogCollectionResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeMicrosoftTunnelServerLogCollectionResponse,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const MicrosoftTunnelServerLogCollectionResponseItemRequestBuilderUriTemplate = "{+baseurl}/deviceManagement/microsoftTunnelServerLogCollectionResponses/{microsoftTunnelServerLogCollectionResponse%2Did}{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
