/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ConnectPostResponse extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The value property
     */
    value?: boolean;
}
/**
 * Provides operations to call the connect method.
 */
export interface ConnectRequestBuilder extends BaseRequestBuilder<ConnectRequestBuilder> {
    /**
     * Invoke action connect
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of ConnectPostResponse
     */
     post(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ConnectPostResponse | undefined>;
    /**
     * Invoke action connect
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPostRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a connectPostResponse
 */
export function createConnectPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoConnectPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoConnectPostResponse(connectPostResponse: Partial<ConnectPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { connectPostResponse.backingStoreEnabled = true; },
        "value": n => { connectPostResponse.value = n.getBooleanValue(); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeConnectPostResponse(writer: SerializationWriter, connectPostResponse: Partial<ConnectPostResponse> | undefined = {}) : void {
    writer.writeBooleanValue("value", connectPostResponse.value);
    writer.writeAdditionalData(connectPostResponse.additionalData);
}
/**
 * Metadata for all the requests in the request builder.
 */
export const ConnectRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createConnectPostResponseFromDiscriminatorValue,
    },
};
/**
 * Uri template for the request builder.
 */
export const ConnectRequestBuilderUriTemplate = "{+baseurl}/deviceManagement/zebraFotaConnector/connect";
/* tslint:enable */
/* eslint-enable */
