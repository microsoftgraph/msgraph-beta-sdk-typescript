/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createZebraFotaConnectorFromDiscriminatorValue, serializeZebraFotaConnector, type ZebraFotaConnector } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { ApproveFotaAppsRequestBuilderRequestsMetadata, type ApproveFotaAppsRequestBuilder } from './approveFotaApps/';
import { ConnectRequestBuilderRequestsMetadata, type ConnectRequestBuilder } from './connect/';
import { DisconnectRequestBuilderRequestsMetadata, type DisconnectRequestBuilder } from './disconnect/';
import { HasActiveDeploymentsRequestBuilderRequestsMetadata, type HasActiveDeploymentsRequestBuilder } from './hasActiveDeployments/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the zebraFotaConnector property of the microsoft.graph.deviceManagement entity.
 */
export interface ZebraFotaConnectorRequestBuilder extends BaseRequestBuilder<ZebraFotaConnectorRequestBuilder> {
    /**
     * Provides operations to call the approveFotaApps method.
     */
    get approveFotaApps(): ApproveFotaAppsRequestBuilder;
    /**
     * Provides operations to call the connect method.
     */
    get connect(): ConnectRequestBuilder;
    /**
     * Provides operations to call the disconnect method.
     */
    get disconnect(): DisconnectRequestBuilder;
    /**
     * Provides operations to call the hasActiveDeployments method.
     */
    get hasActiveDeployments(): HasActiveDeploymentsRequestBuilder;
    /**
     * Delete navigation property zebraFotaConnector for deviceManagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * The singleton ZebraFotaConnector associated with account.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ZebraFotaConnector>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<ZebraFotaConnectorRequestBuilderGetQueryParameters> | undefined) : Promise<ZebraFotaConnector | undefined>;
    /**
     * Update the navigation property zebraFotaConnector in deviceManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ZebraFotaConnector>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: ZebraFotaConnector, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ZebraFotaConnector | undefined>;
    /**
     * Delete navigation property zebraFotaConnector for deviceManagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * The singleton ZebraFotaConnector associated with account.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ZebraFotaConnectorRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property zebraFotaConnector in deviceManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: ZebraFotaConnector, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * The singleton ZebraFotaConnector associated with account.
 */
export interface ZebraFotaConnectorRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
}
/**
 * Uri template for the request builder.
 */
export const ZebraFotaConnectorRequestBuilderUriTemplate = "{+baseurl}/deviceManagement/zebraFotaConnector{?%24expand,%24select}";
/**
 * Provides operations to manage the zebraFotaConnector property of the microsoft.graph.deviceManagement entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
} as const;
/**
 * Provides operations to manage the zebraFotaConnector property of the microsoft.graph.deviceManagement entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    EnrollmentAuthorizationUrl: "enrollmentAuthorizationUrl",
    EnrollmentToken: "enrollmentToken",
    FotaAppsApproved: "fotaAppsApproved",
    LastSyncDateTime: "lastSyncDateTime",
    State: "state",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ZebraFotaConnectorRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ZebraFotaConnectorRequestBuilderNavigationMetadata: Record<Exclude<keyof ZebraFotaConnectorRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    approveFotaApps: {
        requestsMetadata: ApproveFotaAppsRequestBuilderRequestsMetadata,
    },
    connect: {
        requestsMetadata: ConnectRequestBuilderRequestsMetadata,
    },
    disconnect: {
        requestsMetadata: DisconnectRequestBuilderRequestsMetadata,
    },
    hasActiveDeployments: {
        requestsMetadata: HasActiveDeploymentsRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ZebraFotaConnectorRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: ZebraFotaConnectorRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: ZebraFotaConnectorRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createZebraFotaConnectorFromDiscriminatorValue,
        queryParametersMapper: ZebraFotaConnectorRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: ZebraFotaConnectorRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createZebraFotaConnectorFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeZebraFotaConnector,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
