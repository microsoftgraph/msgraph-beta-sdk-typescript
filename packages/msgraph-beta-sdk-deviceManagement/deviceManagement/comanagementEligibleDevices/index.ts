/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createComanagementEligibleDeviceCollectionResponseFromDiscriminatorValue, createComanagementEligibleDeviceFromDiscriminatorValue, serializeComanagementEligibleDevice, type ComanagementEligibleDevice, type ComanagementEligibleDeviceCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { ComanagementEligibleDeviceItemRequestBuilderRequestsMetadata, type ComanagementEligibleDeviceItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the comanagementEligibleDevices property of the microsoft.graph.deviceManagement entity.
 */
export interface ComanagementEligibleDevicesRequestBuilder extends BaseRequestBuilder<ComanagementEligibleDevicesRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the comanagementEligibleDevices property of the microsoft.graph.deviceManagement entity.
     * @param comanagementEligibleDeviceId The unique identifier of comanagementEligibleDevice
     * @returns {ComanagementEligibleDeviceItemRequestBuilder}
     */
     byComanagementEligibleDeviceId(comanagementEligibleDeviceId: string) : ComanagementEligibleDeviceItemRequestBuilder;
    /**
     * The list of co-management eligible devices report
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ComanagementEligibleDeviceCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<ComanagementEligibleDevicesRequestBuilderGetQueryParameters> | undefined) : Promise<ComanagementEligibleDeviceCollectionResponse | undefined>;
    /**
     * Create new navigation property to comanagementEligibleDevices for deviceManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ComanagementEligibleDevice>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: ComanagementEligibleDevice, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ComanagementEligibleDevice | undefined>;
    /**
     * The list of co-management eligible devices report
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ComanagementEligibleDevicesRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create new navigation property to comanagementEligibleDevices for deviceManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: ComanagementEligibleDevice, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * The list of co-management eligible devices report
 */
export interface ComanagementEligibleDevicesRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Uri template for the request builder.
 */
export const ComanagementEligibleDevicesRequestBuilderUriTemplate = "{+baseurl}/deviceManagement/comanagementEligibleDevices{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ComanagementEligibleDevicesRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ComanagementEligibleDevicesRequestBuilderNavigationMetadata: Record<Exclude<keyof ComanagementEligibleDevicesRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byComanagementEligibleDeviceId: {
        requestsMetadata: ComanagementEligibleDeviceItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["comanagementEligibleDevice%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ComanagementEligibleDevicesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ComanagementEligibleDevicesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createComanagementEligibleDeviceCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: ComanagementEligibleDevicesRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: ComanagementEligibleDevicesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createComanagementEligibleDeviceFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeComanagementEligibleDevice,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Provides operations to manage the comanagementEligibleDevices property of the microsoft.graph.deviceManagement entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
} as const;
/**
 * Provides operations to manage the comanagementEligibleDevices property of the microsoft.graph.deviceManagement entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    ClientRegistrationStatus: "clientRegistrationStatus",
    ClientRegistrationStatusDesc: "clientRegistrationStatus desc",
    DeviceName: "deviceName",
    DeviceNameDesc: "deviceName desc",
    DeviceType: "deviceType",
    DeviceTypeDesc: "deviceType desc",
    EntitySource: "entitySource",
    EntitySourceDesc: "entitySource desc",
    ManagementAgents: "managementAgents",
    ManagementAgentsDesc: "managementAgents desc",
    ManagementState: "managementState",
    ManagementStateDesc: "managementState desc",
    Manufacturer: "manufacturer",
    ManufacturerDesc: "manufacturer desc",
    MdmStatus: "mdmStatus",
    MdmStatusDesc: "mdmStatus desc",
    Model: "model",
    ModelDesc: "model desc",
    OsDescription: "osDescription",
    OsDescriptionDesc: "osDescription desc",
    OsVersion: "osVersion",
    OsVersionDesc: "osVersion desc",
    OwnerType: "ownerType",
    OwnerTypeDesc: "ownerType desc",
    ReferenceId: "referenceId",
    ReferenceIdDesc: "referenceId desc",
    SerialNumber: "serialNumber",
    SerialNumberDesc: "serialNumber desc",
    Status: "status",
    StatusDesc: "status desc",
    Upn: "upn",
    UpnDesc: "upn desc",
    UserEmail: "userEmail",
    UserEmailDesc: "userEmail desc",
    UserId: "userId",
    UserIdDesc: "userId desc",
    UserName: "userName",
    UserNameDesc: "userName desc",
} as const;
/**
 * Provides operations to manage the comanagementEligibleDevices property of the microsoft.graph.deviceManagement entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    ClientRegistrationStatus: "clientRegistrationStatus",
    DeviceName: "deviceName",
    DeviceType: "deviceType",
    EntitySource: "entitySource",
    ManagementAgents: "managementAgents",
    ManagementState: "managementState",
    Manufacturer: "manufacturer",
    MdmStatus: "mdmStatus",
    Model: "model",
    OsDescription: "osDescription",
    OsVersion: "osVersion",
    OwnerType: "ownerType",
    ReferenceId: "referenceId",
    SerialNumber: "serialNumber",
    Status: "status",
    Upn: "upn",
    UserEmail: "userEmail",
    UserId: "userId",
    UserName: "userName",
} as const;
/* tslint:enable */
/* eslint-enable */
