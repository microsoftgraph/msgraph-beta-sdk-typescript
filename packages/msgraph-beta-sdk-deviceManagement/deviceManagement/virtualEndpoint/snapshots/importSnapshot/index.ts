/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createCloudPcSnapshotImportActionDetailFromDiscriminatorValue, createCloudPcSnapshotImportActionResultFromDiscriminatorValue, serializeCloudPcSnapshotImportActionDetail, serializeCloudPcSnapshotImportActionResult, type CloudPcSnapshotImportActionDetail, type CloudPcSnapshotImportActionResult } from '@microsoft/msgraph-beta-sdk/models/index.js';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ImportSnapshotPostRequestBody}
 */
// @ts-ignore
export function createImportSnapshotPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoImportSnapshotPostRequestBody;
}
/**
 * The deserialization information for the current model
 * @param ImportSnapshotPostRequestBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoImportSnapshotPostRequestBody(importSnapshotPostRequestBody: Partial<ImportSnapshotPostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "assignedUserId": n => { importSnapshotPostRequestBody.assignedUserId = n.getStringValue(); },
        "backingStoreEnabled": n => { importSnapshotPostRequestBody.backingStoreEnabled = true; },
        "sourceFiles": n => { importSnapshotPostRequestBody.sourceFiles = n.getCollectionOfObjectValues<CloudPcSnapshotImportActionDetail>(createCloudPcSnapshotImportActionDetailFromDiscriminatorValue); },
    }
}
export interface ImportSnapshotPostRequestBody extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * The assignedUserId property
     */
    assignedUserId?: string | null;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The sourceFiles property
     */
    sourceFiles?: CloudPcSnapshotImportActionDetail[] | null;
}
/**
 * Provides operations to call the importSnapshot method.
 */
export interface ImportSnapshotRequestBuilder extends BaseRequestBuilder<ImportSnapshotRequestBuilder> {
    /**
     * Import the snapshot from the customer-managed storage account using the provided information, and store it in the Azure storage account within the Cloud PC service on behalf of the customer.  To provision a new Cloud PC for a licensed user, import a valid .vhd snapshot from a customer-managed storage account into the Azure storage account used by the Cloud PC service.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<CloudPcSnapshotImportActionResult>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/cloudpcsnapshot-importsnapshot?view=graph-rest-beta|Find more info here}
     */
     post(body: ImportSnapshotPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<CloudPcSnapshotImportActionResult | undefined>;
    /**
     * Import the snapshot from the customer-managed storage account using the provided information, and store it in the Azure storage account within the Cloud PC service on behalf of the customer.  To provision a new Cloud PC for a licensed user, import a valid .vhd snapshot from a customer-managed storage account into the Azure storage account used by the Cloud PC service.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: ImportSnapshotPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param ImportSnapshotPostRequestBody The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeImportSnapshotPostRequestBody(writer: SerializationWriter, importSnapshotPostRequestBody: Partial<ImportSnapshotPostRequestBody> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!importSnapshotPostRequestBody || isSerializingDerivedType) { return; }
    writer.writeStringValue("assignedUserId", importSnapshotPostRequestBody.assignedUserId);
    writer.writeCollectionOfObjectValues<CloudPcSnapshotImportActionDetail>("sourceFiles", importSnapshotPostRequestBody.sourceFiles, serializeCloudPcSnapshotImportActionDetail);
    writer.writeAdditionalData(importSnapshotPostRequestBody.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const ImportSnapshotRequestBuilderUriTemplate = "{+baseurl}/deviceManagement/virtualEndpoint/snapshots/importSnapshot";
/**
 * Metadata for all the requests in the request builder.
 */
export const ImportSnapshotRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: ImportSnapshotRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createCloudPcSnapshotImportActionResultFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeImportSnapshotPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
