/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createImportedDeviceIdentityFromDiscriminatorValue, createImportedDeviceIdentityResultFromDiscriminatorValue, deserializeIntoBaseCollectionPaginationCountResponse, serializeBaseCollectionPaginationCountResponse, serializeImportedDeviceIdentity, serializeImportedDeviceIdentityResult, type BaseCollectionPaginationCountResponse, type ImportedDeviceIdentity, type ImportedDeviceIdentityResult } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a importDeviceIdentityListPostRequestBody
 */
export function createImportDeviceIdentityListPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoImportDeviceIdentityListPostRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a importDeviceIdentityListPostResponse
 */
export function createImportDeviceIdentityListPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoImportDeviceIdentityListPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoImportDeviceIdentityListPostRequestBody(importDeviceIdentityListPostRequestBody: Partial<ImportDeviceIdentityListPostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { importDeviceIdentityListPostRequestBody.backingStoreEnabled = true; },
        "importedDeviceIdentities": n => { importDeviceIdentityListPostRequestBody.importedDeviceIdentities = n.getCollectionOfObjectValues<ImportedDeviceIdentity>(createImportedDeviceIdentityFromDiscriminatorValue); },
        "overwriteImportedDeviceIdentities": n => { importDeviceIdentityListPostRequestBody.overwriteImportedDeviceIdentities = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoImportDeviceIdentityListPostResponse(importDeviceIdentityListPostResponse: Partial<ImportDeviceIdentityListPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(importDeviceIdentityListPostResponse),
        "value": n => { importDeviceIdentityListPostResponse.value = n.getCollectionOfObjectValues<ImportedDeviceIdentityResult>(createImportedDeviceIdentityResultFromDiscriminatorValue); },
    }
}
export interface ImportDeviceIdentityListPostRequestBody extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The importedDeviceIdentities property
     */
    importedDeviceIdentities?: ImportedDeviceIdentity[];
    /**
     * The overwriteImportedDeviceIdentities property
     */
    overwriteImportedDeviceIdentities?: boolean;
}
export interface ImportDeviceIdentityListPostResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: ImportedDeviceIdentityResult[];
}
/**
 * Provides operations to call the importDeviceIdentityList method.
 */
export interface ImportDeviceIdentityListRequestBuilder extends BaseRequestBuilder<ImportDeviceIdentityListRequestBuilder> {
    /**
     * Invoke action importDeviceIdentityList
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of ImportDeviceIdentityListPostResponse
     */
     post(body: ImportDeviceIdentityListPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ImportDeviceIdentityListPostResponse | undefined>;
    /**
     * Invoke action importDeviceIdentityList
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPostRequestInformation(body: ImportDeviceIdentityListPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeImportDeviceIdentityListPostRequestBody(writer: SerializationWriter, importDeviceIdentityListPostRequestBody: Partial<ImportDeviceIdentityListPostRequestBody> | undefined = {}) : void {
    writer.writeCollectionOfObjectValues<ImportedDeviceIdentity>("importedDeviceIdentities", importDeviceIdentityListPostRequestBody.importedDeviceIdentities, serializeImportedDeviceIdentity);
    writer.writeBooleanValue("overwriteImportedDeviceIdentities", importDeviceIdentityListPostRequestBody.overwriteImportedDeviceIdentities);
    writer.writeAdditionalData(importDeviceIdentityListPostRequestBody.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeImportDeviceIdentityListPostResponse(writer: SerializationWriter, importDeviceIdentityListPostResponse: Partial<ImportDeviceIdentityListPostResponse> | undefined = {}) : void {
    serializeBaseCollectionPaginationCountResponse(writer, importDeviceIdentityListPostResponse)
    writer.writeCollectionOfObjectValues<ImportedDeviceIdentityResult>("value", importDeviceIdentityListPostResponse.value, serializeImportedDeviceIdentityResult);
}
/**
 * Metadata for all the requests in the request builder.
 */
export const ImportDeviceIdentityListRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createImportDeviceIdentityListPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeImportDeviceIdentityListPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const ImportDeviceIdentityListRequestBuilderUriTemplate = "{+baseurl}/deviceManagement/importedDeviceIdentities/importDeviceIdentityList";
/* tslint:enable */
/* eslint-enable */
