/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createImportedDeviceIdentityCollectionResponseFromDiscriminatorValue, createImportedDeviceIdentityFromDiscriminatorValue, serializeImportedDeviceIdentity, type ImportedDeviceIdentity, type ImportedDeviceIdentityCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { ImportDeviceIdentityListRequestBuilderRequestsMetadata, type ImportDeviceIdentityListRequestBuilder } from './importDeviceIdentityList/';
import { ImportedDeviceIdentityItemRequestBuilderRequestsMetadata, type ImportedDeviceIdentityItemRequestBuilder } from './item/';
import { SearchExistingIdentitiesRequestBuilderRequestsMetadata, type SearchExistingIdentitiesRequestBuilder } from './searchExistingIdentities/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the importedDeviceIdentities property of the microsoft.graph.deviceManagement entity.
 */
export interface ImportedDeviceIdentitiesRequestBuilder extends BaseRequestBuilder<ImportedDeviceIdentitiesRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to call the importDeviceIdentityList method.
     */
    get importDeviceIdentityList(): ImportDeviceIdentityListRequestBuilder;
    /**
     * Provides operations to call the searchExistingIdentities method.
     */
    get searchExistingIdentities(): SearchExistingIdentitiesRequestBuilder;
    /**
     * Provides operations to manage the importedDeviceIdentities property of the microsoft.graph.deviceManagement entity.
     * @param importedDeviceIdentityId The unique identifier of importedDeviceIdentity
     * @returns {ImportedDeviceIdentityItemRequestBuilder}
     */
     byImportedDeviceIdentityId(importedDeviceIdentityId: string) : ImportedDeviceIdentityItemRequestBuilder;
    /**
     * The imported device identities.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ImportedDeviceIdentityCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<ImportedDeviceIdentitiesRequestBuilderGetQueryParameters> | undefined) : Promise<ImportedDeviceIdentityCollectionResponse | undefined>;
    /**
     * Create new navigation property to importedDeviceIdentities for deviceManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ImportedDeviceIdentity>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: ImportedDeviceIdentity, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ImportedDeviceIdentity | undefined>;
    /**
     * The imported device identities.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ImportedDeviceIdentitiesRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create new navigation property to importedDeviceIdentities for deviceManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: ImportedDeviceIdentity, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * The imported device identities.
 */
export interface ImportedDeviceIdentitiesRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Uri template for the request builder.
 */
export const ImportedDeviceIdentitiesRequestBuilderUriTemplate = "{+baseurl}/deviceManagement/importedDeviceIdentities{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Provides operations to manage the importedDeviceIdentities property of the microsoft.graph.deviceManagement entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
} as const;
/**
 * Provides operations to manage the importedDeviceIdentities property of the microsoft.graph.deviceManagement entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    CreatedDateTime: "createdDateTime",
    CreatedDateTimeDesc: "createdDateTime desc",
    Description: "description",
    DescriptionDesc: "description desc",
    EnrollmentState: "enrollmentState",
    EnrollmentStateDesc: "enrollmentState desc",
    ImportedDeviceIdentifier: "importedDeviceIdentifier",
    ImportedDeviceIdentifierDesc: "importedDeviceIdentifier desc",
    ImportedDeviceIdentityType: "importedDeviceIdentityType",
    ImportedDeviceIdentityTypeDesc: "importedDeviceIdentityType desc",
    LastContactedDateTime: "lastContactedDateTime",
    LastContactedDateTimeDesc: "lastContactedDateTime desc",
    LastModifiedDateTime: "lastModifiedDateTime",
    LastModifiedDateTimeDesc: "lastModifiedDateTime desc",
    Platform: "platform",
    PlatformDesc: "platform desc",
} as const;
/**
 * Provides operations to manage the importedDeviceIdentities property of the microsoft.graph.deviceManagement entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    CreatedDateTime: "createdDateTime",
    Description: "description",
    EnrollmentState: "enrollmentState",
    ImportedDeviceIdentifier: "importedDeviceIdentifier",
    ImportedDeviceIdentityType: "importedDeviceIdentityType",
    LastContactedDateTime: "lastContactedDateTime",
    LastModifiedDateTime: "lastModifiedDateTime",
    Platform: "platform",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ImportedDeviceIdentitiesRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ImportedDeviceIdentitiesRequestBuilderNavigationMetadata: Record<Exclude<keyof ImportedDeviceIdentitiesRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byImportedDeviceIdentityId: {
        requestsMetadata: ImportedDeviceIdentityItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["importedDeviceIdentity%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
    importDeviceIdentityList: {
        requestsMetadata: ImportDeviceIdentityListRequestBuilderRequestsMetadata,
    },
    searchExistingIdentities: {
        requestsMetadata: SearchExistingIdentitiesRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ImportedDeviceIdentitiesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ImportedDeviceIdentitiesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createImportedDeviceIdentityCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: ImportedDeviceIdentitiesRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: ImportedDeviceIdentitiesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createImportedDeviceIdentityFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeImportedDeviceIdentity,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
