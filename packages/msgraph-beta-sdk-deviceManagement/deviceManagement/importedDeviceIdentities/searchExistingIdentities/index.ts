/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createImportedDeviceIdentityFromDiscriminatorValue, deserializeIntoBaseCollectionPaginationCountResponse, serializeBaseCollectionPaginationCountResponse, serializeImportedDeviceIdentity, type BaseCollectionPaginationCountResponse, type ImportedDeviceIdentity } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SearchExistingIdentitiesPostRequestBody}
 */
export function createSearchExistingIdentitiesPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSearchExistingIdentitiesPostRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SearchExistingIdentitiesPostResponse}
 */
export function createSearchExistingIdentitiesPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSearchExistingIdentitiesPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoSearchExistingIdentitiesPostRequestBody(searchExistingIdentitiesPostRequestBody: Partial<SearchExistingIdentitiesPostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { searchExistingIdentitiesPostRequestBody.backingStoreEnabled = true; },
        "importedDeviceIdentities": n => { searchExistingIdentitiesPostRequestBody.importedDeviceIdentities = n.getCollectionOfObjectValues<ImportedDeviceIdentity>(createImportedDeviceIdentityFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoSearchExistingIdentitiesPostResponse(searchExistingIdentitiesPostResponse: Partial<SearchExistingIdentitiesPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(searchExistingIdentitiesPostResponse),
        "value": n => { searchExistingIdentitiesPostResponse.value = n.getCollectionOfObjectValues<ImportedDeviceIdentity>(createImportedDeviceIdentityFromDiscriminatorValue); },
    }
}
export interface SearchExistingIdentitiesPostRequestBody extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The importedDeviceIdentities property
     */
    importedDeviceIdentities?: ImportedDeviceIdentity[];
}
export interface SearchExistingIdentitiesPostResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: ImportedDeviceIdentity[];
}
/**
 * Provides operations to call the searchExistingIdentities method.
 */
export interface SearchExistingIdentitiesRequestBuilder extends BaseRequestBuilder<SearchExistingIdentitiesRequestBuilder> {
    /**
     * Invoke action searchExistingIdentities
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<SearchExistingIdentitiesPostResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: SearchExistingIdentitiesPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<SearchExistingIdentitiesPostResponse | undefined>;
    /**
     * Invoke action searchExistingIdentities
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: SearchExistingIdentitiesPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeSearchExistingIdentitiesPostRequestBody(writer: SerializationWriter, searchExistingIdentitiesPostRequestBody: Partial<SearchExistingIdentitiesPostRequestBody> | undefined = {}) : void {
    writer.writeCollectionOfObjectValues<ImportedDeviceIdentity>("importedDeviceIdentities", searchExistingIdentitiesPostRequestBody.importedDeviceIdentities, serializeImportedDeviceIdentity);
    writer.writeAdditionalData(searchExistingIdentitiesPostRequestBody.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeSearchExistingIdentitiesPostResponse(writer: SerializationWriter, searchExistingIdentitiesPostResponse: Partial<SearchExistingIdentitiesPostResponse> | undefined = {}) : void {
    serializeBaseCollectionPaginationCountResponse(writer, searchExistingIdentitiesPostResponse)
    writer.writeCollectionOfObjectValues<ImportedDeviceIdentity>("value", searchExistingIdentitiesPostResponse.value, serializeImportedDeviceIdentity);
}
/**
 * Uri template for the request builder.
 */
export const SearchExistingIdentitiesRequestBuilderUriTemplate = "{+baseurl}/deviceManagement/importedDeviceIdentities/searchExistingIdentities";
/**
 * Metadata for all the requests in the request builder.
 */
export const SearchExistingIdentitiesRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: SearchExistingIdentitiesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createSearchExistingIdentitiesPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeSearchExistingIdentitiesPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
