/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createDeviceManagementExchangeOnPremisesPolicyFromDiscriminatorValue, serializeDeviceManagementExchangeOnPremisesPolicy, type DeviceManagementExchangeOnPremisesPolicy } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { ConditionalAccessSettingsRequestBuilderRequestsMetadata, type ConditionalAccessSettingsRequestBuilder } from './conditionalAccessSettings/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the exchangeOnPremisesPolicy property of the microsoft.graph.deviceManagement entity.
 */
export interface ExchangeOnPremisesPolicyRequestBuilder extends BaseRequestBuilder<ExchangeOnPremisesPolicyRequestBuilder> {
    /**
     * Provides operations to manage the conditionalAccessSettings property of the microsoft.graph.deviceManagementExchangeOnPremisesPolicy entity.
     */
    get conditionalAccessSettings(): ConditionalAccessSettingsRequestBuilder;
    /**
     * Delete navigation property exchangeOnPremisesPolicy for deviceManagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * The policy which controls mobile device access to Exchange On Premises
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DeviceManagementExchangeOnPremisesPolicy>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<ExchangeOnPremisesPolicyRequestBuilderGetQueryParameters> | undefined) : Promise<DeviceManagementExchangeOnPremisesPolicy | undefined>;
    /**
     * Update the navigation property exchangeOnPremisesPolicy in deviceManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DeviceManagementExchangeOnPremisesPolicy>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: DeviceManagementExchangeOnPremisesPolicy, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<DeviceManagementExchangeOnPremisesPolicy | undefined>;
    /**
     * Delete navigation property exchangeOnPremisesPolicy for deviceManagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * The policy which controls mobile device access to Exchange On Premises
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ExchangeOnPremisesPolicyRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property exchangeOnPremisesPolicy in deviceManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: DeviceManagementExchangeOnPremisesPolicy, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * The policy which controls mobile device access to Exchange On Premises
 */
export interface ExchangeOnPremisesPolicyRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
}
export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Uri template for the request builder.
 */
export const ExchangeOnPremisesPolicyRequestBuilderUriTemplate = "{+baseurl}/deviceManagement/exchangeOnPremisesPolicy{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ExchangeOnPremisesPolicyRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ExchangeOnPremisesPolicyRequestBuilderNavigationMetadata: Record<Exclude<keyof ExchangeOnPremisesPolicyRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    conditionalAccessSettings: {
        requestsMetadata: ConditionalAccessSettingsRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ExchangeOnPremisesPolicyRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: ExchangeOnPremisesPolicyRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: ExchangeOnPremisesPolicyRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDeviceManagementExchangeOnPremisesPolicyFromDiscriminatorValue,
        queryParametersMapper: ExchangeOnPremisesPolicyRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: ExchangeOnPremisesPolicyRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDeviceManagementExchangeOnPremisesPolicyFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeDeviceManagementExchangeOnPremisesPolicy,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Provides operations to manage the exchangeOnPremisesPolicy property of the microsoft.graph.deviceManagement entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    ConditionalAccessSettings: "conditionalAccessSettings",
} as const;
/**
 * Provides operations to manage the exchangeOnPremisesPolicy property of the microsoft.graph.deviceManagement entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    AccessRules: "accessRules",
    DefaultAccessLevel: "defaultAccessLevel",
    KnownDeviceClasses: "knownDeviceClasses",
    NotificationContent: "notificationContent",
    ConditionalAccessSettings: "conditionalAccessSettings",
} as const;
/* tslint:enable */
/* eslint-enable */
