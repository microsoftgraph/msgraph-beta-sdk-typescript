/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createManagedDeviceFromDiscriminatorValue, type ManagedDevice } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the managedDevices property of the microsoft.graph.detectedApp entity.
 */
export interface ManagedDeviceItemRequestBuilder extends BaseRequestBuilder<ManagedDeviceItemRequestBuilder> {
    /**
     * The devices that have the discovered application installed
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ManagedDevice>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<ManagedDeviceItemRequestBuilderGetQueryParameters> | undefined) : Promise<ManagedDevice | undefined>;
    /**
     * The devices that have the discovered application installed
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ManagedDeviceItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * The devices that have the discovered application installed
 */
export interface ManagedDeviceItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
}
/**
 * Uri template for the request builder.
 */
export const ManagedDeviceItemRequestBuilderUriTemplate = "{+baseurl}/deviceManagement/detectedApps/{detectedApp%2Did}/managedDevices/{managedDevice%2Did}{?%24expand,%24select}";
/**
 * Provides operations to manage the managedDevices property of the microsoft.graph.detectedApp entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    AssignmentFilterEvaluationStatusDetails: "assignmentFilterEvaluationStatusDetails",
    DetectedApps: "detectedApps",
    DeviceCategory: "deviceCategory",
    DeviceCompliancePolicyStates: "deviceCompliancePolicyStates",
    DeviceConfigurationStates: "deviceConfigurationStates",
    DeviceHealthScriptStates: "deviceHealthScriptStates",
    LogCollectionRequests: "logCollectionRequests",
    ManagedDeviceMobileAppConfigurationStates: "managedDeviceMobileAppConfigurationStates",
    SecurityBaselineStates: "securityBaselineStates",
    Users: "users",
    WindowsProtectionState: "windowsProtectionState",
} as const;
/**
 * Provides operations to manage the managedDevices property of the microsoft.graph.detectedApp entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    AadRegistered: "aadRegistered",
    ActivationLockBypassCode: "activationLockBypassCode",
    AndroidSecurityPatchLevel: "androidSecurityPatchLevel",
    AutopilotEnrolled: "autopilotEnrolled",
    AzureActiveDirectoryDeviceId: "azureActiveDirectoryDeviceId",
    AzureADDeviceId: "azureADDeviceId",
    AzureADRegistered: "azureADRegistered",
    BootstrapTokenEscrowed: "bootstrapTokenEscrowed",
    ChassisType: "chassisType",
    ChromeOSDeviceInfo: "chromeOSDeviceInfo",
    CloudPcRemoteActionResults: "cloudPcRemoteActionResults",
    ComplianceGracePeriodExpirationDateTime: "complianceGracePeriodExpirationDateTime",
    ComplianceState: "complianceState",
    ConfigurationManagerClientEnabledFeatures: "configurationManagerClientEnabledFeatures",
    ConfigurationManagerClientHealthState: "configurationManagerClientHealthState",
    ConfigurationManagerClientInformation: "configurationManagerClientInformation",
    DeviceActionResults: "deviceActionResults",
    DeviceCategoryDisplayName: "deviceCategoryDisplayName",
    DeviceEnrollmentType: "deviceEnrollmentType",
    DeviceFirmwareConfigurationInterfaceManaged: "deviceFirmwareConfigurationInterfaceManaged",
    DeviceHealthAttestationState: "deviceHealthAttestationState",
    DeviceName: "deviceName",
    DeviceRegistrationState: "deviceRegistrationState",
    DeviceType: "deviceType",
    EasActivated: "easActivated",
    EasActivationDateTime: "easActivationDateTime",
    EasDeviceId: "easDeviceId",
    EmailAddress: "emailAddress",
    EnrolledDateTime: "enrolledDateTime",
    EnrollmentProfileName: "enrollmentProfileName",
    EthernetMacAddress: "ethernetMacAddress",
    ExchangeAccessState: "exchangeAccessState",
    ExchangeAccessStateReason: "exchangeAccessStateReason",
    ExchangeLastSuccessfulSyncDateTime: "exchangeLastSuccessfulSyncDateTime",
    FreeStorageSpaceInBytes: "freeStorageSpaceInBytes",
    HardwareInformation: "hardwareInformation",
    Iccid: "iccid",
    Imei: "imei",
    IsEncrypted: "isEncrypted",
    IsSupervised: "isSupervised",
    JailBroken: "jailBroken",
    JoinType: "joinType",
    LastSyncDateTime: "lastSyncDateTime",
    LostModeState: "lostModeState",
    ManagedDeviceName: "managedDeviceName",
    ManagedDeviceOwnerType: "managedDeviceOwnerType",
    ManagementAgent: "managementAgent",
    ManagementCertificateExpirationDate: "managementCertificateExpirationDate",
    ManagementFeatures: "managementFeatures",
    ManagementState: "managementState",
    Manufacturer: "manufacturer",
    Meid: "meid",
    Model: "model",
    Notes: "notes",
    OperatingSystem: "operatingSystem",
    OsVersion: "osVersion",
    OwnerType: "ownerType",
    PartnerReportedThreatState: "partnerReportedThreatState",
    PhoneNumber: "phoneNumber",
    PhysicalMemoryInBytes: "physicalMemoryInBytes",
    PreferMdmOverGroupPolicyAppliedDateTime: "preferMdmOverGroupPolicyAppliedDateTime",
    ProcessorArchitecture: "processorArchitecture",
    RemoteAssistanceSessionErrorDetails: "remoteAssistanceSessionErrorDetails",
    RemoteAssistanceSessionUrl: "remoteAssistanceSessionUrl",
    RequireUserEnrollmentApproval: "requireUserEnrollmentApproval",
    RetireAfterDateTime: "retireAfterDateTime",
    RoleScopeTagIds: "roleScopeTagIds",
    SecurityPatchLevel: "securityPatchLevel",
    SerialNumber: "serialNumber",
    SkuFamily: "skuFamily",
    SkuNumber: "skuNumber",
    SpecificationVersion: "specificationVersion",
    SubscriberCarrier: "subscriberCarrier",
    TotalStorageSpaceInBytes: "totalStorageSpaceInBytes",
    Udid: "udid",
    UserDisplayName: "userDisplayName",
    UserId: "userId",
    UserPrincipalName: "userPrincipalName",
    UsersLoggedOn: "usersLoggedOn",
    WiFiMacAddress: "wiFiMacAddress",
    WindowsActiveMalwareCount: "windowsActiveMalwareCount",
    WindowsRemediatedMalwareCount: "windowsRemediatedMalwareCount",
    AssignmentFilterEvaluationStatusDetails: "assignmentFilterEvaluationStatusDetails",
    DetectedApps: "detectedApps",
    DeviceCategory: "deviceCategory",
    DeviceCompliancePolicyStates: "deviceCompliancePolicyStates",
    DeviceConfigurationStates: "deviceConfigurationStates",
    DeviceHealthScriptStates: "deviceHealthScriptStates",
    LogCollectionRequests: "logCollectionRequests",
    ManagedDeviceMobileAppConfigurationStates: "managedDeviceMobileAppConfigurationStates",
    SecurityBaselineStates: "securityBaselineStates",
    Users: "users",
    WindowsProtectionState: "windowsProtectionState",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ManagedDeviceItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ManagedDeviceItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ManagedDeviceItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createManagedDeviceFromDiscriminatorValue,
        queryParametersMapper: ManagedDeviceItemRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
