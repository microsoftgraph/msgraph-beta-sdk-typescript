/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createDeviceManagementIntentDeviceStateCollectionResponseFromDiscriminatorValue, createDeviceManagementIntentDeviceStateFromDiscriminatorValue, serializeDeviceManagementIntentDeviceState, type DeviceManagementIntentDeviceState, type DeviceManagementIntentDeviceStateCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { DeviceManagementIntentDeviceStateItemRequestBuilderRequestsMetadata, type DeviceManagementIntentDeviceStateItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the deviceStates property of the microsoft.graph.deviceManagementIntent entity.
 */
export interface DeviceStatesRequestBuilder extends BaseRequestBuilder<DeviceStatesRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the deviceStates property of the microsoft.graph.deviceManagementIntent entity.
     * @param deviceManagementIntentDeviceStateId The unique identifier of deviceManagementIntentDeviceState
     * @returns {DeviceManagementIntentDeviceStateItemRequestBuilder}
     */
     byDeviceManagementIntentDeviceStateId(deviceManagementIntentDeviceStateId: string) : DeviceManagementIntentDeviceStateItemRequestBuilder;
    /**
     * Collection of states of all devices that the intent is applied to
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DeviceManagementIntentDeviceStateCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<DeviceStatesRequestBuilderGetQueryParameters> | undefined) : Promise<DeviceManagementIntentDeviceStateCollectionResponse | undefined>;
    /**
     * Create new navigation property to deviceStates for deviceManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DeviceManagementIntentDeviceState>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: DeviceManagementIntentDeviceState, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<DeviceManagementIntentDeviceState | undefined>;
    /**
     * Collection of states of all devices that the intent is applied to
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<DeviceStatesRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create new navigation property to deviceStates for deviceManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: DeviceManagementIntentDeviceState, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Collection of states of all devices that the intent is applied to
 */
export interface DeviceStatesRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Uri template for the request builder.
 */
export const DeviceStatesRequestBuilderUriTemplate = "{+baseurl}/deviceManagement/intents/{deviceManagementIntent%2Did}/deviceStates{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const DeviceStatesRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const DeviceStatesRequestBuilderNavigationMetadata: Record<Exclude<keyof DeviceStatesRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byDeviceManagementIntentDeviceStateId: {
        requestsMetadata: DeviceManagementIntentDeviceStateItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["deviceManagementIntentDeviceState%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const DeviceStatesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: DeviceStatesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDeviceManagementIntentDeviceStateCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: DeviceStatesRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: DeviceStatesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDeviceManagementIntentDeviceStateFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeDeviceManagementIntentDeviceState,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Provides operations to manage the deviceStates property of the microsoft.graph.deviceManagementIntent entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
} as const;
/**
 * Provides operations to manage the deviceStates property of the microsoft.graph.deviceManagementIntent entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    DeviceDisplayName: "deviceDisplayName",
    DeviceDisplayNameDesc: "deviceDisplayName desc",
    DeviceId: "deviceId",
    DeviceIdDesc: "deviceId desc",
    LastReportedDateTime: "lastReportedDateTime",
    LastReportedDateTimeDesc: "lastReportedDateTime desc",
    State: "state",
    StateDesc: "state desc",
    UserName: "userName",
    UserNameDesc: "userName desc",
    UserPrincipalName: "userPrincipalName",
    UserPrincipalNameDesc: "userPrincipalName desc",
} as const;
/**
 * Provides operations to manage the deviceStates property of the microsoft.graph.deviceManagementIntent entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    DeviceDisplayName: "deviceDisplayName",
    DeviceId: "deviceId",
    LastReportedDateTime: "lastReportedDateTime",
    State: "state",
    UserName: "userName",
    UserPrincipalName: "userPrincipalName",
} as const;
/* tslint:enable */
/* eslint-enable */
