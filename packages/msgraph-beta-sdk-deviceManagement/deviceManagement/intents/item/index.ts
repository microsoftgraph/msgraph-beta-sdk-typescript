/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createDeviceManagementIntentFromDiscriminatorValue, serializeDeviceManagementIntent, type DeviceManagementIntent } from '@microsoft/msgraph-beta-sdk/models/index.js';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/index.js';
// @ts-ignore
import { AssignRequestBuilderRequestsMetadata, type AssignRequestBuilder } from './assign/index.js';
// @ts-ignore
import { AssignmentsRequestBuilderNavigationMetadata, AssignmentsRequestBuilderRequestsMetadata, type AssignmentsRequestBuilder } from './assignments/index.js';
// @ts-ignore
import { CategoriesRequestBuilderNavigationMetadata, CategoriesRequestBuilderRequestsMetadata, type CategoriesRequestBuilder } from './categories/index.js';
// @ts-ignore
import { CompareWithTemplateIdRequestBuilderRequestsMetadata, type CompareWithTemplateIdRequestBuilder } from './compareWithTemplateId/index.js';
// @ts-ignore
import { CreateCopyRequestBuilderRequestsMetadata, type CreateCopyRequestBuilder } from './createCopy/index.js';
// @ts-ignore
import { DeviceSettingStateSummariesRequestBuilderNavigationMetadata, DeviceSettingStateSummariesRequestBuilderRequestsMetadata, type DeviceSettingStateSummariesRequestBuilder } from './deviceSettingStateSummaries/index.js';
// @ts-ignore
import { DeviceStatesRequestBuilderNavigationMetadata, DeviceStatesRequestBuilderRequestsMetadata, type DeviceStatesRequestBuilder } from './deviceStates/index.js';
// @ts-ignore
import { DeviceStateSummaryRequestBuilderRequestsMetadata, type DeviceStateSummaryRequestBuilder } from './deviceStateSummary/index.js';
// @ts-ignore
import { GetCustomizedSettingsRequestBuilderRequestsMetadata, type GetCustomizedSettingsRequestBuilder } from './getCustomizedSettings/index.js';
// @ts-ignore
import { MigrateToTemplateRequestBuilderRequestsMetadata, type MigrateToTemplateRequestBuilder } from './migrateToTemplate/index.js';
// @ts-ignore
import { SettingsRequestBuilderNavigationMetadata, SettingsRequestBuilderRequestsMetadata, type SettingsRequestBuilder } from './settings/index.js';
// @ts-ignore
import { type UpdateSettingsRequestBuilder, UpdateSettingsRequestBuilderRequestsMetadata } from './updateSettings/index.js';
// @ts-ignore
import { type UserStatesRequestBuilder, UserStatesRequestBuilderNavigationMetadata, UserStatesRequestBuilderRequestsMetadata } from './userStates/index.js';
// @ts-ignore
import { type UserStateSummaryRequestBuilder, UserStateSummaryRequestBuilderRequestsMetadata } from './userStateSummary/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the intents property of the microsoft.graph.deviceManagement entity.
 */
export interface DeviceManagementIntentItemRequestBuilder extends BaseRequestBuilder<DeviceManagementIntentItemRequestBuilder> {
    /**
     * Provides operations to call the assign method.
     */
    get assign(): AssignRequestBuilder;
    /**
     * Provides operations to manage the assignments property of the microsoft.graph.deviceManagementIntent entity.
     */
    get assignments(): AssignmentsRequestBuilder;
    /**
     * Provides operations to manage the categories property of the microsoft.graph.deviceManagementIntent entity.
     */
    get categories(): CategoriesRequestBuilder;
    /**
     * Provides operations to call the createCopy method.
     */
    get createCopy(): CreateCopyRequestBuilder;
    /**
     * Provides operations to manage the deviceSettingStateSummaries property of the microsoft.graph.deviceManagementIntent entity.
     */
    get deviceSettingStateSummaries(): DeviceSettingStateSummariesRequestBuilder;
    /**
     * Provides operations to manage the deviceStates property of the microsoft.graph.deviceManagementIntent entity.
     */
    get deviceStates(): DeviceStatesRequestBuilder;
    /**
     * Provides operations to manage the deviceStateSummary property of the microsoft.graph.deviceManagementIntent entity.
     */
    get deviceStateSummary(): DeviceStateSummaryRequestBuilder;
    /**
     * Provides operations to call the getCustomizedSettings method.
     */
    get getCustomizedSettings(): GetCustomizedSettingsRequestBuilder;
    /**
     * Provides operations to call the migrateToTemplate method.
     */
    get migrateToTemplate(): MigrateToTemplateRequestBuilder;
    /**
     * Provides operations to manage the settings property of the microsoft.graph.deviceManagementIntent entity.
     */
    get settings(): SettingsRequestBuilder;
    /**
     * Provides operations to call the updateSettings method.
     */
    get updateSettings(): UpdateSettingsRequestBuilder;
    /**
     * Provides operations to manage the userStates property of the microsoft.graph.deviceManagementIntent entity.
     */
    get userStates(): UserStatesRequestBuilder;
    /**
     * Provides operations to manage the userStateSummary property of the microsoft.graph.deviceManagementIntent entity.
     */
    get userStateSummary(): UserStateSummaryRequestBuilder;
    /**
     * Provides operations to call the compare method.
     * @param templateId Usage: templateId='{templateId}'
     * @returns {CompareWithTemplateIdRequestBuilder}
     */
     compareWithTemplateId(templateId: string | undefined) : CompareWithTemplateIdRequestBuilder;
    /**
     * Delete navigation property intents for deviceManagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * The device management intents
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DeviceManagementIntent>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<DeviceManagementIntentItemRequestBuilderGetQueryParameters> | undefined) : Promise<DeviceManagementIntent | undefined>;
    /**
     * Update the navigation property intents in deviceManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DeviceManagementIntent>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: DeviceManagementIntent, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<DeviceManagementIntent | undefined>;
    /**
     * Delete navigation property intents for deviceManagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * The device management intents
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<DeviceManagementIntentItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property intents in deviceManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: DeviceManagementIntent, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * The device management intents
 */
export interface DeviceManagementIntentItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const DeviceManagementIntentItemRequestBuilderUriTemplate = "{+baseurl}/deviceManagement/intents/{deviceManagementIntent%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const DeviceManagementIntentItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const DeviceManagementIntentItemRequestBuilderNavigationMetadata: Record<Exclude<keyof DeviceManagementIntentItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    compareWithTemplateId: {
        requestsMetadata: CompareWithTemplateIdRequestBuilderRequestsMetadata,
    },
    assign: {
        requestsMetadata: AssignRequestBuilderRequestsMetadata,
    },
    assignments: {
        requestsMetadata: AssignmentsRequestBuilderRequestsMetadata,
        navigationMetadata: AssignmentsRequestBuilderNavigationMetadata,
    },
    categories: {
        requestsMetadata: CategoriesRequestBuilderRequestsMetadata,
        navigationMetadata: CategoriesRequestBuilderNavigationMetadata,
    },
    createCopy: {
        requestsMetadata: CreateCopyRequestBuilderRequestsMetadata,
    },
    deviceSettingStateSummaries: {
        requestsMetadata: DeviceSettingStateSummariesRequestBuilderRequestsMetadata,
        navigationMetadata: DeviceSettingStateSummariesRequestBuilderNavigationMetadata,
    },
    deviceStates: {
        requestsMetadata: DeviceStatesRequestBuilderRequestsMetadata,
        navigationMetadata: DeviceStatesRequestBuilderNavigationMetadata,
    },
    deviceStateSummary: {
        requestsMetadata: DeviceStateSummaryRequestBuilderRequestsMetadata,
    },
    getCustomizedSettings: {
        requestsMetadata: GetCustomizedSettingsRequestBuilderRequestsMetadata,
    },
    migrateToTemplate: {
        requestsMetadata: MigrateToTemplateRequestBuilderRequestsMetadata,
    },
    settings: {
        requestsMetadata: SettingsRequestBuilderRequestsMetadata,
        navigationMetadata: SettingsRequestBuilderNavigationMetadata,
    },
    updateSettings: {
        requestsMetadata: UpdateSettingsRequestBuilderRequestsMetadata,
    },
    userStates: {
        requestsMetadata: UserStatesRequestBuilderRequestsMetadata,
        navigationMetadata: UserStatesRequestBuilderNavigationMetadata,
    },
    userStateSummary: {
        requestsMetadata: UserStateSummaryRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const DeviceManagementIntentItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: DeviceManagementIntentItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: DeviceManagementIntentItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDeviceManagementIntentFromDiscriminatorValue,
        queryParametersMapper: DeviceManagementIntentItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: DeviceManagementIntentItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDeviceManagementIntentFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeDeviceManagementIntent,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
