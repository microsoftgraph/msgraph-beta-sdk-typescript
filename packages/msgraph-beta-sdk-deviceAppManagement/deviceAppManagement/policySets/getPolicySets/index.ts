/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createPolicySetFromDiscriminatorValue, deserializeIntoBaseCollectionPaginationCountResponse, serializeBaseCollectionPaginationCountResponse, serializePolicySet, type BaseCollectionPaginationCountResponse, type PolicySet } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a getPolicySetsPostRequestBody
 */
export function createGetPolicySetsPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoGetPolicySetsPostRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a getPolicySetsPostResponse
 */
export function createGetPolicySetsPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoGetPolicySetsPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoGetPolicySetsPostRequestBody(getPolicySetsPostRequestBody: Partial<GetPolicySetsPostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { getPolicySetsPostRequestBody.backingStoreEnabled = true; },
        "policySetIds": n => { getPolicySetsPostRequestBody.policySetIds = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoGetPolicySetsPostResponse(getPolicySetsPostResponse: Partial<GetPolicySetsPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(getPolicySetsPostResponse),
        "value": n => { getPolicySetsPostResponse.value = n.getCollectionOfObjectValues<PolicySet>(createPolicySetFromDiscriminatorValue); },
    }
}
export interface GetPolicySetsPostRequestBody extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The policySetIds property
     */
    policySetIds?: string[];
}
export interface GetPolicySetsPostResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: PolicySet[];
}
/**
 * Provides operations to call the getPolicySets method.
 */
export interface GetPolicySetsRequestBuilder extends BaseRequestBuilder<GetPolicySetsRequestBuilder> {
    /**
     * Invoke action getPolicySets
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of GetPolicySetsPostResponse
     */
     post(body: GetPolicySetsPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<GetPolicySetsPostResponse | undefined>;
    /**
     * Invoke action getPolicySets
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPostRequestInformation(body: GetPolicySetsPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeGetPolicySetsPostRequestBody(writer: SerializationWriter, getPolicySetsPostRequestBody: Partial<GetPolicySetsPostRequestBody> | undefined = {}) : void {
    writer.writeCollectionOfPrimitiveValues<string>("policySetIds", getPolicySetsPostRequestBody.policySetIds);
    writer.writeAdditionalData(getPolicySetsPostRequestBody.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeGetPolicySetsPostResponse(writer: SerializationWriter, getPolicySetsPostResponse: Partial<GetPolicySetsPostResponse> | undefined = {}) : void {
    serializeBaseCollectionPaginationCountResponse(writer, getPolicySetsPostResponse)
    writer.writeCollectionOfObjectValues<PolicySet>("value", getPolicySetsPostResponse.value, serializePolicySet);
}
/**
 * Metadata for all the requests in the request builder.
 */
export const GetPolicySetsRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createGetPolicySetsPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeGetPolicySetsPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const GetPolicySetsRequestBuilderUriTemplate = "{+baseurl}/deviceAppManagement/policySets/getPolicySets";
/* tslint:enable */
/* eslint-enable */
