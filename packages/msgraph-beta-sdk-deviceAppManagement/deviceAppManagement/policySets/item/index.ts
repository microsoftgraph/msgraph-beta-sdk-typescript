/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createPolicySetFromDiscriminatorValue, serializePolicySet, type PolicySet } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { AssignmentsRequestBuilderNavigationMetadata, AssignmentsRequestBuilderRequestsMetadata, AssignmentsRequestBuilderUriTemplate, type AssignmentsRequestBuilder } from './assignments/';
import { ItemsRequestBuilderNavigationMetadata, ItemsRequestBuilderRequestsMetadata, ItemsRequestBuilderUriTemplate, type ItemsRequestBuilder } from './items/';
import { type UpdateRequestBuilder, UpdateRequestBuilderRequestsMetadata, UpdateRequestBuilderUriTemplate } from './update/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the policySets property of the microsoft.graph.deviceAppManagement entity.
 */
export interface PolicySetItemRequestBuilder extends BaseRequestBuilder<PolicySetItemRequestBuilder> {
    /**
     * Provides operations to manage the assignments property of the microsoft.graph.policySet entity.
     */
    get assignments(): AssignmentsRequestBuilder;
    /**
     * Provides operations to manage the items property of the microsoft.graph.policySet entity.
     */
    get items(): ItemsRequestBuilder;
    /**
     * Provides operations to call the update method.
     */
    get update(): UpdateRequestBuilder;
    /**
     * Delete navigation property policySets for deviceAppManagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * The PolicySet of Policies and Applications
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of PolicySet
     */
     get(requestConfiguration?: RequestConfiguration<PolicySetItemRequestBuilderGetQueryParameters> | undefined) : Promise<PolicySet | undefined>;
    /**
     * Update the navigation property policySets in deviceAppManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of PolicySet
     */
     patch(body: PolicySet, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<PolicySet | undefined>;
    /**
     * Delete navigation property policySets for deviceAppManagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * The PolicySet of Policies and Applications
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<PolicySetItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property policySets in deviceAppManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: PolicySet, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * The PolicySet of Policies and Applications
 */
export interface PolicySetItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const PolicySetItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const PolicySetItemRequestBuilderNavigationMetadata: Record<Exclude<keyof PolicySetItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    assignments: {
        uriTemplate: AssignmentsRequestBuilderUriTemplate,
        requestsMetadata: AssignmentsRequestBuilderRequestsMetadata,
        navigationMetadata: AssignmentsRequestBuilderNavigationMetadata,
    },
    items: {
        uriTemplate: ItemsRequestBuilderUriTemplate,
        requestsMetadata: ItemsRequestBuilderRequestsMetadata,
        navigationMetadata: ItemsRequestBuilderNavigationMetadata,
    },
    update: {
        uriTemplate: UpdateRequestBuilderUriTemplate,
        requestsMetadata: UpdateRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const PolicySetItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createPolicySetFromDiscriminatorValue,
        queryParametersMapper: PolicySetItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createPolicySetFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializePolicySet,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const PolicySetItemRequestBuilderUriTemplate = "{+baseurl}/deviceAppManagement/policySets/{policySet%2Did}{?%24expand,%24select}";
/* tslint:enable */
/* eslint-enable */
