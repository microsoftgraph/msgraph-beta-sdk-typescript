/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createVppTokenCollectionResponseFromDiscriminatorValue, createVppTokenFromDiscriminatorValue, serializeVppToken, type VppToken, type VppTokenCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { GetLicensesForAppWithBundleIdRequestBuilderRequestsMetadata, type GetLicensesForAppWithBundleIdRequestBuilder } from './getLicensesForAppWithBundleId/';
import { type VppTokenItemRequestBuilder, VppTokenItemRequestBuilderNavigationMetadata, VppTokenItemRequestBuilderRequestsMetadata } from './item/';
import { SyncLicenseCountsRequestBuilderRequestsMetadata, type SyncLicenseCountsRequestBuilder } from './syncLicenseCounts/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the vppTokens property of the microsoft.graph.deviceAppManagement entity.
 */
export interface VppTokensRequestBuilder extends BaseRequestBuilder<VppTokensRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to call the syncLicenseCounts method.
     */
    get syncLicenseCounts(): SyncLicenseCountsRequestBuilder;
    /**
     * Provides operations to manage the vppTokens property of the microsoft.graph.deviceAppManagement entity.
     * @param vppTokenId The unique identifier of vppToken
     * @returns {VppTokenItemRequestBuilder}
     */
     byVppTokenId(vppTokenId: string) : VppTokenItemRequestBuilder;
    /**
     * List of Vpp tokens for this organization.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<VppTokenCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<VppTokensRequestBuilderGetQueryParameters> | undefined) : Promise<VppTokenCollectionResponse | undefined>;
    /**
     * Provides operations to call the getLicensesForApp method.
     * @param bundleId Usage: bundleId='{bundleId}'
     * @returns {GetLicensesForAppWithBundleIdRequestBuilder}
     */
     getLicensesForAppWithBundleId(bundleId: string | undefined) : GetLicensesForAppWithBundleIdRequestBuilder;
    /**
     * Create new navigation property to vppTokens for deviceAppManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<VppToken>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: VppToken, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<VppToken | undefined>;
    /**
     * List of Vpp tokens for this organization.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<VppTokensRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create new navigation property to vppTokens for deviceAppManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: VppToken, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * List of Vpp tokens for this organization.
 */
export interface VppTokensRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Uri template for the request builder.
 */
export const VppTokensRequestBuilderUriTemplate = "{+baseurl}/deviceAppManagement/vppTokens{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Provides operations to manage the vppTokens property of the microsoft.graph.deviceAppManagement entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
} as const;
/**
 * Provides operations to manage the vppTokens property of the microsoft.graph.deviceAppManagement entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    AppleId: "appleId",
    AppleIdDesc: "appleId desc",
    AutomaticallyUpdateApps: "automaticallyUpdateApps",
    AutomaticallyUpdateAppsDesc: "automaticallyUpdateApps desc",
    ClaimTokenManagementFromExternalMdm: "claimTokenManagementFromExternalMdm",
    ClaimTokenManagementFromExternalMdmDesc: "claimTokenManagementFromExternalMdm desc",
    CountryOrRegion: "countryOrRegion",
    CountryOrRegionDesc: "countryOrRegion desc",
    DataSharingConsentGranted: "dataSharingConsentGranted",
    DataSharingConsentGrantedDesc: "dataSharingConsentGranted desc",
    DisplayName: "displayName",
    DisplayNameDesc: "displayName desc",
    ExpirationDateTime: "expirationDateTime",
    ExpirationDateTimeDesc: "expirationDateTime desc",
    LastModifiedDateTime: "lastModifiedDateTime",
    LastModifiedDateTimeDesc: "lastModifiedDateTime desc",
    LastSyncDateTime: "lastSyncDateTime",
    LastSyncDateTimeDesc: "lastSyncDateTime desc",
    LastSyncStatus: "lastSyncStatus",
    LastSyncStatusDesc: "lastSyncStatus desc",
    LocationName: "locationName",
    LocationNameDesc: "locationName desc",
    OrganizationName: "organizationName",
    OrganizationNameDesc: "organizationName desc",
    RoleScopeTagIds: "roleScopeTagIds",
    RoleScopeTagIdsDesc: "roleScopeTagIds desc",
    State: "state",
    StateDesc: "state desc",
    Token: "token",
    TokenDesc: "token desc",
    TokenActionResults: "tokenActionResults",
    TokenActionResultsDesc: "tokenActionResults desc",
    VppTokenAccountType: "vppTokenAccountType",
    VppTokenAccountTypeDesc: "vppTokenAccountType desc",
} as const;
/**
 * Provides operations to manage the vppTokens property of the microsoft.graph.deviceAppManagement entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    AppleId: "appleId",
    AutomaticallyUpdateApps: "automaticallyUpdateApps",
    ClaimTokenManagementFromExternalMdm: "claimTokenManagementFromExternalMdm",
    CountryOrRegion: "countryOrRegion",
    DataSharingConsentGranted: "dataSharingConsentGranted",
    DisplayName: "displayName",
    ExpirationDateTime: "expirationDateTime",
    LastModifiedDateTime: "lastModifiedDateTime",
    LastSyncDateTime: "lastSyncDateTime",
    LastSyncStatus: "lastSyncStatus",
    LocationName: "locationName",
    OrganizationName: "organizationName",
    RoleScopeTagIds: "roleScopeTagIds",
    State: "state",
    Token: "token",
    TokenActionResults: "tokenActionResults",
    VppTokenAccountType: "vppTokenAccountType",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const VppTokensRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const VppTokensRequestBuilderNavigationMetadata: Record<Exclude<keyof VppTokensRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byVppTokenId: {
        requestsMetadata: VppTokenItemRequestBuilderRequestsMetadata,
        navigationMetadata: VppTokenItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["vppToken%2Did"],
    },
    getLicensesForAppWithBundleId: {
        requestsMetadata: GetLicensesForAppWithBundleIdRequestBuilderRequestsMetadata,
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
    syncLicenseCounts: {
        requestsMetadata: SyncLicenseCountsRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const VppTokensRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: VppTokensRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createVppTokenCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: VppTokensRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: VppTokensRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createVppTokenFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeVppToken,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
