/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createVppTokenLicenseSummaryFromDiscriminatorValue, deserializeIntoBaseCollectionPaginationCountResponse, serializeBaseCollectionPaginationCountResponse, serializeVppTokenLicenseSummary, type BaseCollectionPaginationCountResponse, type VppTokenLicenseSummary } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {GetLicensesForAppWithBundleIdGetResponse}
 */
export function createGetLicensesForAppWithBundleIdGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoGetLicensesForAppWithBundleIdGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoGetLicensesForAppWithBundleIdGetResponse(getLicensesForAppWithBundleIdGetResponse: Partial<GetLicensesForAppWithBundleIdGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(getLicensesForAppWithBundleIdGetResponse),
        "value": n => { getLicensesForAppWithBundleIdGetResponse.value = n.getCollectionOfObjectValues<VppTokenLicenseSummary>(createVppTokenLicenseSummaryFromDiscriminatorValue); },
    }
}
export interface GetLicensesForAppWithBundleIdGetResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: VppTokenLicenseSummary[];
}
/**
 * Provides operations to call the getLicensesForApp method.
 */
export interface GetLicensesForAppWithBundleIdRequestBuilder extends BaseRequestBuilder<GetLicensesForAppWithBundleIdRequestBuilder> {
    /**
     * Invoke function getLicensesForApp
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<GetLicensesForAppWithBundleIdGetResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<GetLicensesForAppWithBundleIdRequestBuilderGetQueryParameters> | undefined) : Promise<GetLicensesForAppWithBundleIdGetResponse | undefined>;
    /**
     * Invoke function getLicensesForApp
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<GetLicensesForAppWithBundleIdRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Invoke function getLicensesForApp
 */
export interface GetLicensesForAppWithBundleIdRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeGetLicensesForAppWithBundleIdGetResponse(writer: SerializationWriter, getLicensesForAppWithBundleIdGetResponse: Partial<GetLicensesForAppWithBundleIdGetResponse> | undefined = {}) : void {
    serializeBaseCollectionPaginationCountResponse(writer, getLicensesForAppWithBundleIdGetResponse)
    writer.writeCollectionOfObjectValues<VppTokenLicenseSummary>("value", getLicensesForAppWithBundleIdGetResponse.value, serializeVppTokenLicenseSummary);
}
/**
 * Uri template for the request builder.
 */
export const GetLicensesForAppWithBundleIdRequestBuilderUriTemplate = "{+baseurl}/deviceAppManagement/vppTokens/getLicensesForApp(bundleId='{bundleId}'){?%24count,%24filter,%24search,%24skip,%24top}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const GetLicensesForAppWithBundleIdRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "filter": "%24filter",
    "search": "%24search",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const GetLicensesForAppWithBundleIdRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: GetLicensesForAppWithBundleIdRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createGetLicensesForAppWithBundleIdGetResponseFromDiscriminatorValue,
        queryParametersMapper: GetLicensesForAppWithBundleIdRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
