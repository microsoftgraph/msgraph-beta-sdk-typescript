/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createAuditLogRootFromDiscriminatorValue, serializeAuditLogRoot, type AuditLogRoot } from '@microsoft/msgraph-beta-sdk/models/index.js';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/index.js';
// @ts-ignore
import { CustomSecurityAttributeAuditsRequestBuilderNavigationMetadata, CustomSecurityAttributeAuditsRequestBuilderRequestsMetadata, type CustomSecurityAttributeAuditsRequestBuilder } from './customSecurityAttributeAudits/index.js';
// @ts-ignore
import { DirectoryAuditsRequestBuilderNavigationMetadata, DirectoryAuditsRequestBuilderRequestsMetadata, type DirectoryAuditsRequestBuilder } from './directoryAudits/index.js';
// @ts-ignore
import { DirectoryProvisioningRequestBuilderNavigationMetadata, DirectoryProvisioningRequestBuilderRequestsMetadata, type DirectoryProvisioningRequestBuilder } from './directoryProvisioning/index.js';
// @ts-ignore
import { ProvisioningRequestBuilderNavigationMetadata, ProvisioningRequestBuilderRequestsMetadata, type ProvisioningRequestBuilder } from './provisioning/index.js';
// @ts-ignore
import { SignInsRequestBuilderNavigationMetadata, SignInsRequestBuilderRequestsMetadata, type SignInsRequestBuilder } from './signIns/index.js';
// @ts-ignore
import { SignUpsRequestBuilderNavigationMetadata, SignUpsRequestBuilderRequestsMetadata, type SignUpsRequestBuilder } from './signUps/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the auditLogRoot singleton.
 */
export interface AuditLogsRequestBuilder extends BaseRequestBuilder<AuditLogsRequestBuilder> {
    /**
     * Provides operations to manage the customSecurityAttributeAudits property of the microsoft.graph.auditLogRoot entity.
     */
    get customSecurityAttributeAudits(): CustomSecurityAttributeAuditsRequestBuilder;
    /**
     * Provides operations to manage the directoryAudits property of the microsoft.graph.auditLogRoot entity.
     */
    get directoryAudits(): DirectoryAuditsRequestBuilder;
    /**
     * Provides operations to manage the directoryProvisioning property of the microsoft.graph.auditLogRoot entity.
     */
    get directoryProvisioning(): DirectoryProvisioningRequestBuilder;
    /**
     * Provides operations to manage the provisioning property of the microsoft.graph.auditLogRoot entity.
     */
    get provisioning(): ProvisioningRequestBuilder;
    /**
     * Provides operations to manage the signIns property of the microsoft.graph.auditLogRoot entity.
     */
    get signIns(): SignInsRequestBuilder;
    /**
     * Provides operations to manage the signUps property of the microsoft.graph.auditLogRoot entity.
     */
    get signUps(): SignUpsRequestBuilder;
    /**
     * Get auditLogs
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<AuditLogRoot>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<AuditLogsRequestBuilderGetQueryParameters> | undefined) : Promise<AuditLogRoot | undefined>;
    /**
     * Update auditLogs
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<AuditLogRoot>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: AuditLogRoot, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<AuditLogRoot | undefined>;
    /**
     * Get auditLogs
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<AuditLogsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update auditLogs
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: AuditLogRoot, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get auditLogs
 */
export interface AuditLogsRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const AuditLogsRequestBuilderUriTemplate = "{+baseurl}/auditLogs{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const AuditLogsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const AuditLogsRequestBuilderNavigationMetadata: Record<Exclude<keyof AuditLogsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    customSecurityAttributeAudits: {
        requestsMetadata: CustomSecurityAttributeAuditsRequestBuilderRequestsMetadata,
        navigationMetadata: CustomSecurityAttributeAuditsRequestBuilderNavigationMetadata,
    },
    directoryAudits: {
        requestsMetadata: DirectoryAuditsRequestBuilderRequestsMetadata,
        navigationMetadata: DirectoryAuditsRequestBuilderNavigationMetadata,
    },
    directoryProvisioning: {
        requestsMetadata: DirectoryProvisioningRequestBuilderRequestsMetadata,
        navigationMetadata: DirectoryProvisioningRequestBuilderNavigationMetadata,
    },
    provisioning: {
        requestsMetadata: ProvisioningRequestBuilderRequestsMetadata,
        navigationMetadata: ProvisioningRequestBuilderNavigationMetadata,
    },
    signIns: {
        requestsMetadata: SignInsRequestBuilderRequestsMetadata,
        navigationMetadata: SignInsRequestBuilderNavigationMetadata,
    },
    signUps: {
        requestsMetadata: SignUpsRequestBuilderRequestsMetadata,
        navigationMetadata: SignUpsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const AuditLogsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: AuditLogsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createAuditLogRootFromDiscriminatorValue,
        queryParametersMapper: AuditLogsRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: AuditLogsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createAuditLogRootFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeAuditLogRoot,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
