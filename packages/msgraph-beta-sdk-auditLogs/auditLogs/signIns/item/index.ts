/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createSignInFromDiscriminatorValue, serializeSignIn, type SignIn } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the signIns property of the microsoft.graph.auditLogRoot entity.
 */
export interface SignInItemRequestBuilder extends BaseRequestBuilder<SignInItemRequestBuilder> {
    /**
     * Delete navigation property signIns for auditLogs
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get a signIn object that contains a specific user sign-in event for your tenant that includes sign-ins where a user is asked to enter a username or password, and session tokens.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<SignIn>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/signin-get?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<SignInItemRequestBuilderGetQueryParameters> | undefined) : Promise<SignIn | undefined>;
    /**
     * Update the navigation property signIns in auditLogs
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<SignIn>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: SignIn, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<SignIn | undefined>;
    /**
     * Delete navigation property signIns for auditLogs
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Get a signIn object that contains a specific user sign-in event for your tenant that includes sign-ins where a user is asked to enter a username or password, and session tokens.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<SignInItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property signIns in auditLogs
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: SignIn, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get a signIn object that contains a specific user sign-in event for your tenant that includes sign-ins where a user is asked to enter a username or password, and session tokens.
 */
export interface SignInItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
}
/**
 * Uri template for the request builder.
 */
export const SignInItemRequestBuilderUriTemplate = "{+baseurl}/auditLogs/signIns/{signIn%2Did}{?%24expand,%24select}";
/**
 * Provides operations to manage the signIns property of the microsoft.graph.auditLogRoot entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
} as const;
/**
 * Provides operations to manage the signIns property of the microsoft.graph.auditLogRoot entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    AppDisplayName: "appDisplayName",
    AppId: "appId",
    AppliedConditionalAccessPolicies: "appliedConditionalAccessPolicies",
    AppliedEventListeners: "appliedEventListeners",
    AppTokenProtectionStatus: "appTokenProtectionStatus",
    AuthenticationAppDeviceDetails: "authenticationAppDeviceDetails",
    AuthenticationAppPolicyEvaluationDetails: "authenticationAppPolicyEvaluationDetails",
    AuthenticationContextClassReferences: "authenticationContextClassReferences",
    AuthenticationDetails: "authenticationDetails",
    AuthenticationMethodsUsed: "authenticationMethodsUsed",
    AuthenticationProcessingDetails: "authenticationProcessingDetails",
    AuthenticationProtocol: "authenticationProtocol",
    AuthenticationRequirement: "authenticationRequirement",
    AuthenticationRequirementPolicies: "authenticationRequirementPolicies",
    AutonomousSystemNumber: "autonomousSystemNumber",
    AzureResourceId: "azureResourceId",
    ClientAppUsed: "clientAppUsed",
    ClientCredentialType: "clientCredentialType",
    ConditionalAccessStatus: "conditionalAccessStatus",
    CorrelationId: "correlationId",
    CreatedDateTime: "createdDateTime",
    CrossTenantAccessType: "crossTenantAccessType",
    DeviceDetail: "deviceDetail",
    FederatedCredentialId: "federatedCredentialId",
    FlaggedForReview: "flaggedForReview",
    HomeTenantId: "homeTenantId",
    HomeTenantName: "homeTenantName",
    IncomingTokenType: "incomingTokenType",
    IpAddress: "ipAddress",
    IpAddressFromResourceProvider: "ipAddressFromResourceProvider",
    IsInteractive: "isInteractive",
    IsTenantRestricted: "isTenantRestricted",
    Location: "location",
    ManagedServiceIdentity: "managedServiceIdentity",
    MfaDetail: "mfaDetail",
    NetworkLocationDetails: "networkLocationDetails",
    OriginalRequestId: "originalRequestId",
    OriginalTransferMethod: "originalTransferMethod",
    PrivateLinkDetails: "privateLinkDetails",
    ProcessingTimeInMilliseconds: "processingTimeInMilliseconds",
    ResourceDisplayName: "resourceDisplayName",
    ResourceId: "resourceId",
    ResourceServicePrincipalId: "resourceServicePrincipalId",
    ResourceTenantId: "resourceTenantId",
    RiskDetail: "riskDetail",
    RiskEventTypes_v2: "riskEventTypes_v2",
    RiskLevelAggregated: "riskLevelAggregated",
    RiskLevelDuringSignIn: "riskLevelDuringSignIn",
    RiskState: "riskState",
    ServicePrincipalCredentialKeyId: "servicePrincipalCredentialKeyId",
    ServicePrincipalCredentialThumbprint: "servicePrincipalCredentialThumbprint",
    ServicePrincipalId: "servicePrincipalId",
    ServicePrincipalName: "servicePrincipalName",
    SessionLifetimePolicies: "sessionLifetimePolicies",
    SignInEventTypes: "signInEventTypes",
    SignInIdentifier: "signInIdentifier",
    SignInIdentifierType: "signInIdentifierType",
    SignInTokenProtectionStatus: "signInTokenProtectionStatus",
    Status: "status",
    TokenIssuerName: "tokenIssuerName",
    TokenIssuerType: "tokenIssuerType",
    UniqueTokenIdentifier: "uniqueTokenIdentifier",
    UserAgent: "userAgent",
    UserDisplayName: "userDisplayName",
    UserId: "userId",
    UserPrincipalName: "userPrincipalName",
    UserType: "userType",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const SignInItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const SignInItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: SignInItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: SignInItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createSignInFromDiscriminatorValue,
        queryParametersMapper: SignInItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: SignInItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createSignInFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeSignIn,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
