/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createSignInCollectionResponseFromDiscriminatorValue, createSignInFromDiscriminatorValue, serializeSignIn, type SignIn, type SignInCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { ConfirmCompromisedRequestBuilderRequestsMetadata, type ConfirmCompromisedRequestBuilder } from './confirmCompromised/';
import { ConfirmSafeRequestBuilderRequestsMetadata, type ConfirmSafeRequestBuilder } from './confirmSafe/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { SignInItemRequestBuilderRequestsMetadata, type SignInItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the signIns property of the microsoft.graph.auditLogRoot entity.
 */
export interface SignInsRequestBuilder extends BaseRequestBuilder<SignInsRequestBuilder> {
    /**
     * Provides operations to call the confirmCompromised method.
     */
    get confirmCompromised(): ConfirmCompromisedRequestBuilder;
    /**
     * Provides operations to call the confirmSafe method.
     */
    get confirmSafe(): ConfirmSafeRequestBuilder;
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the signIns property of the microsoft.graph.auditLogRoot entity.
     * @param signInId The unique identifier of signIn
     * @returns {SignInItemRequestBuilder}
     */
     bySignInId(signInId: string) : SignInItemRequestBuilder;
    /**
     * Get a list of signIn objects. The list contains the user sign-ins for your Microsoft Entra tenant. Sign-ins where a username and password are passed as part of authorization token, and successful federated sign-ins are currently included in the sign-in logs. The maximum and default page size is 1,000 objects and by default, the most recent sign-ins are returned first. Only sign-in events that occurred within the Microsoft Entra ID default retention period are available.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<SignInCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/signin-list?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<SignInsRequestBuilderGetQueryParameters> | undefined) : Promise<SignInCollectionResponse | undefined>;
    /**
     * Create new navigation property to signIns for auditLogs
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<SignIn>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: SignIn, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<SignIn | undefined>;
    /**
     * Get a list of signIn objects. The list contains the user sign-ins for your Microsoft Entra tenant. Sign-ins where a username and password are passed as part of authorization token, and successful federated sign-ins are currently included in the sign-in logs. The maximum and default page size is 1,000 objects and by default, the most recent sign-ins are returned first. Only sign-in events that occurred within the Microsoft Entra ID default retention period are available.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<SignInsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create new navigation property to signIns for auditLogs
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: SignIn, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get a list of signIn objects. The list contains the user sign-ins for your Microsoft Entra tenant. Sign-ins where a username and password are passed as part of authorization token, and successful federated sign-ins are currently included in the sign-in logs. The maximum and default page size is 1,000 objects and by default, the most recent sign-ins are returned first. Only sign-in events that occurred within the Microsoft Entra ID default retention period are available.
 */
export interface SignInsRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Uri template for the request builder.
 */
export const SignInsRequestBuilderUriTemplate = "{+baseurl}/auditLogs/signIns{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Provides operations to manage the signIns property of the microsoft.graph.auditLogRoot entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
} as const;
/**
 * Provides operations to manage the signIns property of the microsoft.graph.auditLogRoot entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    AppDisplayName: "appDisplayName",
    AppDisplayNameDesc: "appDisplayName desc",
    AppId: "appId",
    AppIdDesc: "appId desc",
    AppliedConditionalAccessPolicies: "appliedConditionalAccessPolicies",
    AppliedConditionalAccessPoliciesDesc: "appliedConditionalAccessPolicies desc",
    AppliedEventListeners: "appliedEventListeners",
    AppliedEventListenersDesc: "appliedEventListeners desc",
    AppTokenProtectionStatus: "appTokenProtectionStatus",
    AppTokenProtectionStatusDesc: "appTokenProtectionStatus desc",
    AuthenticationAppDeviceDetails: "authenticationAppDeviceDetails",
    AuthenticationAppDeviceDetailsDesc: "authenticationAppDeviceDetails desc",
    AuthenticationAppPolicyEvaluationDetails: "authenticationAppPolicyEvaluationDetails",
    AuthenticationAppPolicyEvaluationDetailsDesc: "authenticationAppPolicyEvaluationDetails desc",
    AuthenticationContextClassReferences: "authenticationContextClassReferences",
    AuthenticationContextClassReferencesDesc: "authenticationContextClassReferences desc",
    AuthenticationDetails: "authenticationDetails",
    AuthenticationDetailsDesc: "authenticationDetails desc",
    AuthenticationMethodsUsed: "authenticationMethodsUsed",
    AuthenticationMethodsUsedDesc: "authenticationMethodsUsed desc",
    AuthenticationProcessingDetails: "authenticationProcessingDetails",
    AuthenticationProcessingDetailsDesc: "authenticationProcessingDetails desc",
    AuthenticationProtocol: "authenticationProtocol",
    AuthenticationProtocolDesc: "authenticationProtocol desc",
    AuthenticationRequirement: "authenticationRequirement",
    AuthenticationRequirementDesc: "authenticationRequirement desc",
    AuthenticationRequirementPolicies: "authenticationRequirementPolicies",
    AuthenticationRequirementPoliciesDesc: "authenticationRequirementPolicies desc",
    AutonomousSystemNumber: "autonomousSystemNumber",
    AutonomousSystemNumberDesc: "autonomousSystemNumber desc",
    AzureResourceId: "azureResourceId",
    AzureResourceIdDesc: "azureResourceId desc",
    ClientAppUsed: "clientAppUsed",
    ClientAppUsedDesc: "clientAppUsed desc",
    ClientCredentialType: "clientCredentialType",
    ClientCredentialTypeDesc: "clientCredentialType desc",
    ConditionalAccessStatus: "conditionalAccessStatus",
    ConditionalAccessStatusDesc: "conditionalAccessStatus desc",
    CorrelationId: "correlationId",
    CorrelationIdDesc: "correlationId desc",
    CreatedDateTime: "createdDateTime",
    CreatedDateTimeDesc: "createdDateTime desc",
    CrossTenantAccessType: "crossTenantAccessType",
    CrossTenantAccessTypeDesc: "crossTenantAccessType desc",
    DeviceDetail: "deviceDetail",
    DeviceDetailDesc: "deviceDetail desc",
    FederatedCredentialId: "federatedCredentialId",
    FederatedCredentialIdDesc: "federatedCredentialId desc",
    FlaggedForReview: "flaggedForReview",
    FlaggedForReviewDesc: "flaggedForReview desc",
    HomeTenantId: "homeTenantId",
    HomeTenantIdDesc: "homeTenantId desc",
    HomeTenantName: "homeTenantName",
    HomeTenantNameDesc: "homeTenantName desc",
    IncomingTokenType: "incomingTokenType",
    IncomingTokenTypeDesc: "incomingTokenType desc",
    IpAddress: "ipAddress",
    IpAddressDesc: "ipAddress desc",
    IpAddressFromResourceProvider: "ipAddressFromResourceProvider",
    IpAddressFromResourceProviderDesc: "ipAddressFromResourceProvider desc",
    IsInteractive: "isInteractive",
    IsInteractiveDesc: "isInteractive desc",
    IsTenantRestricted: "isTenantRestricted",
    IsTenantRestrictedDesc: "isTenantRestricted desc",
    Location: "location",
    LocationDesc: "location desc",
    ManagedServiceIdentity: "managedServiceIdentity",
    ManagedServiceIdentityDesc: "managedServiceIdentity desc",
    MfaDetail: "mfaDetail",
    MfaDetailDesc: "mfaDetail desc",
    NetworkLocationDetails: "networkLocationDetails",
    NetworkLocationDetailsDesc: "networkLocationDetails desc",
    OriginalRequestId: "originalRequestId",
    OriginalRequestIdDesc: "originalRequestId desc",
    OriginalTransferMethod: "originalTransferMethod",
    OriginalTransferMethodDesc: "originalTransferMethod desc",
    PrivateLinkDetails: "privateLinkDetails",
    PrivateLinkDetailsDesc: "privateLinkDetails desc",
    ProcessingTimeInMilliseconds: "processingTimeInMilliseconds",
    ProcessingTimeInMillisecondsDesc: "processingTimeInMilliseconds desc",
    ResourceDisplayName: "resourceDisplayName",
    ResourceDisplayNameDesc: "resourceDisplayName desc",
    ResourceId: "resourceId",
    ResourceIdDesc: "resourceId desc",
    ResourceServicePrincipalId: "resourceServicePrincipalId",
    ResourceServicePrincipalIdDesc: "resourceServicePrincipalId desc",
    ResourceTenantId: "resourceTenantId",
    ResourceTenantIdDesc: "resourceTenantId desc",
    RiskDetail: "riskDetail",
    RiskDetailDesc: "riskDetail desc",
    RiskEventTypes_v2: "riskEventTypes_v2",
    RiskEventTypes_v2Desc: "riskEventTypes_v2 desc",
    RiskLevelAggregated: "riskLevelAggregated",
    RiskLevelAggregatedDesc: "riskLevelAggregated desc",
    RiskLevelDuringSignIn: "riskLevelDuringSignIn",
    RiskLevelDuringSignInDesc: "riskLevelDuringSignIn desc",
    RiskState: "riskState",
    RiskStateDesc: "riskState desc",
    ServicePrincipalCredentialKeyId: "servicePrincipalCredentialKeyId",
    ServicePrincipalCredentialKeyIdDesc: "servicePrincipalCredentialKeyId desc",
    ServicePrincipalCredentialThumbprint: "servicePrincipalCredentialThumbprint",
    ServicePrincipalCredentialThumbprintDesc: "servicePrincipalCredentialThumbprint desc",
    ServicePrincipalId: "servicePrincipalId",
    ServicePrincipalIdDesc: "servicePrincipalId desc",
    ServicePrincipalName: "servicePrincipalName",
    ServicePrincipalNameDesc: "servicePrincipalName desc",
    SessionLifetimePolicies: "sessionLifetimePolicies",
    SessionLifetimePoliciesDesc: "sessionLifetimePolicies desc",
    SignInEventTypes: "signInEventTypes",
    SignInEventTypesDesc: "signInEventTypes desc",
    SignInIdentifier: "signInIdentifier",
    SignInIdentifierDesc: "signInIdentifier desc",
    SignInIdentifierType: "signInIdentifierType",
    SignInIdentifierTypeDesc: "signInIdentifierType desc",
    SignInTokenProtectionStatus: "signInTokenProtectionStatus",
    SignInTokenProtectionStatusDesc: "signInTokenProtectionStatus desc",
    Status: "status",
    StatusDesc: "status desc",
    TokenIssuerName: "tokenIssuerName",
    TokenIssuerNameDesc: "tokenIssuerName desc",
    TokenIssuerType: "tokenIssuerType",
    TokenIssuerTypeDesc: "tokenIssuerType desc",
    UniqueTokenIdentifier: "uniqueTokenIdentifier",
    UniqueTokenIdentifierDesc: "uniqueTokenIdentifier desc",
    UserAgent: "userAgent",
    UserAgentDesc: "userAgent desc",
    UserDisplayName: "userDisplayName",
    UserDisplayNameDesc: "userDisplayName desc",
    UserId: "userId",
    UserIdDesc: "userId desc",
    UserPrincipalName: "userPrincipalName",
    UserPrincipalNameDesc: "userPrincipalName desc",
    UserType: "userType",
    UserTypeDesc: "userType desc",
} as const;
/**
 * Provides operations to manage the signIns property of the microsoft.graph.auditLogRoot entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    AppDisplayName: "appDisplayName",
    AppId: "appId",
    AppliedConditionalAccessPolicies: "appliedConditionalAccessPolicies",
    AppliedEventListeners: "appliedEventListeners",
    AppTokenProtectionStatus: "appTokenProtectionStatus",
    AuthenticationAppDeviceDetails: "authenticationAppDeviceDetails",
    AuthenticationAppPolicyEvaluationDetails: "authenticationAppPolicyEvaluationDetails",
    AuthenticationContextClassReferences: "authenticationContextClassReferences",
    AuthenticationDetails: "authenticationDetails",
    AuthenticationMethodsUsed: "authenticationMethodsUsed",
    AuthenticationProcessingDetails: "authenticationProcessingDetails",
    AuthenticationProtocol: "authenticationProtocol",
    AuthenticationRequirement: "authenticationRequirement",
    AuthenticationRequirementPolicies: "authenticationRequirementPolicies",
    AutonomousSystemNumber: "autonomousSystemNumber",
    AzureResourceId: "azureResourceId",
    ClientAppUsed: "clientAppUsed",
    ClientCredentialType: "clientCredentialType",
    ConditionalAccessStatus: "conditionalAccessStatus",
    CorrelationId: "correlationId",
    CreatedDateTime: "createdDateTime",
    CrossTenantAccessType: "crossTenantAccessType",
    DeviceDetail: "deviceDetail",
    FederatedCredentialId: "federatedCredentialId",
    FlaggedForReview: "flaggedForReview",
    HomeTenantId: "homeTenantId",
    HomeTenantName: "homeTenantName",
    IncomingTokenType: "incomingTokenType",
    IpAddress: "ipAddress",
    IpAddressFromResourceProvider: "ipAddressFromResourceProvider",
    IsInteractive: "isInteractive",
    IsTenantRestricted: "isTenantRestricted",
    Location: "location",
    ManagedServiceIdentity: "managedServiceIdentity",
    MfaDetail: "mfaDetail",
    NetworkLocationDetails: "networkLocationDetails",
    OriginalRequestId: "originalRequestId",
    OriginalTransferMethod: "originalTransferMethod",
    PrivateLinkDetails: "privateLinkDetails",
    ProcessingTimeInMilliseconds: "processingTimeInMilliseconds",
    ResourceDisplayName: "resourceDisplayName",
    ResourceId: "resourceId",
    ResourceServicePrincipalId: "resourceServicePrincipalId",
    ResourceTenantId: "resourceTenantId",
    RiskDetail: "riskDetail",
    RiskEventTypes_v2: "riskEventTypes_v2",
    RiskLevelAggregated: "riskLevelAggregated",
    RiskLevelDuringSignIn: "riskLevelDuringSignIn",
    RiskState: "riskState",
    ServicePrincipalCredentialKeyId: "servicePrincipalCredentialKeyId",
    ServicePrincipalCredentialThumbprint: "servicePrincipalCredentialThumbprint",
    ServicePrincipalId: "servicePrincipalId",
    ServicePrincipalName: "servicePrincipalName",
    SessionLifetimePolicies: "sessionLifetimePolicies",
    SignInEventTypes: "signInEventTypes",
    SignInIdentifier: "signInIdentifier",
    SignInIdentifierType: "signInIdentifierType",
    SignInTokenProtectionStatus: "signInTokenProtectionStatus",
    Status: "status",
    TokenIssuerName: "tokenIssuerName",
    TokenIssuerType: "tokenIssuerType",
    UniqueTokenIdentifier: "uniqueTokenIdentifier",
    UserAgent: "userAgent",
    UserDisplayName: "userDisplayName",
    UserId: "userId",
    UserPrincipalName: "userPrincipalName",
    UserType: "userType",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const SignInsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const SignInsRequestBuilderNavigationMetadata: Record<Exclude<keyof SignInsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    bySignInId: {
        requestsMetadata: SignInItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["signIn%2Did"],
    },
    confirmCompromised: {
        requestsMetadata: ConfirmCompromisedRequestBuilderRequestsMetadata,
    },
    confirmSafe: {
        requestsMetadata: ConfirmSafeRequestBuilderRequestsMetadata,
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const SignInsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: SignInsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createSignInCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: SignInsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: SignInsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createSignInFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeSignIn,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
