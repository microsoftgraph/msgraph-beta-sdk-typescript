/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createApplicationFromDiscriminatorValue, type Application } from '@microsoft/msgraph-beta-sdk/models/index.js';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/index.js';
// @ts-ignore
import { LogoRequestBuilderRequestsMetadata, type LogoRequestBuilder } from './logo/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the application property of the microsoft.graph.signInEventsAppActivity entity.
 */
export interface ApplicationRequestBuilder extends BaseRequestBuilder<ApplicationRequestBuilder> {
    /**
     * Provides operations to manage the media for the auditLogRoot entity.
     */
    get logo(): LogoRequestBuilder;
    /**
     * Represents an application registered in Microsoft Entra ID.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Application>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<ApplicationRequestBuilderGetQueryParameters> | undefined) : Promise<Application | undefined>;
    /**
     * Represents an application registered in Microsoft Entra ID.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ApplicationRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Represents an application registered in Microsoft Entra ID.
 */
export interface ApplicationRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const ApplicationRequestBuilderUriTemplate = "{+baseurl}/auditLogs/signInEventsAppSummary/{signInEventsAppActivity%2DappId}/application{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ApplicationRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ApplicationRequestBuilderNavigationMetadata: Record<Exclude<keyof ApplicationRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    logo: {
        requestsMetadata: LogoRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ApplicationRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ApplicationRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createApplicationFromDiscriminatorValue,
        queryParametersMapper: ApplicationRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
