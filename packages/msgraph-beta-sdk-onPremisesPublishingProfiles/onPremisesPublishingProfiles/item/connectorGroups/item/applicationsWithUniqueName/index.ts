/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createApplicationFromDiscriminatorValue, type Application } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the applications property of the microsoft.graph.connectorGroup entity.
 */
export interface ApplicationsWithUniqueNameRequestBuilder extends BaseRequestBuilder<ApplicationsWithUniqueNameRequestBuilder> {
    /**
     * Get applications from onPremisesPublishingProfiles
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Application>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<ApplicationsWithUniqueNameRequestBuilderGetQueryParameters> | undefined) : Promise<Application | undefined>;
    /**
     * Get applications from onPremisesPublishingProfiles
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ApplicationsWithUniqueNameRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Get applications from onPremisesPublishingProfiles
 */
export interface ApplicationsWithUniqueNameRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
}
export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Uri template for the request builder.
 */
export const ApplicationsWithUniqueNameRequestBuilderUriTemplate = "{+baseurl}/onPremisesPublishingProfiles/{onPremisesPublishingProfile%2Did}/connectorGroups/{connectorGroup%2Did}/applications(uniqueName='{uniqueName}'){?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ApplicationsWithUniqueNameRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ApplicationsWithUniqueNameRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ApplicationsWithUniqueNameRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createApplicationFromDiscriminatorValue,
        queryParametersMapper: ApplicationsWithUniqueNameRequestBuilderGetQueryParametersMapper,
    },
};
/**
 * Provides operations to manage the applications property of the microsoft.graph.connectorGroup entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    AppManagementPolicies: "appManagementPolicies",
    ConnectorGroup: "connectorGroup",
    CreatedOnBehalfOf: "createdOnBehalfOf",
    ExtensionProperties: "extensionProperties",
    FederatedIdentityCredentials: "federatedIdentityCredentials",
    HomeRealmDiscoveryPolicies: "homeRealmDiscoveryPolicies",
    Owners: "owners",
    Synchronization: "synchronization",
    TokenIssuancePolicies: "tokenIssuancePolicies",
    TokenLifetimePolicies: "tokenLifetimePolicies",
} as const;
/**
 * Provides operations to manage the applications property of the microsoft.graph.connectorGroup entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    DeletedDateTime: "deletedDateTime",
    Api: "api",
    AppId: "appId",
    AppRoles: "appRoles",
    AuthenticationBehaviors: "authenticationBehaviors",
    Certification: "certification",
    CreatedDateTime: "createdDateTime",
    DefaultRedirectUri: "defaultRedirectUri",
    Description: "description",
    DisabledByMicrosoftStatus: "disabledByMicrosoftStatus",
    DisplayName: "displayName",
    GroupMembershipClaims: "groupMembershipClaims",
    IdentifierUris: "identifierUris",
    Info: "info",
    IsDeviceOnlyAuthSupported: "isDeviceOnlyAuthSupported",
    IsFallbackPublicClient: "isFallbackPublicClient",
    KeyCredentials: "keyCredentials",
    Logo: "logo",
    Notes: "notes",
    OnPremisesPublishing: "onPremisesPublishing",
    OptionalClaims: "optionalClaims",
    ParentalControlSettings: "parentalControlSettings",
    PasswordCredentials: "passwordCredentials",
    PublicClient: "publicClient",
    PublisherDomain: "publisherDomain",
    RequestSignatureVerification: "requestSignatureVerification",
    RequiredResourceAccess: "requiredResourceAccess",
    SamlMetadataUrl: "samlMetadataUrl",
    ServiceManagementReference: "serviceManagementReference",
    ServicePrincipalLockConfiguration: "servicePrincipalLockConfiguration",
    SignInAudience: "signInAudience",
    Spa: "spa",
    Tags: "tags",
    TokenEncryptionKeyId: "tokenEncryptionKeyId",
    UniqueName: "uniqueName",
    VerifiedPublisher: "verifiedPublisher",
    Web: "web",
    Windows: "windows",
    AppManagementPolicies: "appManagementPolicies",
    ConnectorGroup: "connectorGroup",
    CreatedOnBehalfOf: "createdOnBehalfOf",
    ExtensionProperties: "extensionProperties",
    FederatedIdentityCredentials: "federatedIdentityCredentials",
    HomeRealmDiscoveryPolicies: "homeRealmDiscoveryPolicies",
    Owners: "owners",
    Synchronization: "synchronization",
    TokenIssuancePolicies: "tokenIssuancePolicies",
    TokenLifetimePolicies: "tokenLifetimePolicies",
} as const;
/* tslint:enable */
/* eslint-enable */
