/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createConnectorGroupFromDiscriminatorValue, serializeConnectorGroup, type ConnectorGroup } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { ApplicationsRequestBuilderNavigationMetadata, ApplicationsRequestBuilderRequestsMetadata, type ApplicationsRequestBuilder } from './applications/';
import { ApplicationsWithAppIdRequestBuilderRequestsMetadata, type ApplicationsWithAppIdRequestBuilder } from './applicationsWithAppId/';
import { ApplicationsWithUniqueNameRequestBuilderRequestsMetadata, type ApplicationsWithUniqueNameRequestBuilder } from './applicationsWithUniqueName/';
import { MembersRequestBuilderNavigationMetadata, MembersRequestBuilderRequestsMetadata, type MembersRequestBuilder } from './members/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the connectorGroups property of the microsoft.graph.onPremisesPublishingProfile entity.
 */
export interface ConnectorGroupItemRequestBuilder extends BaseRequestBuilder<ConnectorGroupItemRequestBuilder> {
    /**
     * Provides operations to manage the applications property of the microsoft.graph.connectorGroup entity.
     */
    get applications(): ApplicationsRequestBuilder;
    /**
     * Provides operations to manage the members property of the microsoft.graph.connectorGroup entity.
     */
    get members(): MembersRequestBuilder;
    /**
     * Provides operations to manage the applications property of the microsoft.graph.connectorGroup entity.
     * @param appId Alternate key of application
     * @returns {ApplicationsWithAppIdRequestBuilder}
     */
     applicationsWithAppId(appId: string | undefined) : ApplicationsWithAppIdRequestBuilder;
    /**
     * Provides operations to manage the applications property of the microsoft.graph.connectorGroup entity.
     * @param uniqueName Alternate key of application
     * @returns {ApplicationsWithUniqueNameRequestBuilder}
     */
     applicationsWithUniqueName(uniqueName: string | undefined) : ApplicationsWithUniqueNameRequestBuilder;
    /**
     * Delete a connectorGroup. All connectors and applications must be removed from the connector group before a connector group can be deleted.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/connectorgroup-delete?view=graph-rest-1.0|Find more info here}
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Retrieve the properties of a connectorGroup.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ConnectorGroup>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/connectorgroup-get?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<ConnectorGroupItemRequestBuilderGetQueryParameters> | undefined) : Promise<ConnectorGroup | undefined>;
    /**
     * Update the properties of a connectorGroup object.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ConnectorGroup>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/connectorgroup-update?view=graph-rest-1.0|Find more info here}
     */
     patch(body: ConnectorGroup, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ConnectorGroup | undefined>;
    /**
     * Delete a connectorGroup. All connectors and applications must be removed from the connector group before a connector group can be deleted.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Retrieve the properties of a connectorGroup.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ConnectorGroupItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the properties of a connectorGroup object.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: ConnectorGroup, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Retrieve the properties of a connectorGroup.
 */
export interface ConnectorGroupItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const ConnectorGroupItemRequestBuilderUriTemplate = "{+baseurl}/onPremisesPublishingProfiles/{onPremisesPublishingProfile%2Did}/connectorGroups/{connectorGroup%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ConnectorGroupItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ConnectorGroupItemRequestBuilderNavigationMetadata: Record<Exclude<keyof ConnectorGroupItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    applicationsWithAppId: {
        requestsMetadata: ApplicationsWithAppIdRequestBuilderRequestsMetadata,
    },
    applicationsWithUniqueName: {
        requestsMetadata: ApplicationsWithUniqueNameRequestBuilderRequestsMetadata,
    },
    applications: {
        requestsMetadata: ApplicationsRequestBuilderRequestsMetadata,
        navigationMetadata: ApplicationsRequestBuilderNavigationMetadata,
    },
    members: {
        requestsMetadata: MembersRequestBuilderRequestsMetadata,
        navigationMetadata: MembersRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ConnectorGroupItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: ConnectorGroupItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        uriTemplate: ConnectorGroupItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createConnectorGroupFromDiscriminatorValue,
        queryParametersMapper: ConnectorGroupItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: ConnectorGroupItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createConnectorGroupFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeConnectorGroup,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
