/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createExactMatchSessionFromDiscriminatorValue, serializeExactMatchSession, type ExactMatchSession } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CancelRequestBuilderRequestsMetadata, CancelRequestBuilderUriTemplate, type CancelRequestBuilder } from './cancel/';
import { CommitRequestBuilderRequestsMetadata, CommitRequestBuilderUriTemplate, type CommitRequestBuilder } from './commit/';
import { RenewRequestBuilderRequestsMetadata, RenewRequestBuilderUriTemplate, type RenewRequestBuilder } from './renew/';
import { type UploadAgentRequestBuilder, UploadAgentRequestBuilderRequestsMetadata, UploadAgentRequestBuilderUriTemplate } from './uploadAgent/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the sessions property of the microsoft.graph.exactMatchDataStore entity.
 */
export interface ExactMatchSessionItemRequestBuilder extends BaseRequestBuilder<ExactMatchSessionItemRequestBuilder> {
    /**
     * Provides operations to call the cancel method.
     */
    get cancel(): CancelRequestBuilder;
    /**
     * Provides operations to call the commit method.
     */
    get commit(): CommitRequestBuilder;
    /**
     * Provides operations to call the renew method.
     */
    get renew(): RenewRequestBuilder;
    /**
     * Provides operations to manage the uploadAgent property of the microsoft.graph.exactMatchSession entity.
     */
    get uploadAgent(): UploadAgentRequestBuilder;
    /**
     * Delete navigation property sessions for dataClassification
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get sessions from dataClassification
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of ExactMatchSession
     */
     get(requestConfiguration?: RequestConfiguration<ExactMatchSessionItemRequestBuilderGetQueryParameters> | undefined) : Promise<ExactMatchSession | undefined>;
    /**
     * Update the navigation property sessions in dataClassification
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of ExactMatchSession
     */
     patch(body: ExactMatchSession, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ExactMatchSession | undefined>;
    /**
     * Delete navigation property sessions for dataClassification
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Get sessions from dataClassification
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ExactMatchSessionItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property sessions in dataClassification
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: ExactMatchSession, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get sessions from dataClassification
 */
export interface ExactMatchSessionItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ExactMatchSessionItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ExactMatchSessionItemRequestBuilderNavigationMetadata: Record<Exclude<keyof ExactMatchSessionItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    cancel: {
        uriTemplate: CancelRequestBuilderUriTemplate,
        requestsMetadata: CancelRequestBuilderRequestsMetadata,
    },
    commit: {
        uriTemplate: CommitRequestBuilderUriTemplate,
        requestsMetadata: CommitRequestBuilderRequestsMetadata,
    },
    renew: {
        uriTemplate: RenewRequestBuilderUriTemplate,
        requestsMetadata: RenewRequestBuilderRequestsMetadata,
    },
    uploadAgent: {
        uriTemplate: UploadAgentRequestBuilderUriTemplate,
        requestsMetadata: UploadAgentRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ExactMatchSessionItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createExactMatchSessionFromDiscriminatorValue,
        queryParametersMapper: ExactMatchSessionItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createExactMatchSessionFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeExactMatchSession,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const ExactMatchSessionItemRequestBuilderUriTemplate = "{+baseurl}/dataClassification/exactMatchDataStores/{exactMatchDataStore%2Did}/sessions/{exactMatchSession%2Did}{?%24expand,%24select}";
/* tslint:enable */
/* eslint-enable */
