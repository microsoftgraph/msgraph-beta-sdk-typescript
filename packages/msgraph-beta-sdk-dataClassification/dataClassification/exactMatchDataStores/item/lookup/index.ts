/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { deserializeIntoBaseCollectionPaginationCountResponse, serializeBaseCollectionPaginationCountResponse, type BaseCollectionPaginationCountResponse } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a lookupPostRequestBody
 */
export function createLookupPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLookupPostRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a lookupPostResponse
 */
export function createLookupPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLookupPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoLookupPostRequestBody(lookupPostRequestBody: Partial<LookupPostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { lookupPostRequestBody.backingStoreEnabled = true; },
        "key": n => { lookupPostRequestBody.key = n.getStringValue(); },
        "resultColumnNames": n => { lookupPostRequestBody.resultColumnNames = n.getCollectionOfPrimitiveValues<string>(); },
        "values": n => { lookupPostRequestBody.values = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoLookupPostResponse(lookupPostResponse: Partial<LookupPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(lookupPostResponse),
        "value": n => { lookupPostResponse.value = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
export interface LookupPostRequestBody extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The key property
     */
    key?: string;
    /**
     * The resultColumnNames property
     */
    resultColumnNames?: string[];
    /**
     * The values property
     */
    values?: string[];
}
export interface LookupPostResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: string[];
}
/**
 * Provides operations to call the lookup method.
 */
export interface LookupRequestBuilder extends BaseRequestBuilder<LookupRequestBuilder> {
    /**
     * Invoke action lookup
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of LookupPostResponse
     */
     post(body: LookupPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<LookupPostResponse | undefined>;
    /**
     * Invoke action lookup
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPostRequestInformation(body: LookupPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeLookupPostRequestBody(writer: SerializationWriter, lookupPostRequestBody: Partial<LookupPostRequestBody> | undefined = {}) : void {
    writer.writeStringValue("key", lookupPostRequestBody.key);
    writer.writeCollectionOfPrimitiveValues<string>("resultColumnNames", lookupPostRequestBody.resultColumnNames);
    writer.writeCollectionOfPrimitiveValues<string>("values", lookupPostRequestBody.values);
    writer.writeAdditionalData(lookupPostRequestBody.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeLookupPostResponse(writer: SerializationWriter, lookupPostResponse: Partial<LookupPostResponse> | undefined = {}) : void {
    serializeBaseCollectionPaginationCountResponse(writer, lookupPostResponse)
    writer.writeCollectionOfPrimitiveValues<string>("value", lookupPostResponse.value);
}
/**
 * Metadata for all the requests in the request builder.
 */
export const LookupRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createLookupPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeLookupPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const LookupRequestBuilderUriTemplate = "{+baseurl}/dataClassification/exactMatchDataStores/{exactMatchDataStore%2Did}/lookup";
/* tslint:enable */
/* eslint-enable */
