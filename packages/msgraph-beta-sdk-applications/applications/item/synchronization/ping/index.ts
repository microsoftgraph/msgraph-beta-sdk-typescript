/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PingGetResponse}
 */
// @ts-ignore
export function createPingGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPingGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPingGetResponse(pingGetResponse: Partial<PingGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { pingGetResponse.backingStoreEnabled = true; },
        "value": n => { pingGetResponse.value = n.getStringValue(); },
    }
}
export interface PingGetResponse extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The value property
     */
    value?: string | null;
}
/**
 * Provides operations to call the Ping method.
 */
export interface PingRequestBuilder extends BaseRequestBuilder<PingRequestBuilder> {
    /**
     * Invoke function Ping
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<PingGetResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<PingGetResponse | undefined>;
    /**
     * Invoke function Ping
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePingGetResponse(writer: SerializationWriter, pingGetResponse: Partial<PingGetResponse> | undefined | null = {}) : void {
    if (pingGetResponse) {
        writer.writeStringValue("value", pingGetResponse.value);
        writer.writeAdditionalData(pingGetResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const PingRequestBuilderUriTemplate = "{+baseurl}/applications/{application%2Did}/synchronization/Ping()";
/**
 * Metadata for all the requests in the request builder.
 */
export const PingRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: PingRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createPingGetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
