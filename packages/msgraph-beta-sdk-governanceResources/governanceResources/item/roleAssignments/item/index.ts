/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createGovernanceRoleAssignmentFromDiscriminatorValue, serializeGovernanceRoleAssignment, type GovernanceRoleAssignment } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { LinkedEligibleRoleAssignmentRequestBuilderRequestsMetadata, type LinkedEligibleRoleAssignmentRequestBuilder } from './linkedEligibleRoleAssignment/';
import { ResourceRequestBuilderRequestsMetadata, type ResourceRequestBuilder } from './resource/';
import { RoleDefinitionRequestBuilderNavigationMetadata, RoleDefinitionRequestBuilderRequestsMetadata, type RoleDefinitionRequestBuilder } from './roleDefinition/';
import { SubjectRequestBuilderRequestsMetadata, type SubjectRequestBuilder } from './subject/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the roleAssignments property of the microsoft.graph.governanceResource entity.
 */
export interface GovernanceRoleAssignmentItemRequestBuilder extends BaseRequestBuilder<GovernanceRoleAssignmentItemRequestBuilder> {
    /**
     * Provides operations to manage the linkedEligibleRoleAssignment property of the microsoft.graph.governanceRoleAssignment entity.
     */
    get linkedEligibleRoleAssignment(): LinkedEligibleRoleAssignmentRequestBuilder;
    /**
     * Provides operations to manage the resource property of the microsoft.graph.governanceRoleAssignment entity.
     */
    get resource(): ResourceRequestBuilder;
    /**
     * Provides operations to manage the roleDefinition property of the microsoft.graph.governanceRoleAssignment entity.
     */
    get roleDefinition(): RoleDefinitionRequestBuilder;
    /**
     * Provides operations to manage the subject property of the microsoft.graph.governanceRoleAssignment entity.
     */
    get subject(): SubjectRequestBuilder;
    /**
     * Delete navigation property roleAssignments for governanceResources
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * The collection of role assignments for the resource.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<GovernanceRoleAssignment>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<GovernanceRoleAssignmentItemRequestBuilderGetQueryParameters> | undefined) : Promise<GovernanceRoleAssignment | undefined>;
    /**
     * Update the navigation property roleAssignments in governanceResources
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<GovernanceRoleAssignment>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: GovernanceRoleAssignment, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<GovernanceRoleAssignment | undefined>;
    /**
     * Delete navigation property roleAssignments for governanceResources
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * The collection of role assignments for the resource.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<GovernanceRoleAssignmentItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property roleAssignments in governanceResources
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: GovernanceRoleAssignment, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * The collection of role assignments for the resource.
 */
export interface GovernanceRoleAssignmentItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
}
/**
 * Uri template for the request builder.
 */
export const GovernanceRoleAssignmentItemRequestBuilderUriTemplate = "{+baseurl}/governanceResources/{governanceResource%2Did}/roleAssignments/{governanceRoleAssignment%2Did}{?%24expand,%24select}";
/**
 * Provides operations to manage the roleAssignments property of the microsoft.graph.governanceResource entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    LinkedEligibleRoleAssignment: "linkedEligibleRoleAssignment",
    Resource: "resource",
    RoleDefinition: "roleDefinition",
    Subject: "subject",
} as const;
/**
 * Provides operations to manage the roleAssignments property of the microsoft.graph.governanceResource entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    AssignmentState: "assignmentState",
    EndDateTime: "endDateTime",
    ExternalId: "externalId",
    LinkedEligibleRoleAssignmentId: "linkedEligibleRoleAssignmentId",
    MemberType: "memberType",
    ResourceId: "resourceId",
    RoleDefinitionId: "roleDefinitionId",
    StartDateTime: "startDateTime",
    Status: "status",
    SubjectId: "subjectId",
    LinkedEligibleRoleAssignment: "linkedEligibleRoleAssignment",
    Resource: "resource",
    RoleDefinition: "roleDefinition",
    Subject: "subject",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const GovernanceRoleAssignmentItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const GovernanceRoleAssignmentItemRequestBuilderNavigationMetadata: Record<Exclude<keyof GovernanceRoleAssignmentItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    linkedEligibleRoleAssignment: {
        requestsMetadata: LinkedEligibleRoleAssignmentRequestBuilderRequestsMetadata,
    },
    resource: {
        requestsMetadata: ResourceRequestBuilderRequestsMetadata,
    },
    roleDefinition: {
        requestsMetadata: RoleDefinitionRequestBuilderRequestsMetadata,
        navigationMetadata: RoleDefinitionRequestBuilderNavigationMetadata,
    },
    subject: {
        requestsMetadata: SubjectRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const GovernanceRoleAssignmentItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: GovernanceRoleAssignmentItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: GovernanceRoleAssignmentItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createGovernanceRoleAssignmentFromDiscriminatorValue,
        queryParametersMapper: GovernanceRoleAssignmentItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: GovernanceRoleAssignmentItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createGovernanceRoleAssignmentFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeGovernanceRoleAssignment,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
