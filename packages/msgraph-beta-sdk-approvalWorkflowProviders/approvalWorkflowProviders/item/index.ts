/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createApprovalWorkflowProviderFromDiscriminatorValue, serializeApprovalWorkflowProvider, type ApprovalWorkflowProvider } from '@microsoft/msgraph-beta-sdk/models/index.js';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/index.js';
// @ts-ignore
import { BusinessFlowsRequestBuilderNavigationMetadata, BusinessFlowsRequestBuilderRequestsMetadata, type BusinessFlowsRequestBuilder } from './businessFlows/index.js';
// @ts-ignore
import { BusinessFlowsWithRequestsAwaitingMyDecisionRequestBuilderNavigationMetadata, BusinessFlowsWithRequestsAwaitingMyDecisionRequestBuilderRequestsMetadata, type BusinessFlowsWithRequestsAwaitingMyDecisionRequestBuilder } from './businessFlowsWithRequestsAwaitingMyDecision/index.js';
// @ts-ignore
import { PolicyTemplatesRequestBuilderNavigationMetadata, PolicyTemplatesRequestBuilderRequestsMetadata, type PolicyTemplatesRequestBuilder } from './policyTemplates/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the collection of approvalWorkflowProvider entities.
 */
export interface ApprovalWorkflowProviderItemRequestBuilder extends BaseRequestBuilder<ApprovalWorkflowProviderItemRequestBuilder> {
    /**
     * Provides operations to manage the businessFlows property of the microsoft.graph.approvalWorkflowProvider entity.
     */
    get businessFlows(): BusinessFlowsRequestBuilder;
    /**
     * Provides operations to manage the businessFlowsWithRequestsAwaitingMyDecision property of the microsoft.graph.approvalWorkflowProvider entity.
     */
    get businessFlowsWithRequestsAwaitingMyDecision(): BusinessFlowsWithRequestsAwaitingMyDecisionRequestBuilder;
    /**
     * Provides operations to manage the policyTemplates property of the microsoft.graph.approvalWorkflowProvider entity.
     */
    get policyTemplates(): PolicyTemplatesRequestBuilder;
    /**
     * Delete entity from approvalWorkflowProviders
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get entity from approvalWorkflowProviders by key
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ApprovalWorkflowProvider>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<ApprovalWorkflowProviderItemRequestBuilderGetQueryParameters> | undefined) : Promise<ApprovalWorkflowProvider | undefined>;
    /**
     * Update entity in approvalWorkflowProviders
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ApprovalWorkflowProvider>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: ApprovalWorkflowProvider, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ApprovalWorkflowProvider | undefined>;
    /**
     * Delete entity from approvalWorkflowProviders
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Get entity from approvalWorkflowProviders by key
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ApprovalWorkflowProviderItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update entity in approvalWorkflowProviders
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: ApprovalWorkflowProvider, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get entity from approvalWorkflowProviders by key
 */
export interface ApprovalWorkflowProviderItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const ApprovalWorkflowProviderItemRequestBuilderUriTemplate = "{+baseurl}/approvalWorkflowProviders/{approvalWorkflowProvider%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ApprovalWorkflowProviderItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ApprovalWorkflowProviderItemRequestBuilderNavigationMetadata: Record<Exclude<keyof ApprovalWorkflowProviderItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    businessFlows: {
        requestsMetadata: BusinessFlowsRequestBuilderRequestsMetadata,
        navigationMetadata: BusinessFlowsRequestBuilderNavigationMetadata,
    },
    businessFlowsWithRequestsAwaitingMyDecision: {
        requestsMetadata: BusinessFlowsWithRequestsAwaitingMyDecisionRequestBuilderRequestsMetadata,
        navigationMetadata: BusinessFlowsWithRequestsAwaitingMyDecisionRequestBuilderNavigationMetadata,
    },
    policyTemplates: {
        requestsMetadata: PolicyTemplatesRequestBuilderRequestsMetadata,
        navigationMetadata: PolicyTemplatesRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ApprovalWorkflowProviderItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: ApprovalWorkflowProviderItemRequestBuilderUriTemplate,
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: ApprovalWorkflowProviderItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createApprovalWorkflowProviderFromDiscriminatorValue,
        queryParametersMapper: ApprovalWorkflowProviderItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: ApprovalWorkflowProviderItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createApprovalWorkflowProviderFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeApprovalWorkflowProvider,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
