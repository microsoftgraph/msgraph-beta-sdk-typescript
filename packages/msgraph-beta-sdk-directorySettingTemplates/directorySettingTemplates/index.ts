/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createDirectorySettingTemplateCollectionResponseFromDiscriminatorValue, createDirectorySettingTemplateFromDiscriminatorValue, serializeDirectorySettingTemplate, type DirectorySettingTemplate, type DirectorySettingTemplateCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { DeltaRequestBuilderRequestsMetadata, type DeltaRequestBuilder } from './delta/';
import { GetByIdsRequestBuilderRequestsMetadata, type GetByIdsRequestBuilder } from './getByIds/';
import { GetUserOwnedObjectsRequestBuilderRequestsMetadata, type GetUserOwnedObjectsRequestBuilder } from './getUserOwnedObjects/';
import { DirectorySettingTemplateItemRequestBuilderNavigationMetadata, DirectorySettingTemplateItemRequestBuilderRequestsMetadata, type DirectorySettingTemplateItemRequestBuilder } from './item/';
import { type ValidatePropertiesRequestBuilder, ValidatePropertiesRequestBuilderRequestsMetadata } from './validateProperties/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the collection of directorySettingTemplate entities.
 */
export interface DirectorySettingTemplatesRequestBuilder extends BaseRequestBuilder<DirectorySettingTemplatesRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to call the delta method.
     */
    get delta(): DeltaRequestBuilder;
    /**
     * Provides operations to call the getByIds method.
     */
    get getByIds(): GetByIdsRequestBuilder;
    /**
     * Provides operations to call the getUserOwnedObjects method.
     */
    get getUserOwnedObjects(): GetUserOwnedObjectsRequestBuilder;
    /**
     * Provides operations to call the validateProperties method.
     */
    get validateProperties(): ValidatePropertiesRequestBuilder;
    /**
     * Provides operations to manage the collection of directorySettingTemplate entities.
     * @param directorySettingTemplateId The unique identifier of directorySettingTemplate
     * @returns {DirectorySettingTemplateItemRequestBuilder}
     */
     byDirectorySettingTemplateId(directorySettingTemplateId: string) : DirectorySettingTemplateItemRequestBuilder;
    /**
     * Directory setting templates represents a set of templates of directory settings, from which directory settings may be created and used within a tenant.  This operation retrieves the list of available directorySettingTemplates objects.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DirectorySettingTemplateCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/directorysettingtemplate-list?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<DirectorySettingTemplatesRequestBuilderGetQueryParameters> | undefined) : Promise<DirectorySettingTemplateCollectionResponse | undefined>;
    /**
     * Add new entity to directorySettingTemplates
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DirectorySettingTemplate>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: DirectorySettingTemplate, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<DirectorySettingTemplate | undefined>;
    /**
     * Directory setting templates represents a set of templates of directory settings, from which directory settings may be created and used within a tenant.  This operation retrieves the list of available directorySettingTemplates objects.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<DirectorySettingTemplatesRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Add new entity to directorySettingTemplates
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: DirectorySettingTemplate, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Directory setting templates represents a set of templates of directory settings, from which directory settings may be created and used within a tenant.  This operation retrieves the list of available directorySettingTemplates objects.
 */
export interface DirectorySettingTemplatesRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Uri template for the request builder.
 */
export const DirectorySettingTemplatesRequestBuilderUriTemplate = "{+baseurl}/directorySettingTemplates{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const DirectorySettingTemplatesRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const DirectorySettingTemplatesRequestBuilderNavigationMetadata: Record<Exclude<keyof DirectorySettingTemplatesRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byDirectorySettingTemplateId: {
        requestsMetadata: DirectorySettingTemplateItemRequestBuilderRequestsMetadata,
        navigationMetadata: DirectorySettingTemplateItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["directorySettingTemplate%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
    delta: {
        requestsMetadata: DeltaRequestBuilderRequestsMetadata,
    },
    getByIds: {
        requestsMetadata: GetByIdsRequestBuilderRequestsMetadata,
    },
    getUserOwnedObjects: {
        requestsMetadata: GetUserOwnedObjectsRequestBuilderRequestsMetadata,
    },
    validateProperties: {
        requestsMetadata: ValidatePropertiesRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const DirectorySettingTemplatesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: DirectorySettingTemplatesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDirectorySettingTemplateCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: DirectorySettingTemplatesRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: DirectorySettingTemplatesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDirectorySettingTemplateFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeDirectorySettingTemplate,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Provides operations to manage the collection of directorySettingTemplate entities.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
} as const;
/**
 * Provides operations to manage the collection of directorySettingTemplate entities.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    DeletedDateTime: "deletedDateTime",
    DeletedDateTimeDesc: "deletedDateTime desc",
    Description: "description",
    DescriptionDesc: "description desc",
    DisplayName: "displayName",
    DisplayNameDesc: "displayName desc",
    Values: "values",
    ValuesDesc: "values desc",
} as const;
/**
 * Provides operations to manage the collection of directorySettingTemplate entities.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    DeletedDateTime: "deletedDateTime",
    Description: "description",
    DisplayName: "displayName",
    Values: "values",
} as const;
/* tslint:enable */
/* eslint-enable */
