/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createPlannerPlanConfigurationFromDiscriminatorValue, serializePlannerPlanConfiguration, type PlannerPlanConfiguration } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { LocalizationsRequestBuilderNavigationMetadata, LocalizationsRequestBuilderRequestsMetadata, type LocalizationsRequestBuilder } from './localizations/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the planConfiguration property of the microsoft.graph.businessScenarioPlanner entity.
 */
export interface PlanConfigurationRequestBuilder extends BaseRequestBuilder<PlanConfigurationRequestBuilder> {
    /**
     * Provides operations to manage the localizations property of the microsoft.graph.plannerPlanConfiguration entity.
     */
    get localizations(): LocalizationsRequestBuilder;
    /**
     * Delete navigation property planConfiguration for solutions
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Read the properties and relationships of a plannerPlanConfiguration object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<PlannerPlanConfiguration>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/plannerplanconfiguration-get?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<PlanConfigurationRequestBuilderGetQueryParameters> | undefined) : Promise<PlannerPlanConfiguration | undefined>;
    /**
     * Update the properties of a plannerPlanConfiguration object for a businessScenario.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<PlannerPlanConfiguration>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/plannerplanconfiguration-update?view=graph-rest-1.0|Find more info here}
     */
     patch(body: PlannerPlanConfiguration, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<PlannerPlanConfiguration | undefined>;
    /**
     * Delete navigation property planConfiguration for solutions
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Read the properties and relationships of a plannerPlanConfiguration object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<PlanConfigurationRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the properties of a plannerPlanConfiguration object for a businessScenario.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: PlannerPlanConfiguration, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Read the properties and relationships of a plannerPlanConfiguration object.
 */
export interface PlanConfigurationRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
}
/**
 * Uri template for the request builder.
 */
export const PlanConfigurationRequestBuilderUriTemplate = "{+baseurl}/solutions/businessScenarios/{businessScenario%2Did}/planner/planConfiguration{?%24expand,%24select}";
/**
 * Provides operations to manage the planConfiguration property of the microsoft.graph.businessScenarioPlanner entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    Localizations: "localizations",
} as const;
/**
 * Provides operations to manage the planConfiguration property of the microsoft.graph.businessScenarioPlanner entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    Buckets: "buckets",
    CreatedBy: "createdBy",
    CreatedDateTime: "createdDateTime",
    DefaultLanguage: "defaultLanguage",
    LastModifiedBy: "lastModifiedBy",
    LastModifiedDateTime: "lastModifiedDateTime",
    Localizations: "localizations",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const PlanConfigurationRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const PlanConfigurationRequestBuilderNavigationMetadata: Record<Exclude<keyof PlanConfigurationRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    localizations: {
        requestsMetadata: LocalizationsRequestBuilderRequestsMetadata,
        navigationMetadata: LocalizationsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const PlanConfigurationRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: PlanConfigurationRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: PlanConfigurationRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createPlannerPlanConfigurationFromDiscriminatorValue,
        queryParametersMapper: PlanConfigurationRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: PlanConfigurationRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createPlannerPlanConfigurationFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializePlannerPlanConfiguration,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
