/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createBusinessScenarioPlannerFromDiscriminatorValue, serializeBusinessScenarioPlanner, type BusinessScenarioPlanner } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { GetPlanRequestBuilderRequestsMetadata, GetPlanRequestBuilderUriTemplate, type GetPlanRequestBuilder } from './getPlan/';
import { PlanConfigurationRequestBuilderNavigationMetadata, PlanConfigurationRequestBuilderRequestsMetadata, PlanConfigurationRequestBuilderUriTemplate, type PlanConfigurationRequestBuilder } from './planConfiguration/';
import { TaskConfigurationRequestBuilderRequestsMetadata, TaskConfigurationRequestBuilderUriTemplate, type TaskConfigurationRequestBuilder } from './taskConfiguration/';
import { TasksRequestBuilderNavigationMetadata, TasksRequestBuilderRequestsMetadata, TasksRequestBuilderUriTemplate, type TasksRequestBuilder } from './tasks/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the planner property of the microsoft.graph.businessScenario entity.
 */
export interface PlannerRequestBuilder extends BaseRequestBuilder<PlannerRequestBuilder> {
    /**
     * Provides operations to call the getPlan method.
     */
    get getPlan(): GetPlanRequestBuilder;
    /**
     * Provides operations to manage the planConfiguration property of the microsoft.graph.businessScenarioPlanner entity.
     */
    get planConfiguration(): PlanConfigurationRequestBuilder;
    /**
     * Provides operations to manage the taskConfiguration property of the microsoft.graph.businessScenarioPlanner entity.
     */
    get taskConfiguration(): TaskConfigurationRequestBuilder;
    /**
     * Provides operations to manage the tasks property of the microsoft.graph.businessScenarioPlanner entity.
     */
    get tasks(): TasksRequestBuilder;
    /**
     * Delete navigation property planner for solutions
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Read the properties and relationships of a businessScenarioPlanner object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of BusinessScenarioPlanner
     * @see {@link https://learn.microsoft.com/graph/api/businessscenarioplanner-get?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<PlannerRequestBuilderGetQueryParameters> | undefined) : Promise<BusinessScenarioPlanner | undefined>;
    /**
     * Update the navigation property planner in solutions
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of BusinessScenarioPlanner
     */
     patch(body: BusinessScenarioPlanner, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<BusinessScenarioPlanner | undefined>;
    /**
     * Delete navigation property planner for solutions
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Read the properties and relationships of a businessScenarioPlanner object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<PlannerRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property planner in solutions
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: BusinessScenarioPlanner, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Read the properties and relationships of a businessScenarioPlanner object.
 */
export interface PlannerRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const PlannerRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const PlannerRequestBuilderNavigationMetadata: Record<Exclude<keyof PlannerRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    getPlan: {
        uriTemplate: GetPlanRequestBuilderUriTemplate,
        requestsMetadata: GetPlanRequestBuilderRequestsMetadata,
    },
    planConfiguration: {
        uriTemplate: PlanConfigurationRequestBuilderUriTemplate,
        requestsMetadata: PlanConfigurationRequestBuilderRequestsMetadata,
        navigationMetadata: PlanConfigurationRequestBuilderNavigationMetadata,
    },
    taskConfiguration: {
        uriTemplate: TaskConfigurationRequestBuilderUriTemplate,
        requestsMetadata: TaskConfigurationRequestBuilderRequestsMetadata,
    },
    tasks: {
        uriTemplate: TasksRequestBuilderUriTemplate,
        requestsMetadata: TasksRequestBuilderRequestsMetadata,
        navigationMetadata: TasksRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const PlannerRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createBusinessScenarioPlannerFromDiscriminatorValue,
        queryParametersMapper: PlannerRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createBusinessScenarioPlannerFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeBusinessScenarioPlanner,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const PlannerRequestBuilderUriTemplate = "{+baseurl}/solutions/businessScenarios/{businessScenario%2Did}/planner{?%24expand,%24select}";
/* tslint:enable */
/* eslint-enable */
