/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createBookingBusinessFromDiscriminatorValue, serializeBookingBusiness, type BookingBusiness } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { AppointmentsRequestBuilderNavigationMetadata, AppointmentsRequestBuilderRequestsMetadata, AppointmentsRequestBuilderUriTemplate, type AppointmentsRequestBuilder } from './appointments/';
import { CalendarViewRequestBuilderNavigationMetadata, CalendarViewRequestBuilderRequestsMetadata, CalendarViewRequestBuilderUriTemplate, type CalendarViewRequestBuilder } from './calendarView/';
import { CustomersRequestBuilderNavigationMetadata, CustomersRequestBuilderRequestsMetadata, CustomersRequestBuilderUriTemplate, type CustomersRequestBuilder } from './customers/';
import { CustomQuestionsRequestBuilderNavigationMetadata, CustomQuestionsRequestBuilderRequestsMetadata, CustomQuestionsRequestBuilderUriTemplate, type CustomQuestionsRequestBuilder } from './customQuestions/';
import { GetStaffAvailabilityRequestBuilderRequestsMetadata, GetStaffAvailabilityRequestBuilderUriTemplate, type GetStaffAvailabilityRequestBuilder } from './getStaffAvailability/';
import { PublishRequestBuilderRequestsMetadata, PublishRequestBuilderUriTemplate, type PublishRequestBuilder } from './publish/';
import { ServicesRequestBuilderNavigationMetadata, ServicesRequestBuilderRequestsMetadata, ServicesRequestBuilderUriTemplate, type ServicesRequestBuilder } from './services/';
import { StaffMembersRequestBuilderNavigationMetadata, StaffMembersRequestBuilderRequestsMetadata, StaffMembersRequestBuilderUriTemplate, type StaffMembersRequestBuilder } from './staffMembers/';
import { type UnpublishRequestBuilder, UnpublishRequestBuilderRequestsMetadata, UnpublishRequestBuilderUriTemplate } from './unpublish/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the bookingBusinesses property of the microsoft.graph.solutionsRoot entity.
 */
export interface BookingBusinessItemRequestBuilder extends BaseRequestBuilder<BookingBusinessItemRequestBuilder> {
    /**
     * Provides operations to manage the appointments property of the microsoft.graph.bookingBusiness entity.
     */
    get appointments(): AppointmentsRequestBuilder;
    /**
     * Provides operations to manage the calendarView property of the microsoft.graph.bookingBusiness entity.
     */
    get calendarView(): CalendarViewRequestBuilder;
    /**
     * Provides operations to manage the customers property of the microsoft.graph.bookingBusiness entity.
     */
    get customers(): CustomersRequestBuilder;
    /**
     * Provides operations to manage the customQuestions property of the microsoft.graph.bookingBusiness entity.
     */
    get customQuestions(): CustomQuestionsRequestBuilder;
    /**
     * Provides operations to call the getStaffAvailability method.
     */
    get getStaffAvailability(): GetStaffAvailabilityRequestBuilder;
    /**
     * Provides operations to call the publish method.
     */
    get publish(): PublishRequestBuilder;
    /**
     * Provides operations to manage the services property of the microsoft.graph.bookingBusiness entity.
     */
    get services(): ServicesRequestBuilder;
    /**
     * Provides operations to manage the staffMembers property of the microsoft.graph.bookingBusiness entity.
     */
    get staffMembers(): StaffMembersRequestBuilder;
    /**
     * Provides operations to call the unpublish method.
     */
    get unpublish(): UnpublishRequestBuilder;
    /**
     * Delete navigation property bookingBusinesses for solutions
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get bookingBusinesses from solutions
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of BookingBusiness
     */
     get(requestConfiguration?: RequestConfiguration<BookingBusinessItemRequestBuilderGetQueryParameters> | undefined) : Promise<BookingBusiness | undefined>;
    /**
     * Update the navigation property bookingBusinesses in solutions
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of BookingBusiness
     */
     patch(body: BookingBusiness, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<BookingBusiness | undefined>;
    /**
     * Delete navigation property bookingBusinesses for solutions
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Get bookingBusinesses from solutions
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<BookingBusinessItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property bookingBusinesses in solutions
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: BookingBusiness, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get bookingBusinesses from solutions
 */
export interface BookingBusinessItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const BookingBusinessItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const BookingBusinessItemRequestBuilderNavigationMetadata: Record<Exclude<keyof BookingBusinessItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    appointments: {
        uriTemplate: AppointmentsRequestBuilderUriTemplate,
        requestsMetadata: AppointmentsRequestBuilderRequestsMetadata,
        navigationMetadata: AppointmentsRequestBuilderNavigationMetadata,
    },
    calendarView: {
        uriTemplate: CalendarViewRequestBuilderUriTemplate,
        requestsMetadata: CalendarViewRequestBuilderRequestsMetadata,
        navigationMetadata: CalendarViewRequestBuilderNavigationMetadata,
    },
    customers: {
        uriTemplate: CustomersRequestBuilderUriTemplate,
        requestsMetadata: CustomersRequestBuilderRequestsMetadata,
        navigationMetadata: CustomersRequestBuilderNavigationMetadata,
    },
    customQuestions: {
        uriTemplate: CustomQuestionsRequestBuilderUriTemplate,
        requestsMetadata: CustomQuestionsRequestBuilderRequestsMetadata,
        navigationMetadata: CustomQuestionsRequestBuilderNavigationMetadata,
    },
    getStaffAvailability: {
        uriTemplate: GetStaffAvailabilityRequestBuilderUriTemplate,
        requestsMetadata: GetStaffAvailabilityRequestBuilderRequestsMetadata,
    },
    publish: {
        uriTemplate: PublishRequestBuilderUriTemplate,
        requestsMetadata: PublishRequestBuilderRequestsMetadata,
    },
    services: {
        uriTemplate: ServicesRequestBuilderUriTemplate,
        requestsMetadata: ServicesRequestBuilderRequestsMetadata,
        navigationMetadata: ServicesRequestBuilderNavigationMetadata,
    },
    staffMembers: {
        uriTemplate: StaffMembersRequestBuilderUriTemplate,
        requestsMetadata: StaffMembersRequestBuilderRequestsMetadata,
        navigationMetadata: StaffMembersRequestBuilderNavigationMetadata,
    },
    unpublish: {
        uriTemplate: UnpublishRequestBuilderUriTemplate,
        requestsMetadata: UnpublishRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const BookingBusinessItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createBookingBusinessFromDiscriminatorValue,
        queryParametersMapper: BookingBusinessItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createBookingBusinessFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeBookingBusiness,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const BookingBusinessItemRequestBuilderUriTemplate = "{+baseurl}/solutions/bookingBusinesses/{bookingBusiness%2Did}{?%24expand,%24select}";
/* tslint:enable */
/* eslint-enable */
