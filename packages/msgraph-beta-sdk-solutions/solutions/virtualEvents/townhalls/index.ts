/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createVirtualEventTownhallCollectionResponseFromDiscriminatorValue, createVirtualEventTownhallFromDiscriminatorValue, serializeVirtualEventTownhall, type VirtualEventTownhall, type VirtualEventTownhallCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { GetByUserIdAndRoleWithUserIdWithRoleRequestBuilderRequestsMetadata, type GetByUserIdAndRoleWithUserIdWithRoleRequestBuilder } from './getByUserIdAndRoleWithUserIdWithRole/';
import { GetByUserRoleWithRoleRequestBuilderRequestsMetadata, type GetByUserRoleWithRoleRequestBuilder } from './getByUserRoleWithRole/';
import { type VirtualEventTownhallItemRequestBuilder, VirtualEventTownhallItemRequestBuilderNavigationMetadata, VirtualEventTownhallItemRequestBuilderRequestsMetadata } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the townhalls property of the microsoft.graph.virtualEventsRoot entity.
 */
export interface TownhallsRequestBuilder extends BaseRequestBuilder<TownhallsRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the townhalls property of the microsoft.graph.virtualEventsRoot entity.
     * @param virtualEventTownhallId The unique identifier of virtualEventTownhall
     * @returns {VirtualEventTownhallItemRequestBuilder}
     */
     byVirtualEventTownhallId(virtualEventTownhallId: string) : VirtualEventTownhallItemRequestBuilder;
    /**
     * Get townhalls from solutions
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<VirtualEventTownhallCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<TownhallsRequestBuilderGetQueryParameters> | undefined) : Promise<VirtualEventTownhallCollectionResponse | undefined>;
    /**
     * Provides operations to call the getByUserIdAndRole method.
     * @param role Usage: role='{role}'
     * @param userId Usage: userId='{userId}'
     * @returns {GetByUserIdAndRoleWithUserIdWithRoleRequestBuilder}
     */
     getByUserIdAndRoleWithUserIdWithRole(role: string | undefined, userId: string | undefined) : GetByUserIdAndRoleWithUserIdWithRoleRequestBuilder;
    /**
     * Provides operations to call the getByUserRole method.
     * @param role Usage: role='{role}'
     * @returns {GetByUserRoleWithRoleRequestBuilder}
     */
     getByUserRoleWithRole(role: string | undefined) : GetByUserRoleWithRoleRequestBuilder;
    /**
     * Create new navigation property to townhalls for solutions
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<VirtualEventTownhall>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: VirtualEventTownhall, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<VirtualEventTownhall | undefined>;
    /**
     * Get townhalls from solutions
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<TownhallsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create new navigation property to townhalls for solutions
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: VirtualEventTownhall, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get townhalls from solutions
 */
export interface TownhallsRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Uri template for the request builder.
 */
export const TownhallsRequestBuilderUriTemplate = "{+baseurl}/solutions/virtualEvents/townhalls{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Provides operations to manage the townhalls property of the microsoft.graph.virtualEventsRoot entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    Presenters: "presenters",
    Sessions: "sessions",
} as const;
/**
 * Provides operations to manage the townhalls property of the microsoft.graph.virtualEventsRoot entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    CreatedBy: "createdBy",
    CreatedByDesc: "createdBy desc",
    Description: "description",
    DescriptionDesc: "description desc",
    DisplayName: "displayName",
    DisplayNameDesc: "displayName desc",
    EndDateTime: "endDateTime",
    EndDateTimeDesc: "endDateTime desc",
    StartDateTime: "startDateTime",
    StartDateTimeDesc: "startDateTime desc",
    Status: "status",
    StatusDesc: "status desc",
    Audience: "audience",
    AudienceDesc: "audience desc",
    CoOrganizers: "coOrganizers",
    CoOrganizersDesc: "coOrganizers desc",
    InvitedAttendees: "invitedAttendees",
    InvitedAttendeesDesc: "invitedAttendees desc",
    IsInviteOnly: "isInviteOnly",
    IsInviteOnlyDesc: "isInviteOnly desc",
} as const;
/**
 * Provides operations to manage the townhalls property of the microsoft.graph.virtualEventsRoot entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    CreatedBy: "createdBy",
    Description: "description",
    DisplayName: "displayName",
    EndDateTime: "endDateTime",
    StartDateTime: "startDateTime",
    Status: "status",
    Audience: "audience",
    CoOrganizers: "coOrganizers",
    InvitedAttendees: "invitedAttendees",
    IsInviteOnly: "isInviteOnly",
    Presenters: "presenters",
    Sessions: "sessions",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const TownhallsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const TownhallsRequestBuilderNavigationMetadata: Record<Exclude<keyof TownhallsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byVirtualEventTownhallId: {
        requestsMetadata: VirtualEventTownhallItemRequestBuilderRequestsMetadata,
        navigationMetadata: VirtualEventTownhallItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["virtualEventTownhall%2Did"],
    },
    getByUserIdAndRoleWithUserIdWithRole: {
        requestsMetadata: GetByUserIdAndRoleWithUserIdWithRoleRequestBuilderRequestsMetadata,
    },
    getByUserRoleWithRole: {
        requestsMetadata: GetByUserRoleWithRoleRequestBuilderRequestsMetadata,
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const TownhallsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: TownhallsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createVirtualEventTownhallCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: TownhallsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: TownhallsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createVirtualEventTownhallFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeVirtualEventTownhall,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
