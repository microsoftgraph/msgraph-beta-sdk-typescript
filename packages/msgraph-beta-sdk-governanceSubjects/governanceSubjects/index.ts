/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createGovernanceSubjectCollectionResponseFromDiscriminatorValue, createGovernanceSubjectFromDiscriminatorValue, serializeGovernanceSubject, type GovernanceSubject, type GovernanceSubjectCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { GovernanceSubjectItemRequestBuilderRequestsMetadata, type GovernanceSubjectItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the collection of governanceSubject entities.
 */
export interface GovernanceSubjectsRequestBuilder extends BaseRequestBuilder<GovernanceSubjectsRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the collection of governanceSubject entities.
     * @param governanceSubjectId The unique identifier of governanceSubject
     * @returns {GovernanceSubjectItemRequestBuilder}
     */
     byGovernanceSubjectId(governanceSubjectId: string) : GovernanceSubjectItemRequestBuilder;
    /**
     * Get entities from governanceSubjects
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<GovernanceSubjectCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<GovernanceSubjectsRequestBuilderGetQueryParameters> | undefined) : Promise<GovernanceSubjectCollectionResponse | undefined>;
    /**
     * Add new entity to governanceSubjects
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<GovernanceSubject>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: GovernanceSubject, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<GovernanceSubject | undefined>;
    /**
     * Get entities from governanceSubjects
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<GovernanceSubjectsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Add new entity to governanceSubjects
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: GovernanceSubject, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get entities from governanceSubjects
 */
export interface GovernanceSubjectsRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Uri template for the request builder.
 */
export const GovernanceSubjectsRequestBuilderUriTemplate = "{+baseurl}/governanceSubjects{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Provides operations to manage the collection of governanceSubject entities.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
} as const;
/**
 * Provides operations to manage the collection of governanceSubject entities.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    DisplayName: "displayName",
    DisplayNameDesc: "displayName desc",
    Email: "email",
    EmailDesc: "email desc",
    PrincipalName: "principalName",
    PrincipalNameDesc: "principalName desc",
    Type: "type",
    TypeDesc: "type desc",
} as const;
/**
 * Provides operations to manage the collection of governanceSubject entities.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    DisplayName: "displayName",
    Email: "email",
    PrincipalName: "principalName",
    Type: "type",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const GovernanceSubjectsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const GovernanceSubjectsRequestBuilderNavigationMetadata: Record<Exclude<keyof GovernanceSubjectsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byGovernanceSubjectId: {
        requestsMetadata: GovernanceSubjectItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["governanceSubject%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const GovernanceSubjectsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: GovernanceSubjectsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createGovernanceSubjectCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: GovernanceSubjectsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: GovernanceSubjectsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createGovernanceSubjectFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeGovernanceSubject,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
