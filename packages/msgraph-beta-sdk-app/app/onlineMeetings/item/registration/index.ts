/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createMeetingRegistrationFromDiscriminatorValue, serializeMeetingRegistration, type MeetingRegistration } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CustomQuestionsRequestBuilderNavigationMetadata, CustomQuestionsRequestBuilderRequestsMetadata, type CustomQuestionsRequestBuilder } from './customQuestions/';
import { RegistrantsRequestBuilderNavigationMetadata, RegistrantsRequestBuilderRequestsMetadata, type RegistrantsRequestBuilder } from './registrants/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the registration property of the microsoft.graph.onlineMeeting entity.
 */
export interface RegistrationRequestBuilder extends BaseRequestBuilder<RegistrationRequestBuilder> {
    /**
     * Provides operations to manage the customQuestions property of the microsoft.graph.meetingRegistration entity.
     */
    get customQuestions(): CustomQuestionsRequestBuilder;
    /**
     * Provides operations to manage the registrants property of the microsoft.graph.meetingRegistrationBase entity.
     */
    get registrants(): RegistrantsRequestBuilder;
    /**
     * Disable and delete the externalMeetingRegistration of an onlineMeeting.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/externalmeetingregistration-delete?view=graph-rest-1.0|Find more info here}
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get the meetingRegistration details associated with an onlineMeeting on behalf of the organizer.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<MeetingRegistration>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/meetingregistration-get?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<RegistrationRequestBuilderGetQueryParameters> | undefined) : Promise<MeetingRegistration | undefined>;
    /**
     * Update the details of a meetingRegistration object assciated with an onlineMeeting on behalf of the organizer.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<MeetingRegistration>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/meetingregistration-update?view=graph-rest-1.0|Find more info here}
     */
     patch(body: MeetingRegistration, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<MeetingRegistration | undefined>;
    /**
     * Disable and delete the externalMeetingRegistration of an onlineMeeting.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Get the meetingRegistration details associated with an onlineMeeting on behalf of the organizer.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<RegistrationRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the details of a meetingRegistration object assciated with an onlineMeeting on behalf of the organizer.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: MeetingRegistration, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get the meetingRegistration details associated with an onlineMeeting on behalf of the organizer.
 */
export interface RegistrationRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const RegistrationRequestBuilderUriTemplate = "{+baseurl}/app/onlineMeetings/{onlineMeeting%2Did}/registration{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const RegistrationRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const RegistrationRequestBuilderNavigationMetadata: Record<Exclude<keyof RegistrationRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    customQuestions: {
        requestsMetadata: CustomQuestionsRequestBuilderRequestsMetadata,
        navigationMetadata: CustomQuestionsRequestBuilderNavigationMetadata,
    },
    registrants: {
        requestsMetadata: RegistrantsRequestBuilderRequestsMetadata,
        navigationMetadata: RegistrantsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const RegistrationRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: RegistrationRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        uriTemplate: RegistrationRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createMeetingRegistrationFromDiscriminatorValue,
        queryParametersMapper: RegistrationRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: RegistrationRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createMeetingRegistrationFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeMeetingRegistration,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
