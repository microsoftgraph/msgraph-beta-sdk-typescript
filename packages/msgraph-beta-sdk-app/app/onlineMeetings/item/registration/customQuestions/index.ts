/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createMeetingRegistrationQuestionCollectionResponseFromDiscriminatorValue, createMeetingRegistrationQuestionFromDiscriminatorValue, serializeMeetingRegistrationQuestion, type MeetingRegistrationQuestion, type MeetingRegistrationQuestionCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { MeetingRegistrationQuestionItemRequestBuilderRequestsMetadata, type MeetingRegistrationQuestionItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the customQuestions property of the microsoft.graph.meetingRegistration entity.
 */
export interface CustomQuestionsRequestBuilder extends BaseRequestBuilder<CustomQuestionsRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the customQuestions property of the microsoft.graph.meetingRegistration entity.
     * @param meetingRegistrationQuestionId The unique identifier of meetingRegistrationQuestion
     * @returns {MeetingRegistrationQuestionItemRequestBuilder}
     */
     byMeetingRegistrationQuestionId(meetingRegistrationQuestionId: string) : MeetingRegistrationQuestionItemRequestBuilder;
    /**
     * Get a custom registration question associated with a meetingRegistration object on behalf of the organizer.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<MeetingRegistrationQuestionCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/meetingregistration-list-customquestions?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<CustomQuestionsRequestBuilderGetQueryParameters> | undefined) : Promise<MeetingRegistrationQuestionCollectionResponse | undefined>;
    /**
     * Create a custom registration question associated with a meetingRegistration object on behalf of the organizer.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<MeetingRegistrationQuestion>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/meetingregistration-post-customquestions?view=graph-rest-1.0|Find more info here}
     */
     post(body: MeetingRegistrationQuestion, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<MeetingRegistrationQuestion | undefined>;
    /**
     * Get a custom registration question associated with a meetingRegistration object on behalf of the organizer.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<CustomQuestionsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create a custom registration question associated with a meetingRegistration object on behalf of the organizer.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: MeetingRegistrationQuestion, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get a custom registration question associated with a meetingRegistration object on behalf of the organizer.
 */
export interface CustomQuestionsRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Uri template for the request builder.
 */
export const CustomQuestionsRequestBuilderUriTemplate = "{+baseurl}/app/onlineMeetings/{onlineMeeting%2Did}/registration/customQuestions{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const CustomQuestionsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const CustomQuestionsRequestBuilderNavigationMetadata: Record<Exclude<keyof CustomQuestionsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byMeetingRegistrationQuestionId: {
        requestsMetadata: MeetingRegistrationQuestionItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["meetingRegistrationQuestion%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const CustomQuestionsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: CustomQuestionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createMeetingRegistrationQuestionCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: CustomQuestionsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: CustomQuestionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createMeetingRegistrationQuestionFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeMeetingRegistrationQuestion,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Provides operations to manage the customQuestions property of the microsoft.graph.meetingRegistration entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
} as const;
/**
 * Provides operations to manage the customQuestions property of the microsoft.graph.meetingRegistration entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    AnswerInputType: "answerInputType",
    AnswerInputTypeDesc: "answerInputType desc",
    AnswerOptions: "answerOptions",
    AnswerOptionsDesc: "answerOptions desc",
    DisplayName: "displayName",
    DisplayNameDesc: "displayName desc",
    IsRequired: "isRequired",
    IsRequiredDesc: "isRequired desc",
} as const;
/**
 * Provides operations to manage the customQuestions property of the microsoft.graph.meetingRegistration entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    AnswerInputType: "answerInputType",
    AnswerOptions: "answerOptions",
    DisplayName: "displayName",
    IsRequired: "isRequired",
} as const;
/* tslint:enable */
/* eslint-enable */
