/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createPrivilegedAccessFromDiscriminatorValue, serializePrivilegedAccess, type PrivilegedAccess } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { ResourcesRequestBuilderNavigationMetadata, ResourcesRequestBuilderRequestsMetadata, type ResourcesRequestBuilder } from './resources/';
import { RoleAssignmentRequestsRequestBuilderNavigationMetadata, RoleAssignmentRequestsRequestBuilderRequestsMetadata, type RoleAssignmentRequestsRequestBuilder } from './roleAssignmentRequests/';
import { RoleAssignmentsRequestBuilderNavigationMetadata, RoleAssignmentsRequestBuilderRequestsMetadata, type RoleAssignmentsRequestBuilder } from './roleAssignments/';
import { RoleDefinitionsRequestBuilderNavigationMetadata, RoleDefinitionsRequestBuilderRequestsMetadata, type RoleDefinitionsRequestBuilder } from './roleDefinitions/';
import { RoleSettingsRequestBuilderNavigationMetadata, RoleSettingsRequestBuilderRequestsMetadata, type RoleSettingsRequestBuilder } from './roleSettings/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the collection of privilegedAccess entities.
 */
export interface PrivilegedAccessItemRequestBuilder extends BaseRequestBuilder<PrivilegedAccessItemRequestBuilder> {
    /**
     * Provides operations to manage the resources property of the microsoft.graph.privilegedAccess entity.
     */
    get resources(): ResourcesRequestBuilder;
    /**
     * Provides operations to manage the roleAssignmentRequests property of the microsoft.graph.privilegedAccess entity.
     */
    get roleAssignmentRequests(): RoleAssignmentRequestsRequestBuilder;
    /**
     * Provides operations to manage the roleAssignments property of the microsoft.graph.privilegedAccess entity.
     */
    get roleAssignments(): RoleAssignmentsRequestBuilder;
    /**
     * Provides operations to manage the roleDefinitions property of the microsoft.graph.privilegedAccess entity.
     */
    get roleDefinitions(): RoleDefinitionsRequestBuilder;
    /**
     * Provides operations to manage the roleSettings property of the microsoft.graph.privilegedAccess entity.
     */
    get roleSettings(): RoleSettingsRequestBuilder;
    /**
     * Delete entity from privilegedAccess
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get entity from privilegedAccess by key
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<PrivilegedAccess>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<PrivilegedAccessItemRequestBuilderGetQueryParameters> | undefined) : Promise<PrivilegedAccess | undefined>;
    /**
     * Update entity in privilegedAccess
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<PrivilegedAccess>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: PrivilegedAccess, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<PrivilegedAccess | undefined>;
    /**
     * Delete entity from privilegedAccess
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Get entity from privilegedAccess by key
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<PrivilegedAccessItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update entity in privilegedAccess
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: PrivilegedAccess, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get entity from privilegedAccess by key
 */
export interface PrivilegedAccessItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const PrivilegedAccessItemRequestBuilderUriTemplate = "{+baseurl}/privilegedAccess/{privilegedAccess%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const PrivilegedAccessItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const PrivilegedAccessItemRequestBuilderNavigationMetadata: Record<Exclude<keyof PrivilegedAccessItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    resources: {
        requestsMetadata: ResourcesRequestBuilderRequestsMetadata,
        navigationMetadata: ResourcesRequestBuilderNavigationMetadata,
    },
    roleAssignmentRequests: {
        requestsMetadata: RoleAssignmentRequestsRequestBuilderRequestsMetadata,
        navigationMetadata: RoleAssignmentRequestsRequestBuilderNavigationMetadata,
    },
    roleAssignments: {
        requestsMetadata: RoleAssignmentsRequestBuilderRequestsMetadata,
        navigationMetadata: RoleAssignmentsRequestBuilderNavigationMetadata,
    },
    roleDefinitions: {
        requestsMetadata: RoleDefinitionsRequestBuilderRequestsMetadata,
        navigationMetadata: RoleDefinitionsRequestBuilderNavigationMetadata,
    },
    roleSettings: {
        requestsMetadata: RoleSettingsRequestBuilderRequestsMetadata,
        navigationMetadata: RoleSettingsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const PrivilegedAccessItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: PrivilegedAccessItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: PrivilegedAccessItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createPrivilegedAccessFromDiscriminatorValue,
        queryParametersMapper: PrivilegedAccessItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: PrivilegedAccessItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createPrivilegedAccessFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializePrivilegedAccess,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
