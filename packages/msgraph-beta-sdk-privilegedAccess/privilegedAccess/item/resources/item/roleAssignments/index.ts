/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createGovernanceRoleAssignmentCollectionResponseFromDiscriminatorValue, createGovernanceRoleAssignmentFromDiscriminatorValue, serializeGovernanceRoleAssignment, type GovernanceRoleAssignment, type GovernanceRoleAssignmentCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { ExportRequestBuilderRequestsMetadata, type ExportRequestBuilder } from './exportEscaped/';
import { GovernanceRoleAssignmentItemRequestBuilderNavigationMetadata, GovernanceRoleAssignmentItemRequestBuilderRequestsMetadata, type GovernanceRoleAssignmentItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the roleAssignments property of the microsoft.graph.governanceResource entity.
 */
export interface RoleAssignmentsRequestBuilder extends BaseRequestBuilder<RoleAssignmentsRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to call the export method.
     */
    get exportEscaped(): ExportRequestBuilder;
    /**
     * Provides operations to manage the roleAssignments property of the microsoft.graph.governanceResource entity.
     * @param governanceRoleAssignmentId The unique identifier of governanceRoleAssignment
     * @returns {GovernanceRoleAssignmentItemRequestBuilder}
     */
     byGovernanceRoleAssignmentId(governanceRoleAssignmentId: string) : GovernanceRoleAssignmentItemRequestBuilder;
    /**
     * The collection of role assignments for the resource.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<GovernanceRoleAssignmentCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<RoleAssignmentsRequestBuilderGetQueryParameters> | undefined) : Promise<GovernanceRoleAssignmentCollectionResponse | undefined>;
    /**
     * Create new navigation property to roleAssignments for privilegedAccess
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<GovernanceRoleAssignment>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: GovernanceRoleAssignment, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<GovernanceRoleAssignment | undefined>;
    /**
     * The collection of role assignments for the resource.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<RoleAssignmentsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create new navigation property to roleAssignments for privilegedAccess
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: GovernanceRoleAssignment, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * The collection of role assignments for the resource.
 */
export interface RoleAssignmentsRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Uri template for the request builder.
 */
export const RoleAssignmentsRequestBuilderUriTemplate = "{+baseurl}/privilegedAccess/{privilegedAccess%2Did}/resources/{governanceResource%2Did}/roleAssignments{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Provides operations to manage the roleAssignments property of the microsoft.graph.governanceResource entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    LinkedEligibleRoleAssignment: "linkedEligibleRoleAssignment",
    Resource: "resource",
    RoleDefinition: "roleDefinition",
    Subject: "subject",
} as const;
/**
 * Provides operations to manage the roleAssignments property of the microsoft.graph.governanceResource entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    AssignmentState: "assignmentState",
    AssignmentStateDesc: "assignmentState desc",
    EndDateTime: "endDateTime",
    EndDateTimeDesc: "endDateTime desc",
    ExternalId: "externalId",
    ExternalIdDesc: "externalId desc",
    LinkedEligibleRoleAssignmentId: "linkedEligibleRoleAssignmentId",
    LinkedEligibleRoleAssignmentIdDesc: "linkedEligibleRoleAssignmentId desc",
    MemberType: "memberType",
    MemberTypeDesc: "memberType desc",
    ResourceId: "resourceId",
    ResourceIdDesc: "resourceId desc",
    RoleDefinitionId: "roleDefinitionId",
    RoleDefinitionIdDesc: "roleDefinitionId desc",
    StartDateTime: "startDateTime",
    StartDateTimeDesc: "startDateTime desc",
    Status: "status",
    StatusDesc: "status desc",
    SubjectId: "subjectId",
    SubjectIdDesc: "subjectId desc",
} as const;
/**
 * Provides operations to manage the roleAssignments property of the microsoft.graph.governanceResource entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    AssignmentState: "assignmentState",
    EndDateTime: "endDateTime",
    ExternalId: "externalId",
    LinkedEligibleRoleAssignmentId: "linkedEligibleRoleAssignmentId",
    MemberType: "memberType",
    ResourceId: "resourceId",
    RoleDefinitionId: "roleDefinitionId",
    StartDateTime: "startDateTime",
    Status: "status",
    SubjectId: "subjectId",
    LinkedEligibleRoleAssignment: "linkedEligibleRoleAssignment",
    Resource: "resource",
    RoleDefinition: "roleDefinition",
    Subject: "subject",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const RoleAssignmentsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const RoleAssignmentsRequestBuilderNavigationMetadata: Record<Exclude<keyof RoleAssignmentsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byGovernanceRoleAssignmentId: {
        requestsMetadata: GovernanceRoleAssignmentItemRequestBuilderRequestsMetadata,
        navigationMetadata: GovernanceRoleAssignmentItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["governanceRoleAssignment%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
    exportEscaped: {
        requestsMetadata: ExportRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const RoleAssignmentsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: RoleAssignmentsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createGovernanceRoleAssignmentCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: RoleAssignmentsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: RoleAssignmentsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createGovernanceRoleAssignmentFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeGovernanceRoleAssignment,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
