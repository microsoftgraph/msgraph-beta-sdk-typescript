/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createTeamFromDiscriminatorValue, serializeTeam, type Team } from '@microsoft/msgraph-beta-sdk/models/';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
// @ts-ignore
import { AllChannelsRequestBuilderNavigationMetadata, AllChannelsRequestBuilderRequestsMetadata, type AllChannelsRequestBuilder } from './allChannels/';
// @ts-ignore
import { ArchiveRequestBuilderRequestsMetadata, type ArchiveRequestBuilder } from './archive/';
// @ts-ignore
import { ChannelsRequestBuilderNavigationMetadata, ChannelsRequestBuilderRequestsMetadata, type ChannelsRequestBuilder } from './channels/';
// @ts-ignore
import { CloneRequestBuilderRequestsMetadata, type CloneRequestBuilder } from './clone/';
// @ts-ignore
import { CompleteMigrationRequestBuilderRequestsMetadata, type CompleteMigrationRequestBuilder } from './completeMigration/';
// @ts-ignore
import { GroupRequestBuilderNavigationMetadata, GroupRequestBuilderRequestsMetadata, type GroupRequestBuilder } from './group/';
// @ts-ignore
import { IncomingChannelsRequestBuilderNavigationMetadata, IncomingChannelsRequestBuilderRequestsMetadata, type IncomingChannelsRequestBuilder } from './incomingChannels/';
// @ts-ignore
import { InstalledAppsRequestBuilderNavigationMetadata, InstalledAppsRequestBuilderRequestsMetadata, type InstalledAppsRequestBuilder } from './installedApps/';
// @ts-ignore
import { MembersRequestBuilderNavigationMetadata, MembersRequestBuilderRequestsMetadata, type MembersRequestBuilder } from './members/';
// @ts-ignore
import { OperationsRequestBuilderNavigationMetadata, OperationsRequestBuilderRequestsMetadata, type OperationsRequestBuilder } from './operations/';
// @ts-ignore
import { OwnersRequestBuilderNavigationMetadata, OwnersRequestBuilderRequestsMetadata, type OwnersRequestBuilder } from './owners/';
// @ts-ignore
import { PermissionGrantsRequestBuilderNavigationMetadata, PermissionGrantsRequestBuilderRequestsMetadata, type PermissionGrantsRequestBuilder } from './permissionGrants/';
// @ts-ignore
import { PhotoRequestBuilderNavigationMetadata, PhotoRequestBuilderRequestsMetadata, type PhotoRequestBuilder } from './photo/';
// @ts-ignore
import { PrimaryChannelRequestBuilderNavigationMetadata, PrimaryChannelRequestBuilderRequestsMetadata, type PrimaryChannelRequestBuilder } from './primaryChannel/';
// @ts-ignore
import { ScheduleRequestBuilderNavigationMetadata, ScheduleRequestBuilderRequestsMetadata, type ScheduleRequestBuilder } from './schedule/';
// @ts-ignore
import { SendActivityNotificationRequestBuilderRequestsMetadata, type SendActivityNotificationRequestBuilder } from './sendActivityNotification/';
// @ts-ignore
import { TagsRequestBuilderNavigationMetadata, TagsRequestBuilderRequestsMetadata, type TagsRequestBuilder } from './tags/';
// @ts-ignore
import { TemplateRequestBuilderRequestsMetadata, type TemplateRequestBuilder } from './template/';
// @ts-ignore
import { TemplateDefinitionRequestBuilderRequestsMetadata, type TemplateDefinitionRequestBuilder } from './templateDefinition/';
// @ts-ignore
import { type UnarchiveRequestBuilder, UnarchiveRequestBuilderRequestsMetadata } from './unarchive/';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the team property of the microsoft.graph.group entity.
 */
export interface TeamRequestBuilder extends BaseRequestBuilder<TeamRequestBuilder> {
    /**
     * Provides operations to manage the allChannels property of the microsoft.graph.team entity.
     */
    get allChannels(): AllChannelsRequestBuilder;
    /**
     * Provides operations to call the archive method.
     */
    get archive(): ArchiveRequestBuilder;
    /**
     * Provides operations to manage the channels property of the microsoft.graph.team entity.
     */
    get channels(): ChannelsRequestBuilder;
    /**
     * Provides operations to call the clone method.
     */
    get clone(): CloneRequestBuilder;
    /**
     * Provides operations to call the completeMigration method.
     */
    get completeMigration(): CompleteMigrationRequestBuilder;
    /**
     * Provides operations to manage the group property of the microsoft.graph.team entity.
     */
    get group(): GroupRequestBuilder;
    /**
     * Provides operations to manage the incomingChannels property of the microsoft.graph.team entity.
     */
    get incomingChannels(): IncomingChannelsRequestBuilder;
    /**
     * Provides operations to manage the installedApps property of the microsoft.graph.team entity.
     */
    get installedApps(): InstalledAppsRequestBuilder;
    /**
     * Provides operations to manage the members property of the microsoft.graph.team entity.
     */
    get members(): MembersRequestBuilder;
    /**
     * Provides operations to manage the operations property of the microsoft.graph.team entity.
     */
    get operations(): OperationsRequestBuilder;
    /**
     * Provides operations to manage the owners property of the microsoft.graph.team entity.
     */
    get owners(): OwnersRequestBuilder;
    /**
     * Provides operations to manage the permissionGrants property of the microsoft.graph.team entity.
     */
    get permissionGrants(): PermissionGrantsRequestBuilder;
    /**
     * Provides operations to manage the photo property of the microsoft.graph.team entity.
     */
    get photo(): PhotoRequestBuilder;
    /**
     * Provides operations to manage the primaryChannel property of the microsoft.graph.team entity.
     */
    get primaryChannel(): PrimaryChannelRequestBuilder;
    /**
     * Provides operations to manage the schedule property of the microsoft.graph.team entity.
     */
    get schedule(): ScheduleRequestBuilder;
    /**
     * Provides operations to call the sendActivityNotification method.
     */
    get sendActivityNotification(): SendActivityNotificationRequestBuilder;
    /**
     * Provides operations to manage the tags property of the microsoft.graph.team entity.
     */
    get tags(): TagsRequestBuilder;
    /**
     * Provides operations to manage the template property of the microsoft.graph.team entity.
     */
    get template(): TemplateRequestBuilder;
    /**
     * Provides operations to manage the templateDefinition property of the microsoft.graph.team entity.
     */
    get templateDefinition(): TemplateDefinitionRequestBuilder;
    /**
     * Provides operations to call the unarchive method.
     */
    get unarchive(): UnarchiveRequestBuilder;
    /**
     * Delete navigation property team for groups
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * The team associated with this group.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Team>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<TeamRequestBuilderGetQueryParameters> | undefined) : Promise<Team | undefined>;
    /**
     * Create a new team from a group. In order to create a team, the group must have a least one owner. If the creation of the team call is delayed, you can retry the call up to three times before you have to wait for 15 minutes due to a propagation delay. If the group was created less than 15 minutes ago, the call might fail with a 404 error code due to replication delays. If the group was created less than 15 minutes ago, it's possible for a call to create a team to fail with a 404 error code, due to ongoing replication delays.The recommended pattern is to retry the Create team call three times, with a 10 second delay between calls.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Team>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/team-put-teams?view=graph-rest-beta|Find more info here}
     */
     put(body: Team, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Team | undefined>;
    /**
     * Delete navigation property team for groups
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * The team associated with this group.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<TeamRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create a new team from a group. In order to create a team, the group must have a least one owner. If the creation of the team call is delayed, you can retry the call up to three times before you have to wait for 15 minutes due to a propagation delay. If the group was created less than 15 minutes ago, the call might fail with a 404 error code due to replication delays. If the group was created less than 15 minutes ago, it's possible for a call to create a team to fail with a 404 error code, due to ongoing replication delays.The recommended pattern is to retry the Create team call three times, with a 10 second delay between calls.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: Team, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * The team associated with this group.
 */
export interface TeamRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const TeamRequestBuilderUriTemplate = "{+baseurl}/groups/{group%2Did}/team{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const TeamRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const TeamRequestBuilderNavigationMetadata: Record<Exclude<keyof TeamRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    allChannels: {
        requestsMetadata: AllChannelsRequestBuilderRequestsMetadata,
        navigationMetadata: AllChannelsRequestBuilderNavigationMetadata,
    },
    archive: {
        requestsMetadata: ArchiveRequestBuilderRequestsMetadata,
    },
    channels: {
        requestsMetadata: ChannelsRequestBuilderRequestsMetadata,
        navigationMetadata: ChannelsRequestBuilderNavigationMetadata,
    },
    clone: {
        requestsMetadata: CloneRequestBuilderRequestsMetadata,
    },
    completeMigration: {
        requestsMetadata: CompleteMigrationRequestBuilderRequestsMetadata,
    },
    group: {
        requestsMetadata: GroupRequestBuilderRequestsMetadata,
        navigationMetadata: GroupRequestBuilderNavigationMetadata,
    },
    incomingChannels: {
        requestsMetadata: IncomingChannelsRequestBuilderRequestsMetadata,
        navigationMetadata: IncomingChannelsRequestBuilderNavigationMetadata,
    },
    installedApps: {
        requestsMetadata: InstalledAppsRequestBuilderRequestsMetadata,
        navigationMetadata: InstalledAppsRequestBuilderNavigationMetadata,
    },
    members: {
        requestsMetadata: MembersRequestBuilderRequestsMetadata,
        navigationMetadata: MembersRequestBuilderNavigationMetadata,
    },
    operations: {
        requestsMetadata: OperationsRequestBuilderRequestsMetadata,
        navigationMetadata: OperationsRequestBuilderNavigationMetadata,
    },
    owners: {
        requestsMetadata: OwnersRequestBuilderRequestsMetadata,
        navigationMetadata: OwnersRequestBuilderNavigationMetadata,
    },
    permissionGrants: {
        requestsMetadata: PermissionGrantsRequestBuilderRequestsMetadata,
        navigationMetadata: PermissionGrantsRequestBuilderNavigationMetadata,
    },
    photo: {
        requestsMetadata: PhotoRequestBuilderRequestsMetadata,
        navigationMetadata: PhotoRequestBuilderNavigationMetadata,
    },
    primaryChannel: {
        requestsMetadata: PrimaryChannelRequestBuilderRequestsMetadata,
        navigationMetadata: PrimaryChannelRequestBuilderNavigationMetadata,
    },
    schedule: {
        requestsMetadata: ScheduleRequestBuilderRequestsMetadata,
        navigationMetadata: ScheduleRequestBuilderNavigationMetadata,
    },
    sendActivityNotification: {
        requestsMetadata: SendActivityNotificationRequestBuilderRequestsMetadata,
    },
    tags: {
        requestsMetadata: TagsRequestBuilderRequestsMetadata,
        navigationMetadata: TagsRequestBuilderNavigationMetadata,
    },
    template: {
        requestsMetadata: TemplateRequestBuilderRequestsMetadata,
    },
    templateDefinition: {
        requestsMetadata: TemplateDefinitionRequestBuilderRequestsMetadata,
    },
    unarchive: {
        requestsMetadata: UnarchiveRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const TeamRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: TeamRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: TeamRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createTeamFromDiscriminatorValue,
        queryParametersMapper: TeamRequestBuilderGetQueryParametersMapper,
    },
    put: {
        uriTemplate: TeamRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createTeamFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeTeam,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
