/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createPlannerPlanFromDiscriminatorValue, serializePlannerPlan, type PlannerPlan } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { ArchiveRequestBuilderRequestsMetadata, ArchiveRequestBuilderUriTemplate, type ArchiveRequestBuilder } from './archive/';
import { BucketsRequestBuilderNavigationMetadata, BucketsRequestBuilderRequestsMetadata, BucketsRequestBuilderUriTemplate, type BucketsRequestBuilder } from './buckets/';
import { DetailsRequestBuilderRequestsMetadata, DetailsRequestBuilderUriTemplate, type DetailsRequestBuilder } from './details/';
import { MoveToContainerRequestBuilderRequestsMetadata, MoveToContainerRequestBuilderUriTemplate, type MoveToContainerRequestBuilder } from './moveToContainer/';
import { TasksRequestBuilderNavigationMetadata, TasksRequestBuilderRequestsMetadata, TasksRequestBuilderUriTemplate, type TasksRequestBuilder } from './tasks/';
import { type UnarchiveRequestBuilder, UnarchiveRequestBuilderRequestsMetadata, UnarchiveRequestBuilderUriTemplate } from './unarchive/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the plans property of the microsoft.graph.plannerGroup entity.
 */
export interface PlannerPlanItemRequestBuilder extends BaseRequestBuilder<PlannerPlanItemRequestBuilder> {
    /**
     * Provides operations to call the archive method.
     */
    get archive(): ArchiveRequestBuilder;
    /**
     * Provides operations to manage the buckets property of the microsoft.graph.plannerPlan entity.
     */
    get buckets(): BucketsRequestBuilder;
    /**
     * Provides operations to manage the details property of the microsoft.graph.plannerPlan entity.
     */
    get details(): DetailsRequestBuilder;
    /**
     * Provides operations to call the moveToContainer method.
     */
    get moveToContainer(): MoveToContainerRequestBuilder;
    /**
     * Provides operations to manage the tasks property of the microsoft.graph.plannerPlan entity.
     */
    get tasks(): TasksRequestBuilder;
    /**
     * Provides operations to call the unarchive method.
     */
    get unarchive(): UnarchiveRequestBuilder;
    /**
     * Delete navigation property plans for groups
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Read-only. Nullable. Returns the plannerPlans owned by the group.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of PlannerPlan
     */
     get(requestConfiguration?: RequestConfiguration<PlannerPlanItemRequestBuilderGetQueryParameters> | undefined) : Promise<PlannerPlan | undefined>;
    /**
     * Update the navigation property plans in groups
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of PlannerPlan
     */
     patch(body: PlannerPlan, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<PlannerPlan | undefined>;
    /**
     * Delete navigation property plans for groups
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Read-only. Nullable. Returns the plannerPlans owned by the group.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<PlannerPlanItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property plans in groups
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: PlannerPlan, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Read-only. Nullable. Returns the plannerPlans owned by the group.
 */
export interface PlannerPlanItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const PlannerPlanItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const PlannerPlanItemRequestBuilderNavigationMetadata: Record<Exclude<keyof PlannerPlanItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    archive: {
        uriTemplate: ArchiveRequestBuilderUriTemplate,
        requestsMetadata: ArchiveRequestBuilderRequestsMetadata,
    },
    buckets: {
        uriTemplate: BucketsRequestBuilderUriTemplate,
        requestsMetadata: BucketsRequestBuilderRequestsMetadata,
        navigationMetadata: BucketsRequestBuilderNavigationMetadata,
    },
    details: {
        uriTemplate: DetailsRequestBuilderUriTemplate,
        requestsMetadata: DetailsRequestBuilderRequestsMetadata,
    },
    moveToContainer: {
        uriTemplate: MoveToContainerRequestBuilderUriTemplate,
        requestsMetadata: MoveToContainerRequestBuilderRequestsMetadata,
    },
    tasks: {
        uriTemplate: TasksRequestBuilderUriTemplate,
        requestsMetadata: TasksRequestBuilderRequestsMetadata,
        navigationMetadata: TasksRequestBuilderNavigationMetadata,
    },
    unarchive: {
        uriTemplate: UnarchiveRequestBuilderUriTemplate,
        requestsMetadata: UnarchiveRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const PlannerPlanItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createPlannerPlanFromDiscriminatorValue,
        queryParametersMapper: PlannerPlanItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createPlannerPlanFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializePlannerPlan,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const PlannerPlanItemRequestBuilderUriTemplate = "{+baseurl}/groups/{group%2Did}/planner/plans/{plannerPlan%2Did}{?%24expand,%24select}";
/* tslint:enable */
/* eslint-enable */
