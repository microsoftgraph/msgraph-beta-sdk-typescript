/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createPostFromDiscriminatorValue, serializePost, type Post } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { AttachmentsRequestBuilderNavigationMetadata, AttachmentsRequestBuilderRequestsMetadata, AttachmentsRequestBuilderUriTemplate, type AttachmentsRequestBuilder } from './attachments/';
import { ExtensionsRequestBuilderNavigationMetadata, ExtensionsRequestBuilderRequestsMetadata, ExtensionsRequestBuilderUriTemplate, type ExtensionsRequestBuilder } from './extensions/';
import { ForwardRequestBuilderRequestsMetadata, ForwardRequestBuilderUriTemplate, type ForwardRequestBuilder } from './forward/';
import { InReplyToRequestBuilderNavigationMetadata, InReplyToRequestBuilderRequestsMetadata, InReplyToRequestBuilderUriTemplate, type InReplyToRequestBuilder } from './inReplyTo/';
import { MentionsRequestBuilderNavigationMetadata, MentionsRequestBuilderRequestsMetadata, MentionsRequestBuilderUriTemplate, type MentionsRequestBuilder } from './mentions/';
import { ReplyRequestBuilderRequestsMetadata, ReplyRequestBuilderUriTemplate, type ReplyRequestBuilder } from './reply/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the posts property of the microsoft.graph.conversationThread entity.
 */
export interface PostItemRequestBuilder extends BaseRequestBuilder<PostItemRequestBuilder> {
    /**
     * Provides operations to manage the attachments property of the microsoft.graph.post entity.
     */
    get attachments(): AttachmentsRequestBuilder;
    /**
     * Provides operations to manage the extensions property of the microsoft.graph.post entity.
     */
    get extensions(): ExtensionsRequestBuilder;
    /**
     * Provides operations to call the forward method.
     */
    get forward(): ForwardRequestBuilder;
    /**
     * Provides operations to manage the inReplyTo property of the microsoft.graph.post entity.
     */
    get inReplyTo(): InReplyToRequestBuilder;
    /**
     * Provides operations to manage the mentions property of the microsoft.graph.post entity.
     */
    get mentions(): MentionsRequestBuilder;
    /**
     * Provides operations to call the reply method.
     */
    get reply(): ReplyRequestBuilder;
    /**
     * Get the properties and relationships of a post in a specified thread. You can specify both the parent conversation and the thread, or, you can specify the thread without referencing the parent conversation. Since the post resource supports extensions, you can also use the GET operation to get custom properties and extension data in a post instance.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of Post
     * @see {@link https://learn.microsoft.com/graph/api/post-get?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<PostItemRequestBuilderGetQueryParameters> | undefined) : Promise<Post | undefined>;
    /**
     * Update the navigation property posts in groups
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of Post
     */
     patch(body: Post, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Post | undefined>;
    /**
     * Get the properties and relationships of a post in a specified thread. You can specify both the parent conversation and the thread, or, you can specify the thread without referencing the parent conversation. Since the post resource supports extensions, you can also use the GET operation to get custom properties and extension data in a post instance.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<PostItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property posts in groups
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: Post, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get the properties and relationships of a post in a specified thread. You can specify both the parent conversation and the thread, or, you can specify the thread without referencing the parent conversation. Since the post resource supports extensions, you can also use the GET operation to get custom properties and extension data in a post instance.
 */
export interface PostItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const PostItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const PostItemRequestBuilderNavigationMetadata: Record<Exclude<keyof PostItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    attachments: {
        uriTemplate: AttachmentsRequestBuilderUriTemplate,
        requestsMetadata: AttachmentsRequestBuilderRequestsMetadata,
        navigationMetadata: AttachmentsRequestBuilderNavigationMetadata,
    },
    extensions: {
        uriTemplate: ExtensionsRequestBuilderUriTemplate,
        requestsMetadata: ExtensionsRequestBuilderRequestsMetadata,
        navigationMetadata: ExtensionsRequestBuilderNavigationMetadata,
    },
    forward: {
        uriTemplate: ForwardRequestBuilderUriTemplate,
        requestsMetadata: ForwardRequestBuilderRequestsMetadata,
    },
    inReplyTo: {
        uriTemplate: InReplyToRequestBuilderUriTemplate,
        requestsMetadata: InReplyToRequestBuilderRequestsMetadata,
        navigationMetadata: InReplyToRequestBuilderNavigationMetadata,
    },
    mentions: {
        uriTemplate: MentionsRequestBuilderUriTemplate,
        requestsMetadata: MentionsRequestBuilderRequestsMetadata,
        navigationMetadata: MentionsRequestBuilderNavigationMetadata,
    },
    reply: {
        uriTemplate: ReplyRequestBuilderUriTemplate,
        requestsMetadata: ReplyRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const PostItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createPostFromDiscriminatorValue,
        queryParametersMapper: PostItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createPostFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializePost,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const PostItemRequestBuilderUriTemplate = "{+baseurl}/groups/{group%2Did}/threads/{conversationThread%2Did}/posts/{post%2Did}{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
