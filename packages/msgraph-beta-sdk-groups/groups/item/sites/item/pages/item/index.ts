/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createBaseSitePageFromDiscriminatorValue, serializeBaseSitePage, type BaseSitePage } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CreatedByUserRequestBuilderNavigationMetadata, CreatedByUserRequestBuilderRequestsMetadata, type CreatedByUserRequestBuilder } from './createdByUser/';
import { GraphSitePageRequestBuilderNavigationMetadata, GraphSitePageRequestBuilderRequestsMetadata, type GraphSitePageRequestBuilder } from './graphSitePage/';
import { LastModifiedByUserRequestBuilderNavigationMetadata, LastModifiedByUserRequestBuilderRequestsMetadata, type LastModifiedByUserRequestBuilder } from './lastModifiedByUser/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the pages property of the microsoft.graph.site entity.
 */
export interface BaseSitePageItemRequestBuilder extends BaseRequestBuilder<BaseSitePageItemRequestBuilder> {
    /**
     * Provides operations to manage the createdByUser property of the microsoft.graph.baseItem entity.
     */
    get createdByUser(): CreatedByUserRequestBuilder;
    /**
     * Casts the previous resource to sitePage.
     */
    get graphSitePage(): GraphSitePageRequestBuilder;
    /**
     * Provides operations to manage the lastModifiedByUser property of the microsoft.graph.baseItem entity.
     */
    get lastModifiedByUser(): LastModifiedByUserRequestBuilder;
    /**
     * Delete navigation property pages for groups
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get the metadata for a [baseSitePage][] in the site pages [list][] in a [site][].
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<BaseSitePage>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/basesitepage-get?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<BaseSitePageItemRequestBuilderGetQueryParameters> | undefined) : Promise<BaseSitePage | undefined>;
    /**
     * Update the navigation property pages in groups
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<BaseSitePage>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: BaseSitePage, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<BaseSitePage | undefined>;
    /**
     * Delete navigation property pages for groups
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Get the metadata for a [baseSitePage][] in the site pages [list][] in a [site][].
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<BaseSitePageItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property pages in groups
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: BaseSitePage, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get the metadata for a [baseSitePage][] in the site pages [list][] in a [site][].
 */
export interface BaseSitePageItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
}
export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Uri template for the request builder.
 */
export const BaseSitePageItemRequestBuilderUriTemplate = "{+baseurl}/groups/{group%2Did}/sites/{site%2Did}/pages/{baseSitePage%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const BaseSitePageItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const BaseSitePageItemRequestBuilderNavigationMetadata: Record<Exclude<keyof BaseSitePageItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    createdByUser: {
        requestsMetadata: CreatedByUserRequestBuilderRequestsMetadata,
        navigationMetadata: CreatedByUserRequestBuilderNavigationMetadata,
    },
    graphSitePage: {
        requestsMetadata: GraphSitePageRequestBuilderRequestsMetadata,
        navigationMetadata: GraphSitePageRequestBuilderNavigationMetadata,
    },
    lastModifiedByUser: {
        requestsMetadata: LastModifiedByUserRequestBuilderRequestsMetadata,
        navigationMetadata: LastModifiedByUserRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const BaseSitePageItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: BaseSitePageItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: BaseSitePageItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createBaseSitePageFromDiscriminatorValue,
        queryParametersMapper: BaseSitePageItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: BaseSitePageItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createBaseSitePageFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeBaseSitePage,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Provides operations to manage the pages property of the microsoft.graph.site entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    CreatedByUser: "createdByUser",
    LastModifiedByUser: "lastModifiedByUser",
} as const;
/**
 * Provides operations to manage the pages property of the microsoft.graph.site entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    CreatedBy: "createdBy",
    CreatedDateTime: "createdDateTime",
    Description: "description",
    ETag: "eTag",
    LastModifiedBy: "lastModifiedBy",
    LastModifiedDateTime: "lastModifiedDateTime",
    Name: "name",
    ParentReference: "parentReference",
    WebUrl: "webUrl",
    PageLayout: "pageLayout",
    PublishingState: "publishingState",
    Title: "title",
    CreatedByUser: "createdByUser",
    LastModifiedByUser: "lastModifiedByUser",
} as const;
/* tslint:enable */
/* eslint-enable */
