/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createSiteFromDiscriminatorValue, type Site } from '@microsoft/msgraph-beta-sdk/models/index.js';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/index.js';
// @ts-ignore
import { AnalyticsRequestBuilderRequestsMetadata, type AnalyticsRequestBuilder } from './analytics/index.js';
// @ts-ignore
import { ColumnsRequestBuilderRequestsMetadata, type ColumnsRequestBuilder } from './columns/index.js';
// @ts-ignore
import { ContentModelsRequestBuilderRequestsMetadata, type ContentModelsRequestBuilder } from './contentModels/index.js';
// @ts-ignore
import { ContentTypesRequestBuilderRequestsMetadata, type ContentTypesRequestBuilder } from './contentTypes/index.js';
// @ts-ignore
import { CreatedByUserRequestBuilderRequestsMetadata, type CreatedByUserRequestBuilder } from './createdByUser/index.js';
// @ts-ignore
import { DocumentProcessingJobsRequestBuilderRequestsMetadata, type DocumentProcessingJobsRequestBuilder } from './documentProcessingJobs/index.js';
// @ts-ignore
import { DriveRequestBuilderRequestsMetadata, type DriveRequestBuilder } from './drive/index.js';
// @ts-ignore
import { DrivesRequestBuilderRequestsMetadata, type DrivesRequestBuilder } from './drives/index.js';
// @ts-ignore
import { ExternalColumnsRequestBuilderRequestsMetadata, type ExternalColumnsRequestBuilder } from './externalColumns/index.js';
// @ts-ignore
import { GetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithIntervalRequestBuilderRequestsMetadata, type GetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithIntervalRequestBuilder } from './getActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithInterval/index.js';
// @ts-ignore
import { GetApplicableContentTypesForListWithListIdRequestBuilderRequestsMetadata, type GetApplicableContentTypesForListWithListIdRequestBuilder } from './getApplicableContentTypesForListWithListId/index.js';
// @ts-ignore
import { InformationProtectionRequestBuilderRequestsMetadata, type InformationProtectionRequestBuilder } from './informationProtection/index.js';
// @ts-ignore
import { ItemsRequestBuilderRequestsMetadata, type ItemsRequestBuilder } from './items/index.js';
// @ts-ignore
import { LastModifiedByUserRequestBuilderRequestsMetadata, type LastModifiedByUserRequestBuilder } from './lastModifiedByUser/index.js';
// @ts-ignore
import { ListsRequestBuilderRequestsMetadata, type ListsRequestBuilder } from './lists/index.js';
// @ts-ignore
import { OnenoteRequestBuilderRequestsMetadata, type OnenoteRequestBuilder } from './onenote/index.js';
// @ts-ignore
import { OperationsRequestBuilderRequestsMetadata, type OperationsRequestBuilder } from './operations/index.js';
// @ts-ignore
import { PagesRequestBuilderRequestsMetadata, type PagesRequestBuilder } from './pages/index.js';
// @ts-ignore
import { PageTemplatesRequestBuilderRequestsMetadata, type PageTemplatesRequestBuilder } from './pageTemplates/index.js';
// @ts-ignore
import { PermissionsRequestBuilderRequestsMetadata, type PermissionsRequestBuilder } from './permissions/index.js';
// @ts-ignore
import { RecycleBinRequestBuilderRequestsMetadata, type RecycleBinRequestBuilder } from './recycleBin/index.js';
// @ts-ignore
import { SitesRequestBuilderRequestsMetadata, type SitesRequestBuilder } from './sites/index.js';
// @ts-ignore
import { TermStoreRequestBuilderRequestsMetadata, type TermStoreRequestBuilder } from './termStore/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to call the getByPath method.
 */
export interface GetByPathWithPathRequestBuilder extends BaseRequestBuilder<GetByPathWithPathRequestBuilder> {
    /**
     * Provides operations to manage the analytics property of the microsoft.graph.site entity.
     */
    get analytics(): AnalyticsRequestBuilder;
    /**
     * Provides operations to manage the columns property of the microsoft.graph.site entity.
     */
    get columns(): ColumnsRequestBuilder;
    /**
     * Provides operations to manage the contentModels property of the microsoft.graph.site entity.
     */
    get contentModels(): ContentModelsRequestBuilder;
    /**
     * Provides operations to manage the contentTypes property of the microsoft.graph.site entity.
     */
    get contentTypes(): ContentTypesRequestBuilder;
    /**
     * Provides operations to manage the createdByUser property of the microsoft.graph.baseItem entity.
     */
    get createdByUser(): CreatedByUserRequestBuilder;
    /**
     * Provides operations to manage the documentProcessingJobs property of the microsoft.graph.site entity.
     */
    get documentProcessingJobs(): DocumentProcessingJobsRequestBuilder;
    /**
     * Provides operations to manage the drive property of the microsoft.graph.site entity.
     */
    get drive(): DriveRequestBuilder;
    /**
     * Provides operations to manage the drives property of the microsoft.graph.site entity.
     */
    get drives(): DrivesRequestBuilder;
    /**
     * Provides operations to manage the externalColumns property of the microsoft.graph.site entity.
     */
    get externalColumns(): ExternalColumnsRequestBuilder;
    /**
     * Provides operations to manage the informationProtection property of the microsoft.graph.site entity.
     */
    get informationProtection(): InformationProtectionRequestBuilder;
    /**
     * Provides operations to manage the items property of the microsoft.graph.site entity.
     */
    get items(): ItemsRequestBuilder;
    /**
     * Provides operations to manage the lastModifiedByUser property of the microsoft.graph.baseItem entity.
     */
    get lastModifiedByUser(): LastModifiedByUserRequestBuilder;
    /**
     * Provides operations to manage the lists property of the microsoft.graph.site entity.
     */
    get lists(): ListsRequestBuilder;
    /**
     * Provides operations to manage the onenote property of the microsoft.graph.site entity.
     */
    get onenote(): OnenoteRequestBuilder;
    /**
     * Provides operations to manage the operations property of the microsoft.graph.site entity.
     */
    get operations(): OperationsRequestBuilder;
    /**
     * Provides operations to manage the pages property of the microsoft.graph.site entity.
     */
    get pages(): PagesRequestBuilder;
    /**
     * Provides operations to manage the pageTemplates property of the microsoft.graph.site entity.
     */
    get pageTemplates(): PageTemplatesRequestBuilder;
    /**
     * Provides operations to manage the permissions property of the microsoft.graph.site entity.
     */
    get permissions(): PermissionsRequestBuilder;
    /**
     * Provides operations to manage the recycleBin property of the microsoft.graph.site entity.
     */
    get recycleBin(): RecycleBinRequestBuilder;
    /**
     * Provides operations to manage the sites property of the microsoft.graph.site entity.
     */
    get sites(): SitesRequestBuilder;
    /**
     * Provides operations to manage the termStore property of the microsoft.graph.site entity.
     */
    get termStore(): TermStoreRequestBuilder;
    /**
     * Invoke function getByPath
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Site>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Site | undefined>;
    /**
     * Provides operations to call the getActivitiesByInterval method.
     * @param endDateTime Usage: endDateTime='{endDateTime}'
     * @param interval Usage: interval='{interval}'
     * @param startDateTime Usage: startDateTime='{startDateTime}'
     * @returns {GetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithIntervalRequestBuilder}
     */
     getActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithInterval(endDateTime: string | undefined, interval: string | undefined, startDateTime: string | undefined) : GetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithIntervalRequestBuilder;
    /**
     * Provides operations to call the getApplicableContentTypesForList method.
     * @param listId Usage: listId='{listId}'
     * @returns {GetApplicableContentTypesForListWithListIdRequestBuilder}
     */
     getApplicableContentTypesForListWithListId(listId: string | undefined) : GetApplicableContentTypesForListWithListIdRequestBuilder;
    /**
     * Invoke function getByPath
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const GetByPathWithPathRequestBuilderUriTemplate = "{+baseurl}/groups/{group%2Did}/sites/{site%2Did}/getByPath(path='{path}')";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const GetByPathWithPathRequestBuilderNavigationMetadata: Record<Exclude<keyof GetByPathWithPathRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    getActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithInterval: {
        requestsMetadata: GetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithIntervalRequestBuilderRequestsMetadata,
        pathParametersMappings: ["endDateTime", "interval", "startDateTime"],
    },
    getApplicableContentTypesForListWithListId: {
        requestsMetadata: GetApplicableContentTypesForListWithListIdRequestBuilderRequestsMetadata,
        pathParametersMappings: ["listId"],
    },
    analytics: {
        requestsMetadata: AnalyticsRequestBuilderRequestsMetadata,
    },
    columns: {
        requestsMetadata: ColumnsRequestBuilderRequestsMetadata,
    },
    contentModels: {
        requestsMetadata: ContentModelsRequestBuilderRequestsMetadata,
    },
    contentTypes: {
        requestsMetadata: ContentTypesRequestBuilderRequestsMetadata,
    },
    createdByUser: {
        requestsMetadata: CreatedByUserRequestBuilderRequestsMetadata,
    },
    documentProcessingJobs: {
        requestsMetadata: DocumentProcessingJobsRequestBuilderRequestsMetadata,
    },
    drive: {
        requestsMetadata: DriveRequestBuilderRequestsMetadata,
    },
    drives: {
        requestsMetadata: DrivesRequestBuilderRequestsMetadata,
    },
    externalColumns: {
        requestsMetadata: ExternalColumnsRequestBuilderRequestsMetadata,
    },
    informationProtection: {
        requestsMetadata: InformationProtectionRequestBuilderRequestsMetadata,
    },
    items: {
        requestsMetadata: ItemsRequestBuilderRequestsMetadata,
    },
    lastModifiedByUser: {
        requestsMetadata: LastModifiedByUserRequestBuilderRequestsMetadata,
    },
    lists: {
        requestsMetadata: ListsRequestBuilderRequestsMetadata,
    },
    onenote: {
        requestsMetadata: OnenoteRequestBuilderRequestsMetadata,
    },
    operations: {
        requestsMetadata: OperationsRequestBuilderRequestsMetadata,
    },
    pages: {
        requestsMetadata: PagesRequestBuilderRequestsMetadata,
    },
    pageTemplates: {
        requestsMetadata: PageTemplatesRequestBuilderRequestsMetadata,
    },
    permissions: {
        requestsMetadata: PermissionsRequestBuilderRequestsMetadata,
    },
    recycleBin: {
        requestsMetadata: RecycleBinRequestBuilderRequestsMetadata,
    },
    sites: {
        requestsMetadata: SitesRequestBuilderRequestsMetadata,
    },
    termStore: {
        requestsMetadata: TermStoreRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const GetByPathWithPathRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: GetByPathWithPathRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createSiteFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
