/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createPageTemplateFromDiscriminatorValue, serializePageTemplate, type PageTemplate } from '@microsoft/msgraph-beta-sdk/models/index.js';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/index.js';
// @ts-ignore
import { CanvasLayoutRequestBuilderNavigationMetadata, CanvasLayoutRequestBuilderRequestsMetadata, type CanvasLayoutRequestBuilder } from './canvasLayout/index.js';
// @ts-ignore
import { CreatedByUserRequestBuilderNavigationMetadata, CreatedByUserRequestBuilderRequestsMetadata, type CreatedByUserRequestBuilder } from './createdByUser/index.js';
// @ts-ignore
import { LastModifiedByUserRequestBuilderNavigationMetadata, LastModifiedByUserRequestBuilderRequestsMetadata, type LastModifiedByUserRequestBuilder } from './lastModifiedByUser/index.js';
// @ts-ignore
import { type WebPartsRequestBuilder, WebPartsRequestBuilderNavigationMetadata, WebPartsRequestBuilderRequestsMetadata } from './webParts/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the pageTemplates property of the microsoft.graph.site entity.
 */
export interface PageTemplateItemRequestBuilder extends BaseRequestBuilder<PageTemplateItemRequestBuilder> {
    /**
     * Provides operations to manage the canvasLayout property of the microsoft.graph.pageTemplate entity.
     */
    get canvasLayout(): CanvasLayoutRequestBuilder;
    /**
     * Provides operations to manage the createdByUser property of the microsoft.graph.baseItem entity.
     */
    get createdByUser(): CreatedByUserRequestBuilder;
    /**
     * Provides operations to manage the lastModifiedByUser property of the microsoft.graph.baseItem entity.
     */
    get lastModifiedByUser(): LastModifiedByUserRequestBuilder;
    /**
     * Provides operations to manage the webParts property of the microsoft.graph.pageTemplate entity.
     */
    get webParts(): WebPartsRequestBuilder;
    /**
     * Delete navigation property pageTemplates for groups
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * The collection of page templates on this site.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<PageTemplate>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<PageTemplateItemRequestBuilderGetQueryParameters> | undefined) : Promise<PageTemplate | undefined>;
    /**
     * Update the navigation property pageTemplates in groups
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<PageTemplate>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: PageTemplate, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<PageTemplate | undefined>;
    /**
     * Delete navigation property pageTemplates for groups
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * The collection of page templates on this site.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<PageTemplateItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property pageTemplates in groups
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: PageTemplate, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * The collection of page templates on this site.
 */
export interface PageTemplateItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const PageTemplateItemRequestBuilderUriTemplate = "{+baseurl}/groups/{group%2Did}/sites/{site%2Did}/pageTemplates/{pageTemplate%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const PageTemplateItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const PageTemplateItemRequestBuilderNavigationMetadata: Record<Exclude<keyof PageTemplateItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    canvasLayout: {
        requestsMetadata: CanvasLayoutRequestBuilderRequestsMetadata,
        navigationMetadata: CanvasLayoutRequestBuilderNavigationMetadata,
    },
    createdByUser: {
        requestsMetadata: CreatedByUserRequestBuilderRequestsMetadata,
        navigationMetadata: CreatedByUserRequestBuilderNavigationMetadata,
    },
    lastModifiedByUser: {
        requestsMetadata: LastModifiedByUserRequestBuilderRequestsMetadata,
        navigationMetadata: LastModifiedByUserRequestBuilderNavigationMetadata,
    },
    webParts: {
        requestsMetadata: WebPartsRequestBuilderRequestsMetadata,
        navigationMetadata: WebPartsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const PageTemplateItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: PageTemplateItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: PageTemplateItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createPageTemplateFromDiscriminatorValue,
        queryParametersMapper: PageTemplateItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: PageTemplateItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createPageTemplateFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializePageTemplate,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
