/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createEventCollectionResponseFromDiscriminatorValue, type EventCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { DeltaRequestBuilderRequestsMetadata, type DeltaRequestBuilder } from './delta/';
import { EventItemRequestBuilderNavigationMetadata, EventItemRequestBuilderRequestsMetadata, type EventItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the exceptionOccurrences property of the microsoft.graph.event entity.
 */
export interface ExceptionOccurrencesRequestBuilder extends BaseRequestBuilder<ExceptionOccurrencesRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to call the delta method.
     */
    get delta(): DeltaRequestBuilder;
    /**
     * Provides operations to manage the exceptionOccurrences property of the microsoft.graph.event entity.
     * @param eventId2 The unique identifier of event
     * @returns {EventItemRequestBuilder}
     */
     byEventId2(eventId2: string) : EventItemRequestBuilder;
    /**
     * Get exceptionOccurrences from groups
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<EventCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<ExceptionOccurrencesRequestBuilderGetQueryParameters> | undefined) : Promise<EventCollectionResponse | undefined>;
    /**
     * Get exceptionOccurrences from groups
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ExceptionOccurrencesRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Get exceptionOccurrences from groups
 */
export interface ExceptionOccurrencesRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Uri template for the request builder.
 */
export const ExceptionOccurrencesRequestBuilderUriTemplate = "{+baseurl}/groups/{group%2Did}/events/{event%2Did}/instances/{event%2Did1}/exceptionOccurrences{?%24count,%24expand,%24filter,%24orderby,%24select,%24skip,%24top}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ExceptionOccurrencesRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ExceptionOccurrencesRequestBuilderNavigationMetadata: Record<Exclude<keyof ExceptionOccurrencesRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byEventId2: {
        requestsMetadata: EventItemRequestBuilderRequestsMetadata,
        navigationMetadata: EventItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["event%2Did2"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
    delta: {
        requestsMetadata: DeltaRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ExceptionOccurrencesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ExceptionOccurrencesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createEventCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: ExceptionOccurrencesRequestBuilderGetQueryParametersMapper,
    },
};
/**
 * Provides operations to manage the exceptionOccurrences property of the microsoft.graph.event entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    Attachments: "attachments",
    Calendar: "calendar",
    ExceptionOccurrences: "exceptionOccurrences",
    Extensions: "extensions",
    Instances: "instances",
    MultiValueExtendedProperties: "multiValueExtendedProperties",
    SingleValueExtendedProperties: "singleValueExtendedProperties",
} as const;
/**
 * Provides operations to manage the exceptionOccurrences property of the microsoft.graph.event entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    Categories: "categories",
    CategoriesDesc: "categories desc",
    ChangeKey: "changeKey",
    ChangeKeyDesc: "changeKey desc",
    CreatedDateTime: "createdDateTime",
    CreatedDateTimeDesc: "createdDateTime desc",
    LastModifiedDateTime: "lastModifiedDateTime",
    LastModifiedDateTimeDesc: "lastModifiedDateTime desc",
    AllowNewTimeProposals: "allowNewTimeProposals",
    AllowNewTimeProposalsDesc: "allowNewTimeProposals desc",
    Attendees: "attendees",
    AttendeesDesc: "attendees desc",
    Body: "body",
    BodyDesc: "body desc",
    BodyPreview: "bodyPreview",
    BodyPreviewDesc: "bodyPreview desc",
    CancelledOccurrences: "cancelledOccurrences",
    CancelledOccurrencesDesc: "cancelledOccurrences desc",
    End: "end",
    EndDesc: "end desc",
    HasAttachments: "hasAttachments",
    HasAttachmentsDesc: "hasAttachments desc",
    HideAttendees: "hideAttendees",
    HideAttendeesDesc: "hideAttendees desc",
    Importance: "importance",
    ImportanceDesc: "importance desc",
    IsAllDay: "isAllDay",
    IsAllDayDesc: "isAllDay desc",
    IsCancelled: "isCancelled",
    IsCancelledDesc: "isCancelled desc",
    IsDraft: "isDraft",
    IsDraftDesc: "isDraft desc",
    IsOnlineMeeting: "isOnlineMeeting",
    IsOnlineMeetingDesc: "isOnlineMeeting desc",
    IsOrganizer: "isOrganizer",
    IsOrganizerDesc: "isOrganizer desc",
    IsReminderOn: "isReminderOn",
    IsReminderOnDesc: "isReminderOn desc",
    Location: "location",
    LocationDesc: "location desc",
    Locations: "locations",
    LocationsDesc: "locations desc",
    OccurrenceId: "occurrenceId",
    OccurrenceIdDesc: "occurrenceId desc",
    OnlineMeeting: "onlineMeeting",
    OnlineMeetingDesc: "onlineMeeting desc",
    OnlineMeetingProvider: "onlineMeetingProvider",
    OnlineMeetingProviderDesc: "onlineMeetingProvider desc",
    OnlineMeetingUrl: "onlineMeetingUrl",
    OnlineMeetingUrlDesc: "onlineMeetingUrl desc",
    Organizer: "organizer",
    OrganizerDesc: "organizer desc",
    OriginalEndTimeZone: "originalEndTimeZone",
    OriginalEndTimeZoneDesc: "originalEndTimeZone desc",
    OriginalStart: "originalStart",
    OriginalStartDesc: "originalStart desc",
    OriginalStartTimeZone: "originalStartTimeZone",
    OriginalStartTimeZoneDesc: "originalStartTimeZone desc",
    Recurrence: "recurrence",
    RecurrenceDesc: "recurrence desc",
    ReminderMinutesBeforeStart: "reminderMinutesBeforeStart",
    ReminderMinutesBeforeStartDesc: "reminderMinutesBeforeStart desc",
    ResponseRequested: "responseRequested",
    ResponseRequestedDesc: "responseRequested desc",
    ResponseStatus: "responseStatus",
    ResponseStatusDesc: "responseStatus desc",
    Sensitivity: "sensitivity",
    SensitivityDesc: "sensitivity desc",
    SeriesMasterId: "seriesMasterId",
    SeriesMasterIdDesc: "seriesMasterId desc",
    ShowAs: "showAs",
    ShowAsDesc: "showAs desc",
    Start: "start",
    StartDesc: "start desc",
    Subject: "subject",
    SubjectDesc: "subject desc",
    TransactionId: "transactionId",
    TransactionIdDesc: "transactionId desc",
    Type: "type",
    TypeDesc: "type desc",
    Uid: "uid",
    UidDesc: "uid desc",
    WebLink: "webLink",
    WebLinkDesc: "webLink desc",
} as const;
/**
 * Provides operations to manage the exceptionOccurrences property of the microsoft.graph.event entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    Categories: "categories",
    ChangeKey: "changeKey",
    CreatedDateTime: "createdDateTime",
    LastModifiedDateTime: "lastModifiedDateTime",
    AllowNewTimeProposals: "allowNewTimeProposals",
    Attendees: "attendees",
    Body: "body",
    BodyPreview: "bodyPreview",
    CancelledOccurrences: "cancelledOccurrences",
    End: "end",
    HasAttachments: "hasAttachments",
    HideAttendees: "hideAttendees",
    Importance: "importance",
    IsAllDay: "isAllDay",
    IsCancelled: "isCancelled",
    IsDraft: "isDraft",
    IsOnlineMeeting: "isOnlineMeeting",
    IsOrganizer: "isOrganizer",
    IsReminderOn: "isReminderOn",
    Location: "location",
    Locations: "locations",
    OccurrenceId: "occurrenceId",
    OnlineMeeting: "onlineMeeting",
    OnlineMeetingProvider: "onlineMeetingProvider",
    OnlineMeetingUrl: "onlineMeetingUrl",
    Organizer: "organizer",
    OriginalEndTimeZone: "originalEndTimeZone",
    OriginalStart: "originalStart",
    OriginalStartTimeZone: "originalStartTimeZone",
    Recurrence: "recurrence",
    ReminderMinutesBeforeStart: "reminderMinutesBeforeStart",
    ResponseRequested: "responseRequested",
    ResponseStatus: "responseStatus",
    Sensitivity: "sensitivity",
    SeriesMasterId: "seriesMasterId",
    ShowAs: "showAs",
    Start: "start",
    Subject: "subject",
    TransactionId: "transactionId",
    Type: "type",
    Uid: "uid",
    WebLink: "webLink",
    Attachments: "attachments",
    Calendar: "calendar",
    ExceptionOccurrences: "exceptionOccurrences",
    Extensions: "extensions",
    Instances: "instances",
    MultiValueExtendedProperties: "multiValueExtendedProperties",
    SingleValueExtendedProperties: "singleValueExtendedProperties",
} as const;
/* tslint:enable */
/* eslint-enable */
