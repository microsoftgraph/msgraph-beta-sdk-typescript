/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createGroupFromDiscriminatorValue, type Group } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { ServiceProvisioningErrorsRequestBuilderNavigationMetadata, ServiceProvisioningErrorsRequestBuilderRequestsMetadata, type ServiceProvisioningErrorsRequestBuilder } from './serviceProvisioningErrors/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the group property of the microsoft.graph.ediscovery.unifiedGroupSource entity.
 */
export interface GroupRequestBuilder extends BaseRequestBuilder<GroupRequestBuilder> {
    /**
     * The serviceProvisioningErrors property
     * @deprecated The ediscovery Apis are deprecated under /compliance and will stop returning data from February 01, 2023. Please use the new ediscovery Apis under /security. as of 2022-12/ediscoveryNamespace
     */
    get serviceProvisioningErrors(): ServiceProvisioningErrorsRequestBuilder;
    /**
     * The group associated with the unifiedGroupSource.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Group>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @deprecated The ediscovery Apis are deprecated under /compliance and will stop returning data from February 01, 2023. Please use the new ediscovery Apis under /security. as of 2022-12/ediscoveryNamespace
     */
     get(requestConfiguration?: RequestConfiguration<GroupRequestBuilderGetQueryParameters> | undefined) : Promise<Group | undefined>;
    /**
     * The group associated with the unifiedGroupSource.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     * @deprecated The ediscovery Apis are deprecated under /compliance and will stop returning data from February 01, 2023. Please use the new ediscovery Apis under /security. as of 2022-12/ediscoveryNamespace
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<GroupRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * The group associated with the unifiedGroupSource.
 */
export interface GroupRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
}
/**
 * Uri template for the request builder.
 */
export const GroupRequestBuilderUriTemplate = "{+baseurl}/compliance/ediscovery/cases/{case%2Did}/custodians/{custodian%2Did}/unifiedGroupSources/{unifiedGroupSource%2Did}/group{?%24expand,%24select}";
/**
 * Provides operations to manage the group property of the microsoft.graph.ediscovery.unifiedGroupSource entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    AcceptedSenders: "acceptedSenders",
    AppRoleAssignments: "appRoleAssignments",
    Calendar: "calendar",
    CalendarView: "calendarView",
    Conversations: "conversations",
    CreatedOnBehalfOf: "createdOnBehalfOf",
    Drive: "drive",
    Drives: "drives",
    Endpoints: "endpoints",
    Events: "events",
    Extensions: "extensions",
    GroupLifecyclePolicies: "groupLifecyclePolicies",
    MemberOf: "memberOf",
    Members: "members",
    MembersWithLicenseErrors: "membersWithLicenseErrors",
    Onenote: "onenote",
    Owners: "owners",
    PermissionGrants: "permissionGrants",
    Photo: "photo",
    Photos: "photos",
    Planner: "planner",
    RejectedSenders: "rejectedSenders",
    Settings: "settings",
    Sites: "sites",
    Team: "team",
    Threads: "threads",
    TransitiveMemberOf: "transitiveMemberOf",
    TransitiveMembers: "transitiveMembers",
} as const;
/**
 * Provides operations to manage the group property of the microsoft.graph.ediscovery.unifiedGroupSource entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    DeletedDateTime: "deletedDateTime",
    AccessType: "accessType",
    AllowExternalSenders: "allowExternalSenders",
    AssignedLabels: "assignedLabels",
    AssignedLicenses: "assignedLicenses",
    AutoSubscribeNewMembers: "autoSubscribeNewMembers",
    Classification: "classification",
    CreatedByAppId: "createdByAppId",
    CreatedDateTime: "createdDateTime",
    Description: "description",
    DisplayName: "displayName",
    ExpirationDateTime: "expirationDateTime",
    GroupTypes: "groupTypes",
    HasMembersWithLicenseErrors: "hasMembersWithLicenseErrors",
    HideFromAddressLists: "hideFromAddressLists",
    HideFromOutlookClients: "hideFromOutlookClients",
    InfoCatalogs: "infoCatalogs",
    IsArchived: "isArchived",
    IsAssignableToRole: "isAssignableToRole",
    IsFavorite: "isFavorite",
    IsManagementRestricted: "isManagementRestricted",
    IsSubscribedByMail: "isSubscribedByMail",
    LicenseProcessingState: "licenseProcessingState",
    Mail: "mail",
    MailEnabled: "mailEnabled",
    MailNickname: "mailNickname",
    MembershipRule: "membershipRule",
    MembershipRuleProcessingState: "membershipRuleProcessingState",
    MembershipRuleProcessingStatus: "membershipRuleProcessingStatus",
    OnPremisesDomainName: "onPremisesDomainName",
    OnPremisesLastSyncDateTime: "onPremisesLastSyncDateTime",
    OnPremisesNetBiosName: "onPremisesNetBiosName",
    OnPremisesProvisioningErrors: "onPremisesProvisioningErrors",
    OnPremisesSamAccountName: "onPremisesSamAccountName",
    OnPremisesSecurityIdentifier: "onPremisesSecurityIdentifier",
    OnPremisesSyncEnabled: "onPremisesSyncEnabled",
    OrganizationId: "organizationId",
    PreferredDataLocation: "preferredDataLocation",
    PreferredLanguage: "preferredLanguage",
    ProxyAddresses: "proxyAddresses",
    RenewedDateTime: "renewedDateTime",
    ResourceBehaviorOptions: "resourceBehaviorOptions",
    ResourceProvisioningOptions: "resourceProvisioningOptions",
    SecurityEnabled: "securityEnabled",
    SecurityIdentifier: "securityIdentifier",
    ServiceProvisioningErrors: "serviceProvisioningErrors",
    Theme: "theme",
    UniqueName: "uniqueName",
    UnseenConversationsCount: "unseenConversationsCount",
    UnseenCount: "unseenCount",
    UnseenMessagesCount: "unseenMessagesCount",
    Visibility: "visibility",
    WritebackConfiguration: "writebackConfiguration",
    AcceptedSenders: "acceptedSenders",
    AppRoleAssignments: "appRoleAssignments",
    Calendar: "calendar",
    CalendarView: "calendarView",
    Conversations: "conversations",
    CreatedOnBehalfOf: "createdOnBehalfOf",
    Drive: "drive",
    Drives: "drives",
    Endpoints: "endpoints",
    Events: "events",
    Extensions: "extensions",
    GroupLifecyclePolicies: "groupLifecyclePolicies",
    MemberOf: "memberOf",
    Members: "members",
    MembersWithLicenseErrors: "membersWithLicenseErrors",
    Onenote: "onenote",
    Owners: "owners",
    PermissionGrants: "permissionGrants",
    Photo: "photo",
    Photos: "photos",
    Planner: "planner",
    RejectedSenders: "rejectedSenders",
    Settings: "settings",
    Sites: "sites",
    Team: "team",
    Threads: "threads",
    TransitiveMemberOf: "transitiveMemberOf",
    TransitiveMembers: "transitiveMembers",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const GroupRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const GroupRequestBuilderNavigationMetadata: Record<Exclude<keyof GroupRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    serviceProvisioningErrors: {
        requestsMetadata: ServiceProvisioningErrorsRequestBuilderRequestsMetadata,
        navigationMetadata: ServiceProvisioningErrorsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const GroupRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: GroupRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createGroupFromDiscriminatorValue,
        queryParametersMapper: GroupRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
