/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createPlannerPlanContainerFromDiscriminatorValue, createPlannerPlanFromDiscriminatorValue, serializePlannerPlan, serializePlannerPlanContainer, type PlannerPlan, type PlannerPlanContainer } from '@microsoft/msgraph-beta-sdk/models/index.js';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MoveToContainerPostRequestBody}
 */
// @ts-ignore
export function createMoveToContainerPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMoveToContainerPostRequestBody;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMoveToContainerPostRequestBody(moveToContainerPostRequestBody: Partial<MoveToContainerPostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { moveToContainerPostRequestBody.backingStoreEnabled = true; },
        "container": n => { moveToContainerPostRequestBody.container = n.getObjectValue<PlannerPlanContainer>(createPlannerPlanContainerFromDiscriminatorValue); },
    }
}
export interface MoveToContainerPostRequestBody extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The container property
     */
    container?: PlannerPlanContainer | null;
}
/**
 * Provides operations to call the moveToContainer method.
 */
export interface MoveToContainerRequestBuilder extends BaseRequestBuilder<MoveToContainerRequestBuilder> {
    /**
     * Move a planner plan object from one planner plan container to another. Planner plans can only be moved from a user container to a group container.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<PlannerPlan>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/plannerplan-movetocontainer?view=graph-rest-beta|Find more info here}
     */
     post(body: MoveToContainerPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<PlannerPlan | undefined>;
    /**
     * Move a planner plan object from one planner plan container to another. Planner plans can only be moved from a user container to a group container.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: MoveToContainerPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMoveToContainerPostRequestBody(writer: SerializationWriter, moveToContainerPostRequestBody: Partial<MoveToContainerPostRequestBody> | undefined | null = {}) : void {
    if (moveToContainerPostRequestBody) {
        writer.writeObjectValue<PlannerPlanContainer>("container", moveToContainerPostRequestBody.container, serializePlannerPlanContainer);
        writer.writeAdditionalData(moveToContainerPostRequestBody.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const MoveToContainerRequestBuilderUriTemplate = "{+baseurl}/planner/plans/{plannerPlan%2Did}/moveToContainer";
/**
 * Metadata for all the requests in the request builder.
 */
export const MoveToContainerRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: MoveToContainerRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createPlannerPlanFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeMoveToContainerPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
