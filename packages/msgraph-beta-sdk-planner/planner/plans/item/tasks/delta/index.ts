/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createPlannerTaskFromDiscriminatorValue, deserializeIntoBaseDeltaFunctionResponse, serializeBaseDeltaFunctionResponse, serializePlannerTask, type BaseDeltaFunctionResponse, type PlannerTask } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DeltaGetResponse}
 */
export function createDeltaGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDeltaGetResponse;
}
export interface DeltaGetResponse extends BaseDeltaFunctionResponse, Parsable {
    /**
     * The value property
     */
    value?: PlannerTask[];
}
/**
 * Provides operations to call the delta method.
 */
export interface DeltaRequestBuilder extends BaseRequestBuilder<DeltaRequestBuilder> {
    /**
     * Invoke function delta
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DeltaGetResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<DeltaRequestBuilderGetQueryParameters> | undefined) : Promise<DeltaGetResponse | undefined>;
    /**
     * Invoke function delta
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<DeltaRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Invoke function delta
 */
export interface DeltaRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoDeltaGetResponse(deltaGetResponse: Partial<DeltaGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseDeltaFunctionResponse(deltaGetResponse),
        "value": n => { deltaGetResponse.value = n.getCollectionOfObjectValues<PlannerTask>(createPlannerTaskFromDiscriminatorValue); },
    }
}
export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeDeltaGetResponse(writer: SerializationWriter, deltaGetResponse: Partial<DeltaGetResponse> | undefined = {}) : void {
    serializeBaseDeltaFunctionResponse(writer, deltaGetResponse)
    writer.writeCollectionOfObjectValues<PlannerTask>("value", deltaGetResponse.value, serializePlannerTask);
}
/**
 * Uri template for the request builder.
 */
export const DeltaRequestBuilderUriTemplate = "{+baseurl}/planner/plans/{plannerPlan%2Did}/tasks/delta(){?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const DeltaRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const DeltaRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: DeltaRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDeltaGetResponseFromDiscriminatorValue,
        queryParametersMapper: DeltaRequestBuilderGetQueryParametersMapper,
    },
};
/**
 * Provides operations to call the delta method.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    AssignedToTaskBoardFormat: "assignedToTaskBoardFormat",
    BucketTaskBoardFormat: "bucketTaskBoardFormat",
    Details: "details",
    ProgressTaskBoardFormat: "progressTaskBoardFormat",
} as const;
/**
 * Provides operations to call the delta method.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    ActiveChecklistItemCount: "activeChecklistItemCount",
    ActiveChecklistItemCountDesc: "activeChecklistItemCount desc",
    AppliedCategories: "appliedCategories",
    AppliedCategoriesDesc: "appliedCategories desc",
    ArchivalInfo: "archivalInfo",
    ArchivalInfoDesc: "archivalInfo desc",
    AssigneePriority: "assigneePriority",
    AssigneePriorityDesc: "assigneePriority desc",
    Assignments: "assignments",
    AssignmentsDesc: "assignments desc",
    BucketId: "bucketId",
    BucketIdDesc: "bucketId desc",
    ChecklistItemCount: "checklistItemCount",
    ChecklistItemCountDesc: "checklistItemCount desc",
    CompletedBy: "completedBy",
    CompletedByDesc: "completedBy desc",
    CompletedDateTime: "completedDateTime",
    CompletedDateTimeDesc: "completedDateTime desc",
    ConversationThreadId: "conversationThreadId",
    ConversationThreadIdDesc: "conversationThreadId desc",
    CreatedBy: "createdBy",
    CreatedByDesc: "createdBy desc",
    CreatedDateTime: "createdDateTime",
    CreatedDateTimeDesc: "createdDateTime desc",
    CreationSource: "creationSource",
    CreationSourceDesc: "creationSource desc",
    DueDateTime: "dueDateTime",
    DueDateTimeDesc: "dueDateTime desc",
    HasDescription: "hasDescription",
    HasDescriptionDesc: "hasDescription desc",
    IsArchived: "isArchived",
    IsArchivedDesc: "isArchived desc",
    IsOnMyDay: "isOnMyDay",
    IsOnMyDayDesc: "isOnMyDay desc",
    IsOnMyDayLastModifiedDate: "isOnMyDayLastModifiedDate",
    IsOnMyDayLastModifiedDateDesc: "isOnMyDayLastModifiedDate desc",
    OrderHint: "orderHint",
    OrderHintDesc: "orderHint desc",
    PercentComplete: "percentComplete",
    PercentCompleteDesc: "percentComplete desc",
    PlanId: "planId",
    PlanIdDesc: "planId desc",
    PreviewType: "previewType",
    PreviewTypeDesc: "previewType desc",
    Priority: "priority",
    PriorityDesc: "priority desc",
    Recurrence: "recurrence",
    RecurrenceDesc: "recurrence desc",
    ReferenceCount: "referenceCount",
    ReferenceCountDesc: "referenceCount desc",
    SpecifiedCompletionRequirements: "specifiedCompletionRequirements",
    SpecifiedCompletionRequirementsDesc: "specifiedCompletionRequirements desc",
    StartDateTime: "startDateTime",
    StartDateTimeDesc: "startDateTime desc",
    Title: "title",
    TitleDesc: "title desc",
} as const;
/**
 * Provides operations to call the delta method.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    ActiveChecklistItemCount: "activeChecklistItemCount",
    AppliedCategories: "appliedCategories",
    ArchivalInfo: "archivalInfo",
    AssigneePriority: "assigneePriority",
    Assignments: "assignments",
    BucketId: "bucketId",
    ChecklistItemCount: "checklistItemCount",
    CompletedBy: "completedBy",
    CompletedDateTime: "completedDateTime",
    ConversationThreadId: "conversationThreadId",
    CreatedBy: "createdBy",
    CreatedDateTime: "createdDateTime",
    CreationSource: "creationSource",
    DueDateTime: "dueDateTime",
    HasDescription: "hasDescription",
    IsArchived: "isArchived",
    IsOnMyDay: "isOnMyDay",
    IsOnMyDayLastModifiedDate: "isOnMyDayLastModifiedDate",
    OrderHint: "orderHint",
    PercentComplete: "percentComplete",
    PlanId: "planId",
    PreviewType: "previewType",
    Priority: "priority",
    Recurrence: "recurrence",
    ReferenceCount: "referenceCount",
    SpecifiedCompletionRequirements: "specifiedCompletionRequirements",
    StartDateTime: "startDateTime",
    Title: "title",
    AssignedToTaskBoardFormat: "assignedToTaskBoardFormat",
    BucketTaskBoardFormat: "bucketTaskBoardFormat",
    Details: "details",
    ProgressTaskBoardFormat: "progressTaskBoardFormat",
} as const;
/* tslint:enable */
/* eslint-enable */
