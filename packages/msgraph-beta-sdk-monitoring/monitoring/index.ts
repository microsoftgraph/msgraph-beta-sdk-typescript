/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createMonitoringFromDiscriminatorValue, serializeMonitoring, type Monitoring } from '@microsoft/msgraph-beta-sdk/models/deviceManagement/index.js';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/index.js';
// @ts-ignore
import { AlertRecordsRequestBuilderNavigationMetadata, AlertRecordsRequestBuilderRequestsMetadata, type AlertRecordsRequestBuilder } from './alertRecords/index.js';
// @ts-ignore
import { AlertRulesRequestBuilderNavigationMetadata, AlertRulesRequestBuilderRequestsMetadata, type AlertRulesRequestBuilder } from './alertRules/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the monitoring singleton.
 */
export interface MonitoringRequestBuilder extends BaseRequestBuilder<MonitoringRequestBuilder> {
    /**
     * Provides operations to manage the alertRecords property of the microsoft.graph.deviceManagement.monitoring entity.
     */
    get alertRecords(): AlertRecordsRequestBuilder;
    /**
     * Provides operations to manage the alertRules property of the microsoft.graph.deviceManagement.monitoring entity.
     */
    get alertRules(): AlertRulesRequestBuilder;
    /**
     * Get monitoring
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Monitoring>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<MonitoringRequestBuilderGetQueryParameters> | undefined) : Promise<Monitoring | undefined>;
    /**
     * Update monitoring
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Monitoring>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: Monitoring, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Monitoring | undefined>;
    /**
     * Get monitoring
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<MonitoringRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update monitoring
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: Monitoring, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get monitoring
 */
export interface MonitoringRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const MonitoringRequestBuilderUriTemplate = "{+baseurl}/monitoring{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const MonitoringRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const MonitoringRequestBuilderNavigationMetadata: Record<Exclude<keyof MonitoringRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    alertRecords: {
        requestsMetadata: AlertRecordsRequestBuilderRequestsMetadata,
        navigationMetadata: AlertRecordsRequestBuilderNavigationMetadata,
    },
    alertRules: {
        requestsMetadata: AlertRulesRequestBuilderRequestsMetadata,
        navigationMetadata: AlertRulesRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const MonitoringRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: MonitoringRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createMonitoringFromDiscriminatorValue,
        queryParametersMapper: MonitoringRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: MonitoringRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createMonitoringFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeMonitoring,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
