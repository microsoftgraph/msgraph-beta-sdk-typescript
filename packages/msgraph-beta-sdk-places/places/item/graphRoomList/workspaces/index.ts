/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createWorkspaceCollectionResponseFromDiscriminatorValue, createWorkspaceFromDiscriminatorValue, serializeWorkspace, type Workspace, type WorkspaceCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { type WorkspaceItemRequestBuilder, WorkspaceItemRequestBuilderRequestsMetadata } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the workspaces property of the microsoft.graph.roomList entity.
 */
export interface WorkspacesRequestBuilder extends BaseRequestBuilder<WorkspacesRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the workspaces property of the microsoft.graph.roomList entity.
     * @param workspaceId The unique identifier of workspace
     * @returns {WorkspaceItemRequestBuilder}
     */
     byWorkspaceId(workspaceId: string) : WorkspaceItemRequestBuilder;
    /**
     * Get workspaces from places
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WorkspaceCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<WorkspacesRequestBuilderGetQueryParameters> | undefined) : Promise<WorkspaceCollectionResponse | undefined>;
    /**
     * Create new navigation property to workspaces for places
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Workspace>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: Workspace, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Workspace | undefined>;
    /**
     * Get workspaces from places
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<WorkspacesRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create new navigation property to workspaces for places
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Workspace, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get workspaces from places
 */
export interface WorkspacesRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Uri template for the request builder.
 */
export const WorkspacesRequestBuilderUriTemplate = "{+baseurl}/places/{place%2Did}/graph.roomList/workspaces{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Provides operations to manage the workspaces property of the microsoft.graph.roomList entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
} as const;
/**
 * Provides operations to manage the workspaces property of the microsoft.graph.roomList entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    Address: "address",
    AddressDesc: "address desc",
    DisplayName: "displayName",
    DisplayNameDesc: "displayName desc",
    GeoCoordinates: "geoCoordinates",
    GeoCoordinatesDesc: "geoCoordinates desc",
    Phone: "phone",
    PhoneDesc: "phone desc",
    PlaceId: "placeId",
    PlaceIdDesc: "placeId desc",
    Building: "building",
    BuildingDesc: "building desc",
    Capacity: "capacity",
    CapacityDesc: "capacity desc",
    EmailAddress: "emailAddress",
    EmailAddressDesc: "emailAddress desc",
    FloorLabel: "floorLabel",
    FloorLabelDesc: "floorLabel desc",
    FloorNumber: "floorNumber",
    FloorNumberDesc: "floorNumber desc",
    IsWheelChairAccessible: "isWheelChairAccessible",
    IsWheelChairAccessibleDesc: "isWheelChairAccessible desc",
    Label: "label",
    LabelDesc: "label desc",
    Nickname: "nickname",
    NicknameDesc: "nickname desc",
    Tags: "tags",
    TagsDesc: "tags desc",
} as const;
/**
 * Provides operations to manage the workspaces property of the microsoft.graph.roomList entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    Address: "address",
    DisplayName: "displayName",
    GeoCoordinates: "geoCoordinates",
    Phone: "phone",
    PlaceId: "placeId",
    Building: "building",
    Capacity: "capacity",
    EmailAddress: "emailAddress",
    FloorLabel: "floorLabel",
    FloorNumber: "floorNumber",
    IsWheelChairAccessible: "isWheelChairAccessible",
    Label: "label",
    Nickname: "nickname",
    Tags: "tags",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const WorkspacesRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WorkspacesRequestBuilderNavigationMetadata: Record<Exclude<keyof WorkspacesRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byWorkspaceId: {
        requestsMetadata: WorkspaceItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["workspace%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WorkspacesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: WorkspacesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWorkspaceCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: WorkspacesRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: WorkspacesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWorkspaceFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeWorkspace,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
