/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createAccessReviewDecisionCollectionResponseFromDiscriminatorValue, createAccessReviewDecisionFromDiscriminatorValue, serializeAccessReviewDecision, type AccessReviewDecision, type AccessReviewDecisionCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { AccessReviewDecisionItemRequestBuilderRequestsMetadata, type AccessReviewDecisionItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the collection of accessReviewDecision entities.
 */
export interface AccessReviewDecisionsRequestBuilder extends BaseRequestBuilder<AccessReviewDecisionsRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the collection of accessReviewDecision entities.
     * @param accessReviewDecisionId The unique identifier of accessReviewDecision
     * @returns {AccessReviewDecisionItemRequestBuilder}
     */
     byAccessReviewDecisionId(accessReviewDecisionId: string) : AccessReviewDecisionItemRequestBuilder;
    /**
     * Get entities from accessReviewDecisions
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<AccessReviewDecisionCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<AccessReviewDecisionsRequestBuilderGetQueryParameters> | undefined) : Promise<AccessReviewDecisionCollectionResponse | undefined>;
    /**
     * Add new entity to accessReviewDecisions
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<AccessReviewDecision>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: AccessReviewDecision, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<AccessReviewDecision | undefined>;
    /**
     * Get entities from accessReviewDecisions
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<AccessReviewDecisionsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Add new entity to accessReviewDecisions
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: AccessReviewDecision, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get entities from accessReviewDecisions
 */
export interface AccessReviewDecisionsRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Uri template for the request builder.
 */
export const AccessReviewDecisionsRequestBuilderUriTemplate = "{+baseurl}/accessReviewDecisions{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const AccessReviewDecisionsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const AccessReviewDecisionsRequestBuilderNavigationMetadata: Record<Exclude<keyof AccessReviewDecisionsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byAccessReviewDecisionId: {
        requestsMetadata: AccessReviewDecisionItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["accessReviewDecision%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const AccessReviewDecisionsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: AccessReviewDecisionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createAccessReviewDecisionCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: AccessReviewDecisionsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: AccessReviewDecisionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createAccessReviewDecisionFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeAccessReviewDecision,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Provides operations to manage the collection of accessReviewDecision entities.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
} as const;
/**
 * Provides operations to manage the collection of accessReviewDecision entities.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    AccessRecommendation: "accessRecommendation",
    AccessRecommendationDesc: "accessRecommendation desc",
    AccessReviewId: "accessReviewId",
    AccessReviewIdDesc: "accessReviewId desc",
    AppliedBy: "appliedBy",
    AppliedByDesc: "appliedBy desc",
    AppliedDateTime: "appliedDateTime",
    AppliedDateTimeDesc: "appliedDateTime desc",
    ApplyResult: "applyResult",
    ApplyResultDesc: "applyResult desc",
    Justification: "justification",
    JustificationDesc: "justification desc",
    ReviewedBy: "reviewedBy",
    ReviewedByDesc: "reviewedBy desc",
    ReviewedDateTime: "reviewedDateTime",
    ReviewedDateTimeDesc: "reviewedDateTime desc",
    ReviewResult: "reviewResult",
    ReviewResultDesc: "reviewResult desc",
} as const;
/**
 * Provides operations to manage the collection of accessReviewDecision entities.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    AccessRecommendation: "accessRecommendation",
    AccessReviewId: "accessReviewId",
    AppliedBy: "appliedBy",
    AppliedDateTime: "appliedDateTime",
    ApplyResult: "applyResult",
    Justification: "justification",
    ReviewedBy: "reviewedBy",
    ReviewedDateTime: "reviewedDateTime",
    ReviewResult: "reviewResult",
} as const;
/* tslint:enable */
/* eslint-enable */
