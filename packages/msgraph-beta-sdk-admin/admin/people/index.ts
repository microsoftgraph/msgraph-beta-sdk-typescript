/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createPeopleAdminSettingsFromDiscriminatorValue, serializePeopleAdminSettings, type PeopleAdminSettings } from '@microsoft/msgraph-beta-sdk/models/index.js';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/index.js';
// @ts-ignore
import { ItemInsightsRequestBuilderRequestsMetadata, type ItemInsightsRequestBuilder } from './itemInsights/index.js';
// @ts-ignore
import { NamePronunciationRequestBuilderRequestsMetadata, type NamePronunciationRequestBuilder } from './namePronunciation/index.js';
// @ts-ignore
import { ProfileCardPropertiesRequestBuilderNavigationMetadata, ProfileCardPropertiesRequestBuilderRequestsMetadata, type ProfileCardPropertiesRequestBuilder } from './profileCardProperties/index.js';
// @ts-ignore
import { PronounsRequestBuilderRequestsMetadata, type PronounsRequestBuilder } from './pronouns/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the people property of the microsoft.graph.admin entity.
 */
export interface PeopleRequestBuilder extends BaseRequestBuilder<PeopleRequestBuilder> {
    /**
     * Provides operations to manage the itemInsights property of the microsoft.graph.peopleAdminSettings entity.
     */
    get itemInsights(): ItemInsightsRequestBuilder;
    /**
     * Provides operations to manage the namePronunciation property of the microsoft.graph.peopleAdminSettings entity.
     */
    get namePronunciation(): NamePronunciationRequestBuilder;
    /**
     * Provides operations to manage the profileCardProperties property of the microsoft.graph.peopleAdminSettings entity.
     */
    get profileCardProperties(): ProfileCardPropertiesRequestBuilder;
    /**
     * Provides operations to manage the pronouns property of the microsoft.graph.peopleAdminSettings entity.
     */
    get pronouns(): PronounsRequestBuilder;
    /**
     * Delete navigation property people for admin
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Retrieve the properties and relationships of a peopleAdminSettings object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<PeopleAdminSettings>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/peopleadminsettings-get?view=graph-rest-beta|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<PeopleRequestBuilderGetQueryParameters> | undefined) : Promise<PeopleAdminSettings | undefined>;
    /**
     * Update the navigation property people in admin
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<PeopleAdminSettings>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: PeopleAdminSettings, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<PeopleAdminSettings | undefined>;
    /**
     * Delete navigation property people for admin
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Retrieve the properties and relationships of a peopleAdminSettings object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<PeopleRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property people in admin
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: PeopleAdminSettings, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Retrieve the properties and relationships of a peopleAdminSettings object.
 */
export interface PeopleRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const PeopleRequestBuilderUriTemplate = "{+baseurl}/admin/people{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const PeopleRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const PeopleRequestBuilderNavigationMetadata: Record<Exclude<keyof PeopleRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    itemInsights: {
        requestsMetadata: ItemInsightsRequestBuilderRequestsMetadata,
    },
    namePronunciation: {
        requestsMetadata: NamePronunciationRequestBuilderRequestsMetadata,
    },
    profileCardProperties: {
        requestsMetadata: ProfileCardPropertiesRequestBuilderRequestsMetadata,
        navigationMetadata: ProfileCardPropertiesRequestBuilderNavigationMetadata,
    },
    pronouns: {
        requestsMetadata: PronounsRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const PeopleRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: PeopleRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: PeopleRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createPeopleAdminSettingsFromDiscriminatorValue,
        queryParametersMapper: PeopleRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: PeopleRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createPeopleAdminSettingsFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializePeopleAdminSettings,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
