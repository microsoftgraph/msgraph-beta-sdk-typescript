/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { createCatalogFromDiscriminatorValue, serializeCatalog, type Catalog } from '@microsoft/msgraph-beta-sdk/models/windowsUpdates/';
import { EntriesRequestBuilderNavigationMetadata, EntriesRequestBuilderRequestsMetadata, EntriesRequestBuilderUriTemplate, type EntriesRequestBuilder } from './entries/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the catalog property of the microsoft.graph.adminWindowsUpdates entity.
 */
export interface CatalogRequestBuilder extends BaseRequestBuilder<CatalogRequestBuilder> {
    /**
     * Provides operations to manage the entries property of the microsoft.graph.windowsUpdates.catalog entity.
     */
    get entries(): EntriesRequestBuilder;
    /**
     * Delete navigation property catalog for admin
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Catalog of content that can be approved for deployment by the deployment service. Read-only.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of Catalog
     */
     get(requestConfiguration?: RequestConfiguration<CatalogRequestBuilderGetQueryParameters> | undefined) : Promise<Catalog | undefined>;
    /**
     * Update the navigation property catalog in admin
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of Catalog
     */
     patch(body: Catalog, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Catalog | undefined>;
    /**
     * Delete navigation property catalog for admin
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Catalog of content that can be approved for deployment by the deployment service. Read-only.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<CatalogRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property catalog in admin
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: Catalog, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Catalog of content that can be approved for deployment by the deployment service. Read-only.
 */
export interface CatalogRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const CatalogRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const CatalogRequestBuilderNavigationMetadata: Record<Exclude<keyof CatalogRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    entries: {
        uriTemplate: EntriesRequestBuilderUriTemplate,
        requestsMetadata: EntriesRequestBuilderRequestsMetadata,
        navigationMetadata: EntriesRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const CatalogRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createCatalogFromDiscriminatorValue,
        queryParametersMapper: CatalogRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createCatalogFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCatalog,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const CatalogRequestBuilderUriTemplate = "{+baseurl}/admin/windows/updates/catalog{?%24expand,%24select}";
/* tslint:enable */
/* eslint-enable */
