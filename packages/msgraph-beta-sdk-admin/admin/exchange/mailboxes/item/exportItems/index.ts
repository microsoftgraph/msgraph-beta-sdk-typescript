/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createExportItemResponseFromDiscriminatorValue, deserializeIntoBaseCollectionPaginationCountResponse, serializeBaseCollectionPaginationCountResponse, serializeExportItemResponse, type BaseCollectionPaginationCountResponse, type ExportItemResponse } from '@microsoft/msgraph-beta-sdk/models/index.js';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ExportItemsPostRequestBody}
 */
// @ts-ignore
export function createExportItemsPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoExportItemsPostRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ExportItemsPostResponse}
 */
// @ts-ignore
export function createExportItemsPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoExportItemsPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoExportItemsPostRequestBody(exportItemsPostRequestBody: Partial<ExportItemsPostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { exportItemsPostRequestBody.backingStoreEnabled = true; },
        "ItemIds": n => { exportItemsPostRequestBody.itemIds = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoExportItemsPostResponse(exportItemsPostResponse: Partial<ExportItemsPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(exportItemsPostResponse),
        "value": n => { exportItemsPostResponse.value = n.getCollectionOfObjectValues<ExportItemResponse>(createExportItemResponseFromDiscriminatorValue); },
    }
}
export interface ExportItemsPostRequestBody extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The ItemIds property
     */
    itemIds?: string[] | null;
}
export interface ExportItemsPostResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: ExportItemResponse[] | null;
}
/**
 * Provides operations to call the exportItems method.
 */
export interface ExportItemsRequestBuilder extends BaseRequestBuilder<ExportItemsRequestBuilder> {
    /**
     * Export Exchange mailboxItem objects in full-fidelity FastTransfer stream format for backup purposes. This item format can be restored to the same mailbox or a different one. You can export up to 20 items in a single export request.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ExportItemsPostResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @deprecated Private preview for Import Export APIs as of 2021-08/PrivatePreview:importExport on 2021-08-19 and will be removed 2024-06-30
     * @see {@link https://learn.microsoft.com/graph/api/mailbox-exportitems?view=graph-rest-beta|Find more info here}
     */
     post(body: ExportItemsPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ExportItemsPostResponse | undefined>;
    /**
     * Export Exchange mailboxItem objects in full-fidelity FastTransfer stream format for backup purposes. This item format can be restored to the same mailbox or a different one. You can export up to 20 items in a single export request.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     * @deprecated Private preview for Import Export APIs as of 2021-08/PrivatePreview:importExport on 2021-08-19 and will be removed 2024-06-30
     */
     toPostRequestInformation(body: ExportItemsPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeExportItemsPostRequestBody(writer: SerializationWriter, exportItemsPostRequestBody: Partial<ExportItemsPostRequestBody> | undefined | null = {}) : void {
    if (exportItemsPostRequestBody) {
        writer.writeCollectionOfPrimitiveValues<string>("ItemIds", exportItemsPostRequestBody.itemIds);
        writer.writeAdditionalData(exportItemsPostRequestBody.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeExportItemsPostResponse(writer: SerializationWriter, exportItemsPostResponse: Partial<ExportItemsPostResponse> | undefined | null = {}) : void {
    if (exportItemsPostResponse) {
        serializeBaseCollectionPaginationCountResponse(writer, exportItemsPostResponse)
        writer.writeCollectionOfObjectValues<ExportItemResponse>("value", exportItemsPostResponse.value, serializeExportItemResponse);
    }
}
/**
 * Uri template for the request builder.
 */
export const ExportItemsRequestBuilderUriTemplate = "{+baseurl}/admin/exchange/mailboxes/{mailbox%2Did}/exportItems";
/**
 * Metadata for all the requests in the request builder.
 */
export const ExportItemsRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: ExportItemsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createExportItemsPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeExportItemsPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
