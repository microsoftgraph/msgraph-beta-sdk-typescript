/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { createLabelsRootFromDiscriminatorValue, serializeLabelsRoot, type LabelsRoot } from '@microsoft/msgraph-beta-sdk/models/security/';
import { AuthoritiesRequestBuilderNavigationMetadata, AuthoritiesRequestBuilderRequestsMetadata, AuthoritiesRequestBuilderUriTemplate, type AuthoritiesRequestBuilder } from './authorities/';
import { CategoriesRequestBuilderNavigationMetadata, CategoriesRequestBuilderRequestsMetadata, CategoriesRequestBuilderUriTemplate, type CategoriesRequestBuilder } from './categories/';
import { CitationsRequestBuilderNavigationMetadata, CitationsRequestBuilderRequestsMetadata, CitationsRequestBuilderUriTemplate, type CitationsRequestBuilder } from './citations/';
import { DepartmentsRequestBuilderNavigationMetadata, DepartmentsRequestBuilderRequestsMetadata, DepartmentsRequestBuilderUriTemplate, type DepartmentsRequestBuilder } from './departments/';
import { FilePlanReferencesRequestBuilderNavigationMetadata, FilePlanReferencesRequestBuilderRequestsMetadata, FilePlanReferencesRequestBuilderUriTemplate, type FilePlanReferencesRequestBuilder } from './filePlanReferences/';
import { RetentionLabelsRequestBuilderNavigationMetadata, RetentionLabelsRequestBuilderRequestsMetadata, RetentionLabelsRequestBuilderUriTemplate, type RetentionLabelsRequestBuilder } from './retentionLabels/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the labels property of the microsoft.graph.security entity.
 */
export interface LabelsRequestBuilder extends BaseRequestBuilder<LabelsRequestBuilder> {
    /**
     * Provides operations to manage the authorities property of the microsoft.graph.security.labelsRoot entity.
     */
    get authorities(): AuthoritiesRequestBuilder;
    /**
     * Provides operations to manage the categories property of the microsoft.graph.security.labelsRoot entity.
     */
    get categories(): CategoriesRequestBuilder;
    /**
     * Provides operations to manage the citations property of the microsoft.graph.security.labelsRoot entity.
     */
    get citations(): CitationsRequestBuilder;
    /**
     * Provides operations to manage the departments property of the microsoft.graph.security.labelsRoot entity.
     */
    get departments(): DepartmentsRequestBuilder;
    /**
     * Provides operations to manage the filePlanReferences property of the microsoft.graph.security.labelsRoot entity.
     */
    get filePlanReferences(): FilePlanReferencesRequestBuilder;
    /**
     * Provides operations to manage the retentionLabels property of the microsoft.graph.security.labelsRoot entity.
     */
    get retentionLabels(): RetentionLabelsRequestBuilder;
    /**
     * Delete navigation property labels for security
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get labels from security
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of LabelsRoot
     */
     get(requestConfiguration?: RequestConfiguration<LabelsRequestBuilderGetQueryParameters> | undefined) : Promise<LabelsRoot | undefined>;
    /**
     * Update the navigation property labels in security
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of LabelsRoot
     */
     patch(body: LabelsRoot, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<LabelsRoot | undefined>;
    /**
     * Delete navigation property labels for security
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Get labels from security
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<LabelsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property labels in security
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: LabelsRoot, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get labels from security
 */
export interface LabelsRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const LabelsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const LabelsRequestBuilderNavigationMetadata: Record<Exclude<keyof LabelsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    authorities: {
        uriTemplate: AuthoritiesRequestBuilderUriTemplate,
        requestsMetadata: AuthoritiesRequestBuilderRequestsMetadata,
        navigationMetadata: AuthoritiesRequestBuilderNavigationMetadata,
    },
    categories: {
        uriTemplate: CategoriesRequestBuilderUriTemplate,
        requestsMetadata: CategoriesRequestBuilderRequestsMetadata,
        navigationMetadata: CategoriesRequestBuilderNavigationMetadata,
    },
    citations: {
        uriTemplate: CitationsRequestBuilderUriTemplate,
        requestsMetadata: CitationsRequestBuilderRequestsMetadata,
        navigationMetadata: CitationsRequestBuilderNavigationMetadata,
    },
    departments: {
        uriTemplate: DepartmentsRequestBuilderUriTemplate,
        requestsMetadata: DepartmentsRequestBuilderRequestsMetadata,
        navigationMetadata: DepartmentsRequestBuilderNavigationMetadata,
    },
    filePlanReferences: {
        uriTemplate: FilePlanReferencesRequestBuilderUriTemplate,
        requestsMetadata: FilePlanReferencesRequestBuilderRequestsMetadata,
        navigationMetadata: FilePlanReferencesRequestBuilderNavigationMetadata,
    },
    retentionLabels: {
        uriTemplate: RetentionLabelsRequestBuilderUriTemplate,
        requestsMetadata: RetentionLabelsRequestBuilderRequestsMetadata,
        navigationMetadata: RetentionLabelsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const LabelsRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createLabelsRootFromDiscriminatorValue,
        queryParametersMapper: LabelsRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createLabelsRootFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeLabelsRoot,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const LabelsRequestBuilderUriTemplate = "{+baseurl}/security/labels{?%24expand,%24select}";
/* tslint:enable */
/* eslint-enable */
