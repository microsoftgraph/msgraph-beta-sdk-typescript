/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { createAuditCoreRootFromDiscriminatorValue, serializeAuditCoreRoot, type AuditCoreRoot } from '@microsoft/msgraph-beta-sdk/models/security/';
import { QueriesRequestBuilderNavigationMetadata, QueriesRequestBuilderRequestsMetadata, type QueriesRequestBuilder } from './queries/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the auditLog property of the microsoft.graph.security entity.
 */
export interface AuditLogRequestBuilder extends BaseRequestBuilder<AuditLogRequestBuilder> {
    /**
     * Provides operations to manage the queries property of the microsoft.graph.security.auditCoreRoot entity.
     */
    get queries(): QueriesRequestBuilder;
    /**
     * Delete navigation property auditLog for security
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get auditLog from security
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<AuditCoreRoot>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<AuditLogRequestBuilderGetQueryParameters> | undefined) : Promise<AuditCoreRoot | undefined>;
    /**
     * Update the navigation property auditLog in security
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<AuditCoreRoot>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: AuditCoreRoot, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<AuditCoreRoot | undefined>;
    /**
     * Delete navigation property auditLog for security
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Get auditLog from security
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<AuditLogRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property auditLog in security
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: AuditCoreRoot, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get auditLog from security
 */
export interface AuditLogRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
}
export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Uri template for the request builder.
 */
export const AuditLogRequestBuilderUriTemplate = "{+baseurl}/security/auditLog{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const AuditLogRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const AuditLogRequestBuilderNavigationMetadata: Record<Exclude<keyof AuditLogRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    queries: {
        requestsMetadata: QueriesRequestBuilderRequestsMetadata,
        navigationMetadata: QueriesRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const AuditLogRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: AuditLogRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: AuditLogRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createAuditCoreRootFromDiscriminatorValue,
        queryParametersMapper: AuditLogRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: AuditLogRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createAuditCoreRootFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeAuditCoreRoot,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Provides operations to manage the auditLog property of the microsoft.graph.security entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    Queries: "queries",
} as const;
/**
 * Provides operations to manage the auditLog property of the microsoft.graph.security entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    Queries: "queries",
} as const;
/* tslint:enable */
/* eslint-enable */
