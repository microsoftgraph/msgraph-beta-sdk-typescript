/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/index.js';
// @ts-ignore
import { createAnalyzedEmailFromDiscriminatorValue, RemediationAction, RemediationActionObject, RemediationSeverity, RemediationSeverityObject, serializeAnalyzedEmail, type AnalyzedEmail } from '@microsoft/msgraph-beta-sdk/models/security/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RemediatePostRequestBody}
 */
// @ts-ignore
export function createRemediatePostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRemediatePostRequestBody;
}
/**
 * The deserialization information for the current model
 * @param RemediatePostRequestBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRemediatePostRequestBody(remediatePostRequestBody: Partial<RemediatePostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "action": n => { remediatePostRequestBody.action = n.getEnumValue<RemediationAction>(RemediationActionObject); },
        "analyzedEmails": n => { remediatePostRequestBody.analyzedEmails = n.getCollectionOfObjectValues<AnalyzedEmail>(createAnalyzedEmailFromDiscriminatorValue); },
        "backingStoreEnabled": n => { remediatePostRequestBody.backingStoreEnabled = true; },
        "description": n => { remediatePostRequestBody.description = n.getStringValue(); },
        "displayName": n => { remediatePostRequestBody.displayName = n.getStringValue(); },
        "remediateSendersCopy": n => { remediatePostRequestBody.remediateSendersCopy = n.getBooleanValue(); },
        "severity": n => { remediatePostRequestBody.severity = n.getEnumValue<RemediationSeverity>(RemediationSeverityObject); },
    }
}
/**
 * Provides operations to call the remediate method.
 */
export interface MicrosoftGraphSecurityRemediateRequestBuilder extends BaseRequestBuilder<MicrosoftGraphSecurityRemediateRequestBuilder> {
    /**
     * Remove a potential threat from end users' mailboxes. Remediation means to take prescribed action against a threat. This API can trigger email purge actions like move to junk, move to deleted items, soft delete, hard delete, or move to Inbox. This API enables scenarios and use cases such as SOAR integration, playbooks, and automations. For more information read email remediation, trigger action and track actions. If there is false positives admins can take move to inbox action.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/security-analyzedemail-remediate?view=graph-rest-beta|Find more info here}
     */
     post(body: RemediatePostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Remove a potential threat from end users' mailboxes. Remediation means to take prescribed action against a threat. This API can trigger email purge actions like move to junk, move to deleted items, soft delete, hard delete, or move to Inbox. This API enables scenarios and use cases such as SOAR integration, playbooks, and automations. For more information read email remediation, trigger action and track actions. If there is false positives admins can take move to inbox action.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: RemediatePostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
export interface RemediatePostRequestBody extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * The action property
     */
    action?: RemediationAction | null;
    /**
     * The analyzedEmails property
     */
    analyzedEmails?: AnalyzedEmail[] | null;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The description property
     */
    description?: string | null;
    /**
     * The displayName property
     */
    displayName?: string | null;
    /**
     * The remediateSendersCopy property
     */
    remediateSendersCopy?: boolean | null;
    /**
     * The severity property
     */
    severity?: RemediationSeverity | null;
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param RemediatePostRequestBody The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRemediatePostRequestBody(writer: SerializationWriter, remediatePostRequestBody: Partial<RemediatePostRequestBody> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!remediatePostRequestBody || isSerializingDerivedType) { return; }
    writer.writeEnumValue<RemediationAction>("action", remediatePostRequestBody.action);
    writer.writeCollectionOfObjectValues<AnalyzedEmail>("analyzedEmails", remediatePostRequestBody.analyzedEmails, serializeAnalyzedEmail);
    writer.writeStringValue("description", remediatePostRequestBody.description);
    writer.writeStringValue("displayName", remediatePostRequestBody.displayName);
    writer.writeBooleanValue("remediateSendersCopy", remediatePostRequestBody.remediateSendersCopy);
    writer.writeEnumValue<RemediationSeverity>("severity", remediatePostRequestBody.severity);
    writer.writeAdditionalData(remediatePostRequestBody.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const MicrosoftGraphSecurityRemediateRequestBuilderUriTemplate = "{+baseurl}/security/collaboration/analyzedEmails/microsoft.graph.security.remediate";
/**
 * Metadata for all the requests in the request builder.
 */
export const MicrosoftGraphSecurityRemediateRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: MicrosoftGraphSecurityRemediateRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeRemediatePostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
