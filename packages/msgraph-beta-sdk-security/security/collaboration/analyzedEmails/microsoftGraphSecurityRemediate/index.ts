/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { createAnalyzedEmailFromDiscriminatorValue, RemediationAction, RemediationActionObject, RemediationSeverity, RemediationSeverityObject, serializeAnalyzedEmail, type AnalyzedEmail } from '@microsoft/msgraph-beta-sdk/models/security/';
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RemediatePostRequestBody}
 */
export function createRemediatePostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRemediatePostRequestBody;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoRemediatePostRequestBody(remediatePostRequestBody: Partial<RemediatePostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "action": n => { remediatePostRequestBody.action = n.getEnumValue<RemediationAction>(RemediationActionObject); },
        "analyzedEmails": n => { remediatePostRequestBody.analyzedEmails = n.getCollectionOfObjectValues<AnalyzedEmail>(createAnalyzedEmailFromDiscriminatorValue); },
        "approverUpn": n => { remediatePostRequestBody.approverUpn = n.getStringValue(); },
        "backingStoreEnabled": n => { remediatePostRequestBody.backingStoreEnabled = true; },
        "description": n => { remediatePostRequestBody.description = n.getStringValue(); },
        "displayName": n => { remediatePostRequestBody.displayName = n.getStringValue(); },
        "remediateSendersCopy": n => { remediatePostRequestBody.remediateSendersCopy = n.getBooleanValue(); },
        "severity": n => { remediatePostRequestBody.severity = n.getEnumValue<RemediationSeverity>(RemediationSeverityObject); },
    }
}
/**
 * Provides operations to call the remediate method.
 */
export interface MicrosoftGraphSecurityRemediateRequestBuilder extends BaseRequestBuilder<MicrosoftGraphSecurityRemediateRequestBuilder> {
    /**
     * Invoke action remediate
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: RemediatePostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Invoke action remediate
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: RemediatePostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
export interface RemediatePostRequestBody extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * The action property
     */
    action?: RemediationAction;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The analyzedEmails property
     */
    analyzedEmails?: AnalyzedEmail[];
    /**
     * The approverUpn property
     */
    approverUpn?: string;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The description property
     */
    description?: string;
    /**
     * The displayName property
     */
    displayName?: string;
    /**
     * The remediateSendersCopy property
     */
    remediateSendersCopy?: boolean;
    /**
     * The severity property
     */
    severity?: RemediationSeverity;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRemediatePostRequestBody(writer: SerializationWriter, remediatePostRequestBody: Partial<RemediatePostRequestBody> | undefined = {}) : void {
    writer.writeEnumValue<RemediationAction>("action", remediatePostRequestBody.action);
    writer.writeCollectionOfObjectValues<AnalyzedEmail>("analyzedEmails", remediatePostRequestBody.analyzedEmails, serializeAnalyzedEmail);
    writer.writeStringValue("approverUpn", remediatePostRequestBody.approverUpn);
    writer.writeStringValue("description", remediatePostRequestBody.description);
    writer.writeStringValue("displayName", remediatePostRequestBody.displayName);
    writer.writeBooleanValue("remediateSendersCopy", remediatePostRequestBody.remediateSendersCopy);
    writer.writeEnumValue<RemediationSeverity>("severity", remediatePostRequestBody.severity);
    writer.writeAdditionalData(remediatePostRequestBody.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const MicrosoftGraphSecurityRemediateRequestBuilderUriTemplate = "{+baseurl}/security/collaboration/analyzedEmails/microsoft.graph.security.remediate";
/**
 * Metadata for all the requests in the request builder.
 */
export const MicrosoftGraphSecurityRemediateRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: MicrosoftGraphSecurityRemediateRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeRemediatePostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
