/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { createAnalyzedEmailFromDiscriminatorValue, serializeAnalyzedEmail, type AnalyzedEmail } from '@microsoft/msgraph-beta-sdk/models/security/';
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the analyzedEmails property of the microsoft.graph.security.collaborationRoot entity.
 */
export interface AnalyzedEmailItemRequestBuilder extends BaseRequestBuilder<AnalyzedEmailItemRequestBuilder> {
    /**
     * Delete navigation property analyzedEmails for security
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get analyzedEmails from security
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<AnalyzedEmail>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<AnalyzedEmailItemRequestBuilderGetQueryParameters> | undefined) : Promise<AnalyzedEmail | undefined>;
    /**
     * Update the navigation property analyzedEmails in security
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<AnalyzedEmail>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: AnalyzedEmail, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<AnalyzedEmail | undefined>;
    /**
     * Delete navigation property analyzedEmails for security
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Get analyzedEmails from security
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<AnalyzedEmailItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property analyzedEmails in security
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: AnalyzedEmail, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get analyzedEmails from security
 */
export interface AnalyzedEmailItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
}
export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Uri template for the request builder.
 */
export const AnalyzedEmailItemRequestBuilderUriTemplate = "{+baseurl}/security/collaboration/analyzedEmails/{analyzedEmail%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const AnalyzedEmailItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const AnalyzedEmailItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: AnalyzedEmailItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: AnalyzedEmailItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createAnalyzedEmailFromDiscriminatorValue,
        queryParametersMapper: AnalyzedEmailItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: AnalyzedEmailItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createAnalyzedEmailFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeAnalyzedEmail,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Provides operations to manage the analyzedEmails property of the microsoft.graph.security.collaborationRoot entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
} as const;
/**
 * Provides operations to manage the analyzedEmails property of the microsoft.graph.security.collaborationRoot entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    AlertIds: "alertIds",
    Attachments: "attachments",
    AttachmentsCount: "attachmentsCount",
    AuthenticationDetails: "authenticationDetails",
    BulkComplaintLevel: "bulkComplaintLevel",
    Contexts: "contexts",
    DetectionMethods: "detectionMethods",
    Directionality: "directionality",
    DistributionList: "distributionList",
    EmailClusterId: "emailClusterId",
    ExchangeTransportRules: "exchangeTransportRules",
    InternetMessageId: "internetMessageId",
    Language: "language",
    LatestDelivery: "latestDelivery",
    LoggedDateTime: "loggedDateTime",
    NetworkMessageId: "networkMessageId",
    OriginalDelivery: "originalDelivery",
    OverrideSources: "overrideSources",
    PhishConfidenceLevel: "phishConfidenceLevel",
    Policy: "policy",
    PolicyAction: "policyAction",
    RecipientEmailAddresses: "recipientEmailAddresses",
    ReturnPath: "returnPath",
    SenderDetail: "senderDetail",
    SizeInBytes: "sizeInBytes",
    SpamConfidenceLevel: "spamConfidenceLevel",
    Subject: "subject",
    ThreatType: "threatType",
    Urls: "urls",
    UrlsCount: "urlsCount",
} as const;
/* tslint:enable */
/* eslint-enable */
