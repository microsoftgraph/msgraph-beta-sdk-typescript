/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { createAnalyzedEmailCollectionResponseFromDiscriminatorValue, createAnalyzedEmailFromDiscriminatorValue, serializeAnalyzedEmail, type AnalyzedEmail, type AnalyzedEmailCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/security/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { AnalyzedEmailItemRequestBuilderRequestsMetadata, type AnalyzedEmailItemRequestBuilder } from './item/';
import { MicrosoftGraphSecurityRemediateRequestBuilderRequestsMetadata, type MicrosoftGraphSecurityRemediateRequestBuilder } from './microsoftGraphSecurityRemediate/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the analyzedEmails property of the microsoft.graph.security.collaborationRoot entity.
 */
export interface AnalyzedEmailsRequestBuilder extends BaseRequestBuilder<AnalyzedEmailsRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to call the remediate method.
     */
    get microsoftGraphSecurityRemediate(): MicrosoftGraphSecurityRemediateRequestBuilder;
    /**
     * Provides operations to manage the analyzedEmails property of the microsoft.graph.security.collaborationRoot entity.
     * @param analyzedEmailId The unique identifier of analyzedEmail
     * @returns {AnalyzedEmailItemRequestBuilder}
     */
     byAnalyzedEmailId(analyzedEmailId: string) : AnalyzedEmailItemRequestBuilder;
    /**
     * Get analyzedEmails from security
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<AnalyzedEmailCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<AnalyzedEmailsRequestBuilderGetQueryParameters> | undefined) : Promise<AnalyzedEmailCollectionResponse | undefined>;
    /**
     * Create new navigation property to analyzedEmails for security
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<AnalyzedEmail>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: AnalyzedEmail, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<AnalyzedEmail | undefined>;
    /**
     * Get analyzedEmails from security
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<AnalyzedEmailsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create new navigation property to analyzedEmails for security
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: AnalyzedEmail, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get analyzedEmails from security
 */
export interface AnalyzedEmailsRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Uri template for the request builder.
 */
export const AnalyzedEmailsRequestBuilderUriTemplate = "{+baseurl}/security/collaboration/analyzedEmails{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const AnalyzedEmailsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const AnalyzedEmailsRequestBuilderNavigationMetadata: Record<Exclude<keyof AnalyzedEmailsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byAnalyzedEmailId: {
        requestsMetadata: AnalyzedEmailItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["analyzedEmail%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
    microsoftGraphSecurityRemediate: {
        requestsMetadata: MicrosoftGraphSecurityRemediateRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const AnalyzedEmailsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: AnalyzedEmailsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createAnalyzedEmailCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: AnalyzedEmailsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: AnalyzedEmailsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createAnalyzedEmailFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeAnalyzedEmail,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Provides operations to manage the analyzedEmails property of the microsoft.graph.security.collaborationRoot entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
} as const;
/**
 * Provides operations to manage the analyzedEmails property of the microsoft.graph.security.collaborationRoot entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    AlertIds: "alertIds",
    AlertIdsDesc: "alertIds desc",
    Attachments: "attachments",
    AttachmentsDesc: "attachments desc",
    AttachmentsCount: "attachmentsCount",
    AttachmentsCountDesc: "attachmentsCount desc",
    AuthenticationDetails: "authenticationDetails",
    AuthenticationDetailsDesc: "authenticationDetails desc",
    BulkComplaintLevel: "bulkComplaintLevel",
    BulkComplaintLevelDesc: "bulkComplaintLevel desc",
    Contexts: "contexts",
    ContextsDesc: "contexts desc",
    DetectionMethods: "detectionMethods",
    DetectionMethodsDesc: "detectionMethods desc",
    Directionality: "directionality",
    DirectionalityDesc: "directionality desc",
    DistributionList: "distributionList",
    DistributionListDesc: "distributionList desc",
    EmailClusterId: "emailClusterId",
    EmailClusterIdDesc: "emailClusterId desc",
    ExchangeTransportRules: "exchangeTransportRules",
    ExchangeTransportRulesDesc: "exchangeTransportRules desc",
    InternetMessageId: "internetMessageId",
    InternetMessageIdDesc: "internetMessageId desc",
    Language: "language",
    LanguageDesc: "language desc",
    LatestDelivery: "latestDelivery",
    LatestDeliveryDesc: "latestDelivery desc",
    LoggedDateTime: "loggedDateTime",
    LoggedDateTimeDesc: "loggedDateTime desc",
    NetworkMessageId: "networkMessageId",
    NetworkMessageIdDesc: "networkMessageId desc",
    OriginalDelivery: "originalDelivery",
    OriginalDeliveryDesc: "originalDelivery desc",
    OverrideSources: "overrideSources",
    OverrideSourcesDesc: "overrideSources desc",
    PhishConfidenceLevel: "phishConfidenceLevel",
    PhishConfidenceLevelDesc: "phishConfidenceLevel desc",
    Policy: "policy",
    PolicyDesc: "policy desc",
    PolicyAction: "policyAction",
    PolicyActionDesc: "policyAction desc",
    RecipientEmailAddresses: "recipientEmailAddresses",
    RecipientEmailAddressesDesc: "recipientEmailAddresses desc",
    ReturnPath: "returnPath",
    ReturnPathDesc: "returnPath desc",
    SenderDetail: "senderDetail",
    SenderDetailDesc: "senderDetail desc",
    SizeInBytes: "sizeInBytes",
    SizeInBytesDesc: "sizeInBytes desc",
    SpamConfidenceLevel: "spamConfidenceLevel",
    SpamConfidenceLevelDesc: "spamConfidenceLevel desc",
    Subject: "subject",
    SubjectDesc: "subject desc",
    ThreatType: "threatType",
    ThreatTypeDesc: "threatType desc",
    Urls: "urls",
    UrlsDesc: "urls desc",
    UrlsCount: "urlsCount",
    UrlsCountDesc: "urlsCount desc",
} as const;
/**
 * Provides operations to manage the analyzedEmails property of the microsoft.graph.security.collaborationRoot entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    AlertIds: "alertIds",
    Attachments: "attachments",
    AttachmentsCount: "attachmentsCount",
    AuthenticationDetails: "authenticationDetails",
    BulkComplaintLevel: "bulkComplaintLevel",
    Contexts: "contexts",
    DetectionMethods: "detectionMethods",
    Directionality: "directionality",
    DistributionList: "distributionList",
    EmailClusterId: "emailClusterId",
    ExchangeTransportRules: "exchangeTransportRules",
    InternetMessageId: "internetMessageId",
    Language: "language",
    LatestDelivery: "latestDelivery",
    LoggedDateTime: "loggedDateTime",
    NetworkMessageId: "networkMessageId",
    OriginalDelivery: "originalDelivery",
    OverrideSources: "overrideSources",
    PhishConfidenceLevel: "phishConfidenceLevel",
    Policy: "policy",
    PolicyAction: "policyAction",
    RecipientEmailAddresses: "recipientEmailAddresses",
    ReturnPath: "returnPath",
    SenderDetail: "senderDetail",
    SizeInBytes: "sizeInBytes",
    SpamConfidenceLevel: "spamConfidenceLevel",
    Subject: "subject",
    ThreatType: "threatType",
    Urls: "urls",
    UrlsCount: "urlsCount",
} as const;
/* tslint:enable */
/* eslint-enable */
