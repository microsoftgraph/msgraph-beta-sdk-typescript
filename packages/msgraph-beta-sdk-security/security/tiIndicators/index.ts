/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createTiIndicatorCollectionResponseFromDiscriminatorValue, createTiIndicatorFromDiscriminatorValue, serializeTiIndicator, type TiIndicator, type TiIndicatorCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, CountRequestBuilderUriTemplate, type CountRequestBuilder } from './count/';
import { DeleteTiIndicatorsRequestBuilderRequestsMetadata, DeleteTiIndicatorsRequestBuilderUriTemplate, type DeleteTiIndicatorsRequestBuilder } from './deleteTiIndicators/';
import { DeleteTiIndicatorsByExternalIdRequestBuilderRequestsMetadata, DeleteTiIndicatorsByExternalIdRequestBuilderUriTemplate, type DeleteTiIndicatorsByExternalIdRequestBuilder } from './deleteTiIndicatorsByExternalId/';
import { TiIndicatorItemRequestBuilderRequestsMetadata, TiIndicatorItemRequestBuilderUriTemplate, type TiIndicatorItemRequestBuilder } from './item/';
import { SubmitTiIndicatorsRequestBuilderRequestsMetadata, SubmitTiIndicatorsRequestBuilderUriTemplate, type SubmitTiIndicatorsRequestBuilder } from './submitTiIndicators/';
import { type UpdateTiIndicatorsRequestBuilder, UpdateTiIndicatorsRequestBuilderRequestsMetadata, UpdateTiIndicatorsRequestBuilderUriTemplate } from './updateTiIndicators/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the tiIndicators property of the microsoft.graph.security entity.
 */
export interface TiIndicatorsRequestBuilder extends BaseRequestBuilder<TiIndicatorsRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to call the deleteTiIndicators method.
     */
    get deleteTiIndicators(): DeleteTiIndicatorsRequestBuilder;
    /**
     * Provides operations to call the deleteTiIndicatorsByExternalId method.
     */
    get deleteTiIndicatorsByExternalId(): DeleteTiIndicatorsByExternalIdRequestBuilder;
    /**
     * Provides operations to call the submitTiIndicators method.
     */
    get submitTiIndicators(): SubmitTiIndicatorsRequestBuilder;
    /**
     * Provides operations to call the updateTiIndicators method.
     */
    get updateTiIndicators(): UpdateTiIndicatorsRequestBuilder;
    /**
     * Provides operations to manage the tiIndicators property of the microsoft.graph.security entity.
     * @param tiIndicatorId The unique identifier of tiIndicator
     * @returns a TiIndicatorItemRequestBuilder
     */
     byTiIndicatorId(tiIndicatorId: string) : TiIndicatorItemRequestBuilder;
    /**
     * Retrieve a list of tiIndicator objects.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of TiIndicatorCollectionResponse
     * @see {@link https://learn.microsoft.com/graph/api/tiindicators-list?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<TiIndicatorsRequestBuilderGetQueryParameters> | undefined) : Promise<TiIndicatorCollectionResponse | undefined>;
    /**
     * Create a new tiIndicator object.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of TiIndicator
     * @see {@link https://learn.microsoft.com/graph/api/tiindicators-post?view=graph-rest-1.0|Find more info here}
     */
     post(body: TiIndicator, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<TiIndicator | undefined>;
    /**
     * Retrieve a list of tiIndicator objects.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<TiIndicatorsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create a new tiIndicator object.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPostRequestInformation(body: TiIndicator, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Retrieve a list of tiIndicator objects.
 */
export interface TiIndicatorsRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: string[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: string[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const TiIndicatorsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const TiIndicatorsRequestBuilderNavigationMetadata: Record<Exclude<keyof TiIndicatorsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byTiIndicatorId: {
        uriTemplate: TiIndicatorItemRequestBuilderUriTemplate,
        requestsMetadata: TiIndicatorItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["tiIndicator%2Did"],
    },
    count: {
        uriTemplate: CountRequestBuilderUriTemplate,
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
    deleteTiIndicators: {
        uriTemplate: DeleteTiIndicatorsRequestBuilderUriTemplate,
        requestsMetadata: DeleteTiIndicatorsRequestBuilderRequestsMetadata,
    },
    deleteTiIndicatorsByExternalId: {
        uriTemplate: DeleteTiIndicatorsByExternalIdRequestBuilderUriTemplate,
        requestsMetadata: DeleteTiIndicatorsByExternalIdRequestBuilderRequestsMetadata,
    },
    submitTiIndicators: {
        uriTemplate: SubmitTiIndicatorsRequestBuilderUriTemplate,
        requestsMetadata: SubmitTiIndicatorsRequestBuilderRequestsMetadata,
    },
    updateTiIndicators: {
        uriTemplate: UpdateTiIndicatorsRequestBuilderUriTemplate,
        requestsMetadata: UpdateTiIndicatorsRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const TiIndicatorsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createTiIndicatorCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: TiIndicatorsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createTiIndicatorFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeTiIndicator,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const TiIndicatorsRequestBuilderUriTemplate = "{+baseurl}/security/tiIndicators{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/* tslint:enable */
/* eslint-enable */
