/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createTiIndicatorCollectionResponseFromDiscriminatorValue, createTiIndicatorFromDiscriminatorValue, serializeTiIndicator, type TiIndicator, type TiIndicatorCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { DeleteTiIndicatorsRequestBuilderRequestsMetadata, type DeleteTiIndicatorsRequestBuilder } from './deleteTiIndicators/';
import { DeleteTiIndicatorsByExternalIdRequestBuilderRequestsMetadata, type DeleteTiIndicatorsByExternalIdRequestBuilder } from './deleteTiIndicatorsByExternalId/';
import { TiIndicatorItemRequestBuilderRequestsMetadata, type TiIndicatorItemRequestBuilder } from './item/';
import { SubmitTiIndicatorsRequestBuilderRequestsMetadata, type SubmitTiIndicatorsRequestBuilder } from './submitTiIndicators/';
import { type UpdateTiIndicatorsRequestBuilder, UpdateTiIndicatorsRequestBuilderRequestsMetadata } from './updateTiIndicators/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the tiIndicators property of the microsoft.graph.security entity.
 */
export interface TiIndicatorsRequestBuilder extends BaseRequestBuilder<TiIndicatorsRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to call the deleteTiIndicators method.
     */
    get deleteTiIndicators(): DeleteTiIndicatorsRequestBuilder;
    /**
     * Provides operations to call the deleteTiIndicatorsByExternalId method.
     */
    get deleteTiIndicatorsByExternalId(): DeleteTiIndicatorsByExternalIdRequestBuilder;
    /**
     * Provides operations to call the submitTiIndicators method.
     */
    get submitTiIndicators(): SubmitTiIndicatorsRequestBuilder;
    /**
     * Provides operations to call the updateTiIndicators method.
     */
    get updateTiIndicators(): UpdateTiIndicatorsRequestBuilder;
    /**
     * Provides operations to manage the tiIndicators property of the microsoft.graph.security entity.
     * @param tiIndicatorId The unique identifier of tiIndicator
     * @returns {TiIndicatorItemRequestBuilder}
     */
     byTiIndicatorId(tiIndicatorId: string) : TiIndicatorItemRequestBuilder;
    /**
     * Retrieve a list of tiIndicator objects.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<TiIndicatorCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/tiindicators-list?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<TiIndicatorsRequestBuilderGetQueryParameters> | undefined) : Promise<TiIndicatorCollectionResponse | undefined>;
    /**
     * Create a new tiIndicator object.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<TiIndicator>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/tiindicators-post?view=graph-rest-1.0|Find more info here}
     */
     post(body: TiIndicator, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<TiIndicator | undefined>;
    /**
     * Retrieve a list of tiIndicator objects.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<TiIndicatorsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create a new tiIndicator object.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: TiIndicator, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Retrieve a list of tiIndicator objects.
 */
export interface TiIndicatorsRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Uri template for the request builder.
 */
export const TiIndicatorsRequestBuilderUriTemplate = "{+baseurl}/security/tiIndicators{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Provides operations to manage the tiIndicators property of the microsoft.graph.security entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
} as const;
/**
 * Provides operations to manage the tiIndicators property of the microsoft.graph.security entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    Action: "action",
    ActionDesc: "action desc",
    ActivityGroupNames: "activityGroupNames",
    ActivityGroupNamesDesc: "activityGroupNames desc",
    AdditionalInformation: "additionalInformation",
    AdditionalInformationDesc: "additionalInformation desc",
    AzureTenantId: "azureTenantId",
    AzureTenantIdDesc: "azureTenantId desc",
    Confidence: "confidence",
    ConfidenceDesc: "confidence desc",
    Description: "description",
    DescriptionDesc: "description desc",
    DiamondModel: "diamondModel",
    DiamondModelDesc: "diamondModel desc",
    DomainName: "domainName",
    DomainNameDesc: "domainName desc",
    EmailEncoding: "emailEncoding",
    EmailEncodingDesc: "emailEncoding desc",
    EmailLanguage: "emailLanguage",
    EmailLanguageDesc: "emailLanguage desc",
    EmailRecipient: "emailRecipient",
    EmailRecipientDesc: "emailRecipient desc",
    EmailSenderAddress: "emailSenderAddress",
    EmailSenderAddressDesc: "emailSenderAddress desc",
    EmailSenderName: "emailSenderName",
    EmailSenderNameDesc: "emailSenderName desc",
    EmailSourceDomain: "emailSourceDomain",
    EmailSourceDomainDesc: "emailSourceDomain desc",
    EmailSourceIpAddress: "emailSourceIpAddress",
    EmailSourceIpAddressDesc: "emailSourceIpAddress desc",
    EmailSubject: "emailSubject",
    EmailSubjectDesc: "emailSubject desc",
    EmailXMailer: "emailXMailer",
    EmailXMailerDesc: "emailXMailer desc",
    ExpirationDateTime: "expirationDateTime",
    ExpirationDateTimeDesc: "expirationDateTime desc",
    ExternalId: "externalId",
    ExternalIdDesc: "externalId desc",
    FileCompileDateTime: "fileCompileDateTime",
    FileCompileDateTimeDesc: "fileCompileDateTime desc",
    FileCreatedDateTime: "fileCreatedDateTime",
    FileCreatedDateTimeDesc: "fileCreatedDateTime desc",
    FileHashType: "fileHashType",
    FileHashTypeDesc: "fileHashType desc",
    FileHashValue: "fileHashValue",
    FileHashValueDesc: "fileHashValue desc",
    FileMutexName: "fileMutexName",
    FileMutexNameDesc: "fileMutexName desc",
    FileName: "fileName",
    FileNameDesc: "fileName desc",
    FilePacker: "filePacker",
    FilePackerDesc: "filePacker desc",
    FilePath: "filePath",
    FilePathDesc: "filePath desc",
    FileSize: "fileSize",
    FileSizeDesc: "fileSize desc",
    FileType: "fileType",
    FileTypeDesc: "fileType desc",
    IngestedDateTime: "ingestedDateTime",
    IngestedDateTimeDesc: "ingestedDateTime desc",
    IsActive: "isActive",
    IsActiveDesc: "isActive desc",
    KillChain: "killChain",
    KillChainDesc: "killChain desc",
    KnownFalsePositives: "knownFalsePositives",
    KnownFalsePositivesDesc: "knownFalsePositives desc",
    LastReportedDateTime: "lastReportedDateTime",
    LastReportedDateTimeDesc: "lastReportedDateTime desc",
    MalwareFamilyNames: "malwareFamilyNames",
    MalwareFamilyNamesDesc: "malwareFamilyNames desc",
    NetworkCidrBlock: "networkCidrBlock",
    NetworkCidrBlockDesc: "networkCidrBlock desc",
    NetworkDestinationAsn: "networkDestinationAsn",
    NetworkDestinationAsnDesc: "networkDestinationAsn desc",
    NetworkDestinationCidrBlock: "networkDestinationCidrBlock",
    NetworkDestinationCidrBlockDesc: "networkDestinationCidrBlock desc",
    NetworkDestinationIPv4: "networkDestinationIPv4",
    NetworkDestinationIPv4Desc: "networkDestinationIPv4 desc",
    NetworkDestinationIPv6: "networkDestinationIPv6",
    NetworkDestinationIPv6Desc: "networkDestinationIPv6 desc",
    NetworkDestinationPort: "networkDestinationPort",
    NetworkDestinationPortDesc: "networkDestinationPort desc",
    NetworkIPv4: "networkIPv4",
    NetworkIPv4Desc: "networkIPv4 desc",
    NetworkIPv6: "networkIPv6",
    NetworkIPv6Desc: "networkIPv6 desc",
    NetworkPort: "networkPort",
    NetworkPortDesc: "networkPort desc",
    NetworkProtocol: "networkProtocol",
    NetworkProtocolDesc: "networkProtocol desc",
    NetworkSourceAsn: "networkSourceAsn",
    NetworkSourceAsnDesc: "networkSourceAsn desc",
    NetworkSourceCidrBlock: "networkSourceCidrBlock",
    NetworkSourceCidrBlockDesc: "networkSourceCidrBlock desc",
    NetworkSourceIPv4: "networkSourceIPv4",
    NetworkSourceIPv4Desc: "networkSourceIPv4 desc",
    NetworkSourceIPv6: "networkSourceIPv6",
    NetworkSourceIPv6Desc: "networkSourceIPv6 desc",
    NetworkSourcePort: "networkSourcePort",
    NetworkSourcePortDesc: "networkSourcePort desc",
    PassiveOnly: "passiveOnly",
    PassiveOnlyDesc: "passiveOnly desc",
    Severity: "severity",
    SeverityDesc: "severity desc",
    Tags: "tags",
    TagsDesc: "tags desc",
    TargetProduct: "targetProduct",
    TargetProductDesc: "targetProduct desc",
    ThreatType: "threatType",
    ThreatTypeDesc: "threatType desc",
    TlpLevel: "tlpLevel",
    TlpLevelDesc: "tlpLevel desc",
    Url: "url",
    UrlDesc: "url desc",
    UserAgent: "userAgent",
    UserAgentDesc: "userAgent desc",
} as const;
/**
 * Provides operations to manage the tiIndicators property of the microsoft.graph.security entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    Action: "action",
    ActivityGroupNames: "activityGroupNames",
    AdditionalInformation: "additionalInformation",
    AzureTenantId: "azureTenantId",
    Confidence: "confidence",
    Description: "description",
    DiamondModel: "diamondModel",
    DomainName: "domainName",
    EmailEncoding: "emailEncoding",
    EmailLanguage: "emailLanguage",
    EmailRecipient: "emailRecipient",
    EmailSenderAddress: "emailSenderAddress",
    EmailSenderName: "emailSenderName",
    EmailSourceDomain: "emailSourceDomain",
    EmailSourceIpAddress: "emailSourceIpAddress",
    EmailSubject: "emailSubject",
    EmailXMailer: "emailXMailer",
    ExpirationDateTime: "expirationDateTime",
    ExternalId: "externalId",
    FileCompileDateTime: "fileCompileDateTime",
    FileCreatedDateTime: "fileCreatedDateTime",
    FileHashType: "fileHashType",
    FileHashValue: "fileHashValue",
    FileMutexName: "fileMutexName",
    FileName: "fileName",
    FilePacker: "filePacker",
    FilePath: "filePath",
    FileSize: "fileSize",
    FileType: "fileType",
    IngestedDateTime: "ingestedDateTime",
    IsActive: "isActive",
    KillChain: "killChain",
    KnownFalsePositives: "knownFalsePositives",
    LastReportedDateTime: "lastReportedDateTime",
    MalwareFamilyNames: "malwareFamilyNames",
    NetworkCidrBlock: "networkCidrBlock",
    NetworkDestinationAsn: "networkDestinationAsn",
    NetworkDestinationCidrBlock: "networkDestinationCidrBlock",
    NetworkDestinationIPv4: "networkDestinationIPv4",
    NetworkDestinationIPv6: "networkDestinationIPv6",
    NetworkDestinationPort: "networkDestinationPort",
    NetworkIPv4: "networkIPv4",
    NetworkIPv6: "networkIPv6",
    NetworkPort: "networkPort",
    NetworkProtocol: "networkProtocol",
    NetworkSourceAsn: "networkSourceAsn",
    NetworkSourceCidrBlock: "networkSourceCidrBlock",
    NetworkSourceIPv4: "networkSourceIPv4",
    NetworkSourceIPv6: "networkSourceIPv6",
    NetworkSourcePort: "networkSourcePort",
    PassiveOnly: "passiveOnly",
    Severity: "severity",
    Tags: "tags",
    TargetProduct: "targetProduct",
    ThreatType: "threatType",
    TlpLevel: "tlpLevel",
    Url: "url",
    UserAgent: "userAgent",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const TiIndicatorsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const TiIndicatorsRequestBuilderNavigationMetadata: Record<Exclude<keyof TiIndicatorsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byTiIndicatorId: {
        requestsMetadata: TiIndicatorItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["tiIndicator%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
    deleteTiIndicators: {
        requestsMetadata: DeleteTiIndicatorsRequestBuilderRequestsMetadata,
    },
    deleteTiIndicatorsByExternalId: {
        requestsMetadata: DeleteTiIndicatorsByExternalIdRequestBuilderRequestsMetadata,
    },
    submitTiIndicators: {
        requestsMetadata: SubmitTiIndicatorsRequestBuilderRequestsMetadata,
    },
    updateTiIndicators: {
        requestsMetadata: UpdateTiIndicatorsRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const TiIndicatorsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: TiIndicatorsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createTiIndicatorCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: TiIndicatorsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: TiIndicatorsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createTiIndicatorFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeTiIndicator,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
