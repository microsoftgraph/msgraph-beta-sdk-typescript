/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createTiIndicatorFromDiscriminatorValue, serializeTiIndicator, type TiIndicator } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the tiIndicators property of the microsoft.graph.security entity.
 */
export interface TiIndicatorItemRequestBuilder extends BaseRequestBuilder<TiIndicatorItemRequestBuilder> {
    /**
     * Delete a tiIndicator object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/tiindicator-delete?view=graph-rest-1.0|Find more info here}
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Retrieve the properties and relationships of a tiIndicator object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<TiIndicator>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/tiindicator-get?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<TiIndicatorItemRequestBuilderGetQueryParameters> | undefined) : Promise<TiIndicator | undefined>;
    /**
     * Update the properties of a tiIndicator object.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<TiIndicator>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/tiindicator-update?view=graph-rest-1.0|Find more info here}
     */
     patch(body: TiIndicator, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<TiIndicator | undefined>;
    /**
     * Delete a tiIndicator object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Retrieve the properties and relationships of a tiIndicator object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<TiIndicatorItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the properties of a tiIndicator object.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: TiIndicator, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Retrieve the properties and relationships of a tiIndicator object.
 */
export interface TiIndicatorItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
}
/**
 * Uri template for the request builder.
 */
export const TiIndicatorItemRequestBuilderUriTemplate = "{+baseurl}/security/tiIndicators/{tiIndicator%2Did}{?%24expand,%24select}";
/**
 * Provides operations to manage the tiIndicators property of the microsoft.graph.security entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
} as const;
/**
 * Provides operations to manage the tiIndicators property of the microsoft.graph.security entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    Action: "action",
    ActivityGroupNames: "activityGroupNames",
    AdditionalInformation: "additionalInformation",
    AzureTenantId: "azureTenantId",
    Confidence: "confidence",
    Description: "description",
    DiamondModel: "diamondModel",
    DomainName: "domainName",
    EmailEncoding: "emailEncoding",
    EmailLanguage: "emailLanguage",
    EmailRecipient: "emailRecipient",
    EmailSenderAddress: "emailSenderAddress",
    EmailSenderName: "emailSenderName",
    EmailSourceDomain: "emailSourceDomain",
    EmailSourceIpAddress: "emailSourceIpAddress",
    EmailSubject: "emailSubject",
    EmailXMailer: "emailXMailer",
    ExpirationDateTime: "expirationDateTime",
    ExternalId: "externalId",
    FileCompileDateTime: "fileCompileDateTime",
    FileCreatedDateTime: "fileCreatedDateTime",
    FileHashType: "fileHashType",
    FileHashValue: "fileHashValue",
    FileMutexName: "fileMutexName",
    FileName: "fileName",
    FilePacker: "filePacker",
    FilePath: "filePath",
    FileSize: "fileSize",
    FileType: "fileType",
    IngestedDateTime: "ingestedDateTime",
    IsActive: "isActive",
    KillChain: "killChain",
    KnownFalsePositives: "knownFalsePositives",
    LastReportedDateTime: "lastReportedDateTime",
    MalwareFamilyNames: "malwareFamilyNames",
    NetworkCidrBlock: "networkCidrBlock",
    NetworkDestinationAsn: "networkDestinationAsn",
    NetworkDestinationCidrBlock: "networkDestinationCidrBlock",
    NetworkDestinationIPv4: "networkDestinationIPv4",
    NetworkDestinationIPv6: "networkDestinationIPv6",
    NetworkDestinationPort: "networkDestinationPort",
    NetworkIPv4: "networkIPv4",
    NetworkIPv6: "networkIPv6",
    NetworkPort: "networkPort",
    NetworkProtocol: "networkProtocol",
    NetworkSourceAsn: "networkSourceAsn",
    NetworkSourceCidrBlock: "networkSourceCidrBlock",
    NetworkSourceIPv4: "networkSourceIPv4",
    NetworkSourceIPv6: "networkSourceIPv6",
    NetworkSourcePort: "networkSourcePort",
    PassiveOnly: "passiveOnly",
    Severity: "severity",
    Tags: "tags",
    TargetProduct: "targetProduct",
    ThreatType: "threatType",
    TlpLevel: "tlpLevel",
    Url: "url",
    UserAgent: "userAgent",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const TiIndicatorItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const TiIndicatorItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: TiIndicatorItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: TiIndicatorItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createTiIndicatorFromDiscriminatorValue,
        queryParametersMapper: TiIndicatorItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: TiIndicatorItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createTiIndicatorFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeTiIndicator,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
