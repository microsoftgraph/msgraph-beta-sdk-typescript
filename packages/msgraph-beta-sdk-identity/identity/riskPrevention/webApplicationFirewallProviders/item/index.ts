/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createWebApplicationFirewallProviderFromDiscriminatorValue, serializeWebApplicationFirewallProvider, type WebApplicationFirewallProvider } from '@microsoft/msgraph-beta-sdk/models/index.js';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/index.js';
// @ts-ignore
import { type VerifyRequestBuilder, VerifyRequestBuilderRequestsMetadata } from './verify/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the webApplicationFirewallProviders property of the microsoft.graph.riskPreventionContainer entity.
 */
export interface WebApplicationFirewallProviderItemRequestBuilder extends BaseRequestBuilder<WebApplicationFirewallProviderItemRequestBuilder> {
    /**
     * Provides operations to call the verify method.
     */
    get verify(): VerifyRequestBuilder;
    /**
     * Delete navigation property webApplicationFirewallProviders for identity
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get webApplicationFirewallProviders from identity
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WebApplicationFirewallProvider>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<WebApplicationFirewallProviderItemRequestBuilderGetQueryParameters> | undefined) : Promise<WebApplicationFirewallProvider | undefined>;
    /**
     * Update the navigation property webApplicationFirewallProviders in identity
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WebApplicationFirewallProvider>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: WebApplicationFirewallProvider, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WebApplicationFirewallProvider | undefined>;
    /**
     * Delete navigation property webApplicationFirewallProviders for identity
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Get webApplicationFirewallProviders from identity
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<WebApplicationFirewallProviderItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property webApplicationFirewallProviders in identity
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: WebApplicationFirewallProvider, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get webApplicationFirewallProviders from identity
 */
export interface WebApplicationFirewallProviderItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const WebApplicationFirewallProviderItemRequestBuilderUriTemplate = "{+baseurl}/identity/riskPrevention/webApplicationFirewallProviders/{webApplicationFirewallProvider%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const WebApplicationFirewallProviderItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WebApplicationFirewallProviderItemRequestBuilderNavigationMetadata: Record<Exclude<keyof WebApplicationFirewallProviderItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    verify: {
        requestsMetadata: VerifyRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WebApplicationFirewallProviderItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: WebApplicationFirewallProviderItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WebApplicationFirewallProviderItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWebApplicationFirewallProviderFromDiscriminatorValue,
        queryParametersMapper: WebApplicationFirewallProviderItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: WebApplicationFirewallProviderItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWebApplicationFirewallProviderFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeWebApplicationFirewallProvider,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
