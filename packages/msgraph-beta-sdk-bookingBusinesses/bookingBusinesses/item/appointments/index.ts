/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createBookingAppointmentCollectionResponseFromDiscriminatorValue, createBookingAppointmentFromDiscriminatorValue, serializeBookingAppointment, type BookingAppointment, type BookingAppointmentCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { BookingAppointmentItemRequestBuilderNavigationMetadata, BookingAppointmentItemRequestBuilderRequestsMetadata, type BookingAppointmentItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the appointments property of the microsoft.graph.bookingBusiness entity.
 */
export interface AppointmentsRequestBuilder extends BaseRequestBuilder<AppointmentsRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the appointments property of the microsoft.graph.bookingBusiness entity.
     * @param bookingAppointmentId The unique identifier of bookingAppointment
     * @returns {BookingAppointmentItemRequestBuilder}
     */
     byBookingAppointmentId(bookingAppointmentId: string) : BookingAppointmentItemRequestBuilder;
    /**
     * Get a list of bookingAppointment objects for the specified bookingBusiness.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<BookingAppointmentCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/bookingbusiness-list-appointments?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<AppointmentsRequestBuilderGetQueryParameters> | undefined) : Promise<BookingAppointmentCollectionResponse | undefined>;
    /**
     * Create a new bookingAppointment for the specified bookingBusiness.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<BookingAppointment>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/bookingbusiness-post-appointments?view=graph-rest-1.0|Find more info here}
     */
     post(body: BookingAppointment, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<BookingAppointment | undefined>;
    /**
     * Get a list of bookingAppointment objects for the specified bookingBusiness.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<AppointmentsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create a new bookingAppointment for the specified bookingBusiness.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: BookingAppointment, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get a list of bookingAppointment objects for the specified bookingBusiness.
 */
export interface AppointmentsRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Uri template for the request builder.
 */
export const AppointmentsRequestBuilderUriTemplate = "{+baseurl}/bookingBusinesses/{bookingBusiness%2Did}/appointments{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const AppointmentsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const AppointmentsRequestBuilderNavigationMetadata: Record<Exclude<keyof AppointmentsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byBookingAppointmentId: {
        requestsMetadata: BookingAppointmentItemRequestBuilderRequestsMetadata,
        navigationMetadata: BookingAppointmentItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["bookingAppointment%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const AppointmentsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: AppointmentsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createBookingAppointmentCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: AppointmentsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: AppointmentsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createBookingAppointmentFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeBookingAppointment,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Provides operations to manage the appointments property of the microsoft.graph.bookingBusiness entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
} as const;
/**
 * Provides operations to manage the appointments property of the microsoft.graph.bookingBusiness entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    AdditionalInformation: "additionalInformation",
    AdditionalInformationDesc: "additionalInformation desc",
    AnonymousJoinWebUrl: "anonymousJoinWebUrl",
    AnonymousJoinWebUrlDesc: "anonymousJoinWebUrl desc",
    AppointmentLabel: "appointmentLabel",
    AppointmentLabelDesc: "appointmentLabel desc",
    CreatedDateTime: "createdDateTime",
    CreatedDateTimeDesc: "createdDateTime desc",
    CustomerEmailAddress: "customerEmailAddress",
    CustomerEmailAddressDesc: "customerEmailAddress desc",
    CustomerId: "customerId",
    CustomerIdDesc: "customerId desc",
    CustomerLocation: "customerLocation",
    CustomerLocationDesc: "customerLocation desc",
    CustomerName: "customerName",
    CustomerNameDesc: "customerName desc",
    CustomerNotes: "customerNotes",
    CustomerNotesDesc: "customerNotes desc",
    CustomerPhone: "customerPhone",
    CustomerPhoneDesc: "customerPhone desc",
    Customers: "customers",
    CustomersDesc: "customers desc",
    CustomerTimeZone: "customerTimeZone",
    CustomerTimeZoneDesc: "customerTimeZone desc",
    Duration: "duration",
    DurationDesc: "duration desc",
    End: "end",
    EndDesc: "end desc",
    FilledAttendeesCount: "filledAttendeesCount",
    FilledAttendeesCountDesc: "filledAttendeesCount desc",
    InvoiceAmount: "invoiceAmount",
    InvoiceAmountDesc: "invoiceAmount desc",
    InvoiceDate: "invoiceDate",
    InvoiceDateDesc: "invoiceDate desc",
    InvoiceId: "invoiceId",
    InvoiceIdDesc: "invoiceId desc",
    InvoiceStatus: "invoiceStatus",
    InvoiceStatusDesc: "invoiceStatus desc",
    InvoiceUrl: "invoiceUrl",
    InvoiceUrlDesc: "invoiceUrl desc",
    IsCustomerAllowedToManageBooking: "isCustomerAllowedToManageBooking",
    IsCustomerAllowedToManageBookingDesc: "isCustomerAllowedToManageBooking desc",
    IsLocationOnline: "isLocationOnline",
    IsLocationOnlineDesc: "isLocationOnline desc",
    JoinWebUrl: "joinWebUrl",
    JoinWebUrlDesc: "joinWebUrl desc",
    LastUpdatedDateTime: "lastUpdatedDateTime",
    LastUpdatedDateTimeDesc: "lastUpdatedDateTime desc",
    MaximumAttendeesCount: "maximumAttendeesCount",
    MaximumAttendeesCountDesc: "maximumAttendeesCount desc",
    OnlineMeetingUrl: "onlineMeetingUrl",
    OnlineMeetingUrlDesc: "onlineMeetingUrl desc",
    OptOutOfCustomerEmail: "optOutOfCustomerEmail",
    OptOutOfCustomerEmailDesc: "optOutOfCustomerEmail desc",
    PostBuffer: "postBuffer",
    PostBufferDesc: "postBuffer desc",
    PreBuffer: "preBuffer",
    PreBufferDesc: "preBuffer desc",
    Price: "price",
    PriceDesc: "price desc",
    PriceType: "priceType",
    PriceTypeDesc: "priceType desc",
    Reminders: "reminders",
    RemindersDesc: "reminders desc",
    SelfServiceAppointmentId: "selfServiceAppointmentId",
    SelfServiceAppointmentIdDesc: "selfServiceAppointmentId desc",
    ServiceId: "serviceId",
    ServiceIdDesc: "serviceId desc",
    ServiceLocation: "serviceLocation",
    ServiceLocationDesc: "serviceLocation desc",
    ServiceName: "serviceName",
    ServiceNameDesc: "serviceName desc",
    ServiceNotes: "serviceNotes",
    ServiceNotesDesc: "serviceNotes desc",
    SmsNotificationsEnabled: "smsNotificationsEnabled",
    SmsNotificationsEnabledDesc: "smsNotificationsEnabled desc",
    StaffMemberIds: "staffMemberIds",
    StaffMemberIdsDesc: "staffMemberIds desc",
    Start: "start",
    StartDesc: "start desc",
} as const;
/**
 * Provides operations to manage the appointments property of the microsoft.graph.bookingBusiness entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    AdditionalInformation: "additionalInformation",
    AnonymousJoinWebUrl: "anonymousJoinWebUrl",
    AppointmentLabel: "appointmentLabel",
    CreatedDateTime: "createdDateTime",
    CustomerEmailAddress: "customerEmailAddress",
    CustomerId: "customerId",
    CustomerLocation: "customerLocation",
    CustomerName: "customerName",
    CustomerNotes: "customerNotes",
    CustomerPhone: "customerPhone",
    Customers: "customers",
    CustomerTimeZone: "customerTimeZone",
    Duration: "duration",
    End: "end",
    FilledAttendeesCount: "filledAttendeesCount",
    InvoiceAmount: "invoiceAmount",
    InvoiceDate: "invoiceDate",
    InvoiceId: "invoiceId",
    InvoiceStatus: "invoiceStatus",
    InvoiceUrl: "invoiceUrl",
    IsCustomerAllowedToManageBooking: "isCustomerAllowedToManageBooking",
    IsLocationOnline: "isLocationOnline",
    JoinWebUrl: "joinWebUrl",
    LastUpdatedDateTime: "lastUpdatedDateTime",
    MaximumAttendeesCount: "maximumAttendeesCount",
    OnlineMeetingUrl: "onlineMeetingUrl",
    OptOutOfCustomerEmail: "optOutOfCustomerEmail",
    PostBuffer: "postBuffer",
    PreBuffer: "preBuffer",
    Price: "price",
    PriceType: "priceType",
    Reminders: "reminders",
    SelfServiceAppointmentId: "selfServiceAppointmentId",
    ServiceId: "serviceId",
    ServiceLocation: "serviceLocation",
    ServiceName: "serviceName",
    ServiceNotes: "serviceNotes",
    SmsNotificationsEnabled: "smsNotificationsEnabled",
    StaffMemberIds: "staffMemberIds",
    Start: "start",
} as const;
/* tslint:enable */
/* eslint-enable */
