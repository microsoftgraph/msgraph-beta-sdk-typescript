/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createServicePrincipalFromDiscriminatorValue, deserializeIntoBaseCollectionPaginationCountResponse, deserializeIntoEntity, serializeBaseCollectionPaginationCountResponse, serializeEntity, serializeServicePrincipal, type BaseCollectionPaginationCountResponse, type Entity, type ServicePrincipal } from '../index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export type AccessType = (typeof AccessTypeObject)[keyof typeof AccessTypeObject];
export interface Alert extends Entity, Parsable {
    /**
     * The actions property
     */
    actions?: AlertAction[];
    /**
     * The alertType property
     */
    alertType?: AlertType;
    /**
     * The creationDateTime property
     */
    creationDateTime?: Date;
    /**
     * The description property
     */
    description?: string;
    /**
     * The detectionTechnology property
     */
    detectionTechnology?: string;
    /**
     * The displayName property
     */
    displayName?: string;
    /**
     * The policy property
     */
    policy?: FilteringPolicy;
    /**
     * The relatedResources property
     */
    relatedResources?: RelatedResource[];
    /**
     * The severity property
     */
    severity?: ThreatSeverity;
    /**
     * The vendorName property
     */
    vendorName?: string;
}
export interface AlertAction extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * The actionLink property
     */
    actionLink?: string;
    /**
     * The actionText property
     */
    actionText?: string;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export interface AlertCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: Alert[];
}
export type AlertType = (typeof AlertTypeObject)[keyof typeof AlertTypeObject];
export interface ApplicationSnapshot extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The appId property
     */
    appId?: string;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export interface AssociatedBranch extends Association, Parsable {
    /**
     * Identifier for the branch.
     */
    branchId?: string;
}
export interface Association extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export type BandwidthCapacityInMbps = (typeof BandwidthCapacityInMbpsObject)[keyof typeof BandwidthCapacityInMbpsObject];
export interface BgpConfiguration extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Specifies the ASN of the BGP.
     */
    asn?: number;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * Specifies the BGP IP address.
     */
    ipAddress?: string;
    /**
     * Specifies the BGP IP address of peer (Microsoft, in this case).
     */
    localIpAddress?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Specifies the BGP IP address of customer's on-premise VPN router configuration.
     */
    peerIpAddress?: string;
}
export interface BranchConnectivityConfiguration extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * Unique identifier or a specific reference assigned to a branchSite. Key.
     */
    branchId?: string;
    /**
     * Display name assigned to a branchSite.
     */
    branchName?: string;
    /**
     * List of connectivity configurations for deviceLink objects.
     */
    links?: ConnectivityConfigurationLink[];
    /**
     * The OdataType property
     */
    odataType?: string;
}
export interface BranchSite extends Entity, Parsable {
    /**
     * Determines the maximum allowed Mbps (megabits per second) bandwidth from a branch site. The possible values are:250,500,750,1000.
     */
    bandwidthCapacity?: number;
    /**
     * Specifies the connectivity details of all device links associated with a branch.
     */
    connectivityConfiguration?: BranchConnectivityConfiguration;
    /**
     * Determines the branch site status. The possible values are: pending, connected, inactive, error.
     */
    connectivityState?: ConnectivityState;
    /**
     * The branch site is created in the specified country. DO NOT USE.
     */
    country?: string;
    /**
     * Each unique CPE device associated with a branch is specified. Supports $expand.
     */
    deviceLinks?: DeviceLink[];
    /**
     * Each forwarding profile associated with a branch site is specified. Supports $expand.
     */
    forwardingProfiles?: ForwardingProfile[];
    /**
     * last modified time.
     */
    lastModifiedDateTime?: Date;
    /**
     * Name.
     */
    name?: string;
    /**
     * The region property
     */
    region?: Region;
    /**
     * The branch version.
     */
    version?: string;
}
export interface BranchSiteCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: BranchSite[];
}
export interface ConditionalAccessPolicy extends Entity, Parsable {
    /**
     * Indicates the date and time the conditional access policy was created.
     */
    createdDateTime?: Date;
    /**
     * Provides a summary of the conditional access policy.
     */
    description?: string;
    /**
     * Represents the human-readable name or title assigned to the conditional access policy.
     */
    displayName?: string;
    /**
     * Indicates the date and time when the conditional access policy was last modified.
     */
    modifiedDateTime?: Date;
}
export interface ConditionalAccessPolicyCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: ConditionalAccessPolicy[];
}
export interface ConditionalAccessSettings extends Entity, Parsable {
    /**
     * The signalingStatus property
     */
    signalingStatus?: Status;
}
export type ConnectionStatus = (typeof ConnectionStatusObject)[keyof typeof ConnectionStatusObject];
export interface Connectivity extends Entity, Parsable {
    /**
     * Branches represent locations for connectivity. DEPRECATED AND TO BE RETIRED SOON. Use the remoteNetwork relationship and its associated APIs instead.
     */
    branches?: BranchSite[];
    /**
     * Represent locations, such as branches, that are connected to Global Secure Access services through an IPsec tunnel.
     */
    remoteNetworks?: RemoteNetwork[];
    /**
     * The webCategories property
     */
    webCategories?: WebCategory[];
}
export interface ConnectivityConfigurationLink extends Entity, Parsable {
    /**
     * Specifies the name of the link.
     */
    displayName?: string;
    /**
     * Specifies Microsoft's end of the tunnel configuration for a device link.
     */
    localConfigurations?: LocalConnectivityConfiguration[];
    /**
     * The peerConfiguration property
     */
    peerConfiguration?: PeerConnectivityConfiguration;
}
export interface ConnectivityConfigurationLinkCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: ConnectivityConfigurationLink[];
}
export type ConnectivityState = (typeof ConnectivityStateObject)[keyof typeof ConnectivityStateObject];
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AlertAction}
 */
export function createAlertActionFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAlertAction;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AlertCollectionResponse}
 */
export function createAlertCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAlertCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Alert}
 */
export function createAlertFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAlert;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ApplicationSnapshot}
 */
export function createApplicationSnapshotFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoApplicationSnapshot;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AssociatedBranch}
 */
export function createAssociatedBranchFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAssociatedBranch;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Association}
 */
export function createAssociationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.networkaccess.associatedBranch":
                    return deserializeIntoAssociatedBranch;
            }
        }
    }
    return deserializeIntoAssociation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {BgpConfiguration}
 */
export function createBgpConfigurationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoBgpConfiguration;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {BranchConnectivityConfiguration}
 */
export function createBranchConnectivityConfigurationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoBranchConnectivityConfiguration;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {BranchSiteCollectionResponse}
 */
export function createBranchSiteCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoBranchSiteCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {BranchSite}
 */
export function createBranchSiteFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoBranchSite;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ConditionalAccessPolicyCollectionResponse}
 */
export function createConditionalAccessPolicyCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoConditionalAccessPolicyCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ConditionalAccessPolicy}
 */
export function createConditionalAccessPolicyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoConditionalAccessPolicy;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ConditionalAccessSettings}
 */
export function createConditionalAccessSettingsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoConditionalAccessSettings;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ConnectivityConfigurationLinkCollectionResponse}
 */
export function createConnectivityConfigurationLinkCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoConnectivityConfigurationLinkCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ConnectivityConfigurationLink}
 */
export function createConnectivityConfigurationLinkFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoConnectivityConfigurationLink;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Connectivity}
 */
export function createConnectivityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoConnectivity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CrossTenantAccess}
 */
export function createCrossTenantAccessFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCrossTenantAccess;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CrossTenantAccessSettings}
 */
export function createCrossTenantAccessSettingsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCrossTenantAccessSettings;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CrossTenantSummary}
 */
export function createCrossTenantSummaryFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCrossTenantSummary;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Destination}
 */
export function createDestinationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDestination;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DestinationSummary}
 */
export function createDestinationSummaryFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDestinationSummary;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Device}
 */
export function createDeviceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDevice;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DeviceLinkCollectionResponse}
 */
export function createDeviceLinkCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDeviceLinkCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DeviceLink}
 */
export function createDeviceLinkFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDeviceLink;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DeviceUsageSummary}
 */
export function createDeviceUsageSummaryFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDeviceUsageSummary;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DiscoveredApplicationSegmentReport}
 */
export function createDiscoveredApplicationSegmentReportFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDiscoveredApplicationSegmentReport;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {EnrichedAuditLogs}
 */
export function createEnrichedAuditLogsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEnrichedAuditLogs;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {EnrichedAuditLogsSettings}
 */
export function createEnrichedAuditLogsSettingsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEnrichedAuditLogsSettings;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {EntitiesSummary}
 */
export function createEntitiesSummaryFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEntitiesSummary;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {FilteringPolicyCollectionResponse}
 */
export function createFilteringPolicyCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoFilteringPolicyCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {FilteringPolicy}
 */
export function createFilteringPolicyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoFilteringPolicy;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {FilteringPolicyLink}
 */
export function createFilteringPolicyLinkFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoFilteringPolicyLink;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {FilteringProfileCollectionResponse}
 */
export function createFilteringProfileCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoFilteringProfileCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {FilteringProfile}
 */
export function createFilteringProfileFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoFilteringProfile;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {FilteringRule}
 */
export function createFilteringRuleFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.networkaccess.fqdnFilteringRule":
                    return deserializeIntoFqdnFilteringRule;
                case "#microsoft.graph.networkaccess.webCategoryFilteringRule":
                    return deserializeIntoWebCategoryFilteringRule;
            }
        }
    }
    return deserializeIntoFilteringRule;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ForwardingOptions}
 */
export function createForwardingOptionsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoForwardingOptions;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ForwardingPolicyCollectionResponse}
 */
export function createForwardingPolicyCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoForwardingPolicyCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ForwardingPolicy}
 */
export function createForwardingPolicyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoForwardingPolicy;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ForwardingPolicyLink}
 */
export function createForwardingPolicyLinkFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoForwardingPolicyLink;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ForwardingProfileCollectionResponse}
 */
export function createForwardingProfileCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoForwardingProfileCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ForwardingProfile}
 */
export function createForwardingProfileFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoForwardingProfile;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ForwardingRule}
 */
export function createForwardingRuleFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.networkaccess.internetAccessForwardingRule":
                    return deserializeIntoInternetAccessForwardingRule;
                case "#microsoft.graph.networkaccess.m365ForwardingRule":
                    return deserializeIntoM365ForwardingRule;
                case "#microsoft.graph.networkaccess.privateAccessForwardingRule":
                    return deserializeIntoPrivateAccessForwardingRule;
            }
        }
    }
    return deserializeIntoForwardingRule;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {FqdnFilteringRule}
 */
export function createFqdnFilteringRuleFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoFqdnFilteringRule;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Fqdn}
 */
export function createFqdnFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoFqdn;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Headers}
 */
export function createHeadersFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoHeaders;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {InternetAccessForwardingRule}
 */
export function createInternetAccessForwardingRuleFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoInternetAccessForwardingRule;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {IpAddress}
 */
export function createIpAddressFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoIpAddress;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {IpRange}
 */
export function createIpRangeFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoIpRange;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {IpSubnet}
 */
export function createIpSubnetFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoIpSubnet;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LocalConnectivityConfiguration}
 */
export function createLocalConnectivityConfigurationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLocalConnectivityConfiguration;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Logs}
 */
export function createLogsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLogs;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {M365ForwardingRule}
 */
export function createM365ForwardingRuleFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoM365ForwardingRule;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NetworkAccessRoot}
 */
export function createNetworkAccessRootFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNetworkAccessRoot;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NetworkAccessTrafficCollectionResponse}
 */
export function createNetworkAccessTrafficCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNetworkAccessTrafficCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NetworkAccessTraffic}
 */
export function createNetworkAccessTrafficFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNetworkAccessTraffic;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PeerConnectivityConfiguration}
 */
export function createPeerConnectivityConfigurationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPeerConnectivityConfiguration;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Policy}
 */
export function createPolicyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.networkaccess.filteringPolicy":
                    return deserializeIntoFilteringPolicy;
                case "#microsoft.graph.networkaccess.forwardingPolicy":
                    return deserializeIntoForwardingPolicy;
            }
        }
    }
    return deserializeIntoPolicy;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PolicyLinkCollectionResponse}
 */
export function createPolicyLinkCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPolicyLinkCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PolicyLink}
 */
export function createPolicyLinkFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.networkaccess.filteringPolicyLink":
                    return deserializeIntoFilteringPolicyLink;
                case "#microsoft.graph.networkaccess.forwardingPolicyLink":
                    return deserializeIntoForwardingPolicyLink;
            }
        }
    }
    return deserializeIntoPolicyLink;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PolicyRuleCollectionResponse}
 */
export function createPolicyRuleCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPolicyRuleCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PolicyRuleDelta}
 */
export function createPolicyRuleDeltaFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPolicyRuleDelta;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PolicyRule}
 */
export function createPolicyRuleFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.networkaccess.filteringRule":
                    return deserializeIntoFilteringRule;
                case "#microsoft.graph.networkaccess.forwardingRule":
                    return deserializeIntoForwardingRule;
                case "#microsoft.graph.networkaccess.fqdnFilteringRule":
                    return deserializeIntoFqdnFilteringRule;
                case "#microsoft.graph.networkaccess.internetAccessForwardingRule":
                    return deserializeIntoInternetAccessForwardingRule;
                case "#microsoft.graph.networkaccess.m365ForwardingRule":
                    return deserializeIntoM365ForwardingRule;
                case "#microsoft.graph.networkaccess.privateAccessForwardingRule":
                    return deserializeIntoPrivateAccessForwardingRule;
                case "#microsoft.graph.networkaccess.webCategoryFilteringRule":
                    return deserializeIntoWebCategoryFilteringRule;
            }
        }
    }
    return deserializeIntoPolicyRule;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PrivateAccessDetails}
 */
export function createPrivateAccessDetailsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPrivateAccessDetails;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PrivateAccessForwardingRule}
 */
export function createPrivateAccessForwardingRuleFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPrivateAccessForwardingRule;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Profile}
 */
export function createProfileFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.networkaccess.filteringProfile":
                    return deserializeIntoFilteringProfile;
                case "#microsoft.graph.networkaccess.forwardingProfile":
                    return deserializeIntoForwardingProfile;
            }
        }
    }
    return deserializeIntoProfile;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RedundancyConfiguration}
 */
export function createRedundancyConfigurationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRedundancyConfiguration;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RelatedDestination}
 */
export function createRelatedDestinationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRelatedDestination;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RelatedDevice}
 */
export function createRelatedDeviceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRelatedDevice;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RelatedMalware}
 */
export function createRelatedMalwareFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRelatedMalware;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RelatedProcess}
 */
export function createRelatedProcessFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRelatedProcess;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RelatedRemoteNetwork}
 */
export function createRelatedRemoteNetworkFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRelatedRemoteNetwork;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RelatedResource}
 */
export function createRelatedResourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.networkaccess.relatedDestination":
                    return deserializeIntoRelatedDestination;
                case "#microsoft.graph.networkaccess.relatedDevice":
                    return deserializeIntoRelatedDevice;
                case "#microsoft.graph.networkaccess.relatedMalware":
                    return deserializeIntoRelatedMalware;
                case "#microsoft.graph.networkaccess.relatedProcess":
                    return deserializeIntoRelatedProcess;
                case "#microsoft.graph.networkaccess.relatedRemoteNetwork":
                    return deserializeIntoRelatedRemoteNetwork;
                case "#microsoft.graph.networkaccess.relatedTenant":
                    return deserializeIntoRelatedTenant;
                case "#microsoft.graph.networkaccess.relatedThreatIntelligence":
                    return deserializeIntoRelatedThreatIntelligence;
                case "#microsoft.graph.networkaccess.relatedToken":
                    return deserializeIntoRelatedToken;
                case "#microsoft.graph.networkaccess.relatedUser":
                    return deserializeIntoRelatedUser;
                case "#microsoft.graph.networkaccess.relatedWebCategory":
                    return deserializeIntoRelatedWebCategory;
            }
        }
    }
    return deserializeIntoRelatedResource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RelatedTenant}
 */
export function createRelatedTenantFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRelatedTenant;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RelatedThreatIntelligence}
 */
export function createRelatedThreatIntelligenceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRelatedThreatIntelligence;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RelatedToken}
 */
export function createRelatedTokenFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRelatedToken;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RelatedUser}
 */
export function createRelatedUserFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRelatedUser;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RelatedWebCategory}
 */
export function createRelatedWebCategoryFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRelatedWebCategory;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RemoteNetworkCollectionResponse}
 */
export function createRemoteNetworkCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRemoteNetworkCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RemoteNetworkConnectivityConfiguration}
 */
export function createRemoteNetworkConnectivityConfigurationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRemoteNetworkConnectivityConfiguration;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RemoteNetwork}
 */
export function createRemoteNetworkFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRemoteNetwork;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RemoteNetworkHealthEventCollectionResponse}
 */
export function createRemoteNetworkHealthEventCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRemoteNetworkHealthEventCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RemoteNetworkHealthEvent}
 */
export function createRemoteNetworkHealthEventFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRemoteNetworkHealthEvent;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Reports}
 */
export function createReportsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoReports;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RuleDestination}
 */
export function createRuleDestinationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.networkaccess.fqdn":
                    return deserializeIntoFqdn;
                case "#microsoft.graph.networkaccess.ipAddress":
                    return deserializeIntoIpAddress;
                case "#microsoft.graph.networkaccess.ipRange":
                    return deserializeIntoIpRange;
                case "#microsoft.graph.networkaccess.ipSubnet":
                    return deserializeIntoIpSubnet;
                case "#microsoft.graph.networkaccess.url":
                    return deserializeIntoUrl;
                case "#microsoft.graph.networkaccess.webCategory":
                    return deserializeIntoWebCategory;
            }
        }
    }
    return deserializeIntoRuleDestination;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Settings}
 */
export function createSettingsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSettings;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TenantStatus}
 */
export function createTenantStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTenantStatus;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ThirdPartyTokenDetails}
 */
export function createThirdPartyTokenDetailsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoThirdPartyTokenDetails;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TransactionSummary}
 */
export function createTransactionSummaryFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTransactionSummary;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TunnelConfiguration}
 */
export function createTunnelConfigurationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.networkaccess.tunnelConfigurationIKEv2Custom":
                    return deserializeIntoTunnelConfigurationIKEv2Custom;
                case "#microsoft.graph.networkaccess.tunnelConfigurationIKEv2Default":
                    return deserializeIntoTunnelConfigurationIKEv2Default;
            }
        }
    }
    return deserializeIntoTunnelConfiguration;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TunnelConfigurationIKEv2Custom}
 */
export function createTunnelConfigurationIKEv2CustomFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTunnelConfigurationIKEv2Custom;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TunnelConfigurationIKEv2Default}
 */
export function createTunnelConfigurationIKEv2DefaultFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTunnelConfigurationIKEv2Default;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Url}
 */
export function createUrlFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUrl;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UsageProfilingPoint}
 */
export function createUsageProfilingPointFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUsageProfilingPoint;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {User}
 */
export function createUserFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUser;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WebCategoriesSummary}
 */
export function createWebCategoriesSummaryFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWebCategoriesSummary;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WebCategoryFilteringRule}
 */
export function createWebCategoryFilteringRuleFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWebCategoryFilteringRule;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WebCategory}
 */
export function createWebCategoryFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWebCategory;
}
export interface CrossTenantAccess extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The number of devices that accessed the external tenant.
     */
    deviceCount?: number;
    /**
     * The timestamp of the most recent access to the external tenant.
     */
    lastAccessDateTime?: Date;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The tenant ID of the external tenant.
     */
    resourceTenantId?: string;
    /**
     * The name of the external tenant.
     */
    resourceTenantName?: string;
    /**
     * The domain of the external tenant.
     */
    resourceTenantPrimaryDomain?: string;
    /**
     * The usageStatus property
     */
    usageStatus?: UsageStatus;
    /**
     * The number of users that accessed the external tenant.
     */
    userCount?: number;
}
export interface CrossTenantAccessSettings extends Entity, Parsable {
    /**
     * The networkPacketTaggingStatus property
     */
    networkPacketTaggingStatus?: Status;
}
export interface CrossTenantSummary extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The total number of authentication sessions between startDateTime and endDateTime.
     */
    authTransactionCount?: number;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The number of unique devices that performed cross-tenant access.
     */
    deviceCount?: number;
    /**
     * The number of unique tenants that were accessed between endDateTime and discoveryPivotDateTime, but weren't accessed between discoveryPivotDateTime and startDateTime.
     */
    newTenantCount?: number;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The number of tenants that are rarely used.
     */
    rarelyUsedTenantCount?: number;
    /**
     * The number of unique tenants that were accessed, not including the device's tenant.
     */
    tenantCount?: number;
    /**
     * The number of unique users that performed cross-tenant access.
     */
    userCount?: number;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoAlert(alert: Partial<Alert> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(alert),
        "actions": n => { alert.actions = n.getCollectionOfObjectValues<AlertAction>(createAlertActionFromDiscriminatorValue); },
        "alertType": n => { alert.alertType = n.getEnumValue<AlertType>(AlertTypeObject); },
        "creationDateTime": n => { alert.creationDateTime = n.getDateValue(); },
        "description": n => { alert.description = n.getStringValue(); },
        "detectionTechnology": n => { alert.detectionTechnology = n.getStringValue(); },
        "displayName": n => { alert.displayName = n.getStringValue(); },
        "policy": n => { alert.policy = n.getObjectValue<FilteringPolicy>(createFilteringPolicyFromDiscriminatorValue); },
        "relatedResources": n => { alert.relatedResources = n.getCollectionOfObjectValues<RelatedResource>(createRelatedResourceFromDiscriminatorValue); },
        "severity": n => { alert.severity = n.getEnumValue<ThreatSeverity>(ThreatSeverityObject); },
        "vendorName": n => { alert.vendorName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoAlertAction(alertAction: Partial<AlertAction> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "actionLink": n => { alertAction.actionLink = n.getStringValue(); },
        "actionText": n => { alertAction.actionText = n.getStringValue(); },
        "backingStoreEnabled": n => { alertAction.backingStoreEnabled = true; },
        "@odata.type": n => { alertAction.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoAlertCollectionResponse(alertCollectionResponse: Partial<AlertCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(alertCollectionResponse),
        "value": n => { alertCollectionResponse.value = n.getCollectionOfObjectValues<Alert>(createAlertFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoApplicationSnapshot(applicationSnapshot: Partial<ApplicationSnapshot> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "appId": n => { applicationSnapshot.appId = n.getStringValue(); },
        "backingStoreEnabled": n => { applicationSnapshot.backingStoreEnabled = true; },
        "@odata.type": n => { applicationSnapshot.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoAssociatedBranch(associatedBranch: Partial<AssociatedBranch> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAssociation(associatedBranch),
        "branchId": n => { associatedBranch.branchId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoAssociation(association: Partial<Association> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { association.backingStoreEnabled = true; },
        "@odata.type": n => { association.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoBgpConfiguration(bgpConfiguration: Partial<BgpConfiguration> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "asn": n => { bgpConfiguration.asn = n.getNumberValue(); },
        "backingStoreEnabled": n => { bgpConfiguration.backingStoreEnabled = true; },
        "ipAddress": n => { bgpConfiguration.ipAddress = n.getStringValue(); },
        "localIpAddress": n => { bgpConfiguration.localIpAddress = n.getStringValue(); },
        "@odata.type": n => { bgpConfiguration.odataType = n.getStringValue(); },
        "peerIpAddress": n => { bgpConfiguration.peerIpAddress = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoBranchConnectivityConfiguration(branchConnectivityConfiguration: Partial<BranchConnectivityConfiguration> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { branchConnectivityConfiguration.backingStoreEnabled = true; },
        "branchId": n => { branchConnectivityConfiguration.branchId = n.getStringValue(); },
        "branchName": n => { branchConnectivityConfiguration.branchName = n.getStringValue(); },
        "links": n => { branchConnectivityConfiguration.links = n.getCollectionOfObjectValues<ConnectivityConfigurationLink>(createConnectivityConfigurationLinkFromDiscriminatorValue); },
        "@odata.type": n => { branchConnectivityConfiguration.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoBranchSite(branchSite: Partial<BranchSite> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(branchSite),
        "bandwidthCapacity": n => { branchSite.bandwidthCapacity = n.getNumberValue(); },
        "connectivityConfiguration": n => { branchSite.connectivityConfiguration = n.getObjectValue<BranchConnectivityConfiguration>(createBranchConnectivityConfigurationFromDiscriminatorValue); },
        "connectivityState": n => { branchSite.connectivityState = n.getEnumValue<ConnectivityState>(ConnectivityStateObject); },
        "country": n => { branchSite.country = n.getStringValue(); },
        "deviceLinks": n => { branchSite.deviceLinks = n.getCollectionOfObjectValues<DeviceLink>(createDeviceLinkFromDiscriminatorValue); },
        "forwardingProfiles": n => { branchSite.forwardingProfiles = n.getCollectionOfObjectValues<ForwardingProfile>(createForwardingProfileFromDiscriminatorValue); },
        "lastModifiedDateTime": n => { branchSite.lastModifiedDateTime = n.getDateValue(); },
        "name": n => { branchSite.name = n.getStringValue(); },
        "region": n => { branchSite.region = n.getEnumValue<Region>(RegionObject); },
        "version": n => { branchSite.version = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoBranchSiteCollectionResponse(branchSiteCollectionResponse: Partial<BranchSiteCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(branchSiteCollectionResponse),
        "value": n => { branchSiteCollectionResponse.value = n.getCollectionOfObjectValues<BranchSite>(createBranchSiteFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoConditionalAccessPolicy(conditionalAccessPolicy: Partial<ConditionalAccessPolicy> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(conditionalAccessPolicy),
        "createdDateTime": n => { conditionalAccessPolicy.createdDateTime = n.getDateValue(); },
        "description": n => { conditionalAccessPolicy.description = n.getStringValue(); },
        "displayName": n => { conditionalAccessPolicy.displayName = n.getStringValue(); },
        "modifiedDateTime": n => { conditionalAccessPolicy.modifiedDateTime = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoConditionalAccessPolicyCollectionResponse(conditionalAccessPolicyCollectionResponse: Partial<ConditionalAccessPolicyCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(conditionalAccessPolicyCollectionResponse),
        "value": n => { conditionalAccessPolicyCollectionResponse.value = n.getCollectionOfObjectValues<ConditionalAccessPolicy>(createConditionalAccessPolicyFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoConditionalAccessSettings(conditionalAccessSettings: Partial<ConditionalAccessSettings> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(conditionalAccessSettings),
        "signalingStatus": n => { conditionalAccessSettings.signalingStatus = n.getEnumValue<Status>(StatusObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoConnectivity(connectivity: Partial<Connectivity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(connectivity),
        "branches": n => { connectivity.branches = n.getCollectionOfObjectValues<BranchSite>(createBranchSiteFromDiscriminatorValue); },
        "remoteNetworks": n => { connectivity.remoteNetworks = n.getCollectionOfObjectValues<RemoteNetwork>(createRemoteNetworkFromDiscriminatorValue); },
        "webCategories": n => { connectivity.webCategories = n.getCollectionOfObjectValues<WebCategory>(createWebCategoryFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoConnectivityConfigurationLink(connectivityConfigurationLink: Partial<ConnectivityConfigurationLink> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(connectivityConfigurationLink),
        "displayName": n => { connectivityConfigurationLink.displayName = n.getStringValue(); },
        "localConfigurations": n => { connectivityConfigurationLink.localConfigurations = n.getCollectionOfObjectValues<LocalConnectivityConfiguration>(createLocalConnectivityConfigurationFromDiscriminatorValue); },
        "peerConfiguration": n => { connectivityConfigurationLink.peerConfiguration = n.getObjectValue<PeerConnectivityConfiguration>(createPeerConnectivityConfigurationFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoConnectivityConfigurationLinkCollectionResponse(connectivityConfigurationLinkCollectionResponse: Partial<ConnectivityConfigurationLinkCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(connectivityConfigurationLinkCollectionResponse),
        "value": n => { connectivityConfigurationLinkCollectionResponse.value = n.getCollectionOfObjectValues<ConnectivityConfigurationLink>(createConnectivityConfigurationLinkFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoCrossTenantAccess(crossTenantAccess: Partial<CrossTenantAccess> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { crossTenantAccess.backingStoreEnabled = true; },
        "deviceCount": n => { crossTenantAccess.deviceCount = n.getNumberValue(); },
        "lastAccessDateTime": n => { crossTenantAccess.lastAccessDateTime = n.getDateValue(); },
        "@odata.type": n => { crossTenantAccess.odataType = n.getStringValue(); },
        "resourceTenantId": n => { crossTenantAccess.resourceTenantId = n.getStringValue(); },
        "resourceTenantName": n => { crossTenantAccess.resourceTenantName = n.getStringValue(); },
        "resourceTenantPrimaryDomain": n => { crossTenantAccess.resourceTenantPrimaryDomain = n.getStringValue(); },
        "usageStatus": n => { crossTenantAccess.usageStatus = n.getEnumValue<UsageStatus>(UsageStatusObject); },
        "userCount": n => { crossTenantAccess.userCount = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoCrossTenantAccessSettings(crossTenantAccessSettings: Partial<CrossTenantAccessSettings> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(crossTenantAccessSettings),
        "networkPacketTaggingStatus": n => { crossTenantAccessSettings.networkPacketTaggingStatus = n.getEnumValue<Status>(StatusObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoCrossTenantSummary(crossTenantSummary: Partial<CrossTenantSummary> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "authTransactionCount": n => { crossTenantSummary.authTransactionCount = n.getNumberValue(); },
        "backingStoreEnabled": n => { crossTenantSummary.backingStoreEnabled = true; },
        "deviceCount": n => { crossTenantSummary.deviceCount = n.getNumberValue(); },
        "newTenantCount": n => { crossTenantSummary.newTenantCount = n.getNumberValue(); },
        "@odata.type": n => { crossTenantSummary.odataType = n.getStringValue(); },
        "rarelyUsedTenantCount": n => { crossTenantSummary.rarelyUsedTenantCount = n.getNumberValue(); },
        "tenantCount": n => { crossTenantSummary.tenantCount = n.getNumberValue(); },
        "userCount": n => { crossTenantSummary.userCount = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoDestination(destination: Partial<Destination> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { destination.backingStoreEnabled = true; },
        "deviceCount": n => { destination.deviceCount = n.getNumberValue(); },
        "firstAccessDateTime": n => { destination.firstAccessDateTime = n.getDateValue(); },
        "fqdn": n => { destination.fqdn = n.getStringValue(); },
        "ip": n => { destination.ip = n.getStringValue(); },
        "lastAccessDateTime": n => { destination.lastAccessDateTime = n.getDateValue(); },
        "networkingProtocol": n => { destination.networkingProtocol = n.getEnumValue<NetworkingProtocol>(NetworkingProtocolObject); },
        "@odata.type": n => { destination.odataType = n.getStringValue(); },
        "port": n => { destination.port = n.getNumberValue(); },
        "threatCount": n => { destination.threatCount = n.getNumberValue(); },
        "totalBytesReceived": n => { destination.totalBytesReceived = n.getNumberValue(); },
        "totalBytesSent": n => { destination.totalBytesSent = n.getNumberValue(); },
        "trafficType": n => { destination.trafficType = n.getEnumValue<TrafficType>(TrafficTypeObject); },
        "transactionCount": n => { destination.transactionCount = n.getNumberValue(); },
        "userCount": n => { destination.userCount = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoDestinationSummary(destinationSummary: Partial<DestinationSummary> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { destinationSummary.backingStoreEnabled = true; },
        "count": n => { destinationSummary.count = n.getNumberValue(); },
        "destination": n => { destinationSummary.destination = n.getStringValue(); },
        "@odata.type": n => { destinationSummary.odataType = n.getStringValue(); },
        "trafficType": n => { destinationSummary.trafficType = n.getEnumValue<TrafficType>(TrafficTypeObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoDevice(device: Partial<Device> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { device.backingStoreEnabled = true; },
        "deviceId": n => { device.deviceId = n.getStringValue(); },
        "displayName": n => { device.displayName = n.getStringValue(); },
        "isCompliant": n => { device.isCompliant = n.getBooleanValue(); },
        "lastAccessDateTime": n => { device.lastAccessDateTime = n.getDateValue(); },
        "@odata.type": n => { device.odataType = n.getStringValue(); },
        "operatingSystem": n => { device.operatingSystem = n.getStringValue(); },
        "trafficType": n => { device.trafficType = n.getEnumValue<TrafficType>(TrafficTypeObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoDeviceLink(deviceLink: Partial<DeviceLink> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(deviceLink),
        "bandwidthCapacityInMbps": n => { deviceLink.bandwidthCapacityInMbps = n.getEnumValue<BandwidthCapacityInMbps>(BandwidthCapacityInMbpsObject); },
        "bgpConfiguration": n => { deviceLink.bgpConfiguration = n.getObjectValue<BgpConfiguration>(createBgpConfigurationFromDiscriminatorValue); },
        "deviceVendor": n => { deviceLink.deviceVendor = n.getEnumValue<DeviceVendor>(DeviceVendorObject); },
        "ipAddress": n => { deviceLink.ipAddress = n.getStringValue(); },
        "lastModifiedDateTime": n => { deviceLink.lastModifiedDateTime = n.getDateValue(); },
        "name": n => { deviceLink.name = n.getStringValue(); },
        "redundancyConfiguration": n => { deviceLink.redundancyConfiguration = n.getObjectValue<RedundancyConfiguration>(createRedundancyConfigurationFromDiscriminatorValue); },
        "tunnelConfiguration": n => { deviceLink.tunnelConfiguration = n.getObjectValue<TunnelConfiguration>(createTunnelConfigurationFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoDeviceLinkCollectionResponse(deviceLinkCollectionResponse: Partial<DeviceLinkCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(deviceLinkCollectionResponse),
        "value": n => { deviceLinkCollectionResponse.value = n.getCollectionOfObjectValues<DeviceLink>(createDeviceLinkFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoDeviceUsageSummary(deviceUsageSummary: Partial<DeviceUsageSummary> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "activeDeviceCount": n => { deviceUsageSummary.activeDeviceCount = n.getNumberValue(); },
        "backingStoreEnabled": n => { deviceUsageSummary.backingStoreEnabled = true; },
        "inactiveDeviceCount": n => { deviceUsageSummary.inactiveDeviceCount = n.getNumberValue(); },
        "@odata.type": n => { deviceUsageSummary.odataType = n.getStringValue(); },
        "totalDeviceCount": n => { deviceUsageSummary.totalDeviceCount = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoDiscoveredApplicationSegmentReport(discoveredApplicationSegmentReport: Partial<DiscoveredApplicationSegmentReport> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "accessType": n => { discoveredApplicationSegmentReport.accessType = n.getEnumValue<AccessType>(AccessTypeObject); },
        "backingStoreEnabled": n => { discoveredApplicationSegmentReport.backingStoreEnabled = true; },
        "deviceCount": n => { discoveredApplicationSegmentReport.deviceCount = n.getNumberValue(); },
        "discoveredApplicationSegmentId": n => { discoveredApplicationSegmentReport.discoveredApplicationSegmentId = n.getStringValue(); },
        "firstAccessDateTime": n => { discoveredApplicationSegmentReport.firstAccessDateTime = n.getDateValue(); },
        "fqdn": n => { discoveredApplicationSegmentReport.fqdn = n.getStringValue(); },
        "ip": n => { discoveredApplicationSegmentReport.ip = n.getStringValue(); },
        "lastAccessDateTime": n => { discoveredApplicationSegmentReport.lastAccessDateTime = n.getDateValue(); },
        "@odata.type": n => { discoveredApplicationSegmentReport.odataType = n.getStringValue(); },
        "port": n => { discoveredApplicationSegmentReport.port = n.getNumberValue(); },
        "totalBytesReceived": n => { discoveredApplicationSegmentReport.totalBytesReceived = n.getNumberValue(); },
        "totalBytesSent": n => { discoveredApplicationSegmentReport.totalBytesSent = n.getNumberValue(); },
        "transactionCount": n => { discoveredApplicationSegmentReport.transactionCount = n.getNumberValue(); },
        "transportProtocol": n => { discoveredApplicationSegmentReport.transportProtocol = n.getEnumValue<NetworkingProtocol>(NetworkingProtocolObject); },
        "userCount": n => { discoveredApplicationSegmentReport.userCount = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoEnrichedAuditLogs(enrichedAuditLogs: Partial<EnrichedAuditLogs> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(enrichedAuditLogs),
        "exchange": n => { enrichedAuditLogs.exchange = n.getObjectValue<EnrichedAuditLogsSettings>(createEnrichedAuditLogsSettingsFromDiscriminatorValue); },
        "sharepoint": n => { enrichedAuditLogs.sharepoint = n.getObjectValue<EnrichedAuditLogsSettings>(createEnrichedAuditLogsSettingsFromDiscriminatorValue); },
        "teams": n => { enrichedAuditLogs.teams = n.getObjectValue<EnrichedAuditLogsSettings>(createEnrichedAuditLogsSettingsFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoEnrichedAuditLogsSettings(enrichedAuditLogsSettings: Partial<EnrichedAuditLogsSettings> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { enrichedAuditLogsSettings.backingStoreEnabled = true; },
        "@odata.type": n => { enrichedAuditLogsSettings.odataType = n.getStringValue(); },
        "status": n => { enrichedAuditLogsSettings.status = n.getEnumValue<Status>(StatusObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoEntitiesSummary(entitiesSummary: Partial<EntitiesSummary> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { entitiesSummary.backingStoreEnabled = true; },
        "deviceCount": n => { entitiesSummary.deviceCount = n.getNumberValue(); },
        "@odata.type": n => { entitiesSummary.odataType = n.getStringValue(); },
        "trafficType": n => { entitiesSummary.trafficType = n.getEnumValue<TrafficType>(TrafficTypeObject); },
        "userCount": n => { entitiesSummary.userCount = n.getNumberValue(); },
        "workloadCount": n => { entitiesSummary.workloadCount = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoFilteringPolicy(filteringPolicy: Partial<FilteringPolicy> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoPolicy(filteringPolicy),
        "action": n => { filteringPolicy.action = n.getEnumValue<FilteringPolicyAction>(FilteringPolicyActionObject); },
        "createdDateTime": n => { filteringPolicy.createdDateTime = n.getDateValue(); },
        "lastModifiedDateTime": n => { filteringPolicy.lastModifiedDateTime = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoFilteringPolicyCollectionResponse(filteringPolicyCollectionResponse: Partial<FilteringPolicyCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(filteringPolicyCollectionResponse),
        "value": n => { filteringPolicyCollectionResponse.value = n.getCollectionOfObjectValues<FilteringPolicy>(createFilteringPolicyFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoFilteringPolicyLink(filteringPolicyLink: Partial<FilteringPolicyLink> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoPolicyLink(filteringPolicyLink),
        "createdDateTime": n => { filteringPolicyLink.createdDateTime = n.getDateValue(); },
        "lastModifiedDateTime": n => { filteringPolicyLink.lastModifiedDateTime = n.getDateValue(); },
        "loggingState": n => { filteringPolicyLink.loggingState = n.getEnumValue<Status>(StatusObject); },
        "priority": n => { filteringPolicyLink.priority = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoFilteringProfile(filteringProfile: Partial<FilteringProfile> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoProfile(filteringProfile),
        "conditionalAccessPolicies": n => { filteringProfile.conditionalAccessPolicies = n.getCollectionOfObjectValues<ConditionalAccessPolicy>(createConditionalAccessPolicyFromDiscriminatorValue); },
        "createdDateTime": n => { filteringProfile.createdDateTime = n.getDateValue(); },
        "priority": n => { filteringProfile.priority = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoFilteringProfileCollectionResponse(filteringProfileCollectionResponse: Partial<FilteringProfileCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(filteringProfileCollectionResponse),
        "value": n => { filteringProfileCollectionResponse.value = n.getCollectionOfObjectValues<FilteringProfile>(createFilteringProfileFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoFilteringRule(filteringRule: Partial<FilteringRule> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoPolicyRule(filteringRule),
        "destinations": n => { filteringRule.destinations = n.getCollectionOfObjectValues<RuleDestination>(createRuleDestinationFromDiscriminatorValue); },
        "ruleType": n => { filteringRule.ruleType = n.getEnumValue<NetworkDestinationType>(NetworkDestinationTypeObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoForwardingOptions(forwardingOptions: Partial<ForwardingOptions> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(forwardingOptions),
        "skipDnsLookupState": n => { forwardingOptions.skipDnsLookupState = n.getEnumValue<Status>(StatusObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoForwardingPolicy(forwardingPolicy: Partial<ForwardingPolicy> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoPolicy(forwardingPolicy),
        "trafficForwardingType": n => { forwardingPolicy.trafficForwardingType = n.getEnumValue<TrafficForwardingType>(TrafficForwardingTypeObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoForwardingPolicyCollectionResponse(forwardingPolicyCollectionResponse: Partial<ForwardingPolicyCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(forwardingPolicyCollectionResponse),
        "value": n => { forwardingPolicyCollectionResponse.value = n.getCollectionOfObjectValues<ForwardingPolicy>(createForwardingPolicyFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoForwardingPolicyLink(forwardingPolicyLink: Partial<ForwardingPolicyLink> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoPolicyLink(forwardingPolicyLink),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoForwardingProfile(forwardingProfile: Partial<ForwardingProfile> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoProfile(forwardingProfile),
        "associations": n => { forwardingProfile.associations = n.getCollectionOfObjectValues<Association>(createAssociationFromDiscriminatorValue); },
        "priority": n => { forwardingProfile.priority = n.getNumberValue(); },
        "servicePrincipal": n => { forwardingProfile.servicePrincipal = n.getObjectValue<ServicePrincipal>(createServicePrincipalFromDiscriminatorValue); },
        "trafficForwardingType": n => { forwardingProfile.trafficForwardingType = n.getEnumValue<TrafficForwardingType>(TrafficForwardingTypeObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoForwardingProfileCollectionResponse(forwardingProfileCollectionResponse: Partial<ForwardingProfileCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(forwardingProfileCollectionResponse),
        "value": n => { forwardingProfileCollectionResponse.value = n.getCollectionOfObjectValues<ForwardingProfile>(createForwardingProfileFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoForwardingRule(forwardingRule: Partial<ForwardingRule> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoPolicyRule(forwardingRule),
        "action": n => { forwardingRule.action = n.getEnumValue<ForwardingRuleAction>(ForwardingRuleActionObject); },
        "destinations": n => { forwardingRule.destinations = n.getCollectionOfObjectValues<RuleDestination>(createRuleDestinationFromDiscriminatorValue); },
        "ruleType": n => { forwardingRule.ruleType = n.getEnumValue<NetworkDestinationType>(NetworkDestinationTypeObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoFqdn(fqdn: Partial<Fqdn> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoRuleDestination(fqdn),
        "value": n => { fqdn.value = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoFqdnFilteringRule(fqdnFilteringRule: Partial<FqdnFilteringRule> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoFilteringRule(fqdnFilteringRule),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoHeaders(headers: Partial<Headers> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { headers.backingStoreEnabled = true; },
        "@odata.type": n => { headers.odataType = n.getStringValue(); },
        "origin": n => { headers.origin = n.getStringValue(); },
        "referrer": n => { headers.referrer = n.getStringValue(); },
        "xForwardedFor": n => { headers.xForwardedFor = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoInternetAccessForwardingRule(internetAccessForwardingRule: Partial<InternetAccessForwardingRule> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoForwardingRule(internetAccessForwardingRule),
        "ports": n => { internetAccessForwardingRule.ports = n.getCollectionOfPrimitiveValues<string>(); },
        "protocol": n => { internetAccessForwardingRule.protocol = n.getEnumValue<NetworkingProtocol>(NetworkingProtocolObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoIpAddress(ipAddress: Partial<IpAddress> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoRuleDestination(ipAddress),
        "value": n => { ipAddress.value = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoIpRange(ipRange: Partial<IpRange> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoRuleDestination(ipRange),
        "beginAddress": n => { ipRange.beginAddress = n.getStringValue(); },
        "endAddress": n => { ipRange.endAddress = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoIpSubnet(ipSubnet: Partial<IpSubnet> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoRuleDestination(ipSubnet),
        "value": n => { ipSubnet.value = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoLocalConnectivityConfiguration(localConnectivityConfiguration: Partial<LocalConnectivityConfiguration> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "asn": n => { localConnectivityConfiguration.asn = n.getNumberValue(); },
        "backingStoreEnabled": n => { localConnectivityConfiguration.backingStoreEnabled = true; },
        "bgpAddress": n => { localConnectivityConfiguration.bgpAddress = n.getStringValue(); },
        "endpoint": n => { localConnectivityConfiguration.endpoint = n.getStringValue(); },
        "@odata.type": n => { localConnectivityConfiguration.odataType = n.getStringValue(); },
        "region": n => { localConnectivityConfiguration.region = n.getEnumValue<Region>(RegionObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoLogs(logs: Partial<Logs> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(logs),
        "remoteNetworks": n => { logs.remoteNetworks = n.getCollectionOfObjectValues<RemoteNetworkHealthEvent>(createRemoteNetworkHealthEventFromDiscriminatorValue); },
        "traffic": n => { logs.traffic = n.getCollectionOfObjectValues<NetworkAccessTraffic>(createNetworkAccessTrafficFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoM365ForwardingRule(m365ForwardingRule: Partial<M365ForwardingRule> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoForwardingRule(m365ForwardingRule),
        "category": n => { m365ForwardingRule.category = n.getEnumValue<ForwardingCategory>(ForwardingCategoryObject); },
        "ports": n => { m365ForwardingRule.ports = n.getCollectionOfPrimitiveValues<string>(); },
        "protocol": n => { m365ForwardingRule.protocol = n.getEnumValue<NetworkingProtocol>(NetworkingProtocolObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoNetworkAccessRoot(networkAccessRoot: Partial<NetworkAccessRoot> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(networkAccessRoot),
        "alerts": n => { networkAccessRoot.alerts = n.getCollectionOfObjectValues<Alert>(createAlertFromDiscriminatorValue); },
        "connectivity": n => { networkAccessRoot.connectivity = n.getObjectValue<Connectivity>(createConnectivityFromDiscriminatorValue); },
        "filteringPolicies": n => { networkAccessRoot.filteringPolicies = n.getCollectionOfObjectValues<FilteringPolicy>(createFilteringPolicyFromDiscriminatorValue); },
        "filteringProfiles": n => { networkAccessRoot.filteringProfiles = n.getCollectionOfObjectValues<FilteringProfile>(createFilteringProfileFromDiscriminatorValue); },
        "forwardingPolicies": n => { networkAccessRoot.forwardingPolicies = n.getCollectionOfObjectValues<ForwardingPolicy>(createForwardingPolicyFromDiscriminatorValue); },
        "forwardingProfiles": n => { networkAccessRoot.forwardingProfiles = n.getCollectionOfObjectValues<ForwardingProfile>(createForwardingProfileFromDiscriminatorValue); },
        "logs": n => { networkAccessRoot.logs = n.getObjectValue<Logs>(createLogsFromDiscriminatorValue); },
        "reports": n => { networkAccessRoot.reports = n.getObjectValue<Reports>(createReportsFromDiscriminatorValue); },
        "settings": n => { networkAccessRoot.settings = n.getObjectValue<Settings>(createSettingsFromDiscriminatorValue); },
        "tenantStatus": n => { networkAccessRoot.tenantStatus = n.getObjectValue<TenantStatus>(createTenantStatusFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoNetworkAccessTraffic(networkAccessTraffic: Partial<NetworkAccessTraffic> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "action": n => { networkAccessTraffic.action = n.getEnumValue<FilteringPolicyAction>(FilteringPolicyActionObject); },
        "agentVersion": n => { networkAccessTraffic.agentVersion = n.getStringValue(); },
        "applicationSnapshot": n => { networkAccessTraffic.applicationSnapshot = n.getObjectValue<ApplicationSnapshot>(createApplicationSnapshotFromDiscriminatorValue); },
        "backingStoreEnabled": n => { networkAccessTraffic.backingStoreEnabled = true; },
        "connectionId": n => { networkAccessTraffic.connectionId = n.getStringValue(); },
        "createdDateTime": n => { networkAccessTraffic.createdDateTime = n.getDateValue(); },
        "description": n => { networkAccessTraffic.description = n.getStringValue(); },
        "destinationFQDN": n => { networkAccessTraffic.destinationFQDN = n.getStringValue(); },
        "destinationIp": n => { networkAccessTraffic.destinationIp = n.getStringValue(); },
        "destinationPort": n => { networkAccessTraffic.destinationPort = n.getNumberValue(); },
        "destinationUrl": n => { networkAccessTraffic.destinationUrl = n.getStringValue(); },
        "destinationWebCategory": n => { networkAccessTraffic.destinationWebCategory = n.getObjectValue<WebCategory>(createWebCategoryFromDiscriminatorValue); },
        "deviceCategory": n => { networkAccessTraffic.deviceCategory = n.getEnumValue<DeviceCategory>(DeviceCategoryObject); },
        "deviceId": n => { networkAccessTraffic.deviceId = n.getStringValue(); },
        "deviceOperatingSystem": n => { networkAccessTraffic.deviceOperatingSystem = n.getStringValue(); },
        "deviceOperatingSystemVersion": n => { networkAccessTraffic.deviceOperatingSystemVersion = n.getStringValue(); },
        "filteringProfileId": n => { networkAccessTraffic.filteringProfileId = n.getStringValue(); },
        "filteringProfileName": n => { networkAccessTraffic.filteringProfileName = n.getStringValue(); },
        "headers": n => { networkAccessTraffic.headers = n.getObjectValue<Headers>(createHeadersFromDiscriminatorValue); },
        "initiatingProcessName": n => { networkAccessTraffic.initiatingProcessName = n.getStringValue(); },
        "networkProtocol": n => { networkAccessTraffic.networkProtocol = n.getEnumValue<NetworkingProtocol>(NetworkingProtocolObject); },
        "@odata.type": n => { networkAccessTraffic.odataType = n.getStringValue(); },
        "policyId": n => { networkAccessTraffic.policyId = n.getStringValue(); },
        "policyName": n => { networkAccessTraffic.policyName = n.getStringValue(); },
        "policyRuleId": n => { networkAccessTraffic.policyRuleId = n.getStringValue(); },
        "policyRuleName": n => { networkAccessTraffic.policyRuleName = n.getStringValue(); },
        "privateAccessDetails": n => { networkAccessTraffic.privateAccessDetails = n.getObjectValue<PrivateAccessDetails>(createPrivateAccessDetailsFromDiscriminatorValue); },
        "receivedBytes": n => { networkAccessTraffic.receivedBytes = n.getNumberValue(); },
        "resourceTenantId": n => { networkAccessTraffic.resourceTenantId = n.getStringValue(); },
        "sentBytes": n => { networkAccessTraffic.sentBytes = n.getNumberValue(); },
        "sessionId": n => { networkAccessTraffic.sessionId = n.getStringValue(); },
        "sourceIp": n => { networkAccessTraffic.sourceIp = n.getStringValue(); },
        "sourcePort": n => { networkAccessTraffic.sourcePort = n.getNumberValue(); },
        "tenantId": n => { networkAccessTraffic.tenantId = n.getStringValue(); },
        "threatType": n => { networkAccessTraffic.threatType = n.getStringValue(); },
        "trafficType": n => { networkAccessTraffic.trafficType = n.getEnumValue<TrafficType>(TrafficTypeObject); },
        "transactionId": n => { networkAccessTraffic.transactionId = n.getStringValue(); },
        "transportProtocol": n => { networkAccessTraffic.transportProtocol = n.getEnumValue<NetworkingProtocol>(NetworkingProtocolObject); },
        "userId": n => { networkAccessTraffic.userId = n.getStringValue(); },
        "userPrincipalName": n => { networkAccessTraffic.userPrincipalName = n.getStringValue(); },
        "vendorNames": n => { networkAccessTraffic.vendorNames = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoNetworkAccessTrafficCollectionResponse(networkAccessTrafficCollectionResponse: Partial<NetworkAccessTrafficCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(networkAccessTrafficCollectionResponse),
        "value": n => { networkAccessTrafficCollectionResponse.value = n.getCollectionOfObjectValues<NetworkAccessTraffic>(createNetworkAccessTrafficFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoPeerConnectivityConfiguration(peerConnectivityConfiguration: Partial<PeerConnectivityConfiguration> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "asn": n => { peerConnectivityConfiguration.asn = n.getNumberValue(); },
        "backingStoreEnabled": n => { peerConnectivityConfiguration.backingStoreEnabled = true; },
        "bgpAddress": n => { peerConnectivityConfiguration.bgpAddress = n.getStringValue(); },
        "endpoint": n => { peerConnectivityConfiguration.endpoint = n.getStringValue(); },
        "@odata.type": n => { peerConnectivityConfiguration.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoPolicy(policy: Partial<Policy> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(policy),
        "description": n => { policy.description = n.getStringValue(); },
        "name": n => { policy.name = n.getStringValue(); },
        "policyRules": n => { policy.policyRules = n.getCollectionOfObjectValues<PolicyRule>(createPolicyRuleFromDiscriminatorValue); },
        "version": n => { policy.version = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoPolicyLink(policyLink: Partial<PolicyLink> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(policyLink),
        "policy": n => { policyLink.policy = n.getObjectValue<Policy>(createPolicyFromDiscriminatorValue); },
        "state": n => { policyLink.state = n.getEnumValue<Status>(StatusObject); },
        "version": n => { policyLink.version = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoPolicyLinkCollectionResponse(policyLinkCollectionResponse: Partial<PolicyLinkCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(policyLinkCollectionResponse),
        "value": n => { policyLinkCollectionResponse.value = n.getCollectionOfObjectValues<PolicyLink>(createPolicyLinkFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoPolicyRule(policyRule: Partial<PolicyRule> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(policyRule),
        "name": n => { policyRule.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoPolicyRuleCollectionResponse(policyRuleCollectionResponse: Partial<PolicyRuleCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(policyRuleCollectionResponse),
        "value": n => { policyRuleCollectionResponse.value = n.getCollectionOfObjectValues<PolicyRule>(createPolicyRuleFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoPolicyRuleDelta(policyRuleDelta: Partial<PolicyRuleDelta> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "action": n => { policyRuleDelta.action = n.getEnumValue<ForwardingRuleAction>(ForwardingRuleActionObject); },
        "backingStoreEnabled": n => { policyRuleDelta.backingStoreEnabled = true; },
        "@odata.type": n => { policyRuleDelta.odataType = n.getStringValue(); },
        "ruleId": n => { policyRuleDelta.ruleId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoPrivateAccessDetails(privateAccessDetails: Partial<PrivateAccessDetails> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "accessType": n => { privateAccessDetails.accessType = n.getEnumValue<AccessType>(AccessTypeObject); },
        "backingStoreEnabled": n => { privateAccessDetails.backingStoreEnabled = true; },
        "connectionStatus": n => { privateAccessDetails.connectionStatus = n.getEnumValue<ConnectionStatus>(ConnectionStatusObject); },
        "connectorId": n => { privateAccessDetails.connectorId = n.getStringValue(); },
        "connectorIp": n => { privateAccessDetails.connectorIp = n.getStringValue(); },
        "connectorName": n => { privateAccessDetails.connectorName = n.getStringValue(); },
        "@odata.type": n => { privateAccessDetails.odataType = n.getStringValue(); },
        "processingRegion": n => { privateAccessDetails.processingRegion = n.getStringValue(); },
        "thirdPartyTokenDetails": n => { privateAccessDetails.thirdPartyTokenDetails = n.getObjectValue<ThirdPartyTokenDetails>(createThirdPartyTokenDetailsFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoPrivateAccessForwardingRule(privateAccessForwardingRule: Partial<PrivateAccessForwardingRule> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoForwardingRule(privateAccessForwardingRule),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoProfile(profile: Partial<Profile> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(profile),
        "description": n => { profile.description = n.getStringValue(); },
        "lastModifiedDateTime": n => { profile.lastModifiedDateTime = n.getDateValue(); },
        "name": n => { profile.name = n.getStringValue(); },
        "policies": n => { profile.policies = n.getCollectionOfObjectValues<PolicyLink>(createPolicyLinkFromDiscriminatorValue); },
        "state": n => { profile.state = n.getEnumValue<Status>(StatusObject); },
        "version": n => { profile.version = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoRedundancyConfiguration(redundancyConfiguration: Partial<RedundancyConfiguration> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { redundancyConfiguration.backingStoreEnabled = true; },
        "@odata.type": n => { redundancyConfiguration.odataType = n.getStringValue(); },
        "redundancyTier": n => { redundancyConfiguration.redundancyTier = n.getEnumValue<RedundancyTier>(RedundancyTierObject); },
        "zoneLocalIpAddress": n => { redundancyConfiguration.zoneLocalIpAddress = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoRelatedDestination(relatedDestination: Partial<RelatedDestination> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoRelatedResource(relatedDestination),
        "fqdn": n => { relatedDestination.fqdn = n.getStringValue(); },
        "ip": n => { relatedDestination.ip = n.getStringValue(); },
        "networkingProtocol": n => { relatedDestination.networkingProtocol = n.getEnumValue<NetworkingProtocol>(NetworkingProtocolObject); },
        "port": n => { relatedDestination.port = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoRelatedDevice(relatedDevice: Partial<RelatedDevice> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoRelatedResource(relatedDevice),
        "deviceId": n => { relatedDevice.deviceId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoRelatedMalware(relatedMalware: Partial<RelatedMalware> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoRelatedResource(relatedMalware),
        "category": n => { relatedMalware.category = n.getEnumValue<MalwareCategory>(MalwareCategoryObject); },
        "name": n => { relatedMalware.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoRelatedProcess(relatedProcess: Partial<RelatedProcess> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoRelatedResource(relatedProcess),
        "isSuspicious": n => { relatedProcess.isSuspicious = n.getBooleanValue(); },
        "processName": n => { relatedProcess.processName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoRelatedRemoteNetwork(relatedRemoteNetwork: Partial<RelatedRemoteNetwork> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoRelatedResource(relatedRemoteNetwork),
        "remoteNetworkId": n => { relatedRemoteNetwork.remoteNetworkId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoRelatedResource(relatedResource: Partial<RelatedResource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { relatedResource.backingStoreEnabled = true; },
        "@odata.type": n => { relatedResource.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoRelatedTenant(relatedTenant: Partial<RelatedTenant> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoRelatedResource(relatedTenant),
        "tenantId": n => { relatedTenant.tenantId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoRelatedThreatIntelligence(relatedThreatIntelligence: Partial<RelatedThreatIntelligence> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoRelatedResource(relatedThreatIntelligence),
        "threatCount": n => { relatedThreatIntelligence.threatCount = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoRelatedToken(relatedToken: Partial<RelatedToken> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoRelatedResource(relatedToken),
        "uniqueTokenIdentifier": n => { relatedToken.uniqueTokenIdentifier = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoRelatedUser(relatedUser: Partial<RelatedUser> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoRelatedResource(relatedUser),
        "userId": n => { relatedUser.userId = n.getStringValue(); },
        "userPrincipalName": n => { relatedUser.userPrincipalName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoRelatedWebCategory(relatedWebCategory: Partial<RelatedWebCategory> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoRelatedResource(relatedWebCategory),
        "webCategoryName": n => { relatedWebCategory.webCategoryName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoRemoteNetwork(remoteNetwork: Partial<RemoteNetwork> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(remoteNetwork),
        "connectivityConfiguration": n => { remoteNetwork.connectivityConfiguration = n.getObjectValue<RemoteNetworkConnectivityConfiguration>(createRemoteNetworkConnectivityConfigurationFromDiscriminatorValue); },
        "deviceLinks": n => { remoteNetwork.deviceLinks = n.getCollectionOfObjectValues<DeviceLink>(createDeviceLinkFromDiscriminatorValue); },
        "forwardingProfiles": n => { remoteNetwork.forwardingProfiles = n.getCollectionOfObjectValues<ForwardingProfile>(createForwardingProfileFromDiscriminatorValue); },
        "lastModifiedDateTime": n => { remoteNetwork.lastModifiedDateTime = n.getDateValue(); },
        "name": n => { remoteNetwork.name = n.getStringValue(); },
        "region": n => { remoteNetwork.region = n.getEnumValue<Region>(RegionObject); },
        "version": n => { remoteNetwork.version = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoRemoteNetworkCollectionResponse(remoteNetworkCollectionResponse: Partial<RemoteNetworkCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(remoteNetworkCollectionResponse),
        "value": n => { remoteNetworkCollectionResponse.value = n.getCollectionOfObjectValues<RemoteNetwork>(createRemoteNetworkFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoRemoteNetworkConnectivityConfiguration(remoteNetworkConnectivityConfiguration: Partial<RemoteNetworkConnectivityConfiguration> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { remoteNetworkConnectivityConfiguration.backingStoreEnabled = true; },
        "links": n => { remoteNetworkConnectivityConfiguration.links = n.getCollectionOfObjectValues<ConnectivityConfigurationLink>(createConnectivityConfigurationLinkFromDiscriminatorValue); },
        "@odata.type": n => { remoteNetworkConnectivityConfiguration.odataType = n.getStringValue(); },
        "remoteNetworkId": n => { remoteNetworkConnectivityConfiguration.remoteNetworkId = n.getStringValue(); },
        "remoteNetworkName": n => { remoteNetworkConnectivityConfiguration.remoteNetworkName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoRemoteNetworkHealthEvent(remoteNetworkHealthEvent: Partial<RemoteNetworkHealthEvent> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(remoteNetworkHealthEvent),
        "bgpRoutesAdvertisedCount": n => { remoteNetworkHealthEvent.bgpRoutesAdvertisedCount = n.getNumberValue(); },
        "createdDateTime": n => { remoteNetworkHealthEvent.createdDateTime = n.getDateValue(); },
        "description": n => { remoteNetworkHealthEvent.description = n.getStringValue(); },
        "destinationIp": n => { remoteNetworkHealthEvent.destinationIp = n.getStringValue(); },
        "receivedBytes": n => { remoteNetworkHealthEvent.receivedBytes = n.getNumberValue(); },
        "remoteNetworkId": n => { remoteNetworkHealthEvent.remoteNetworkId = n.getStringValue(); },
        "sentBytes": n => { remoteNetworkHealthEvent.sentBytes = n.getNumberValue(); },
        "sourceIp": n => { remoteNetworkHealthEvent.sourceIp = n.getStringValue(); },
        "status": n => { remoteNetworkHealthEvent.status = n.getEnumValue<RemoteNetworkStatus>(RemoteNetworkStatusObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoRemoteNetworkHealthEventCollectionResponse(remoteNetworkHealthEventCollectionResponse: Partial<RemoteNetworkHealthEventCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(remoteNetworkHealthEventCollectionResponse),
        "value": n => { remoteNetworkHealthEventCollectionResponse.value = n.getCollectionOfObjectValues<RemoteNetworkHealthEvent>(createRemoteNetworkHealthEventFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoReports(reports: Partial<Reports> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(reports),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoRuleDestination(ruleDestination: Partial<RuleDestination> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { ruleDestination.backingStoreEnabled = true; },
        "@odata.type": n => { ruleDestination.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoSettings(settings: Partial<Settings> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(settings),
        "conditionalAccess": n => { settings.conditionalAccess = n.getObjectValue<ConditionalAccessSettings>(createConditionalAccessSettingsFromDiscriminatorValue); },
        "crossTenantAccess": n => { settings.crossTenantAccess = n.getObjectValue<CrossTenantAccessSettings>(createCrossTenantAccessSettingsFromDiscriminatorValue); },
        "enrichedAuditLogs": n => { settings.enrichedAuditLogs = n.getObjectValue<EnrichedAuditLogs>(createEnrichedAuditLogsFromDiscriminatorValue); },
        "forwardingOptions": n => { settings.forwardingOptions = n.getObjectValue<ForwardingOptions>(createForwardingOptionsFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoTenantStatus(tenantStatus: Partial<TenantStatus> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(tenantStatus),
        "onboardingErrorMessage": n => { tenantStatus.onboardingErrorMessage = n.getStringValue(); },
        "onboardingStatus": n => { tenantStatus.onboardingStatus = n.getEnumValue<OnboardingStatus>(OnboardingStatusObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoThirdPartyTokenDetails(thirdPartyTokenDetails: Partial<ThirdPartyTokenDetails> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { thirdPartyTokenDetails.backingStoreEnabled = true; },
        "expirationDateTime": n => { thirdPartyTokenDetails.expirationDateTime = n.getDateValue(); },
        "issuedAtDateTime": n => { thirdPartyTokenDetails.issuedAtDateTime = n.getDateValue(); },
        "@odata.type": n => { thirdPartyTokenDetails.odataType = n.getStringValue(); },
        "uniqueTokenIdentifier": n => { thirdPartyTokenDetails.uniqueTokenIdentifier = n.getStringValue(); },
        "validFromDateTime": n => { thirdPartyTokenDetails.validFromDateTime = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoTransactionSummary(transactionSummary: Partial<TransactionSummary> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { transactionSummary.backingStoreEnabled = true; },
        "blockedCount": n => { transactionSummary.blockedCount = n.getNumberValue(); },
        "@odata.type": n => { transactionSummary.odataType = n.getStringValue(); },
        "totalCount": n => { transactionSummary.totalCount = n.getNumberValue(); },
        "trafficType": n => { transactionSummary.trafficType = n.getEnumValue<TrafficType>(TrafficTypeObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoTunnelConfiguration(tunnelConfiguration: Partial<TunnelConfiguration> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { tunnelConfiguration.backingStoreEnabled = true; },
        "@odata.type": n => { tunnelConfiguration.odataType = n.getStringValue(); },
        "preSharedKey": n => { tunnelConfiguration.preSharedKey = n.getStringValue(); },
        "zoneRedundancyPreSharedKey": n => { tunnelConfiguration.zoneRedundancyPreSharedKey = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoTunnelConfigurationIKEv2Custom(tunnelConfigurationIKEv2Custom: Partial<TunnelConfigurationIKEv2Custom> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoTunnelConfiguration(tunnelConfigurationIKEv2Custom),
        "dhGroup": n => { tunnelConfigurationIKEv2Custom.dhGroup = n.getEnumValue<DhGroup>(DhGroupObject); },
        "ikeEncryption": n => { tunnelConfigurationIKEv2Custom.ikeEncryption = n.getEnumValue<IkeEncryption>(IkeEncryptionObject); },
        "ikeIntegrity": n => { tunnelConfigurationIKEv2Custom.ikeIntegrity = n.getEnumValue<IkeIntegrity>(IkeIntegrityObject); },
        "ipSecEncryption": n => { tunnelConfigurationIKEv2Custom.ipSecEncryption = n.getEnumValue<IpSecEncryption>(IpSecEncryptionObject); },
        "ipSecIntegrity": n => { tunnelConfigurationIKEv2Custom.ipSecIntegrity = n.getEnumValue<IpSecIntegrity>(IpSecIntegrityObject); },
        "pfsGroup": n => { tunnelConfigurationIKEv2Custom.pfsGroup = n.getEnumValue<PfsGroup>(PfsGroupObject); },
        "saLifeTimeSeconds": n => { tunnelConfigurationIKEv2Custom.saLifeTimeSeconds = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoTunnelConfigurationIKEv2Default(tunnelConfigurationIKEv2Default: Partial<TunnelConfigurationIKEv2Default> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoTunnelConfiguration(tunnelConfigurationIKEv2Default),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoUrl(url: Partial<Url> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoRuleDestination(url),
        "value": n => { url.value = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoUsageProfilingPoint(usageProfilingPoint: Partial<UsageProfilingPoint> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { usageProfilingPoint.backingStoreEnabled = true; },
        "internetAccessTrafficCount": n => { usageProfilingPoint.internetAccessTrafficCount = n.getNumberValue(); },
        "microsoft365AccessTrafficCount": n => { usageProfilingPoint.microsoft365AccessTrafficCount = n.getNumberValue(); },
        "@odata.type": n => { usageProfilingPoint.odataType = n.getStringValue(); },
        "privateAccessTrafficCount": n => { usageProfilingPoint.privateAccessTrafficCount = n.getNumberValue(); },
        "timeStampDateTime": n => { usageProfilingPoint.timeStampDateTime = n.getDateValue(); },
        "totalTrafficCount": n => { usageProfilingPoint.totalTrafficCount = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoUser(user: Partial<User> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { user.backingStoreEnabled = true; },
        "displayName": n => { user.displayName = n.getStringValue(); },
        "firstAccessDateTime": n => { user.firstAccessDateTime = n.getDateValue(); },
        "lastAccessDateTime": n => { user.lastAccessDateTime = n.getDateValue(); },
        "@odata.type": n => { user.odataType = n.getStringValue(); },
        "totalBytesReceived": n => { user.totalBytesReceived = n.getNumberValue(); },
        "totalBytesSent": n => { user.totalBytesSent = n.getNumberValue(); },
        "trafficType": n => { user.trafficType = n.getEnumValue<TrafficType>(TrafficTypeObject); },
        "transactionCount": n => { user.transactionCount = n.getNumberValue(); },
        "userId": n => { user.userId = n.getStringValue(); },
        "userPrincipalName": n => { user.userPrincipalName = n.getStringValue(); },
        "userType": n => { user.userType = n.getEnumValue<UserType>(UserTypeObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWebCategoriesSummary(webCategoriesSummary: Partial<WebCategoriesSummary> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "action": n => { webCategoriesSummary.action = n.getEnumValue<FilteringPolicyAction>(FilteringPolicyActionObject); },
        "backingStoreEnabled": n => { webCategoriesSummary.backingStoreEnabled = true; },
        "deviceCount": n => { webCategoriesSummary.deviceCount = n.getNumberValue(); },
        "@odata.type": n => { webCategoriesSummary.odataType = n.getStringValue(); },
        "transactionCount": n => { webCategoriesSummary.transactionCount = n.getNumberValue(); },
        "userCount": n => { webCategoriesSummary.userCount = n.getNumberValue(); },
        "webCategory": n => { webCategoriesSummary.webCategory = n.getObjectValue<WebCategory>(createWebCategoryFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWebCategory(webCategory: Partial<WebCategory> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoRuleDestination(webCategory),
        "displayName": n => { webCategory.displayName = n.getStringValue(); },
        "group": n => { webCategory.group = n.getStringValue(); },
        "name": n => { webCategory.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWebCategoryFilteringRule(webCategoryFilteringRule: Partial<WebCategoryFilteringRule> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoFilteringRule(webCategoryFilteringRule),
    }
}
export interface Destination extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The number of unique devices that were seen.
     */
    deviceCount?: number;
    /**
     * The firstAccessDateTime property
     */
    firstAccessDateTime?: Date;
    /**
     * The fully qualified domain name (FQDN) of the destination.
     */
    fqdn?: string;
    /**
     * The internet protocol (IP) used to access the destination.
     */
    ip?: string;
    /**
     * The most recent access DateTime.
     */
    lastAccessDateTime?: Date;
    /**
     * The networkingProtocol property
     */
    networkingProtocol?: NetworkingProtocol;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The numeric identifier that is associated with a specific endpoint in a network.
     */
    port?: number;
    /**
     * The threatCount property
     */
    threatCount?: number;
    /**
     * The totalBytesReceived property
     */
    totalBytesReceived?: number;
    /**
     * The totalBytesSent property
     */
    totalBytesSent?: number;
    /**
     * The trafficType property
     */
    trafficType?: TrafficType;
    /**
     * The number of transactions.
     */
    transactionCount?: number;
    /**
     * The number of unique Microsoft Entra ID users that were seen.
     */
    userCount?: number;
}
export interface DestinationSummary extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The number of the destinationSummary objects, aggregated by Global Secure Access service.
     */
    count?: number;
    /**
     * The IP address or FQDN of the destination.
     */
    destination?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The traffic classification. The allowed values are internet, private, microsoft365, all, and unknownFutureValue.
     */
    trafficType?: TrafficType;
}
export interface Device extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * A unique device ID.
     */
    deviceId?: string;
    /**
     * The display name for the device.
     */
    displayName?: string;
    /**
     * A value that indicates whether or not the device is compliant.
     */
    isCompliant?: boolean;
    /**
     * The most recent access time for the device.
     */
    lastAccessDateTime?: Date;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The operating system on the device.
     */
    operatingSystem?: string;
    /**
     * The trafficType property
     */
    trafficType?: TrafficType;
}
export type DeviceCategory = (typeof DeviceCategoryObject)[keyof typeof DeviceCategoryObject];
export interface DeviceLink extends Entity, Parsable {
    /**
     * Determines the maximum allowed Mbps (megabits per second) bandwidth from a device link. The possible values are:250,500,750,1000.
     */
    bandwidthCapacityInMbps?: BandwidthCapacityInMbps;
    /**
     * The bgpConfiguration property
     */
    bgpConfiguration?: BgpConfiguration;
    /**
     * The deviceVendor property
     */
    deviceVendor?: DeviceVendor;
    /**
     * The public IP address of your CPE (customer premise equipment) device.
     */
    ipAddress?: string;
    /**
     * last modified time.
     */
    lastModifiedDateTime?: Date;
    /**
     * Name.
     */
    name?: string;
    /**
     * The redundancyConfiguration property
     */
    redundancyConfiguration?: RedundancyConfiguration;
    /**
     * The tunnelConfiguration property
     */
    tunnelConfiguration?: TunnelConfiguration;
}
export interface DeviceLinkCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: DeviceLink[];
}
export interface DeviceUsageSummary extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * The number of distinct device IDs between the discovery pivot time and the end of the reporting period.
     */
    activeDeviceCount?: number;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The discovery pivot time and the end of the reporting period, but were seen between the start of the reporting period and the discovery pivot time.
     */
    inactiveDeviceCount?: number;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The total number of distinct device IDs that were seen during the reporting period.
     */
    totalDeviceCount?: number;
}
export type DeviceVendor = (typeof DeviceVendorObject)[keyof typeof DeviceVendorObject];
export type DhGroup = (typeof DhGroupObject)[keyof typeof DhGroupObject];
export interface DiscoveredApplicationSegmentReport extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * The accessType property
     */
    accessType?: AccessType;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The deviceCount property
     */
    deviceCount?: number;
    /**
     * The discoveredApplicationSegmentId property
     */
    discoveredApplicationSegmentId?: string;
    /**
     * The firstAccessDateTime property
     */
    firstAccessDateTime?: Date;
    /**
     * The fqdn property
     */
    fqdn?: string;
    /**
     * The ip property
     */
    ip?: string;
    /**
     * The lastAccessDateTime property
     */
    lastAccessDateTime?: Date;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The port property
     */
    port?: number;
    /**
     * The totalBytesReceived property
     */
    totalBytesReceived?: number;
    /**
     * The totalBytesSent property
     */
    totalBytesSent?: number;
    /**
     * The transactionCount property
     */
    transactionCount?: number;
    /**
     * The transportProtocol property
     */
    transportProtocol?: NetworkingProtocol;
    /**
     * The userCount property
     */
    userCount?: number;
}
export interface EnrichedAuditLogs extends Entity, Parsable {
    /**
     * Exchange Online enriched audit logs settings.
     */
    exchange?: EnrichedAuditLogsSettings;
    /**
     * SharePoint Online enriched audit logs settings.
     */
    sharepoint?: EnrichedAuditLogsSettings;
    /**
     * Teams enriched audit logs settings.
     */
    teams?: EnrichedAuditLogsSettings;
}
export interface EnrichedAuditLogsSettings extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The status property
     */
    status?: Status;
}
export interface EntitiesSummary extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The number of unique devices that were seen.
     */
    deviceCount?: number;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The trafficType property
     */
    trafficType?: TrafficType;
    /**
     * The number of unique Microsoft Entra ID users that were seen.
     */
    userCount?: number;
    /**
     * The number of unique target workloads/hosts that were seen.
     */
    workloadCount?: number;
}
export interface FilteringPolicy extends Parsable, Policy {
    /**
     * The action property
     */
    action?: FilteringPolicyAction;
    /**
     * The date and time when the filtering Policy was originally created.
     */
    createdDateTime?: Date;
    /**
     * The date and time when a particular profile was last modified or updated.
     */
    lastModifiedDateTime?: Date;
}
export type FilteringPolicyAction = (typeof FilteringPolicyActionObject)[keyof typeof FilteringPolicyActionObject];
export interface FilteringPolicyCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: FilteringPolicy[];
}
export interface FilteringPolicyLink extends Parsable, PolicyLink {
    /**
     * The date and time when the filtering Policy link was created.
     */
    createdDateTime?: Date;
    /**
     * The date and time when the policy was most recently modified.
     */
    lastModifiedDateTime?: Date;
    /**
     * The loggingState property
     */
    loggingState?: Status;
    /**
     * Provides an integer priority level for each instance of a URL filtering policy linked to a profile. Required.
     */
    priority?: number;
}
export interface FilteringProfile extends Parsable, Profile {
    /**
     * A set of associated policies defined to regulate access to resources or systems based on specific conditions. Automatically expanded.
     */
    conditionalAccessPolicies?: ConditionalAccessPolicy[];
    /**
     * The date and time when the filteringProfile was created.
     */
    createdDateTime?: Date;
    /**
     * The priority used to order the profile for processing within a list.
     */
    priority?: number;
}
export interface FilteringProfileCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: FilteringProfile[];
}
export interface FilteringRule extends Parsable, PolicyRule {
    /**
     * Possible destinations and types of destinations accessed by the user in accordance with the network filtering policy, such as IP addresses and FQDNs/URLs.
     */
    destinations?: RuleDestination[];
    /**
     * The ruleType property
     */
    ruleType?: NetworkDestinationType;
}
export type ForwardingCategory = (typeof ForwardingCategoryObject)[keyof typeof ForwardingCategoryObject];
export interface ForwardingOptions extends Entity, Parsable {
    /**
     * The skipDnsLookupState property
     */
    skipDnsLookupState?: Status;
}
export interface ForwardingPolicy extends Parsable, Policy {
    /**
     * The trafficForwardingType property
     */
    trafficForwardingType?: TrafficForwardingType;
}
export interface ForwardingPolicyCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: ForwardingPolicy[];
}
export interface ForwardingPolicyLink extends Parsable, PolicyLink {
}
export interface ForwardingProfile extends Parsable, Profile {
    /**
     * Specifies the users, groups, devices, and remote networks whose traffic is associated with the given traffic forwarding profile.
     */
    associations?: Association[];
    /**
     * Profile priority.
     */
    priority?: number;
    /**
     * The servicePrincipal property
     */
    servicePrincipal?: ServicePrincipal;
    /**
     * The trafficForwardingType property
     */
    trafficForwardingType?: TrafficForwardingType;
}
export interface ForwardingProfileCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: ForwardingProfile[];
}
export interface ForwardingRule extends Parsable, PolicyRule {
    /**
     * The action property
     */
    action?: ForwardingRuleAction;
    /**
     * Destinations maintain a list of potential destinations and destination types that the user may access within the context of a network filtering policy. This includes IP addresses and fully qualified domain names (FQDNs)/URLs.
     */
    destinations?: RuleDestination[];
    /**
     * The ruleType property
     */
    ruleType?: NetworkDestinationType;
}
export type ForwardingRuleAction = (typeof ForwardingRuleActionObject)[keyof typeof ForwardingRuleActionObject];
export interface Fqdn extends Parsable, RuleDestination {
    /**
     * Defines the FQDN used in a destination for a rule.
     */
    value?: string;
}
export interface FqdnFilteringRule extends FilteringRule, Parsable {
}
export interface Headers extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Represents the origin or source from which the request is being made.
     */
    origin?: string;
    /**
     * Represents the referring URL or the URL of the web page that the current request originates from.
     */
    referrer?: string;
    /**
     * Represents the information about the client original IP address when the request passes through one or more proxy servers or load balancers.
     */
    xForwardedFor?: string;
}
export type IkeEncryption = (typeof IkeEncryptionObject)[keyof typeof IkeEncryptionObject];
export type IkeIntegrity = (typeof IkeIntegrityObject)[keyof typeof IkeIntegrityObject];
export interface InternetAccessForwardingRule extends ForwardingRule, Parsable {
    /**
     * The ports property
     */
    ports?: string[];
    /**
     * The protocol property
     */
    protocol?: NetworkingProtocol;
}
export interface IpAddress extends Parsable, RuleDestination {
    /**
     * Defines the IP address used in a destination for a rule.
     */
    value?: string;
}
export interface IpRange extends Parsable, RuleDestination {
    /**
     * Specifies the starting IP address of the IP range.
     */
    beginAddress?: string;
    /**
     * Specifies the ending IP address of the IP range.
     */
    endAddress?: string;
}
export type IpSecEncryption = (typeof IpSecEncryptionObject)[keyof typeof IpSecEncryptionObject];
export type IpSecIntegrity = (typeof IpSecIntegrityObject)[keyof typeof IpSecIntegrityObject];
export interface IpSubnet extends Parsable, RuleDestination {
    /**
     * Defines the IP address of the subset used in a destination for a rule.
     */
    value?: string;
}
export interface LocalConnectivityConfiguration extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Specifies ASN of one end of IPSec tunnel (local or peer).
     */
    asn?: number;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * Specifies BGP IPv4 address of one end of IPSec tunnel (local or peer).
     */
    bgpAddress?: string;
    /**
     * Specifies public IPv4 address of one end of IPSec tunnel (local or peer).
     */
    endpoint?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The region property
     */
    region?: Region;
}
export interface Logs extends Entity, Parsable {
    /**
     * A collection of remote network health events.
     */
    remoteNetworks?: RemoteNetworkHealthEvent[];
    /**
     * A network access traffic log entry that contains comprehensive information about network traffic events.
     */
    traffic?: NetworkAccessTraffic[];
}
export interface M365ForwardingRule extends ForwardingRule, Parsable {
    /**
     * The category property
     */
    category?: ForwardingCategory;
    /**
     * The port(s) used by a forwarding rule for Microsoft 365 traffic are specified to determine the specific network port(s) through which the Microsoft 365 traffic is directed and forwarded.
     */
    ports?: string[];
    /**
     * The protocol property
     */
    protocol?: NetworkingProtocol;
}
export type MalwareCategory = (typeof MalwareCategoryObject)[keyof typeof MalwareCategoryObject];
export interface NetworkAccessRoot extends Entity, Parsable {
    /**
     * The alerts property
     */
    alerts?: Alert[];
    /**
     * Connectivity represents all the connectivity components in Global Secure Access.
     */
    connectivity?: Connectivity;
    /**
     * A filtering policy defines the specific traffic that is allowed or blocked through the Global Secure Access services for a filtering profile.
     */
    filteringPolicies?: FilteringPolicy[];
    /**
     * A filtering profile associates network access policies with Microsoft Entra ID Conditional Access policies, so that access policies can be applied to users and groups.
     */
    filteringProfiles?: FilteringProfile[];
    /**
     * A forwarding policy defines the specific traffic that is routed through the Global Secure Access Service. It's then added to a forwarding profile.
     */
    forwardingPolicies?: ForwardingPolicy[];
    /**
     * A forwarding profile determines which types of traffic are routed through the Global Secure Access services and which ones are skipped. The handling of specific traffic is determined by the forwarding policies that are added to the forwarding profile.
     */
    forwardingProfiles?: ForwardingProfile[];
    /**
     * Represents network connections that are routed through Global Secure Access.
     */
    logs?: Logs;
    /**
     * Represents the status of the Global Secure Access services for the tenant.
     */
    reports?: Reports;
    /**
     * Global Secure Access settings.
     */
    settings?: Settings;
    /**
     * Represents the status of the Global Secure Access services for the tenant.
     */
    tenantStatus?: TenantStatus;
}
export interface NetworkAccessTraffic extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Indicates what action to take based on filtering policies. The possible values are: block, allow.
     */
    action?: FilteringPolicyAction;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Represents the version of the Global Secure Access client agent software. Supports $filter (eq) and $orderby.
     */
    agentVersion?: string;
    /**
     * The applicationSnapshot property
     */
    applicationSnapshot?: ApplicationSnapshot;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * Represents a unique identifier assigned to a connection. Supports $filter (eq) and $orderby.
     */
    connectionId?: string;
    /**
     * Represents the date and time when a network access traffic log entry was created. Supports $filter (eq) and $orderby.
     */
    createdDateTime?: Date;
    /**
     * The description property
     */
    description?: string;
    /**
     * Represents the Fully Qualified Domain Name (FQDN) of the destination host or server in a network communication. Supports $filter (eq) and $orderby.
     */
    destinationFQDN?: string;
    /**
     * Represents the IP address of the destination host or server in a network communication. Supports $filter (eq) and $orderby.
     */
    destinationIp?: string;
    /**
     * Represents the network port number on the destination host or server in a network communication. Supports $filter (eq) and $orderby.
     */
    destinationPort?: number;
    /**
     * The destinationUrl property
     */
    destinationUrl?: string;
    /**
     * The destinationWebCategory property
     */
    destinationWebCategory?: WebCategory;
    /**
     * Represents the category classification of a device within a network infrastructure. The possible values are: client, branch, unknownFutureValue. Supports $filter (eq) and $orderby.
     */
    deviceCategory?: DeviceCategory;
    /**
     * Represents a unique identifier assigned to a device within a network infrastructure. Supports $filter (eq) and $orderby.
     */
    deviceId?: string;
    /**
     * Represents the operating system installed on a device within a network infrastructure. Supports $filter (eq) and $orderby.
     */
    deviceOperatingSystem?: string;
    /**
     * Represents the version or release number of the operating system installed on a device within a network infrastructure. Supports $filter (eq) and $orderby.
     */
    deviceOperatingSystemVersion?: string;
    /**
     * The filteringProfileId property
     */
    filteringProfileId?: string;
    /**
     * The filteringProfileName property
     */
    filteringProfileName?: string;
    /**
     * Represents the headers included in a network request or response. Supports $filter (eq) and $orderby.
     */
    headers?: Headers;
    /**
     * The initiatingProcessName property
     */
    initiatingProcessName?: string;
    /**
     * Represents the networking protocol used for communication.The possible values are: ip, icmp, igmp, ggp, ipv4, tcp, pup, udp, idp, ipv6, ipv6RoutingHeader, ipv6FragmentHeader, ipSecEncapsulatingSecurityPayload, ipSecAuthenticationHeader, icmpV6, ipv6NoNextHeader, ipv6DestinationOptions, nd, raw, ipx, spx, spxII, unknownFutureValue. Supports $filter (eq) and $orderby.
     */
    networkProtocol?: NetworkingProtocol;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Represents a unique identifier assigned to a policy. Supports $filter (eq) and $orderby.
     */
    policyId?: string;
    /**
     * The policyName property
     */
    policyName?: string;
    /**
     * Represents a unique identifier assigned to a policy rule. Supports $filter (eq) and $orderby.
     */
    policyRuleId?: string;
    /**
     * The policyRuleName property
     */
    policyRuleName?: string;
    /**
     * The privateAccessDetails property
     */
    privateAccessDetails?: PrivateAccessDetails;
    /**
     * Represents the total number of bytes received in a network communication or data transfer. Supports $filter (eq) and $orderby.
     */
    receivedBytes?: number;
    /**
     * The resourceTenantId property
     */
    resourceTenantId?: string;
    /**
     * Represents the total number of bytes sent in a network communication or data transfer. Supports $filter (eq) and $orderby.
     */
    sentBytes?: number;
    /**
     * Represents a unique identifier assigned to a session or connection within a network infrastructure. Supports $filter (eq) and $orderby.
     */
    sessionId?: string;
    /**
     * Represents the source IP address in a network communication. Supports $filter (eq) and $orderby.
     */
    sourceIp?: string;
    /**
     * Represents the network port number on the source host or device in a network communication. Supports $filter (eq) and $orderby.
     */
    sourcePort?: number;
    /**
     * Represents a unique identifier assigned to a tenant within a network infrastructure. Supports $filter (eq) and $orderby.
     */
    tenantId?: string;
    /**
     * The threatType property
     */
    threatType?: string;
    /**
     * The trafficType property
     */
    trafficType?: TrafficType;
    /**
     * Represents a unique identifier assigned to a specific transaction or operation. Key. Supports $filter (eq) and $orderby.
     */
    transactionId?: string;
    /**
     * Represents the transport protocol used for communication.The possible values are: ip, icmp, igmp, ggp, ipv4, tcp, pup, udp, idp, ipv6, ipv6RoutingHeader, ipv6FragmentHeader, ipSecEncapsulatingSecurityPayload, ipSecAuthenticationHeader, icmpV6, ipv6NoNextHeader, ipv6DestinationOptions, nd, raw, ipx, spx, spxII, unknownFutureValue. Supports $filter (eq) and $orderby.
     */
    transportProtocol?: NetworkingProtocol;
    /**
     * Represents a unique identifier assigned to a user. Supports $filter (eq) and $orderby.
     */
    userId?: string;
    /**
     * Represents the user principal name (UPN) associated with a user. Supports $filter (eq) and $orderby.
     */
    userPrincipalName?: string;
    /**
     * The vendorNames property
     */
    vendorNames?: string[];
}
export interface NetworkAccessTrafficCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: NetworkAccessTraffic[];
}
export type NetworkDestinationType = (typeof NetworkDestinationTypeObject)[keyof typeof NetworkDestinationTypeObject];
export type NetworkingProtocol = (typeof NetworkingProtocolObject)[keyof typeof NetworkingProtocolObject];
export type OnboardingStatus = (typeof OnboardingStatusObject)[keyof typeof OnboardingStatusObject];
export interface PeerConnectivityConfiguration extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Specifies ASN of one end of IPSec tunnel (local or peer).
     */
    asn?: number;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * Specifies BGP IPv4 address of one end of IPSec tunnel (local or peer).
     */
    bgpAddress?: string;
    /**
     * Specifies public IPv4 address of one end of IPSec tunnel (local or peer).
     */
    endpoint?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export type PfsGroup = (typeof PfsGroupObject)[keyof typeof PfsGroupObject];
export interface Policy extends Entity, Parsable {
    /**
     * Description.
     */
    description?: string;
    /**
     * Policy name.
     */
    name?: string;
    /**
     * Represents the definition of the policy ruleset that makes up the core definition of a policy.
     */
    policyRules?: PolicyRule[];
    /**
     * Version.
     */
    version?: string;
}
export interface PolicyLink extends Entity, Parsable {
    /**
     * The policy property
     */
    policy?: Policy;
    /**
     * The state property
     */
    state?: Status;
    /**
     * Version.
     */
    version?: string;
}
export interface PolicyLinkCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: PolicyLink[];
}
export interface PolicyRule extends Entity, Parsable {
    /**
     * Name.
     */
    name?: string;
}
export interface PolicyRuleCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: PolicyRule[];
}
export interface PolicyRuleDelta extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * The action property
     */
    action?: ForwardingRuleAction;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The identifier of the policy rule to update.
     */
    ruleId?: string;
}
export interface PrivateAccessDetails extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * The accessType property
     */
    accessType?: AccessType;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The connectionStatus property
     */
    connectionStatus?: ConnectionStatus;
    /**
     * The connectorId property
     */
    connectorId?: string;
    /**
     * The connectorIp property
     */
    connectorIp?: string;
    /**
     * The connectorName property
     */
    connectorName?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The processingRegion property
     */
    processingRegion?: string;
    /**
     * The thirdPartyTokenDetails property
     */
    thirdPartyTokenDetails?: ThirdPartyTokenDetails;
}
export interface PrivateAccessForwardingRule extends ForwardingRule, Parsable {
}
export interface Profile extends Entity, Parsable {
    /**
     * Description.
     */
    description?: string;
    /**
     * Profile last modified time.
     */
    lastModifiedDateTime?: Date;
    /**
     * Profile name.
     */
    name?: string;
    /**
     * Traffic forwarding policies associated with this profile.
     */
    policies?: PolicyLink[];
    /**
     * The state property
     */
    state?: Status;
    /**
     * Profile version.
     */
    version?: string;
}
export interface RedundancyConfiguration extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The redundancyTier property
     */
    redundancyTier?: RedundancyTier;
    /**
     * Indicate the specific IP address used for establishing the Border Gateway Protocol (BGP) connection with Microsoft's network.
     */
    zoneLocalIpAddress?: string;
}
export type RedundancyTier = (typeof RedundancyTierObject)[keyof typeof RedundancyTierObject];
export type Region = (typeof RegionObject)[keyof typeof RegionObject];
export interface RelatedDestination extends Parsable, RelatedResource {
    /**
     * The fqdn property
     */
    fqdn?: string;
    /**
     * The ip property
     */
    ip?: string;
    /**
     * The networkingProtocol property
     */
    networkingProtocol?: NetworkingProtocol;
    /**
     * The port property
     */
    port?: number;
}
export interface RelatedDevice extends Parsable, RelatedResource {
    /**
     * The deviceId property
     */
    deviceId?: string;
}
export interface RelatedMalware extends Parsable, RelatedResource {
    /**
     * The category property
     */
    category?: MalwareCategory;
    /**
     * The name property
     */
    name?: string;
}
export interface RelatedProcess extends Parsable, RelatedResource {
    /**
     * The isSuspicious property
     */
    isSuspicious?: boolean;
    /**
     * The processName property
     */
    processName?: string;
}
export interface RelatedRemoteNetwork extends Parsable, RelatedResource {
    /**
     * The remoteNetworkId property
     */
    remoteNetworkId?: string;
}
export interface RelatedResource extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export interface RelatedTenant extends Parsable, RelatedResource {
    /**
     * The tenantId property
     */
    tenantId?: string;
}
export interface RelatedThreatIntelligence extends Parsable, RelatedResource {
    /**
     * The threatCount property
     */
    threatCount?: number;
}
export interface RelatedToken extends Parsable, RelatedResource {
    /**
     * The uniqueTokenIdentifier property
     */
    uniqueTokenIdentifier?: string;
}
export interface RelatedUser extends Parsable, RelatedResource {
    /**
     * The userId property
     */
    userId?: string;
    /**
     * The userPrincipalName property
     */
    userPrincipalName?: string;
}
export interface RelatedWebCategory extends Parsable, RelatedResource {
    /**
     * The webCategoryName property
     */
    webCategoryName?: string;
}
export interface RemoteNetwork extends Entity, Parsable {
    /**
     * Specifies the connectivity details of all device links associated with a remote network.
     */
    connectivityConfiguration?: RemoteNetworkConnectivityConfiguration;
    /**
     * Each unique CPE device associated with a remote network is specified. Supports $expand.
     */
    deviceLinks?: DeviceLink[];
    /**
     * Each forwarding profile associated with a remote network is specified. Supports $expand and $select.
     */
    forwardingProfiles?: ForwardingProfile[];
    /**
     * last modified time.
     */
    lastModifiedDateTime?: Date;
    /**
     * Name.
     */
    name?: string;
    /**
     * The region property
     */
    region?: Region;
    /**
     * Remote network version.
     */
    version?: string;
}
export interface RemoteNetworkCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: RemoteNetwork[];
}
export interface RemoteNetworkConnectivityConfiguration extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * List of connectivity configurations for deviceLink objects.
     */
    links?: ConnectivityConfigurationLink[];
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Unique identifier or a specific reference assigned to a branchSite. Key.
     */
    remoteNetworkId?: string;
    /**
     * Display name assigned to a branchSite.
     */
    remoteNetworkName?: string;
}
export interface RemoteNetworkHealthEvent extends Entity, Parsable {
    /**
     * The number of BGP routes advertised through tunnel.
     */
    bgpRoutesAdvertisedCount?: number;
    /**
     * The time of the original event generation in UTC. Supports $filter (ge, le) and $orderby.
     */
    createdDateTime?: Date;
    /**
     * The description of the event.
     */
    description?: string;
    /**
     * The IP address of the destination.
     */
    destinationIp?: string;
    /**
     * The number of bytes sent from the destination to the source.
     */
    receivedBytes?: number;
    /**
     * A unique identifier for each remoteNetwork site. Supports $filter (eq).
     */
    remoteNetworkId?: string;
    /**
     * The number of bytes sent from the source to the destination for the connection or session.
     */
    sentBytes?: number;
    /**
     * The public IP address.
     */
    sourceIp?: string;
    /**
     * The status property
     */
    status?: RemoteNetworkStatus;
}
export interface RemoteNetworkHealthEventCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: RemoteNetworkHealthEvent[];
}
export type RemoteNetworkStatus = (typeof RemoteNetworkStatusObject)[keyof typeof RemoteNetworkStatusObject];
export interface Reports extends Entity, Parsable {
}
export interface RuleDestination extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAlert(writer: SerializationWriter, alert: Partial<Alert> | undefined = {}) : void {
    serializeEntity(writer, alert)
    writer.writeCollectionOfObjectValues<AlertAction>("actions", alert.actions, serializeAlertAction);
    writer.writeEnumValue<AlertType>("alertType", alert.alertType);
    writer.writeDateValue("creationDateTime", alert.creationDateTime);
    writer.writeStringValue("description", alert.description);
    writer.writeStringValue("detectionTechnology", alert.detectionTechnology);
    writer.writeStringValue("displayName", alert.displayName);
    writer.writeObjectValue<FilteringPolicy>("policy", alert.policy, serializeFilteringPolicy);
    writer.writeCollectionOfObjectValues<RelatedResource>("relatedResources", alert.relatedResources, serializeRelatedResource);
    writer.writeEnumValue<ThreatSeverity>("severity", alert.severity);
    writer.writeStringValue("vendorName", alert.vendorName);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAlertAction(writer: SerializationWriter, alertAction: Partial<AlertAction> | undefined = {}) : void {
    writer.writeStringValue("actionLink", alertAction.actionLink);
    writer.writeStringValue("actionText", alertAction.actionText);
    writer.writeStringValue("@odata.type", alertAction.odataType);
    writer.writeAdditionalData(alertAction.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAlertCollectionResponse(writer: SerializationWriter, alertCollectionResponse: Partial<AlertCollectionResponse> | undefined = {}) : void {
    serializeBaseCollectionPaginationCountResponse(writer, alertCollectionResponse)
    writer.writeCollectionOfObjectValues<Alert>("value", alertCollectionResponse.value, serializeAlert);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeApplicationSnapshot(writer: SerializationWriter, applicationSnapshot: Partial<ApplicationSnapshot> | undefined = {}) : void {
    writer.writeStringValue("appId", applicationSnapshot.appId);
    writer.writeStringValue("@odata.type", applicationSnapshot.odataType);
    writer.writeAdditionalData(applicationSnapshot.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAssociatedBranch(writer: SerializationWriter, associatedBranch: Partial<AssociatedBranch> | undefined = {}) : void {
    serializeAssociation(writer, associatedBranch)
    writer.writeStringValue("branchId", associatedBranch.branchId);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAssociation(writer: SerializationWriter, association: Partial<Association> | undefined = {}) : void {
    writer.writeStringValue("@odata.type", association.odataType);
    writer.writeAdditionalData(association.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeBgpConfiguration(writer: SerializationWriter, bgpConfiguration: Partial<BgpConfiguration> | undefined = {}) : void {
    writer.writeNumberValue("asn", bgpConfiguration.asn);
    writer.writeStringValue("ipAddress", bgpConfiguration.ipAddress);
    writer.writeStringValue("localIpAddress", bgpConfiguration.localIpAddress);
    writer.writeStringValue("@odata.type", bgpConfiguration.odataType);
    writer.writeStringValue("peerIpAddress", bgpConfiguration.peerIpAddress);
    writer.writeAdditionalData(bgpConfiguration.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeBranchConnectivityConfiguration(writer: SerializationWriter, branchConnectivityConfiguration: Partial<BranchConnectivityConfiguration> | undefined = {}) : void {
    writer.writeStringValue("branchId", branchConnectivityConfiguration.branchId);
    writer.writeStringValue("branchName", branchConnectivityConfiguration.branchName);
    writer.writeCollectionOfObjectValues<ConnectivityConfigurationLink>("links", branchConnectivityConfiguration.links, serializeConnectivityConfigurationLink);
    writer.writeStringValue("@odata.type", branchConnectivityConfiguration.odataType);
    writer.writeAdditionalData(branchConnectivityConfiguration.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeBranchSite(writer: SerializationWriter, branchSite: Partial<BranchSite> | undefined = {}) : void {
    serializeEntity(writer, branchSite)
    writer.writeNumberValue("bandwidthCapacity", branchSite.bandwidthCapacity);
    writer.writeObjectValue<BranchConnectivityConfiguration>("connectivityConfiguration", branchSite.connectivityConfiguration, serializeBranchConnectivityConfiguration);
    writer.writeEnumValue<ConnectivityState>("connectivityState", branchSite.connectivityState);
    writer.writeStringValue("country", branchSite.country);
    writer.writeCollectionOfObjectValues<DeviceLink>("deviceLinks", branchSite.deviceLinks, serializeDeviceLink);
    writer.writeCollectionOfObjectValues<ForwardingProfile>("forwardingProfiles", branchSite.forwardingProfiles, serializeForwardingProfile);
    writer.writeDateValue("lastModifiedDateTime", branchSite.lastModifiedDateTime);
    writer.writeStringValue("name", branchSite.name);
    writer.writeEnumValue<Region>("region", branchSite.region);
    writer.writeStringValue("version", branchSite.version);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeBranchSiteCollectionResponse(writer: SerializationWriter, branchSiteCollectionResponse: Partial<BranchSiteCollectionResponse> | undefined = {}) : void {
    serializeBaseCollectionPaginationCountResponse(writer, branchSiteCollectionResponse)
    writer.writeCollectionOfObjectValues<BranchSite>("value", branchSiteCollectionResponse.value, serializeBranchSite);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeConditionalAccessPolicy(writer: SerializationWriter, conditionalAccessPolicy: Partial<ConditionalAccessPolicy> | undefined = {}) : void {
    serializeEntity(writer, conditionalAccessPolicy)
    writer.writeDateValue("createdDateTime", conditionalAccessPolicy.createdDateTime);
    writer.writeStringValue("description", conditionalAccessPolicy.description);
    writer.writeStringValue("displayName", conditionalAccessPolicy.displayName);
    writer.writeDateValue("modifiedDateTime", conditionalAccessPolicy.modifiedDateTime);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeConditionalAccessPolicyCollectionResponse(writer: SerializationWriter, conditionalAccessPolicyCollectionResponse: Partial<ConditionalAccessPolicyCollectionResponse> | undefined = {}) : void {
    serializeBaseCollectionPaginationCountResponse(writer, conditionalAccessPolicyCollectionResponse)
    writer.writeCollectionOfObjectValues<ConditionalAccessPolicy>("value", conditionalAccessPolicyCollectionResponse.value, serializeConditionalAccessPolicy);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeConditionalAccessSettings(writer: SerializationWriter, conditionalAccessSettings: Partial<ConditionalAccessSettings> | undefined = {}) : void {
    serializeEntity(writer, conditionalAccessSettings)
    writer.writeEnumValue<Status>("signalingStatus", conditionalAccessSettings.signalingStatus);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeConnectivity(writer: SerializationWriter, connectivity: Partial<Connectivity> | undefined = {}) : void {
    serializeEntity(writer, connectivity)
    writer.writeCollectionOfObjectValues<BranchSite>("branches", connectivity.branches, serializeBranchSite);
    writer.writeCollectionOfObjectValues<RemoteNetwork>("remoteNetworks", connectivity.remoteNetworks, serializeRemoteNetwork);
    writer.writeCollectionOfObjectValues<WebCategory>("webCategories", connectivity.webCategories, serializeWebCategory);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeConnectivityConfigurationLink(writer: SerializationWriter, connectivityConfigurationLink: Partial<ConnectivityConfigurationLink> | undefined = {}) : void {
    serializeEntity(writer, connectivityConfigurationLink)
    writer.writeStringValue("displayName", connectivityConfigurationLink.displayName);
    writer.writeCollectionOfObjectValues<LocalConnectivityConfiguration>("localConfigurations", connectivityConfigurationLink.localConfigurations, serializeLocalConnectivityConfiguration);
    writer.writeObjectValue<PeerConnectivityConfiguration>("peerConfiguration", connectivityConfigurationLink.peerConfiguration, serializePeerConnectivityConfiguration);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeConnectivityConfigurationLinkCollectionResponse(writer: SerializationWriter, connectivityConfigurationLinkCollectionResponse: Partial<ConnectivityConfigurationLinkCollectionResponse> | undefined = {}) : void {
    serializeBaseCollectionPaginationCountResponse(writer, connectivityConfigurationLinkCollectionResponse)
    writer.writeCollectionOfObjectValues<ConnectivityConfigurationLink>("value", connectivityConfigurationLinkCollectionResponse.value, serializeConnectivityConfigurationLink);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeCrossTenantAccess(writer: SerializationWriter, crossTenantAccess: Partial<CrossTenantAccess> | undefined = {}) : void {
    writer.writeNumberValue("deviceCount", crossTenantAccess.deviceCount);
    writer.writeDateValue("lastAccessDateTime", crossTenantAccess.lastAccessDateTime);
    writer.writeStringValue("@odata.type", crossTenantAccess.odataType);
    writer.writeStringValue("resourceTenantId", crossTenantAccess.resourceTenantId);
    writer.writeStringValue("resourceTenantName", crossTenantAccess.resourceTenantName);
    writer.writeStringValue("resourceTenantPrimaryDomain", crossTenantAccess.resourceTenantPrimaryDomain);
    writer.writeEnumValue<UsageStatus>("usageStatus", crossTenantAccess.usageStatus);
    writer.writeNumberValue("userCount", crossTenantAccess.userCount);
    writer.writeAdditionalData(crossTenantAccess.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeCrossTenantAccessSettings(writer: SerializationWriter, crossTenantAccessSettings: Partial<CrossTenantAccessSettings> | undefined = {}) : void {
    serializeEntity(writer, crossTenantAccessSettings)
    writer.writeEnumValue<Status>("networkPacketTaggingStatus", crossTenantAccessSettings.networkPacketTaggingStatus);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeCrossTenantSummary(writer: SerializationWriter, crossTenantSummary: Partial<CrossTenantSummary> | undefined = {}) : void {
    writer.writeNumberValue("authTransactionCount", crossTenantSummary.authTransactionCount);
    writer.writeNumberValue("deviceCount", crossTenantSummary.deviceCount);
    writer.writeNumberValue("newTenantCount", crossTenantSummary.newTenantCount);
    writer.writeStringValue("@odata.type", crossTenantSummary.odataType);
    writer.writeNumberValue("rarelyUsedTenantCount", crossTenantSummary.rarelyUsedTenantCount);
    writer.writeNumberValue("tenantCount", crossTenantSummary.tenantCount);
    writer.writeNumberValue("userCount", crossTenantSummary.userCount);
    writer.writeAdditionalData(crossTenantSummary.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeDestination(writer: SerializationWriter, destination: Partial<Destination> | undefined = {}) : void {
    writer.writeNumberValue("deviceCount", destination.deviceCount);
    writer.writeDateValue("firstAccessDateTime", destination.firstAccessDateTime);
    writer.writeStringValue("fqdn", destination.fqdn);
    writer.writeStringValue("ip", destination.ip);
    writer.writeDateValue("lastAccessDateTime", destination.lastAccessDateTime);
    writer.writeEnumValue<NetworkingProtocol>("networkingProtocol", destination.networkingProtocol);
    writer.writeStringValue("@odata.type", destination.odataType);
    writer.writeNumberValue("port", destination.port);
    writer.writeNumberValue("threatCount", destination.threatCount);
    writer.writeNumberValue("totalBytesReceived", destination.totalBytesReceived);
    writer.writeNumberValue("totalBytesSent", destination.totalBytesSent);
    writer.writeEnumValue<TrafficType>("trafficType", destination.trafficType);
    writer.writeNumberValue("transactionCount", destination.transactionCount);
    writer.writeNumberValue("userCount", destination.userCount);
    writer.writeAdditionalData(destination.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeDestinationSummary(writer: SerializationWriter, destinationSummary: Partial<DestinationSummary> | undefined = {}) : void {
    writer.writeNumberValue("count", destinationSummary.count);
    writer.writeStringValue("destination", destinationSummary.destination);
    writer.writeStringValue("@odata.type", destinationSummary.odataType);
    writer.writeEnumValue<TrafficType>("trafficType", destinationSummary.trafficType);
    writer.writeAdditionalData(destinationSummary.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeDevice(writer: SerializationWriter, device: Partial<Device> | undefined = {}) : void {
    writer.writeStringValue("deviceId", device.deviceId);
    writer.writeStringValue("displayName", device.displayName);
    writer.writeBooleanValue("isCompliant", device.isCompliant);
    writer.writeDateValue("lastAccessDateTime", device.lastAccessDateTime);
    writer.writeStringValue("@odata.type", device.odataType);
    writer.writeStringValue("operatingSystem", device.operatingSystem);
    writer.writeEnumValue<TrafficType>("trafficType", device.trafficType);
    writer.writeAdditionalData(device.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeDeviceLink(writer: SerializationWriter, deviceLink: Partial<DeviceLink> | undefined = {}) : void {
    serializeEntity(writer, deviceLink)
    writer.writeEnumValue<BandwidthCapacityInMbps>("bandwidthCapacityInMbps", deviceLink.bandwidthCapacityInMbps);
    writer.writeObjectValue<BgpConfiguration>("bgpConfiguration", deviceLink.bgpConfiguration, serializeBgpConfiguration);
    writer.writeEnumValue<DeviceVendor>("deviceVendor", deviceLink.deviceVendor);
    writer.writeStringValue("ipAddress", deviceLink.ipAddress);
    writer.writeDateValue("lastModifiedDateTime", deviceLink.lastModifiedDateTime);
    writer.writeStringValue("name", deviceLink.name);
    writer.writeObjectValue<RedundancyConfiguration>("redundancyConfiguration", deviceLink.redundancyConfiguration, serializeRedundancyConfiguration);
    writer.writeObjectValue<TunnelConfiguration>("tunnelConfiguration", deviceLink.tunnelConfiguration, serializeTunnelConfiguration);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeDeviceLinkCollectionResponse(writer: SerializationWriter, deviceLinkCollectionResponse: Partial<DeviceLinkCollectionResponse> | undefined = {}) : void {
    serializeBaseCollectionPaginationCountResponse(writer, deviceLinkCollectionResponse)
    writer.writeCollectionOfObjectValues<DeviceLink>("value", deviceLinkCollectionResponse.value, serializeDeviceLink);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeDeviceUsageSummary(writer: SerializationWriter, deviceUsageSummary: Partial<DeviceUsageSummary> | undefined = {}) : void {
    writer.writeNumberValue("activeDeviceCount", deviceUsageSummary.activeDeviceCount);
    writer.writeNumberValue("inactiveDeviceCount", deviceUsageSummary.inactiveDeviceCount);
    writer.writeStringValue("@odata.type", deviceUsageSummary.odataType);
    writer.writeNumberValue("totalDeviceCount", deviceUsageSummary.totalDeviceCount);
    writer.writeAdditionalData(deviceUsageSummary.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeDiscoveredApplicationSegmentReport(writer: SerializationWriter, discoveredApplicationSegmentReport: Partial<DiscoveredApplicationSegmentReport> | undefined = {}) : void {
    writer.writeEnumValue<AccessType>("accessType", discoveredApplicationSegmentReport.accessType);
    writer.writeNumberValue("deviceCount", discoveredApplicationSegmentReport.deviceCount);
    writer.writeStringValue("discoveredApplicationSegmentId", discoveredApplicationSegmentReport.discoveredApplicationSegmentId);
    writer.writeDateValue("firstAccessDateTime", discoveredApplicationSegmentReport.firstAccessDateTime);
    writer.writeStringValue("fqdn", discoveredApplicationSegmentReport.fqdn);
    writer.writeStringValue("ip", discoveredApplicationSegmentReport.ip);
    writer.writeDateValue("lastAccessDateTime", discoveredApplicationSegmentReport.lastAccessDateTime);
    writer.writeStringValue("@odata.type", discoveredApplicationSegmentReport.odataType);
    writer.writeNumberValue("port", discoveredApplicationSegmentReport.port);
    writer.writeNumberValue("totalBytesReceived", discoveredApplicationSegmentReport.totalBytesReceived);
    writer.writeNumberValue("totalBytesSent", discoveredApplicationSegmentReport.totalBytesSent);
    writer.writeNumberValue("transactionCount", discoveredApplicationSegmentReport.transactionCount);
    writer.writeEnumValue<NetworkingProtocol>("transportProtocol", discoveredApplicationSegmentReport.transportProtocol);
    writer.writeNumberValue("userCount", discoveredApplicationSegmentReport.userCount);
    writer.writeAdditionalData(discoveredApplicationSegmentReport.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeEnrichedAuditLogs(writer: SerializationWriter, enrichedAuditLogs: Partial<EnrichedAuditLogs> | undefined = {}) : void {
    serializeEntity(writer, enrichedAuditLogs)
    writer.writeObjectValue<EnrichedAuditLogsSettings>("exchange", enrichedAuditLogs.exchange, serializeEnrichedAuditLogsSettings);
    writer.writeObjectValue<EnrichedAuditLogsSettings>("sharepoint", enrichedAuditLogs.sharepoint, serializeEnrichedAuditLogsSettings);
    writer.writeObjectValue<EnrichedAuditLogsSettings>("teams", enrichedAuditLogs.teams, serializeEnrichedAuditLogsSettings);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeEnrichedAuditLogsSettings(writer: SerializationWriter, enrichedAuditLogsSettings: Partial<EnrichedAuditLogsSettings> | undefined = {}) : void {
    writer.writeStringValue("@odata.type", enrichedAuditLogsSettings.odataType);
    writer.writeEnumValue<Status>("status", enrichedAuditLogsSettings.status);
    writer.writeAdditionalData(enrichedAuditLogsSettings.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeEntitiesSummary(writer: SerializationWriter, entitiesSummary: Partial<EntitiesSummary> | undefined = {}) : void {
    writer.writeNumberValue("deviceCount", entitiesSummary.deviceCount);
    writer.writeStringValue("@odata.type", entitiesSummary.odataType);
    writer.writeEnumValue<TrafficType>("trafficType", entitiesSummary.trafficType);
    writer.writeNumberValue("userCount", entitiesSummary.userCount);
    writer.writeNumberValue("workloadCount", entitiesSummary.workloadCount);
    writer.writeAdditionalData(entitiesSummary.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeFilteringPolicy(writer: SerializationWriter, filteringPolicy: Partial<FilteringPolicy> | undefined = {}) : void {
    serializePolicy(writer, filteringPolicy)
    writer.writeEnumValue<FilteringPolicyAction>("action", filteringPolicy.action);
    writer.writeDateValue("createdDateTime", filteringPolicy.createdDateTime);
    writer.writeDateValue("lastModifiedDateTime", filteringPolicy.lastModifiedDateTime);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeFilteringPolicyCollectionResponse(writer: SerializationWriter, filteringPolicyCollectionResponse: Partial<FilteringPolicyCollectionResponse> | undefined = {}) : void {
    serializeBaseCollectionPaginationCountResponse(writer, filteringPolicyCollectionResponse)
    writer.writeCollectionOfObjectValues<FilteringPolicy>("value", filteringPolicyCollectionResponse.value, serializeFilteringPolicy);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeFilteringPolicyLink(writer: SerializationWriter, filteringPolicyLink: Partial<FilteringPolicyLink> | undefined = {}) : void {
    serializePolicyLink(writer, filteringPolicyLink)
    writer.writeDateValue("createdDateTime", filteringPolicyLink.createdDateTime);
    writer.writeDateValue("lastModifiedDateTime", filteringPolicyLink.lastModifiedDateTime);
    writer.writeEnumValue<Status>("loggingState", filteringPolicyLink.loggingState);
    writer.writeNumberValue("priority", filteringPolicyLink.priority);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeFilteringProfile(writer: SerializationWriter, filteringProfile: Partial<FilteringProfile> | undefined = {}) : void {
    serializeProfile(writer, filteringProfile)
    writer.writeCollectionOfObjectValues<ConditionalAccessPolicy>("conditionalAccessPolicies", filteringProfile.conditionalAccessPolicies, serializeConditionalAccessPolicy);
    writer.writeDateValue("createdDateTime", filteringProfile.createdDateTime);
    writer.writeNumberValue("priority", filteringProfile.priority);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeFilteringProfileCollectionResponse(writer: SerializationWriter, filteringProfileCollectionResponse: Partial<FilteringProfileCollectionResponse> | undefined = {}) : void {
    serializeBaseCollectionPaginationCountResponse(writer, filteringProfileCollectionResponse)
    writer.writeCollectionOfObjectValues<FilteringProfile>("value", filteringProfileCollectionResponse.value, serializeFilteringProfile);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeFilteringRule(writer: SerializationWriter, filteringRule: Partial<FilteringRule> | undefined = {}) : void {
    serializePolicyRule(writer, filteringRule)
    writer.writeCollectionOfObjectValues<RuleDestination>("destinations", filteringRule.destinations, serializeRuleDestination);
    writer.writeEnumValue<NetworkDestinationType>("ruleType", filteringRule.ruleType);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeForwardingOptions(writer: SerializationWriter, forwardingOptions: Partial<ForwardingOptions> | undefined = {}) : void {
    serializeEntity(writer, forwardingOptions)
    writer.writeEnumValue<Status>("skipDnsLookupState", forwardingOptions.skipDnsLookupState);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeForwardingPolicy(writer: SerializationWriter, forwardingPolicy: Partial<ForwardingPolicy> | undefined = {}) : void {
    serializePolicy(writer, forwardingPolicy)
    writer.writeEnumValue<TrafficForwardingType>("trafficForwardingType", forwardingPolicy.trafficForwardingType);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeForwardingPolicyCollectionResponse(writer: SerializationWriter, forwardingPolicyCollectionResponse: Partial<ForwardingPolicyCollectionResponse> | undefined = {}) : void {
    serializeBaseCollectionPaginationCountResponse(writer, forwardingPolicyCollectionResponse)
    writer.writeCollectionOfObjectValues<ForwardingPolicy>("value", forwardingPolicyCollectionResponse.value, serializeForwardingPolicy);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeForwardingPolicyLink(writer: SerializationWriter, forwardingPolicyLink: Partial<ForwardingPolicyLink> | undefined = {}) : void {
    serializePolicyLink(writer, forwardingPolicyLink)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeForwardingProfile(writer: SerializationWriter, forwardingProfile: Partial<ForwardingProfile> | undefined = {}) : void {
    serializeProfile(writer, forwardingProfile)
    writer.writeCollectionOfObjectValues<Association>("associations", forwardingProfile.associations, serializeAssociation);
    writer.writeNumberValue("priority", forwardingProfile.priority);
    writer.writeObjectValue<ServicePrincipal>("servicePrincipal", forwardingProfile.servicePrincipal, serializeServicePrincipal);
    writer.writeEnumValue<TrafficForwardingType>("trafficForwardingType", forwardingProfile.trafficForwardingType);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeForwardingProfileCollectionResponse(writer: SerializationWriter, forwardingProfileCollectionResponse: Partial<ForwardingProfileCollectionResponse> | undefined = {}) : void {
    serializeBaseCollectionPaginationCountResponse(writer, forwardingProfileCollectionResponse)
    writer.writeCollectionOfObjectValues<ForwardingProfile>("value", forwardingProfileCollectionResponse.value, serializeForwardingProfile);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeForwardingRule(writer: SerializationWriter, forwardingRule: Partial<ForwardingRule> | undefined = {}) : void {
    serializePolicyRule(writer, forwardingRule)
    writer.writeEnumValue<ForwardingRuleAction>("action", forwardingRule.action);
    writer.writeCollectionOfObjectValues<RuleDestination>("destinations", forwardingRule.destinations, serializeRuleDestination);
    writer.writeEnumValue<NetworkDestinationType>("ruleType", forwardingRule.ruleType);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeFqdn(writer: SerializationWriter, fqdn: Partial<Fqdn> | undefined = {}) : void {
    serializeRuleDestination(writer, fqdn)
    writer.writeStringValue("value", fqdn.value);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeFqdnFilteringRule(writer: SerializationWriter, fqdnFilteringRule: Partial<FqdnFilteringRule> | undefined = {}) : void {
    serializeFilteringRule(writer, fqdnFilteringRule)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeHeaders(writer: SerializationWriter, headers: Partial<Headers> | undefined = {}) : void {
    writer.writeStringValue("@odata.type", headers.odataType);
    writer.writeStringValue("origin", headers.origin);
    writer.writeStringValue("referrer", headers.referrer);
    writer.writeStringValue("xForwardedFor", headers.xForwardedFor);
    writer.writeAdditionalData(headers.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeInternetAccessForwardingRule(writer: SerializationWriter, internetAccessForwardingRule: Partial<InternetAccessForwardingRule> | undefined = {}) : void {
    serializeForwardingRule(writer, internetAccessForwardingRule)
    writer.writeCollectionOfPrimitiveValues<string>("ports", internetAccessForwardingRule.ports);
    writer.writeEnumValue<NetworkingProtocol>("protocol", internetAccessForwardingRule.protocol);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeIpAddress(writer: SerializationWriter, ipAddress: Partial<IpAddress> | undefined = {}) : void {
    serializeRuleDestination(writer, ipAddress)
    writer.writeStringValue("value", ipAddress.value);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeIpRange(writer: SerializationWriter, ipRange: Partial<IpRange> | undefined = {}) : void {
    serializeRuleDestination(writer, ipRange)
    writer.writeStringValue("beginAddress", ipRange.beginAddress);
    writer.writeStringValue("endAddress", ipRange.endAddress);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeIpSubnet(writer: SerializationWriter, ipSubnet: Partial<IpSubnet> | undefined = {}) : void {
    serializeRuleDestination(writer, ipSubnet)
    writer.writeStringValue("value", ipSubnet.value);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeLocalConnectivityConfiguration(writer: SerializationWriter, localConnectivityConfiguration: Partial<LocalConnectivityConfiguration> | undefined = {}) : void {
    writer.writeNumberValue("asn", localConnectivityConfiguration.asn);
    writer.writeStringValue("bgpAddress", localConnectivityConfiguration.bgpAddress);
    writer.writeStringValue("endpoint", localConnectivityConfiguration.endpoint);
    writer.writeStringValue("@odata.type", localConnectivityConfiguration.odataType);
    writer.writeEnumValue<Region>("region", localConnectivityConfiguration.region);
    writer.writeAdditionalData(localConnectivityConfiguration.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeLogs(writer: SerializationWriter, logs: Partial<Logs> | undefined = {}) : void {
    serializeEntity(writer, logs)
    writer.writeCollectionOfObjectValues<RemoteNetworkHealthEvent>("remoteNetworks", logs.remoteNetworks, serializeRemoteNetworkHealthEvent);
    writer.writeCollectionOfObjectValues<NetworkAccessTraffic>("traffic", logs.traffic, serializeNetworkAccessTraffic);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeM365ForwardingRule(writer: SerializationWriter, m365ForwardingRule: Partial<M365ForwardingRule> | undefined = {}) : void {
    serializeForwardingRule(writer, m365ForwardingRule)
    writer.writeEnumValue<ForwardingCategory>("category", m365ForwardingRule.category);
    writer.writeCollectionOfPrimitiveValues<string>("ports", m365ForwardingRule.ports);
    writer.writeEnumValue<NetworkingProtocol>("protocol", m365ForwardingRule.protocol);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeNetworkAccessRoot(writer: SerializationWriter, networkAccessRoot: Partial<NetworkAccessRoot> | undefined = {}) : void {
    serializeEntity(writer, networkAccessRoot)
    writer.writeCollectionOfObjectValues<Alert>("alerts", networkAccessRoot.alerts, serializeAlert);
    writer.writeObjectValue<Connectivity>("connectivity", networkAccessRoot.connectivity, serializeConnectivity);
    writer.writeCollectionOfObjectValues<FilteringPolicy>("filteringPolicies", networkAccessRoot.filteringPolicies, serializeFilteringPolicy);
    writer.writeCollectionOfObjectValues<FilteringProfile>("filteringProfiles", networkAccessRoot.filteringProfiles, serializeFilteringProfile);
    writer.writeCollectionOfObjectValues<ForwardingPolicy>("forwardingPolicies", networkAccessRoot.forwardingPolicies, serializeForwardingPolicy);
    writer.writeCollectionOfObjectValues<ForwardingProfile>("forwardingProfiles", networkAccessRoot.forwardingProfiles, serializeForwardingProfile);
    writer.writeObjectValue<Logs>("logs", networkAccessRoot.logs, serializeLogs);
    writer.writeObjectValue<Reports>("reports", networkAccessRoot.reports, serializeReports);
    writer.writeObjectValue<Settings>("settings", networkAccessRoot.settings, serializeSettings);
    writer.writeObjectValue<TenantStatus>("tenantStatus", networkAccessRoot.tenantStatus, serializeTenantStatus);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeNetworkAccessTraffic(writer: SerializationWriter, networkAccessTraffic: Partial<NetworkAccessTraffic> | undefined = {}) : void {
    writer.writeEnumValue<FilteringPolicyAction>("action", networkAccessTraffic.action);
    writer.writeStringValue("agentVersion", networkAccessTraffic.agentVersion);
    writer.writeObjectValue<ApplicationSnapshot>("applicationSnapshot", networkAccessTraffic.applicationSnapshot, serializeApplicationSnapshot);
    writer.writeStringValue("connectionId", networkAccessTraffic.connectionId);
    writer.writeDateValue("createdDateTime", networkAccessTraffic.createdDateTime);
    writer.writeStringValue("description", networkAccessTraffic.description);
    writer.writeStringValue("destinationFQDN", networkAccessTraffic.destinationFQDN);
    writer.writeStringValue("destinationIp", networkAccessTraffic.destinationIp);
    writer.writeNumberValue("destinationPort", networkAccessTraffic.destinationPort);
    writer.writeStringValue("destinationUrl", networkAccessTraffic.destinationUrl);
    writer.writeObjectValue<WebCategory>("destinationWebCategory", networkAccessTraffic.destinationWebCategory, serializeWebCategory);
    writer.writeEnumValue<DeviceCategory>("deviceCategory", networkAccessTraffic.deviceCategory);
    writer.writeStringValue("deviceId", networkAccessTraffic.deviceId);
    writer.writeStringValue("deviceOperatingSystem", networkAccessTraffic.deviceOperatingSystem);
    writer.writeStringValue("deviceOperatingSystemVersion", networkAccessTraffic.deviceOperatingSystemVersion);
    writer.writeStringValue("filteringProfileId", networkAccessTraffic.filteringProfileId);
    writer.writeStringValue("filteringProfileName", networkAccessTraffic.filteringProfileName);
    writer.writeObjectValue<Headers>("headers", networkAccessTraffic.headers, serializeHeaders);
    writer.writeStringValue("initiatingProcessName", networkAccessTraffic.initiatingProcessName);
    writer.writeEnumValue<NetworkingProtocol>("networkProtocol", networkAccessTraffic.networkProtocol);
    writer.writeStringValue("@odata.type", networkAccessTraffic.odataType);
    writer.writeStringValue("policyId", networkAccessTraffic.policyId);
    writer.writeStringValue("policyName", networkAccessTraffic.policyName);
    writer.writeStringValue("policyRuleId", networkAccessTraffic.policyRuleId);
    writer.writeStringValue("policyRuleName", networkAccessTraffic.policyRuleName);
    writer.writeObjectValue<PrivateAccessDetails>("privateAccessDetails", networkAccessTraffic.privateAccessDetails, serializePrivateAccessDetails);
    writer.writeNumberValue("receivedBytes", networkAccessTraffic.receivedBytes);
    writer.writeStringValue("resourceTenantId", networkAccessTraffic.resourceTenantId);
    writer.writeNumberValue("sentBytes", networkAccessTraffic.sentBytes);
    writer.writeStringValue("sessionId", networkAccessTraffic.sessionId);
    writer.writeStringValue("sourceIp", networkAccessTraffic.sourceIp);
    writer.writeNumberValue("sourcePort", networkAccessTraffic.sourcePort);
    writer.writeStringValue("tenantId", networkAccessTraffic.tenantId);
    writer.writeStringValue("threatType", networkAccessTraffic.threatType);
    writer.writeEnumValue<TrafficType>("trafficType", networkAccessTraffic.trafficType);
    writer.writeStringValue("transactionId", networkAccessTraffic.transactionId);
    writer.writeEnumValue<NetworkingProtocol>("transportProtocol", networkAccessTraffic.transportProtocol);
    writer.writeStringValue("userId", networkAccessTraffic.userId);
    writer.writeStringValue("userPrincipalName", networkAccessTraffic.userPrincipalName);
    writer.writeCollectionOfPrimitiveValues<string>("vendorNames", networkAccessTraffic.vendorNames);
    writer.writeAdditionalData(networkAccessTraffic.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeNetworkAccessTrafficCollectionResponse(writer: SerializationWriter, networkAccessTrafficCollectionResponse: Partial<NetworkAccessTrafficCollectionResponse> | undefined = {}) : void {
    serializeBaseCollectionPaginationCountResponse(writer, networkAccessTrafficCollectionResponse)
    writer.writeCollectionOfObjectValues<NetworkAccessTraffic>("value", networkAccessTrafficCollectionResponse.value, serializeNetworkAccessTraffic);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializePeerConnectivityConfiguration(writer: SerializationWriter, peerConnectivityConfiguration: Partial<PeerConnectivityConfiguration> | undefined = {}) : void {
    writer.writeNumberValue("asn", peerConnectivityConfiguration.asn);
    writer.writeStringValue("bgpAddress", peerConnectivityConfiguration.bgpAddress);
    writer.writeStringValue("endpoint", peerConnectivityConfiguration.endpoint);
    writer.writeStringValue("@odata.type", peerConnectivityConfiguration.odataType);
    writer.writeAdditionalData(peerConnectivityConfiguration.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializePolicy(writer: SerializationWriter, policy: Partial<Policy> | undefined = {}) : void {
    serializeEntity(writer, policy)
    writer.writeStringValue("description", policy.description);
    writer.writeStringValue("name", policy.name);
    writer.writeCollectionOfObjectValues<PolicyRule>("policyRules", policy.policyRules, serializePolicyRule);
    writer.writeStringValue("version", policy.version);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializePolicyLink(writer: SerializationWriter, policyLink: Partial<PolicyLink> | undefined = {}) : void {
    serializeEntity(writer, policyLink)
    writer.writeObjectValue<Policy>("policy", policyLink.policy, serializePolicy);
    writer.writeEnumValue<Status>("state", policyLink.state);
    writer.writeStringValue("version", policyLink.version);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializePolicyLinkCollectionResponse(writer: SerializationWriter, policyLinkCollectionResponse: Partial<PolicyLinkCollectionResponse> | undefined = {}) : void {
    serializeBaseCollectionPaginationCountResponse(writer, policyLinkCollectionResponse)
    writer.writeCollectionOfObjectValues<PolicyLink>("value", policyLinkCollectionResponse.value, serializePolicyLink);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializePolicyRule(writer: SerializationWriter, policyRule: Partial<PolicyRule> | undefined = {}) : void {
    serializeEntity(writer, policyRule)
    writer.writeStringValue("name", policyRule.name);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializePolicyRuleCollectionResponse(writer: SerializationWriter, policyRuleCollectionResponse: Partial<PolicyRuleCollectionResponse> | undefined = {}) : void {
    serializeBaseCollectionPaginationCountResponse(writer, policyRuleCollectionResponse)
    writer.writeCollectionOfObjectValues<PolicyRule>("value", policyRuleCollectionResponse.value, serializePolicyRule);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializePolicyRuleDelta(writer: SerializationWriter, policyRuleDelta: Partial<PolicyRuleDelta> | undefined = {}) : void {
    writer.writeEnumValue<ForwardingRuleAction>("action", policyRuleDelta.action);
    writer.writeStringValue("@odata.type", policyRuleDelta.odataType);
    writer.writeStringValue("ruleId", policyRuleDelta.ruleId);
    writer.writeAdditionalData(policyRuleDelta.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializePrivateAccessDetails(writer: SerializationWriter, privateAccessDetails: Partial<PrivateAccessDetails> | undefined = {}) : void {
    writer.writeEnumValue<AccessType>("accessType", privateAccessDetails.accessType);
    writer.writeEnumValue<ConnectionStatus>("connectionStatus", privateAccessDetails.connectionStatus);
    writer.writeStringValue("connectorId", privateAccessDetails.connectorId);
    writer.writeStringValue("connectorIp", privateAccessDetails.connectorIp);
    writer.writeStringValue("connectorName", privateAccessDetails.connectorName);
    writer.writeStringValue("@odata.type", privateAccessDetails.odataType);
    writer.writeStringValue("processingRegion", privateAccessDetails.processingRegion);
    writer.writeObjectValue<ThirdPartyTokenDetails>("thirdPartyTokenDetails", privateAccessDetails.thirdPartyTokenDetails, serializeThirdPartyTokenDetails);
    writer.writeAdditionalData(privateAccessDetails.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializePrivateAccessForwardingRule(writer: SerializationWriter, privateAccessForwardingRule: Partial<PrivateAccessForwardingRule> | undefined = {}) : void {
    serializeForwardingRule(writer, privateAccessForwardingRule)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeProfile(writer: SerializationWriter, profile: Partial<Profile> | undefined = {}) : void {
    serializeEntity(writer, profile)
    writer.writeStringValue("description", profile.description);
    writer.writeDateValue("lastModifiedDateTime", profile.lastModifiedDateTime);
    writer.writeStringValue("name", profile.name);
    writer.writeCollectionOfObjectValues<PolicyLink>("policies", profile.policies, serializePolicyLink);
    writer.writeEnumValue<Status>("state", profile.state);
    writer.writeStringValue("version", profile.version);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRedundancyConfiguration(writer: SerializationWriter, redundancyConfiguration: Partial<RedundancyConfiguration> | undefined = {}) : void {
    writer.writeStringValue("@odata.type", redundancyConfiguration.odataType);
    writer.writeEnumValue<RedundancyTier>("redundancyTier", redundancyConfiguration.redundancyTier);
    writer.writeStringValue("zoneLocalIpAddress", redundancyConfiguration.zoneLocalIpAddress);
    writer.writeAdditionalData(redundancyConfiguration.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRelatedDestination(writer: SerializationWriter, relatedDestination: Partial<RelatedDestination> | undefined = {}) : void {
    serializeRelatedResource(writer, relatedDestination)
    writer.writeStringValue("fqdn", relatedDestination.fqdn);
    writer.writeStringValue("ip", relatedDestination.ip);
    writer.writeEnumValue<NetworkingProtocol>("networkingProtocol", relatedDestination.networkingProtocol);
    writer.writeNumberValue("port", relatedDestination.port);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRelatedDevice(writer: SerializationWriter, relatedDevice: Partial<RelatedDevice> | undefined = {}) : void {
    serializeRelatedResource(writer, relatedDevice)
    writer.writeStringValue("deviceId", relatedDevice.deviceId);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRelatedMalware(writer: SerializationWriter, relatedMalware: Partial<RelatedMalware> | undefined = {}) : void {
    serializeRelatedResource(writer, relatedMalware)
    writer.writeEnumValue<MalwareCategory>("category", relatedMalware.category);
    writer.writeStringValue("name", relatedMalware.name);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRelatedProcess(writer: SerializationWriter, relatedProcess: Partial<RelatedProcess> | undefined = {}) : void {
    serializeRelatedResource(writer, relatedProcess)
    writer.writeBooleanValue("isSuspicious", relatedProcess.isSuspicious);
    writer.writeStringValue("processName", relatedProcess.processName);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRelatedRemoteNetwork(writer: SerializationWriter, relatedRemoteNetwork: Partial<RelatedRemoteNetwork> | undefined = {}) : void {
    serializeRelatedResource(writer, relatedRemoteNetwork)
    writer.writeStringValue("remoteNetworkId", relatedRemoteNetwork.remoteNetworkId);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRelatedResource(writer: SerializationWriter, relatedResource: Partial<RelatedResource> | undefined = {}) : void {
    writer.writeStringValue("@odata.type", relatedResource.odataType);
    writer.writeAdditionalData(relatedResource.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRelatedTenant(writer: SerializationWriter, relatedTenant: Partial<RelatedTenant> | undefined = {}) : void {
    serializeRelatedResource(writer, relatedTenant)
    writer.writeStringValue("tenantId", relatedTenant.tenantId);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRelatedThreatIntelligence(writer: SerializationWriter, relatedThreatIntelligence: Partial<RelatedThreatIntelligence> | undefined = {}) : void {
    serializeRelatedResource(writer, relatedThreatIntelligence)
    writer.writeNumberValue("threatCount", relatedThreatIntelligence.threatCount);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRelatedToken(writer: SerializationWriter, relatedToken: Partial<RelatedToken> | undefined = {}) : void {
    serializeRelatedResource(writer, relatedToken)
    writer.writeStringValue("uniqueTokenIdentifier", relatedToken.uniqueTokenIdentifier);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRelatedUser(writer: SerializationWriter, relatedUser: Partial<RelatedUser> | undefined = {}) : void {
    serializeRelatedResource(writer, relatedUser)
    writer.writeStringValue("userId", relatedUser.userId);
    writer.writeStringValue("userPrincipalName", relatedUser.userPrincipalName);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRelatedWebCategory(writer: SerializationWriter, relatedWebCategory: Partial<RelatedWebCategory> | undefined = {}) : void {
    serializeRelatedResource(writer, relatedWebCategory)
    writer.writeStringValue("webCategoryName", relatedWebCategory.webCategoryName);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRemoteNetwork(writer: SerializationWriter, remoteNetwork: Partial<RemoteNetwork> | undefined = {}) : void {
    serializeEntity(writer, remoteNetwork)
    writer.writeObjectValue<RemoteNetworkConnectivityConfiguration>("connectivityConfiguration", remoteNetwork.connectivityConfiguration, serializeRemoteNetworkConnectivityConfiguration);
    writer.writeCollectionOfObjectValues<DeviceLink>("deviceLinks", remoteNetwork.deviceLinks, serializeDeviceLink);
    writer.writeCollectionOfObjectValues<ForwardingProfile>("forwardingProfiles", remoteNetwork.forwardingProfiles, serializeForwardingProfile);
    writer.writeDateValue("lastModifiedDateTime", remoteNetwork.lastModifiedDateTime);
    writer.writeStringValue("name", remoteNetwork.name);
    writer.writeEnumValue<Region>("region", remoteNetwork.region);
    writer.writeStringValue("version", remoteNetwork.version);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRemoteNetworkCollectionResponse(writer: SerializationWriter, remoteNetworkCollectionResponse: Partial<RemoteNetworkCollectionResponse> | undefined = {}) : void {
    serializeBaseCollectionPaginationCountResponse(writer, remoteNetworkCollectionResponse)
    writer.writeCollectionOfObjectValues<RemoteNetwork>("value", remoteNetworkCollectionResponse.value, serializeRemoteNetwork);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRemoteNetworkConnectivityConfiguration(writer: SerializationWriter, remoteNetworkConnectivityConfiguration: Partial<RemoteNetworkConnectivityConfiguration> | undefined = {}) : void {
    writer.writeCollectionOfObjectValues<ConnectivityConfigurationLink>("links", remoteNetworkConnectivityConfiguration.links, serializeConnectivityConfigurationLink);
    writer.writeStringValue("@odata.type", remoteNetworkConnectivityConfiguration.odataType);
    writer.writeStringValue("remoteNetworkId", remoteNetworkConnectivityConfiguration.remoteNetworkId);
    writer.writeStringValue("remoteNetworkName", remoteNetworkConnectivityConfiguration.remoteNetworkName);
    writer.writeAdditionalData(remoteNetworkConnectivityConfiguration.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRemoteNetworkHealthEvent(writer: SerializationWriter, remoteNetworkHealthEvent: Partial<RemoteNetworkHealthEvent> | undefined = {}) : void {
    serializeEntity(writer, remoteNetworkHealthEvent)
    writer.writeNumberValue("bgpRoutesAdvertisedCount", remoteNetworkHealthEvent.bgpRoutesAdvertisedCount);
    writer.writeDateValue("createdDateTime", remoteNetworkHealthEvent.createdDateTime);
    writer.writeStringValue("description", remoteNetworkHealthEvent.description);
    writer.writeStringValue("destinationIp", remoteNetworkHealthEvent.destinationIp);
    writer.writeNumberValue("receivedBytes", remoteNetworkHealthEvent.receivedBytes);
    writer.writeStringValue("remoteNetworkId", remoteNetworkHealthEvent.remoteNetworkId);
    writer.writeNumberValue("sentBytes", remoteNetworkHealthEvent.sentBytes);
    writer.writeStringValue("sourceIp", remoteNetworkHealthEvent.sourceIp);
    writer.writeEnumValue<RemoteNetworkStatus>("status", remoteNetworkHealthEvent.status);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRemoteNetworkHealthEventCollectionResponse(writer: SerializationWriter, remoteNetworkHealthEventCollectionResponse: Partial<RemoteNetworkHealthEventCollectionResponse> | undefined = {}) : void {
    serializeBaseCollectionPaginationCountResponse(writer, remoteNetworkHealthEventCollectionResponse)
    writer.writeCollectionOfObjectValues<RemoteNetworkHealthEvent>("value", remoteNetworkHealthEventCollectionResponse.value, serializeRemoteNetworkHealthEvent);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeReports(writer: SerializationWriter, reports: Partial<Reports> | undefined = {}) : void {
    serializeEntity(writer, reports)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRuleDestination(writer: SerializationWriter, ruleDestination: Partial<RuleDestination> | undefined = {}) : void {
    writer.writeStringValue("@odata.type", ruleDestination.odataType);
    writer.writeAdditionalData(ruleDestination.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeSettings(writer: SerializationWriter, settings: Partial<Settings> | undefined = {}) : void {
    serializeEntity(writer, settings)
    writer.writeObjectValue<ConditionalAccessSettings>("conditionalAccess", settings.conditionalAccess, serializeConditionalAccessSettings);
    writer.writeObjectValue<CrossTenantAccessSettings>("crossTenantAccess", settings.crossTenantAccess, serializeCrossTenantAccessSettings);
    writer.writeObjectValue<EnrichedAuditLogs>("enrichedAuditLogs", settings.enrichedAuditLogs, serializeEnrichedAuditLogs);
    writer.writeObjectValue<ForwardingOptions>("forwardingOptions", settings.forwardingOptions, serializeForwardingOptions);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeTenantStatus(writer: SerializationWriter, tenantStatus: Partial<TenantStatus> | undefined = {}) : void {
    serializeEntity(writer, tenantStatus)
    writer.writeStringValue("onboardingErrorMessage", tenantStatus.onboardingErrorMessage);
    writer.writeEnumValue<OnboardingStatus>("onboardingStatus", tenantStatus.onboardingStatus);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeThirdPartyTokenDetails(writer: SerializationWriter, thirdPartyTokenDetails: Partial<ThirdPartyTokenDetails> | undefined = {}) : void {
    writer.writeDateValue("expirationDateTime", thirdPartyTokenDetails.expirationDateTime);
    writer.writeDateValue("issuedAtDateTime", thirdPartyTokenDetails.issuedAtDateTime);
    writer.writeStringValue("@odata.type", thirdPartyTokenDetails.odataType);
    writer.writeStringValue("uniqueTokenIdentifier", thirdPartyTokenDetails.uniqueTokenIdentifier);
    writer.writeDateValue("validFromDateTime", thirdPartyTokenDetails.validFromDateTime);
    writer.writeAdditionalData(thirdPartyTokenDetails.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeTransactionSummary(writer: SerializationWriter, transactionSummary: Partial<TransactionSummary> | undefined = {}) : void {
    writer.writeNumberValue("blockedCount", transactionSummary.blockedCount);
    writer.writeStringValue("@odata.type", transactionSummary.odataType);
    writer.writeNumberValue("totalCount", transactionSummary.totalCount);
    writer.writeEnumValue<TrafficType>("trafficType", transactionSummary.trafficType);
    writer.writeAdditionalData(transactionSummary.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeTunnelConfiguration(writer: SerializationWriter, tunnelConfiguration: Partial<TunnelConfiguration> | undefined = {}) : void {
    writer.writeStringValue("@odata.type", tunnelConfiguration.odataType);
    writer.writeStringValue("preSharedKey", tunnelConfiguration.preSharedKey);
    writer.writeStringValue("zoneRedundancyPreSharedKey", tunnelConfiguration.zoneRedundancyPreSharedKey);
    writer.writeAdditionalData(tunnelConfiguration.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeTunnelConfigurationIKEv2Custom(writer: SerializationWriter, tunnelConfigurationIKEv2Custom: Partial<TunnelConfigurationIKEv2Custom> | undefined = {}) : void {
    serializeTunnelConfiguration(writer, tunnelConfigurationIKEv2Custom)
    writer.writeEnumValue<DhGroup>("dhGroup", tunnelConfigurationIKEv2Custom.dhGroup);
    writer.writeEnumValue<IkeEncryption>("ikeEncryption", tunnelConfigurationIKEv2Custom.ikeEncryption);
    writer.writeEnumValue<IkeIntegrity>("ikeIntegrity", tunnelConfigurationIKEv2Custom.ikeIntegrity);
    writer.writeEnumValue<IpSecEncryption>("ipSecEncryption", tunnelConfigurationIKEv2Custom.ipSecEncryption);
    writer.writeEnumValue<IpSecIntegrity>("ipSecIntegrity", tunnelConfigurationIKEv2Custom.ipSecIntegrity);
    writer.writeEnumValue<PfsGroup>("pfsGroup", tunnelConfigurationIKEv2Custom.pfsGroup);
    writer.writeNumberValue("saLifeTimeSeconds", tunnelConfigurationIKEv2Custom.saLifeTimeSeconds);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeTunnelConfigurationIKEv2Default(writer: SerializationWriter, tunnelConfigurationIKEv2Default: Partial<TunnelConfigurationIKEv2Default> | undefined = {}) : void {
    serializeTunnelConfiguration(writer, tunnelConfigurationIKEv2Default)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeUrl(writer: SerializationWriter, url: Partial<Url> | undefined = {}) : void {
    serializeRuleDestination(writer, url)
    writer.writeStringValue("value", url.value);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeUsageProfilingPoint(writer: SerializationWriter, usageProfilingPoint: Partial<UsageProfilingPoint> | undefined = {}) : void {
    writer.writeNumberValue("internetAccessTrafficCount", usageProfilingPoint.internetAccessTrafficCount);
    writer.writeNumberValue("microsoft365AccessTrafficCount", usageProfilingPoint.microsoft365AccessTrafficCount);
    writer.writeStringValue("@odata.type", usageProfilingPoint.odataType);
    writer.writeNumberValue("privateAccessTrafficCount", usageProfilingPoint.privateAccessTrafficCount);
    writer.writeDateValue("timeStampDateTime", usageProfilingPoint.timeStampDateTime);
    writer.writeNumberValue("totalTrafficCount", usageProfilingPoint.totalTrafficCount);
    writer.writeAdditionalData(usageProfilingPoint.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeUser(writer: SerializationWriter, user: Partial<User> | undefined = {}) : void {
    writer.writeStringValue("displayName", user.displayName);
    writer.writeDateValue("firstAccessDateTime", user.firstAccessDateTime);
    writer.writeDateValue("lastAccessDateTime", user.lastAccessDateTime);
    writer.writeStringValue("@odata.type", user.odataType);
    writer.writeNumberValue("totalBytesReceived", user.totalBytesReceived);
    writer.writeNumberValue("totalBytesSent", user.totalBytesSent);
    writer.writeEnumValue<TrafficType>("trafficType", user.trafficType);
    writer.writeNumberValue("transactionCount", user.transactionCount);
    writer.writeStringValue("userId", user.userId);
    writer.writeStringValue("userPrincipalName", user.userPrincipalName);
    writer.writeEnumValue<UserType>("userType", user.userType);
    writer.writeAdditionalData(user.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWebCategoriesSummary(writer: SerializationWriter, webCategoriesSummary: Partial<WebCategoriesSummary> | undefined = {}) : void {
    writer.writeEnumValue<FilteringPolicyAction>("action", webCategoriesSummary.action);
    writer.writeNumberValue("deviceCount", webCategoriesSummary.deviceCount);
    writer.writeStringValue("@odata.type", webCategoriesSummary.odataType);
    writer.writeNumberValue("transactionCount", webCategoriesSummary.transactionCount);
    writer.writeNumberValue("userCount", webCategoriesSummary.userCount);
    writer.writeObjectValue<WebCategory>("webCategory", webCategoriesSummary.webCategory, serializeWebCategory);
    writer.writeAdditionalData(webCategoriesSummary.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWebCategory(writer: SerializationWriter, webCategory: Partial<WebCategory> | undefined = {}) : void {
    serializeRuleDestination(writer, webCategory)
    writer.writeStringValue("displayName", webCategory.displayName);
    writer.writeStringValue("group", webCategory.group);
    writer.writeStringValue("name", webCategory.name);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWebCategoryFilteringRule(writer: SerializationWriter, webCategoryFilteringRule: Partial<WebCategoryFilteringRule> | undefined = {}) : void {
    serializeFilteringRule(writer, webCategoryFilteringRule)
}
export interface Settings extends Entity, Parsable {
    /**
     * The conditionalAccess property
     */
    conditionalAccess?: ConditionalAccessSettings;
    /**
     * The crossTenantAccess property
     */
    crossTenantAccess?: CrossTenantAccessSettings;
    /**
     * The enrichedAuditLogs property
     */
    enrichedAuditLogs?: EnrichedAuditLogs;
    /**
     * The forwardingOptions property
     */
    forwardingOptions?: ForwardingOptions;
}
export type Status = (typeof StatusObject)[keyof typeof StatusObject];
export interface TenantStatus extends Entity, Parsable {
    /**
     * Reflects a message to the user if there's an error.
     */
    onboardingErrorMessage?: string;
    /**
     * The onboardingStatus property
     */
    onboardingStatus?: OnboardingStatus;
}
export interface ThirdPartyTokenDetails extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The expirationDateTime property
     */
    expirationDateTime?: Date;
    /**
     * The issuedAtDateTime property
     */
    issuedAtDateTime?: Date;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The uniqueTokenIdentifier property
     */
    uniqueTokenIdentifier?: string;
    /**
     * The validFromDateTime property
     */
    validFromDateTime?: Date;
}
export type ThreatSeverity = (typeof ThreatSeverityObject)[keyof typeof ThreatSeverityObject];
export type TrafficForwardingType = (typeof TrafficForwardingTypeObject)[keyof typeof TrafficForwardingTypeObject];
export type TrafficType = (typeof TrafficTypeObject)[keyof typeof TrafficTypeObject];
export interface TransactionSummary extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The number of transactions that were blocked.
     */
    blockedCount?: number;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The total number of transactions.
     */
    totalCount?: number;
    /**
     * The trafficType property
     */
    trafficType?: TrafficType;
}
export interface TunnelConfiguration extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * A key to establish secure connection between the link and VPN tunnel on the edge.
     */
    preSharedKey?: string;
    /**
     * Another key for zone redundant tunnel. Required only when you select zoneRedundancy redindancyTier when creating a deviceLink.
     */
    zoneRedundancyPreSharedKey?: string;
}
export interface TunnelConfigurationIKEv2Custom extends Parsable, TunnelConfiguration {
    /**
     * The dhGroup property
     */
    dhGroup?: DhGroup;
    /**
     * The ikeEncryption property
     */
    ikeEncryption?: IkeEncryption;
    /**
     * The ikeIntegrity property
     */
    ikeIntegrity?: IkeIntegrity;
    /**
     * The ipSecEncryption property
     */
    ipSecEncryption?: IpSecEncryption;
    /**
     * The ipSecIntegrity property
     */
    ipSecIntegrity?: IpSecIntegrity;
    /**
     * The pfsGroup property
     */
    pfsGroup?: PfsGroup;
    /**
     * a standard specifiying Security Association lifetime with recommended values from an RFC standard.
     */
    saLifeTimeSeconds?: number;
}
export interface TunnelConfigurationIKEv2Default extends Parsable, TunnelConfiguration {
}
export interface Url extends Parsable, RuleDestination {
    /**
     * URL Address
     */
    value?: string;
}
export interface UsageProfilingPoint extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The internetAccessTrafficCount property
     */
    internetAccessTrafficCount?: number;
    /**
     * The microsoft365AccessTrafficCount property
     */
    microsoft365AccessTrafficCount?: number;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The privateAccessTrafficCount property
     */
    privateAccessTrafficCount?: number;
    /**
     * The timeStampDateTime property
     */
    timeStampDateTime?: Date;
    /**
     * The totalTrafficCount property
     */
    totalTrafficCount?: number;
}
export type UsageStatus = (typeof UsageStatusObject)[keyof typeof UsageStatusObject];
export interface User extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * User display Name.
     */
    displayName?: string;
    /**
     * The firstAccessDateTime property
     */
    firstAccessDateTime?: Date;
    /**
     * The date and time of the most recent access.
     */
    lastAccessDateTime?: Date;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The totalBytesReceived property
     */
    totalBytesReceived?: number;
    /**
     * The totalBytesSent property
     */
    totalBytesSent?: number;
    /**
     * The trafficType property
     */
    trafficType?: TrafficType;
    /**
     * The transactionCount property
     */
    transactionCount?: number;
    /**
     * The ID for the user.
     */
    userId?: string;
    /**
     * A unique identifier that is associated with a user in a system or directory. Typically, this value is an email address that is used for user authentication and identification.
     */
    userPrincipalName?: string;
    /**
     * The userType property
     */
    userType?: UserType;
}
export type UserType = (typeof UserTypeObject)[keyof typeof UserTypeObject];
export interface WebCategoriesSummary extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * The action property
     */
    action?: FilteringPolicyAction;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The number of unique devices that were seen.
     */
    deviceCount?: number;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The number of transactions that were seen.
     */
    transactionCount?: number;
    /**
     * The number of unique Microsoft Entra ID users that were seen.
     */
    userCount?: number;
    /**
     * The webCategory property
     */
    webCategory?: WebCategory;
}
export interface WebCategory extends Parsable, RuleDestination {
    /**
     * The display name for the web category.
     */
    displayName?: string;
    /**
     * The group or category to which the web category belongs.
     */
    group?: string;
    /**
     * The unique name that is associated with the web category.
     */
    name?: string;
}
export interface WebCategoryFilteringRule extends FilteringRule, Parsable {
}
export const AccessTypeObject = {
    QuickAccess: "quickAccess",
    PrivateAccess: "privateAccess",
    UnknownFutureValue: "unknownFutureValue",
    AppAccess: "appAccess",
} as const;
export const AlertTypeObject = {
    UnhealthyRemoteNetworks: "unhealthyRemoteNetworks",
    UnhealthyConnectors: "unhealthyConnectors",
    DeviceTokenInconsistency: "deviceTokenInconsistency",
    CrossTenantAnomaly: "crossTenantAnomaly",
    SuspiciousProcess: "suspiciousProcess",
    ThreatIntelligenceTransactions: "threatIntelligenceTransactions",
    UnknownFutureValue: "unknownFutureValue",
    WebContentBlocked: "webContentBlocked",
    Malware: "malware",
} as const;
export const BandwidthCapacityInMbpsObject = {
    Mbps250: "mbps250",
    Mbps500: "mbps500",
    Mbps750: "mbps750",
    Mbps1000: "mbps1000",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const ConnectionStatusObject = {
    Open: "open",
    Active: "active",
    Closed: "closed",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const ConnectivityStateObject = {
    Pending: "pending",
    Connected: "connected",
    Inactive: "inactive",
    ErrorEscaped: "error",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const DeviceCategoryObject = {
    Client: "client",
    Branch: "branch",
    UnknownFutureValue: "unknownFutureValue",
    RemoteNetwork: "remoteNetwork",
} as const;
export const DeviceVendorObject = {
    BarracudaNetworks: "barracudaNetworks",
    CheckPoint: "checkPoint",
    CiscoMeraki: "ciscoMeraki",
    Citrix: "citrix",
    Fortinet: "fortinet",
    HpeAruba: "hpeAruba",
    NetFoundry: "netFoundry",
    Nuage: "nuage",
    OpenSystems: "openSystems",
    PaloAltoNetworks: "paloAltoNetworks",
    RiverbedTechnology: "riverbedTechnology",
    SilverPeak: "silverPeak",
    VmWareSdWan: "vmWareSdWan",
    Versa: "versa",
    Other: "other",
    CiscoCatalyst: "ciscoCatalyst",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const DhGroupObject = {
    DhGroup14: "dhGroup14",
    DhGroup24: "dhGroup24",
    DhGroup2048: "dhGroup2048",
    Ecp256: "ecp256",
    Ecp384: "ecp384",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const FilteringPolicyActionObject = {
    Block: "block",
    Allow: "allow",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const ForwardingCategoryObject = {
    DefaultEscaped: "default",
    Optimized: "optimized",
    Allow: "allow",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const ForwardingRuleActionObject = {
    Bypass: "bypass",
    Forward: "forward",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const IkeEncryptionObject = {
    Aes128: "aes128",
    Aes192: "aes192",
    Aes256: "aes256",
    GcmAes128: "gcmAes128",
    GcmAes256: "gcmAes256",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const IkeIntegrityObject = {
    Sha256: "sha256",
    Sha384: "sha384",
    GcmAes128: "gcmAes128",
    GcmAes256: "gcmAes256",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const IpSecEncryptionObject = {
    None: "none",
    GcmAes128: "gcmAes128",
    GcmAes192: "gcmAes192",
    GcmAes256: "gcmAes256",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const IpSecIntegrityObject = {
    GcmAes128: "gcmAes128",
    GcmAes192: "gcmAes192",
    GcmAes256: "gcmAes256",
    Sha256: "sha256",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const MalwareCategoryObject = {
    Adware: "adware",
    Backdoor: "backdoor",
    Behavior: "behavior",
    Bot: "bot",
    BrowserModifier: "browserModifier",
    Constructor: "constructor",
    Cryptojacking: "cryptojacking",
    Ddos: "ddos",
    Dropper: "dropper",
    DropperMalware: "dropperMalware",
    Exploit: "exploit",
    FilelessMalware: "filelessMalware",
    HackTool: "hackTool",
    HybridMalware: "hybridMalware",
    Joke: "joke",
    Keylogger: "keylogger",
    Misleading: "misleading",
    MonitoringTool: "monitoringTool",
    PolymorphicMalware: "polymorphicMalware",
    PasswordStealer: "passwordStealer",
    Program: "program",
    Ransomware: "ransomware",
    RemoteAccess: "remoteAccess",
    Rogue: "rogue",
    Rootkit: "rootkit",
    SettingsModifier: "settingsModifier",
    SoftwareBundler: "softwareBundler",
    Spammer: "spammer",
    Spoofer: "spoofer",
    Spyware: "spyware",
    Tool: "tool",
    Trojan: "trojan",
    TrojanClicker: "trojanClicker",
    TrojanDownloader: "trojanDownloader",
    TrojanNotifier: "trojanNotifier",
    TrojanProxy: "trojanProxy",
    TrojanSpy: "trojanSpy",
    Virus: "virus",
    WiperMalware: "wiperMalware",
    Worm: "worm",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const NetworkDestinationTypeObject = {
    Url: "url",
    Fqdn: "fqdn",
    IpAddress: "ipAddress",
    IpRange: "ipRange",
    IpSubnet: "ipSubnet",
    WebCategory: "webCategory",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const NetworkingProtocolObject = {
    Ip: "ip",
    Icmp: "icmp",
    Igmp: "igmp",
    Ggp: "ggp",
    Ipv4: "ipv4",
    Tcp: "tcp",
    Pup: "pup",
    Udp: "udp",
    Idp: "idp",
    Ipv6: "ipv6",
    Ipv6RoutingHeader: "ipv6RoutingHeader",
    Ipv6FragmentHeader: "ipv6FragmentHeader",
    IpSecEncapsulatingSecurityPayload: "ipSecEncapsulatingSecurityPayload",
    IpSecAuthenticationHeader: "ipSecAuthenticationHeader",
    IcmpV6: "icmpV6",
    Ipv6NoNextHeader: "ipv6NoNextHeader",
    Ipv6DestinationOptions: "ipv6DestinationOptions",
    Nd: "nd",
    Ipx: "ipx",
    Raw: "raw",
    Spx: "spx",
    SpxII: "spxII",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const OnboardingStatusObject = {
    Offboarded: "offboarded",
    OffboardingInProgress: "offboardingInProgress",
    OnboardingInProgress: "onboardingInProgress",
    Onboarded: "onboarded",
    OnboardingErrorOccurred: "onboardingErrorOccurred",
    OffboardingErrorOccurred: "offboardingErrorOccurred",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const PfsGroupObject = {
    None: "none",
    Pfs1: "pfs1",
    Pfs2: "pfs2",
    Pfs14: "pfs14",
    Pfs24: "pfs24",
    Pfs2048: "pfs2048",
    Pfsmm: "pfsmm",
    Ecp256: "ecp256",
    Ecp384: "ecp384",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const RedundancyTierObject = {
    NoRedundancy: "noRedundancy",
    ZoneRedundancy: "zoneRedundancy",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const RegionObject = {
    EastUS: "eastUS",
    EastUS2: "eastUS2",
    WestUS: "westUS",
    WestUS2: "westUS2",
    WestUS3: "westUS3",
    CentralUS: "centralUS",
    NorthCentralUS: "northCentralUS",
    SouthCentralUS: "southCentralUS",
    NorthEurope: "northEurope",
    WestEurope: "westEurope",
    FranceCentral: "franceCentral",
    GermanyWestCentral: "germanyWestCentral",
    SwitzerlandNorth: "switzerlandNorth",
    UkSouth: "ukSouth",
    CanadaEast: "canadaEast",
    CanadaCentral: "canadaCentral",
    SouthAfricaWest: "southAfricaWest",
    SouthAfricaNorth: "southAfricaNorth",
    UaeNorth: "uaeNorth",
    AustraliaEast: "australiaEast",
    WestCentralUS: "westCentralUS",
    CentralIndia: "centralIndia",
    SouthEastAsia: "southEastAsia",
    SwedenCentral: "swedenCentral",
    SouthIndia: "southIndia",
    AustraliaSouthEast: "australiaSouthEast",
    KoreaCentral: "koreaCentral",
    PolandCentral: "polandCentral",
    BrazilSouth: "brazilSouth",
    JapanEast: "japanEast",
    JapanWest: "japanWest",
    KoreaSouth: "koreaSouth",
    ItalyNorth: "italyNorth",
    FranceSouth: "franceSouth",
    IsraelCentral: "israelCentral",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const RemoteNetworkStatusObject = {
    TunnelDisconnected: "tunnelDisconnected",
    TunnelConnected: "tunnelConnected",
    BgpDisconnected: "bgpDisconnected",
    BgpConnected: "bgpConnected",
    RemoteNetworkAlive: "remoteNetworkAlive",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const StatusObject = {
    Enabled: "enabled",
    Disabled: "disabled",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const ThreatSeverityObject = {
    Informational: "informational",
    Low: "low",
    Medium: "medium",
    High: "high",
    Critical: "critical",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const TrafficForwardingTypeObject = {
    M365: "m365",
    Internet: "internet",
    Private: "private",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const TrafficTypeObject = {
    Internet: "internet",
    Private: "private",
    Microsoft365: "microsoft365",
    All: "all",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const UsageStatusObject = {
    FrequentlyUsed: "frequentlyUsed",
    RarelyUsed: "rarelyUsed",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const UserTypeObject = {
    Member: "member",
    Guest: "guest",
    UnknownFutureValue: "unknownFutureValue",
} as const;
/* tslint:enable */
/* eslint-enable */
