/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createGroupFromDiscriminatorValue, createIdentitySetFromDiscriminatorValue, createPhysicalAddressFromDiscriminatorValue, createPublicErrorFromDiscriminatorValue, createResultInfoFromDiscriminatorValue, createSiteFromDiscriminatorValue, deserializeIntoBaseCollectionPaginationCountResponse, deserializeIntoEntity, deserializeIntoIdentity, serializeBaseCollectionPaginationCountResponse, serializeEntity, serializeGroup, serializeIdentity, serializeIdentitySet, serializePhysicalAddress, serializePublicError, serializeResultInfo, serializeSite, type BaseCollectionPaginationCountResponse, type Entity, type Group, type Identity, type IdentitySet, type PhysicalAddress, type PublicError, type ResultInfo, type Site } from '../';
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type Duration, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';
import { type Guid } from 'guid-typescript';

export type ActionAfterRetentionPeriod = (typeof ActionAfterRetentionPeriodObject)[keyof typeof ActionAfterRetentionPeriodObject];
export type ActionSource = (typeof ActionSourceObject)[keyof typeof ActionSourceObject];
export interface AddContentFooterAction extends InformationProtectionAction, Parsable {
    /**
     * The alignment property
     */
    alignment?: ContentAlignment;
    /**
     * Color of the font to use for the footer.
     */
    fontColor?: string;
    /**
     * Name of the font to use for the footer.
     */
    fontName?: string;
    /**
     * Font size to use for the footer.
     */
    fontSize?: number;
    /**
     * The margin of the header from the bottom of the document.
     */
    margin?: number;
    /**
     * The contents of the footer itself.
     */
    text?: string;
    /**
     * The name of the UI element where the footer should be placed.
     */
    uiElementName?: string;
}
export interface AddContentHeaderAction extends InformationProtectionAction, Parsable {
    /**
     * The alignment property
     */
    alignment?: ContentAlignment;
    /**
     * Color of the font to use for the header.
     */
    fontColor?: string;
    /**
     * Name of the font to use for the header.
     */
    fontName?: string;
    /**
     * Font size to use for the header.
     */
    fontSize?: number;
    /**
     * The margin of the header from the top of the document.
     */
    margin?: number;
    /**
     * The contents of the header itself.
     */
    text?: string;
    /**
     * The name of the UI element where the header should be placed.
     */
    uiElementName?: string;
}
export type AdditionalDataOptions = (typeof AdditionalDataOptionsObject)[keyof typeof AdditionalDataOptionsObject];
export type AdditionalOptions = (typeof AdditionalOptionsObject)[keyof typeof AdditionalOptionsObject];
export interface AddWatermarkAction extends InformationProtectionAction, Parsable {
    /**
     * Color of the font to use for the watermark.
     */
    fontColor?: string;
    /**
     * Name of the font to use for the watermark.
     */
    fontName?: string;
    /**
     * Font size to use for the watermark.
     */
    fontSize?: number;
    /**
     * The layout property
     */
    layout?: WatermarkLayout;
    /**
     * The contents of the watermark itself.
     */
    text?: string;
    /**
     * The name of the UI element where the watermark should be placed.
     */
    uiElementName?: string;
}
export interface Alert extends Entity, Parsable {
    /**
     * The adversary or activity group that is associated with this alert.
     */
    actorDisplayName?: string;
    /**
     * The alertPolicyId property
     */
    alertPolicyId?: string;
    /**
     * URL for the alert page in the Microsoft 365 Defender portal.
     */
    alertWebUrl?: string;
    /**
     * Owner of the alert, or null if no owner is assigned.
     */
    assignedTo?: string;
    /**
     * The attack kill-chain category that the alert belongs to. Aligned with the MITRE ATT&CK framework.
     */
    category?: string;
    /**
     * Specifies whether the alert represents a true threat. Possible values are: unknown, falsePositive, truePositive, informationalExpectedActivity, unknownFutureValue.
     */
    classification?: AlertClassification;
    /**
     * Array of comments created by the Security Operations (SecOps) team during the alert management process.
     */
    comments?: AlertComment[];
    /**
     * Time when Microsoft 365 Defender created the alert.
     */
    createdDateTime?: Date;
    /**
     * String value describing each alert.
     */
    description?: string;
    /**
     * Detection technology or sensor that identified the notable component or activity. Possible values are: unknown, microsoftDefenderForEndpoint, antivirus, smartScreen, customTi, microsoftDefenderForOffice365, automatedInvestigation, microsoftThreatExperts, customDetection, microsoftDefenderForIdentity, cloudAppSecurity, microsoft365Defender, azureAdIdentityProtection, manual, microsoftDataLossPrevention, appGovernancePolicy, appGovernanceDetection, unknownFutureValue, microsoftDefenderForCloud, microsoftDefenderForIoT, microsoftDefenderForServers, microsoftDefenderForStorage, microsoftDefenderForDNS, microsoftDefenderForDatabases, microsoftDefenderForContainers, microsoftDefenderForNetwork, microsoftDefenderForAppService, microsoftDefenderForKeyVault, microsoftDefenderForResourceManager, microsoftDefenderForApiManagement. You must use the Prefer: include-unknown-enum-members request header to get the following value(s) in this evolvable enum: microsoftDefenderForCloud, microsoftDefenderForIoT, microsoftDefenderForServers, microsoftDefenderForStorage, microsoftDefenderForDNS, microsoftDefenderForDatabases, microsoftDefenderForContainers, microsoftDefenderForNetwork, microsoftDefenderForAppService, microsoftDefenderForKeyVault, microsoftDefenderForResourceManager, microsoftDefenderForApiManagement.
     */
    detectionSource?: DetectionSource;
    /**
     * The ID of the detector that triggered the alert.
     */
    detectorId?: string;
    /**
     * Specifies the result of the investigation, whether the alert represents a true attack and if so, the nature of the attack. Possible values are: unknown, apt, malware, securityPersonnel, securityTesting, unwantedSoftware, other, multiStagedAttack, compromisedUser, phishing, maliciousUserActivity, clean, insufficientData, confirmedUserActivity, lineOfBusinessApplication, unknownFutureValue.
     */
    determination?: AlertDetermination;
    /**
     * Collection of evidence related to the alert.
     */
    evidence?: AlertEvidence[];
    /**
     * The earliest activity associated with the alert.
     */
    firstActivityDateTime?: Date;
    /**
     * Unique identifier to represent the incident this alert resource is associated with.
     */
    incidentId?: string;
    /**
     * URL for the incident page in the Microsoft 365 Defender portal.
     */
    incidentWebUrl?: string;
    /**
     * The oldest activity associated with the alert.
     */
    lastActivityDateTime?: Date;
    /**
     * Time when the alert was last updated at Microsoft 365 Defender.
     */
    lastUpdateDateTime?: Date;
    /**
     * The attack techniques, as aligned with the MITRE ATT&CK framework.
     */
    mitreTechniques?: string[];
    /**
     * The productName property
     */
    productName?: string;
    /**
     * The ID of the alert as it appears in the security provider product that generated the alert.
     */
    providerAlertId?: string;
    /**
     * Recommended response and remediation actions to take in the event this alert was generated.
     */
    recommendedActions?: string;
    /**
     * Time when the alert was resolved.
     */
    resolvedDateTime?: Date;
    /**
     * The serviceSource property
     */
    serviceSource?: ServiceSource;
    /**
     * The severity property
     */
    severity?: AlertSeverity;
    /**
     * The status property
     */
    status?: AlertStatus;
    /**
     * The systemTags property
     */
    systemTags?: string[];
    /**
     * The Microsoft Entra tenant the alert was created in.
     */
    tenantId?: string;
    /**
     * The threat associated with this alert.
     */
    threatDisplayName?: string;
    /**
     * Threat family associated with this alert.
     */
    threatFamilyName?: string;
    /**
     * Brief identifying string value describing the alert.
     */
    title?: string;
}
export type AlertClassification = (typeof AlertClassificationObject)[keyof typeof AlertClassificationObject];
export interface AlertCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: Alert[];
}
export interface AlertComment extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The comment text.
     */
    comment?: string;
    /**
     * The person or app name that submitted the comment.
     */
    createdByDisplayName?: string;
    /**
     * The time when the comment was submitted.
     */
    createdDateTime?: Date;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export type AlertDetermination = (typeof AlertDeterminationObject)[keyof typeof AlertDeterminationObject];
export interface AlertEvidence extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    createdDateTime?: Date;
    /**
     * Detailed description of the entity role/s in an alert. Values are free-form.
     */
    detailedRoles?: string[];
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The remediationStatus property
     */
    remediationStatus?: EvidenceRemediationStatus;
    /**
     * Details about the remediation status.
     */
    remediationStatusDetails?: string;
    /**
     * The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
     */
    roles?: EvidenceRole[];
    /**
     * Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
     */
    tags?: string[];
    /**
     * The verdict property
     */
    verdict?: EvidenceVerdict;
}
export type AlertSeverity = (typeof AlertSeverityObject)[keyof typeof AlertSeverityObject];
export type AlertStatus = (typeof AlertStatusObject)[keyof typeof AlertStatusObject];
export interface AlertTemplate extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The category property
     */
    category?: string;
    /**
     * The description property
     */
    description?: string;
    /**
     * The impactedAssets property
     */
    impactedAssets?: ImpactedAsset[];
    /**
     * The mitreTechniques property
     */
    mitreTechniques?: string[];
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The recommendedActions property
     */
    recommendedActions?: string;
    /**
     * The severity property
     */
    severity?: AlertSeverity;
    /**
     * The title property
     */
    title?: string;
}
export interface AllowFileResponseAction extends Parsable, ResponseAction {
    /**
     * The deviceGroupNames property
     */
    deviceGroupNames?: string[];
    /**
     * The identifier property
     */
    identifier?: FileEntityIdentifier[];
}
export interface AmazonResourceEvidence extends AlertEvidence, Parsable {
    /**
     * The unique identifier for the Amazon account.
     */
    amazonAccountId?: string;
    /**
     * The Amazon resource identifier (ARN) for the cloud resource.
     */
    amazonResourceId?: string;
    /**
     * The name of the resource.
     */
    resourceName?: string;
    /**
     * The type of the resource.
     */
    resourceType?: string;
}
export interface AnalyzedEmail extends Entity, Parsable {
    /**
     * The alertIds property
     */
    alertIds?: string[];
    /**
     * The attachments property
     */
    attachments?: AnalyzedEmailAttachment[];
    /**
     * The attachmentsCount property
     */
    attachmentsCount?: number;
    /**
     * The authenticationDetails property
     */
    authenticationDetails?: AnalyzedEmailAuthenticationDetail;
    /**
     * The bulkComplaintLevel property
     */
    bulkComplaintLevel?: string;
    /**
     * The contexts property
     */
    contexts?: string[];
    /**
     * The detectionMethods property
     */
    detectionMethods?: string[];
    /**
     * The directionality property
     */
    directionality?: AntispamDirectionality;
    /**
     * The distributionList property
     */
    distributionList?: string;
    /**
     * The emailClusterId property
     */
    emailClusterId?: string;
    /**
     * The exchangeTransportRules property
     */
    exchangeTransportRules?: AnalyzedEmailExchangeTransportRuleInfo[];
    /**
     * The internetMessageId property
     */
    internetMessageId?: string;
    /**
     * The language property
     */
    language?: string;
    /**
     * The latestDelivery property
     */
    latestDelivery?: AnalyzedEmailDeliveryDetail;
    /**
     * The loggedDateTime property
     */
    loggedDateTime?: Date;
    /**
     * The networkMessageId property
     */
    networkMessageId?: string;
    /**
     * The originalDelivery property
     */
    originalDelivery?: AnalyzedEmailDeliveryDetail;
    /**
     * The overrideSources property
     */
    overrideSources?: string[];
    /**
     * The phishConfidenceLevel property
     */
    phishConfidenceLevel?: string;
    /**
     * The policy property
     */
    policy?: string;
    /**
     * The policyAction property
     */
    policyAction?: string;
    /**
     * The recipientEmailAddresses property
     */
    recipientEmailAddresses?: string[];
    /**
     * The returnPath property
     */
    returnPath?: string;
    /**
     * The senderDetail property
     */
    senderDetail?: AnalyzedEmailSenderDetail;
    /**
     * The sizeInBytes property
     */
    sizeInBytes?: number;
    /**
     * The spamConfidenceLevel property
     */
    spamConfidenceLevel?: string;
    /**
     * The subject property
     */
    subject?: string;
    /**
     * The threatType property
     */
    threatType?: ThreatType;
    /**
     * The urls property
     */
    urls?: AnalyzedEmailUrl[];
    /**
     * The urlsCount property
     */
    urlsCount?: number;
}
export interface AnalyzedEmailAttachment extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The detonationDetails property
     */
    detonationDetails?: DetonationDetails;
    /**
     * The fileName property
     */
    fileName?: string;
    /**
     * The fileType property
     */
    fileType?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The sha256 property
     */
    sha256?: string;
    /**
     * The threatName property
     */
    threatName?: string;
    /**
     * The threatType property
     */
    threatType?: ThreatType;
}
export interface AnalyzedEmailAuthenticationDetail extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The compositeAuthentication property
     */
    compositeAuthentication?: string;
    /**
     * The dkim property
     */
    dkim?: string;
    /**
     * The dmarc property
     */
    dmarc?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The senderPolicyFramework property
     */
    senderPolicyFramework?: string;
}
export interface AnalyzedEmailCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: AnalyzedEmail[];
}
export interface AnalyzedEmailDeliveryDetail extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * The action property
     */
    action?: DeliveryAction;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The location property
     */
    location?: DeliveryLocation;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export interface AnalyzedEmailExchangeTransportRuleInfo extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The name property
     */
    name?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The ruleId property
     */
    ruleId?: string;
}
export interface AnalyzedEmailSenderDetail extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The fromAddress property
     */
    fromAddress?: string;
    /**
     * The ipv4 property
     */
    ipv4?: string;
    /**
     * The mailFromAddress property
     */
    mailFromAddress?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export interface AnalyzedEmailUrl extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The detectionMethod property
     */
    detectionMethod?: string;
    /**
     * The detonationDetails property
     */
    detonationDetails?: DetonationDetails;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The threatType property
     */
    threatType?: ThreatType;
    /**
     * The url property
     */
    url?: string;
}
export interface AnalyzedMessageEvidence extends AlertEvidence, Parsable {
    /**
     * Direction of the email relative to your network. The possible values are: inbound, outbound or intraorg.
     */
    antiSpamDirection?: string;
    /**
     * Number of attachments in the email.
     */
    attachmentsCount?: number;
    /**
     * Delivery action of the email. The possible values are: delivered, deliveredAsSpam, junked, blocked, or replaced.
     */
    deliveryAction?: string;
    /**
     * Location where the email was delivered. The possible values are: inbox, external, junkFolder, quarantine, failed, dropped, deletedFolder or forwarded.
     */
    deliveryLocation?: string;
    /**
     * Public-facing identifier for the email that is set by the sending email system.
     */
    internetMessageId?: string;
    /**
     * Detected language of the email content.
     */
    language?: string;
    /**
     * Unique identifier for the email, generated by Microsoft 365.
     */
    networkMessageId?: string;
    /**
     * The P1 sender.
     */
    p1Sender?: EmailSender;
    /**
     * The P2 sender.
     */
    p2Sender?: EmailSender;
    /**
     * Date and time when the email was received.
     */
    receivedDateTime?: Date;
    /**
     * Email address of the recipient, or email address of the recipient after distribution list expansion.
     */
    recipientEmailAddress?: string;
    /**
     * IP address of the last detected mail server that relayed the message.
     */
    senderIp?: string;
    /**
     * Subject of the email.
     */
    subject?: string;
    /**
     * Collection of methods used to detect malware, phishing, or other threats found in the email.
     */
    threatDetectionMethods?: string[];
    /**
     * Collection of detection names for malware or other threats found.
     */
    threats?: string[];
    /**
     * Number of embedded URLs in the email.
     */
    urlCount?: number;
    /**
     * Collection of the URLs contained in this email.
     */
    urls?: string[];
    /**
     * Uniform resource name (URN) of the automated investigation where the cluster was identified.
     */
    urn?: string;
}
export type AntispamDirectionality = (typeof AntispamDirectionalityObject)[keyof typeof AntispamDirectionalityObject];
export interface AppliedCategory extends FilePlanDescriptorBase, Parsable {
    /**
     * Represents the file plan descriptor for a subcategory under a specific category, which has been assigned to a particular retention label.
     */
    subCategory?: SubCategory;
}
export interface ApplyLabelAction extends InformationProtectionAction, Parsable {
    /**
     * The collection of actions that should be implemented by the caller.
     */
    actions?: InformationProtectionAction[];
    /**
     * The actionSource property
     */
    actionSource?: ActionSource;
    /**
     * If the label was the result of an automatic classification, supply the list of sensitive info type GUIDs that resulted in the returned label.
     */
    responsibleSensitiveTypeIds?: string[];
    /**
     * The sensitivityLabelId property
     */
    sensitivityLabelId?: string;
}
export interface Article extends Entity, Parsable {
    /**
     * The body property
     */
    body?: FormattedContent;
    /**
     * The date and time when this article was created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    createdDateTime?: Date;
    /**
     * URL of the header image for this article, used for display purposes.
     */
    imageUrl?: string;
    /**
     * Indicators related to this article.
     */
    indicators?: ArticleIndicator[];
    /**
     * Indicates whether this article is currently featured by Microsoft.
     */
    isFeatured?: boolean;
    /**
     * The most recent date and time when this article was updated. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    lastUpdatedDateTime?: Date;
    /**
     * The summary property
     */
    summary?: FormattedContent;
    /**
     * Tags for this article, communicating keywords, or key concepts.
     */
    tags?: string[];
    /**
     * The title of this article.
     */
    title?: string;
}
export interface ArticleCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: Article[];
}
export interface ArticleIndicator extends Indicator, Parsable {
}
export interface ArticleIndicatorCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: ArticleIndicator[];
}
export interface Artifact extends Entity, Parsable {
}
export type AssignmentMethod = (typeof AssignmentMethodObject)[keyof typeof AssignmentMethodObject];
export interface AttackSimulationInfo extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The date and time of the attack simulation.
     */
    attackSimDateTime?: Date;
    /**
     * The duration (in time) for the attack simulation.
     */
    attackSimDurationTime?: Duration;
    /**
     * The activity ID for the attack simulation.
     */
    attackSimId?: Guid;
    /**
     * The unique identifier for the user who got the attack simulation email.
     */
    attackSimUserId?: string;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export interface AuditCoreRoot extends Entity, Parsable {
    /**
     * The queries property
     */
    queries?: AuditLogQuery[];
}
export interface AuditData extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export interface AuditLogQuery extends Entity, Parsable {
    /**
     * The administrativeUnitIdFilters property
     */
    administrativeUnitIdFilters?: string[];
    /**
     * The displayName property
     */
    displayName?: string;
    /**
     * The filterEndDateTime property
     */
    filterEndDateTime?: Date;
    /**
     * The filterStartDateTime property
     */
    filterStartDateTime?: Date;
    /**
     * The ipAddressFilters property
     */
    ipAddressFilters?: string[];
    /**
     * The keywordFilter property
     */
    keywordFilter?: string;
    /**
     * The objectIdFilters property
     */
    objectIdFilters?: string[];
    /**
     * The operationFilters property
     */
    operationFilters?: string[];
    /**
     * The records property
     */
    records?: AuditLogRecord[];
    /**
     * The recordTypeFilters property
     */
    recordTypeFilters?: AuditLogRecordType[];
    /**
     * The serviceFilters property
     */
    serviceFilters?: string[];
    /**
     * The status property
     */
    status?: AuditLogQueryStatus;
    /**
     * The userPrincipalNameFilters property
     */
    userPrincipalNameFilters?: string[];
}
export interface AuditLogQueryCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: AuditLogQuery[];
}
export type AuditLogQueryStatus = (typeof AuditLogQueryStatusObject)[keyof typeof AuditLogQueryStatusObject];
export interface AuditLogRecord extends Entity, Parsable {
    /**
     * The administrativeUnits property
     */
    administrativeUnits?: string[];
    /**
     * The auditData property
     */
    auditData?: AuditData;
    /**
     * The auditLogRecordType property
     */
    auditLogRecordType?: AuditLogRecordType;
    /**
     * The clientIp property
     */
    clientIp?: string;
    /**
     * The createdDateTime property
     */
    createdDateTime?: Date;
    /**
     * The objectId property
     */
    objectId?: string;
    /**
     * The operation property
     */
    operation?: string;
    /**
     * The organizationId property
     */
    organizationId?: string;
    /**
     * The service property
     */
    service?: string;
    /**
     * The userId property
     */
    userId?: string;
    /**
     * The userPrincipalName property
     */
    userPrincipalName?: string;
    /**
     * The userType property
     */
    userType?: AuditLogUserType;
}
export interface AuditLogRecordCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: AuditLogRecord[];
}
export type AuditLogRecordType = (typeof AuditLogRecordTypeObject)[keyof typeof AuditLogRecordTypeObject];
export type AuditLogUserType = (typeof AuditLogUserTypeObject)[keyof typeof AuditLogUserTypeObject];
export interface Authority extends FilePlanDescriptorBase, Parsable {
}
export interface AuthorityTemplate extends FilePlanDescriptorTemplate, Parsable {
}
export interface AuthorityTemplateCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: AuthorityTemplate[];
}
export interface AutonomousSystem extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The name of the autonomous system.
     */
    name?: string;
    /**
     * The autonomous system number, assigned by IANA.
     */
    number?: number;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The name of the autonomous system organization.
     */
    organization?: string;
    /**
     * A displayable value for these autonomous system details.
     */
    value?: string;
}
export interface AzureResourceEvidence extends AlertEvidence, Parsable {
    /**
     * The unique identifier for the Azure resource.
     */
    resourceId?: string;
    /**
     * The name of the resource.
     */
    resourceName?: string;
    /**
     * The type of the resource.
     */
    resourceType?: string;
}
export type BehaviorDuringRetentionPeriod = (typeof BehaviorDuringRetentionPeriodObject)[keyof typeof BehaviorDuringRetentionPeriodObject];
export interface BlobContainerEvidence extends AlertEvidence, Parsable {
    /**
     * The name of the blob container.
     */
    name?: string;
    /**
     * The storage which the blob container belongs to.
     */
    storageResource?: AzureResourceEvidence;
    /**
     * The full URL representation of the blob container.
     */
    url?: string;
}
export interface BlobEvidence extends AlertEvidence, Parsable {
    /**
     * The container which the blob belongs to.
     */
    blobContainer?: BlobContainerEvidence;
    /**
     * The Etag associated with this blob.
     */
    etag?: string;
    /**
     * The file hashes associated with this blob.
     */
    fileHashes?: FileHash[];
    /**
     * The name of the blob.
     */
    name?: string;
    /**
     * The full URL representation of the blob.
     */
    url?: string;
}
export interface BlockFileResponseAction extends Parsable, ResponseAction {
    /**
     * The deviceGroupNames property
     */
    deviceGroupNames?: string[];
    /**
     * The identifier property
     */
    identifier?: FileEntityIdentifier[];
}
export type CaseAction = (typeof CaseActionObject)[keyof typeof CaseActionObject];
export interface CaseEscaped extends Entity, Parsable {
    /**
     * The createdDateTime property
     */
    createdDateTime?: Date;
    /**
     * The description property
     */
    description?: string;
    /**
     * The displayName property
     */
    displayName?: string;
    /**
     * The lastModifiedBy property
     */
    lastModifiedBy?: IdentitySet;
    /**
     * The lastModifiedDateTime property
     */
    lastModifiedDateTime?: Date;
    /**
     * The status property
     */
    status?: CaseStatus;
}
export interface CaseOperation extends Entity, Parsable {
    /**
     * The type of action the operation represents. Possible values are: addToReviewSet,applyTags,contentExport,convertToPdf,estimateStatistics, purgeData
     */
    action?: CaseAction;
    /**
     * The date and time the operation was completed.
     */
    completedDateTime?: Date;
    /**
     * The user that created the operation.
     */
    createdBy?: IdentitySet;
    /**
     * The date and time the operation was created.
     */
    createdDateTime?: Date;
    /**
     * The progress of the operation.
     */
    percentProgress?: number;
    /**
     * Contains success and failure-specific result information.
     */
    resultInfo?: ResultInfo;
    /**
     * The status of the case operation. Possible values are: notStarted, submissionFailed, running, succeeded, partiallySucceeded, failed.
     */
    status?: CaseOperationStatus;
}
export interface CaseOperationCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: CaseOperation[];
}
export type CaseOperationStatus = (typeof CaseOperationStatusObject)[keyof typeof CaseOperationStatusObject];
export interface CasesRoot extends Entity, Parsable {
    /**
     * The ediscoveryCases property
     */
    ediscoveryCases?: EdiscoveryCase[];
}
export type CaseStatus = (typeof CaseStatusObject)[keyof typeof CaseStatusObject];
export interface CategoryTemplate extends FilePlanDescriptorTemplate, Parsable {
    /**
     * Represents all subcategories under a particular category.
     */
    subCategories?: SubCategoryTemplate[];
}
export interface CategoryTemplateCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: CategoryTemplate[];
}
export type ChildSelectability = (typeof ChildSelectabilityObject)[keyof typeof ChildSelectabilityObject];
export interface Citation extends FilePlanDescriptorBase, Parsable {
    /**
     * Represents the jurisdiction or agency that published the citation.
     */
    citationJurisdiction?: string;
    /**
     * Represents the URL to the published citation.
     */
    citationUrl?: string;
}
export interface CitationTemplate extends FilePlanDescriptorTemplate, Parsable {
    /**
     * Represents the jurisdiction or agency that published the citation.
     */
    citationJurisdiction?: string;
    /**
     * Represents the URL to the published citation.
     */
    citationUrl?: string;
}
export interface CitationTemplateCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: CitationTemplate[];
}
export interface ClassificationResult extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The confidence level, 0 to 100, of the result.
     */
    confidenceLevel?: number;
    /**
     * The number of instances of the specific information type in the input.
     */
    count?: number;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The GUID of the discovered sensitive information type.
     */
    sensitiveTypeId?: string;
}
export interface CloudApplicationEvidence extends AlertEvidence, Parsable {
    /**
     * Unique identifier of the application.
     */
    appId?: number;
    /**
     * Name of the application.
     */
    displayName?: string;
    /**
     * Identifier of the instance of the Software as a Service (SaaS) application.
     */
    instanceId?: number;
    /**
     * Name of the instance of the SaaS application.
     */
    instanceName?: string;
    /**
     * The identifier of the SaaS application.
     */
    saasAppId?: number;
}
export interface CollaborationRoot extends Entity, Parsable {
    /**
     * The analyzedEmails property
     */
    analyzedEmails?: AnalyzedEmail[];
}
export interface CollectInvestigationPackageResponseAction extends Parsable, ResponseAction {
    /**
     * The identifier property
     */
    identifier?: DeviceIdEntityIdentifier[];
}
export interface ContainerEvidence extends AlertEvidence, Parsable {
    /**
     * The list of arguments.
     */
    args?: string[];
    /**
     * The list of commands.
     */
    command?: string[];
    /**
     * The container ID.
     */
    containerId?: string;
    /**
     * The image used to run the container.
     */
    image?: ContainerImageEvidence;
    /**
     * The privileged status.
     */
    isPrivileged?: boolean;
    /**
     * The container name.
     */
    name?: string;
    /**
     * The pod that this container belongs to.
     */
    pod?: KubernetesPodEvidence;
}
export interface ContainerImageEvidence extends AlertEvidence, Parsable {
    /**
     * The digest image entity, in case this is a tag image.
     */
    digestImage?: ContainerImageEvidence;
    /**
     * The unique identifier for the container image entity.
     */
    imageId?: string;
    /**
     * The container registry for this image.
     */
    registry?: ContainerRegistryEvidence;
}
export type ContainerPortProtocol = (typeof ContainerPortProtocolObject)[keyof typeof ContainerPortProtocolObject];
export interface ContainerRegistryEvidence extends AlertEvidence, Parsable {
    /**
     * The registry URI.
     */
    registry?: string;
}
export type ContentAlignment = (typeof ContentAlignmentObject)[keyof typeof ContentAlignmentObject];
export type ContentFormat = (typeof ContentFormatObject)[keyof typeof ContentFormatObject];
export interface ContentInfo extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The format of the content to be labeled. Possible values are: file, email.
     */
    contentFormat?: string;
    /**
     * Identifier used for Azure Information Protection Analytics.
     */
    identifier?: string;
    /**
     * Existing Microsoft Purview Information Protection metadata is passed as key-value pairs, where the key is the MSIPLabelGUID_PropName.
     */
    metadata?: KeyValuePair[];
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The state property
     */
    state?: ContentState;
}
export interface ContentLabel extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The assignmentMethod property
     */
    assignmentMethod?: AssignmentMethod;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The createdDateTime property
     */
    createdDateTime?: Date;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The sensitivityLabelId property
     */
    sensitivityLabelId?: string;
}
export type ContentState = (typeof ContentStateObject)[keyof typeof ContentStateObject];
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a addContentFooterAction
 */
export function createAddContentFooterActionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoAddContentFooterAction;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a addContentHeaderAction
 */
export function createAddContentHeaderActionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoAddContentHeaderAction;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a addWatermarkAction
 */
export function createAddWatermarkActionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoAddWatermarkAction;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a alertCollectionResponse
 */
export function createAlertCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoAlertCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a alertComment
 */
export function createAlertCommentFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoAlertComment;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a alertEvidence
 */
export function createAlertEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.security.amazonResourceEvidence":
                    return deserializeIntoAmazonResourceEvidence;
                case "#microsoft.graph.security.analyzedMessageEvidence":
                    return deserializeIntoAnalyzedMessageEvidence;
                case "#microsoft.graph.security.azureResourceEvidence":
                    return deserializeIntoAzureResourceEvidence;
                case "#microsoft.graph.security.blobContainerEvidence":
                    return deserializeIntoBlobContainerEvidence;
                case "#microsoft.graph.security.blobEvidence":
                    return deserializeIntoBlobEvidence;
                case "#microsoft.graph.security.cloudApplicationEvidence":
                    return deserializeIntoCloudApplicationEvidence;
                case "#microsoft.graph.security.containerEvidence":
                    return deserializeIntoContainerEvidence;
                case "#microsoft.graph.security.containerImageEvidence":
                    return deserializeIntoContainerImageEvidence;
                case "#microsoft.graph.security.containerRegistryEvidence":
                    return deserializeIntoContainerRegistryEvidence;
                case "#microsoft.graph.security.deviceEvidence":
                    return deserializeIntoDeviceEvidence;
                case "#microsoft.graph.security.fileEvidence":
                    return deserializeIntoFileEvidence;
                case "#microsoft.graph.security.gitHubOrganizationEvidence":
                    return deserializeIntoGitHubOrganizationEvidence;
                case "#microsoft.graph.security.gitHubRepoEvidence":
                    return deserializeIntoGitHubRepoEvidence;
                case "#microsoft.graph.security.gitHubUserEvidence":
                    return deserializeIntoGitHubUserEvidence;
                case "#microsoft.graph.security.googleCloudResourceEvidence":
                    return deserializeIntoGoogleCloudResourceEvidence;
                case "#microsoft.graph.security.hostLogonSessionEvidence":
                    return deserializeIntoHostLogonSessionEvidence;
                case "#microsoft.graph.security.ioTDeviceEvidence":
                    return deserializeIntoIoTDeviceEvidence;
                case "#microsoft.graph.security.ipEvidence":
                    return deserializeIntoIpEvidence;
                case "#microsoft.graph.security.kubernetesClusterEvidence":
                    return deserializeIntoKubernetesClusterEvidence;
                case "#microsoft.graph.security.kubernetesControllerEvidence":
                    return deserializeIntoKubernetesControllerEvidence;
                case "#microsoft.graph.security.kubernetesNamespaceEvidence":
                    return deserializeIntoKubernetesNamespaceEvidence;
                case "#microsoft.graph.security.kubernetesPodEvidence":
                    return deserializeIntoKubernetesPodEvidence;
                case "#microsoft.graph.security.kubernetesSecretEvidence":
                    return deserializeIntoKubernetesSecretEvidence;
                case "#microsoft.graph.security.kubernetesServiceAccountEvidence":
                    return deserializeIntoKubernetesServiceAccountEvidence;
                case "#microsoft.graph.security.kubernetesServiceEvidence":
                    return deserializeIntoKubernetesServiceEvidence;
                case "#microsoft.graph.security.mailboxEvidence":
                    return deserializeIntoMailboxEvidence;
                case "#microsoft.graph.security.mailClusterEvidence":
                    return deserializeIntoMailClusterEvidence;
                case "#microsoft.graph.security.malwareEvidence":
                    return deserializeIntoMalwareEvidence;
                case "#microsoft.graph.security.networkConnectionEvidence":
                    return deserializeIntoNetworkConnectionEvidence;
                case "#microsoft.graph.security.nicEvidence":
                    return deserializeIntoNicEvidence;
                case "#microsoft.graph.security.oauthApplicationEvidence":
                    return deserializeIntoOauthApplicationEvidence;
                case "#microsoft.graph.security.processEvidence":
                    return deserializeIntoProcessEvidence;
                case "#microsoft.graph.security.registryKeyEvidence":
                    return deserializeIntoRegistryKeyEvidence;
                case "#microsoft.graph.security.registryValueEvidence":
                    return deserializeIntoRegistryValueEvidence;
                case "#microsoft.graph.security.sasTokenEvidence":
                    return deserializeIntoSasTokenEvidence;
                case "#microsoft.graph.security.securityGroupEvidence":
                    return deserializeIntoSecurityGroupEvidence;
                case "#microsoft.graph.security.servicePrincipalEvidence":
                    return deserializeIntoServicePrincipalEvidence;
                case "#microsoft.graph.security.submissionMailEvidence":
                    return deserializeIntoSubmissionMailEvidence;
                case "#microsoft.graph.security.urlEvidence":
                    return deserializeIntoUrlEvidence;
                case "#microsoft.graph.security.userEvidence":
                    return deserializeIntoUserEvidence;
            }
        }
    }
    return deserializeIntoAlertEvidence;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a alert
 */
export function createAlertFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoAlert;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a alertTemplate
 */
export function createAlertTemplateFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoAlertTemplate;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a allowFileResponseAction
 */
export function createAllowFileResponseActionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoAllowFileResponseAction;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a amazonResourceEvidence
 */
export function createAmazonResourceEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoAmazonResourceEvidence;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a analyzedEmailAttachment
 */
export function createAnalyzedEmailAttachmentFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoAnalyzedEmailAttachment;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a analyzedEmailAuthenticationDetail
 */
export function createAnalyzedEmailAuthenticationDetailFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoAnalyzedEmailAuthenticationDetail;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a analyzedEmailCollectionResponse
 */
export function createAnalyzedEmailCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoAnalyzedEmailCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a analyzedEmailDeliveryDetail
 */
export function createAnalyzedEmailDeliveryDetailFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoAnalyzedEmailDeliveryDetail;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a analyzedEmailExchangeTransportRuleInfo
 */
export function createAnalyzedEmailExchangeTransportRuleInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoAnalyzedEmailExchangeTransportRuleInfo;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a analyzedEmail
 */
export function createAnalyzedEmailFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoAnalyzedEmail;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a analyzedEmailSenderDetail
 */
export function createAnalyzedEmailSenderDetailFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoAnalyzedEmailSenderDetail;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a analyzedEmailUrl
 */
export function createAnalyzedEmailUrlFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoAnalyzedEmailUrl;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a analyzedMessageEvidence
 */
export function createAnalyzedMessageEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoAnalyzedMessageEvidence;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a appliedCategory
 */
export function createAppliedCategoryFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoAppliedCategory;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a applyLabelAction
 */
export function createApplyLabelActionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoApplyLabelAction;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a articleCollectionResponse
 */
export function createArticleCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoArticleCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a article
 */
export function createArticleFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoArticle;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a articleIndicatorCollectionResponse
 */
export function createArticleIndicatorCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoArticleIndicatorCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a articleIndicator
 */
export function createArticleIndicatorFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoArticleIndicator;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a artifact
 */
export function createArtifactFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.security.host":
                    return deserializeIntoHost;
                case "#microsoft.graph.security.hostComponent":
                    return deserializeIntoHostComponent;
                case "#microsoft.graph.security.hostCookie":
                    return deserializeIntoHostCookie;
                case "#microsoft.graph.security.hostname":
                    return deserializeIntoHostname;
                case "#microsoft.graph.security.hostSslCertificate":
                    return deserializeIntoHostSslCertificate;
                case "#microsoft.graph.security.hostTracker":
                    return deserializeIntoHostTracker;
                case "#microsoft.graph.security.ipAddress":
                    return deserializeIntoIpAddress;
                case "#microsoft.graph.security.passiveDnsRecord":
                    return deserializeIntoPassiveDnsRecord;
                case "#microsoft.graph.security.sslCertificate":
                    return deserializeIntoSslCertificate;
                case "#microsoft.graph.security.unclassifiedArtifact":
                    return deserializeIntoUnclassifiedArtifact;
            }
        }
    }
    return deserializeIntoArtifact;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a attackSimulationInfo
 */
export function createAttackSimulationInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoAttackSimulationInfo;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a auditCoreRoot
 */
export function createAuditCoreRootFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoAuditCoreRoot;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a auditData
 */
export function createAuditDataFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.security.defaultAuditData":
                    return deserializeIntoDefaultAuditData;
            }
        }
    }
    return deserializeIntoAuditData;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a auditLogQueryCollectionResponse
 */
export function createAuditLogQueryCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoAuditLogQueryCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a auditLogQuery
 */
export function createAuditLogQueryFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoAuditLogQuery;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a auditLogRecordCollectionResponse
 */
export function createAuditLogRecordCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoAuditLogRecordCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a auditLogRecord
 */
export function createAuditLogRecordFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoAuditLogRecord;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a authority
 */
export function createAuthorityFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoAuthority;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a authorityTemplateCollectionResponse
 */
export function createAuthorityTemplateCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoAuthorityTemplateCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a authorityTemplate
 */
export function createAuthorityTemplateFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoAuthorityTemplate;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a autonomousSystem
 */
export function createAutonomousSystemFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoAutonomousSystem;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a azureResourceEvidence
 */
export function createAzureResourceEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoAzureResourceEvidence;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a blobContainerEvidence
 */
export function createBlobContainerEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoBlobContainerEvidence;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a blobEvidence
 */
export function createBlobEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoBlobEvidence;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a blockFileResponseAction
 */
export function createBlockFileResponseActionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoBlockFileResponseAction;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a caseEscaped
 */
export function createCaseEscapedFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.security.ediscoveryCase":
                    return deserializeIntoEdiscoveryCase;
            }
        }
    }
    return deserializeIntoCaseEscaped;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a caseOperationCollectionResponse
 */
export function createCaseOperationCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoCaseOperationCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a caseOperation
 */
export function createCaseOperationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.security.ediscoveryAddToReviewSetOperation":
                    return deserializeIntoEdiscoveryAddToReviewSetOperation;
                case "#microsoft.graph.security.ediscoveryEstimateOperation":
                    return deserializeIntoEdiscoveryEstimateOperation;
                case "#microsoft.graph.security.ediscoveryExportOperation":
                    return deserializeIntoEdiscoveryExportOperation;
                case "#microsoft.graph.security.ediscoveryHoldOperation":
                    return deserializeIntoEdiscoveryHoldOperation;
                case "#microsoft.graph.security.ediscoveryIndexOperation":
                    return deserializeIntoEdiscoveryIndexOperation;
                case "#microsoft.graph.security.ediscoveryPurgeDataOperation":
                    return deserializeIntoEdiscoveryPurgeDataOperation;
                case "#microsoft.graph.security.ediscoverySearchExportOperation":
                    return deserializeIntoEdiscoverySearchExportOperation;
                case "#microsoft.graph.security.ediscoveryTagOperation":
                    return deserializeIntoEdiscoveryTagOperation;
            }
        }
    }
    return deserializeIntoCaseOperation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a casesRoot
 */
export function createCasesRootFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoCasesRoot;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a categoryTemplateCollectionResponse
 */
export function createCategoryTemplateCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoCategoryTemplateCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a categoryTemplate
 */
export function createCategoryTemplateFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoCategoryTemplate;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a citation
 */
export function createCitationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoCitation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a citationTemplateCollectionResponse
 */
export function createCitationTemplateCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoCitationTemplateCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a citationTemplate
 */
export function createCitationTemplateFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoCitationTemplate;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a classificationResult
 */
export function createClassificationResultFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoClassificationResult;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a cloudApplicationEvidence
 */
export function createCloudApplicationEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoCloudApplicationEvidence;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a collaborationRoot
 */
export function createCollaborationRootFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoCollaborationRoot;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a collectInvestigationPackageResponseAction
 */
export function createCollectInvestigationPackageResponseActionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoCollectInvestigationPackageResponseAction;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a containerEvidence
 */
export function createContainerEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoContainerEvidence;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a containerImageEvidence
 */
export function createContainerImageEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoContainerImageEvidence;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a containerRegistryEvidence
 */
export function createContainerRegistryEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoContainerRegistryEvidence;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a contentInfo
 */
export function createContentInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoContentInfo;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a contentLabel
 */
export function createContentLabelFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoContentLabel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a customAction
 */
export function createCustomActionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoCustomAction;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a cvssSummary
 */
export function createCvssSummaryFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoCvssSummary;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a dataSet
 */
export function createDataSetFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.security.ediscoveryReviewSet":
                    return deserializeIntoEdiscoveryReviewSet;
            }
        }
    }
    return deserializeIntoDataSet;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a dataSourceCollectionResponse
 */
export function createDataSourceCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoDataSourceCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a dataSourceContainer
 */
export function createDataSourceContainerFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.security.ediscoveryCustodian":
                    return deserializeIntoEdiscoveryCustodian;
                case "#microsoft.graph.security.ediscoveryNoncustodialDataSource":
                    return deserializeIntoEdiscoveryNoncustodialDataSource;
            }
        }
    }
    return deserializeIntoDataSourceContainer;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a dataSource
 */
export function createDataSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.security.siteSource":
                    return deserializeIntoSiteSource;
                case "#microsoft.graph.security.unifiedGroupSource":
                    return deserializeIntoUnifiedGroupSource;
                case "#microsoft.graph.security.userSource":
                    return deserializeIntoUserSource;
            }
        }
    }
    return deserializeIntoDataSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a defaultAuditData
 */
export function createDefaultAuditDataFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoDefaultAuditData;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a department
 */
export function createDepartmentFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoDepartment;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a departmentTemplateCollectionResponse
 */
export function createDepartmentTemplateCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoDepartmentTemplateCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a departmentTemplate
 */
export function createDepartmentTemplateFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoDepartmentTemplate;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a detectionAction
 */
export function createDetectionActionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoDetectionAction;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a detectionRule
 */
export function createDetectionRuleFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoDetectionRule;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a detonationChain
 */
export function createDetonationChainFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoDetonationChain;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a detonationDetails
 */
export function createDetonationDetailsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoDetonationDetails;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a detonationObservables
 */
export function createDetonationObservablesFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoDetonationObservables;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a deviceEvidence
 */
export function createDeviceEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoDeviceEvidence;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a dictionary
 */
export function createDictionaryFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoDictionary;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a disableUserResponseAction
 */
export function createDisableUserResponseActionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoDisableUserResponseAction;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a dispositionReviewStageCollectionResponse
 */
export function createDispositionReviewStageCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoDispositionReviewStageCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a dispositionReviewStage
 */
export function createDispositionReviewStageFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoDispositionReviewStage;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a downgradeJustification
 */
export function createDowngradeJustificationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoDowngradeJustification;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a ediscoveryAddToReviewSetOperation
 */
export function createEdiscoveryAddToReviewSetOperationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoEdiscoveryAddToReviewSetOperation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a ediscoveryCaseCollectionResponse
 */
export function createEdiscoveryCaseCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoEdiscoveryCaseCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a ediscoveryCase
 */
export function createEdiscoveryCaseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoEdiscoveryCase;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a ediscoveryCaseSettings
 */
export function createEdiscoveryCaseSettingsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoEdiscoveryCaseSettings;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a ediscoveryCustodianCollectionResponse
 */
export function createEdiscoveryCustodianCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoEdiscoveryCustodianCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a ediscoveryCustodian
 */
export function createEdiscoveryCustodianFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoEdiscoveryCustodian;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a ediscoveryEstimateOperation
 */
export function createEdiscoveryEstimateOperationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoEdiscoveryEstimateOperation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a ediscoveryExportOperation
 */
export function createEdiscoveryExportOperationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoEdiscoveryExportOperation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a ediscoveryFileCollectionResponse
 */
export function createEdiscoveryFileCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoEdiscoveryFileCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a ediscoveryFile
 */
export function createEdiscoveryFileFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoEdiscoveryFile;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a ediscoveryHoldOperation
 */
export function createEdiscoveryHoldOperationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoEdiscoveryHoldOperation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a ediscoveryHoldPolicyCollectionResponse
 */
export function createEdiscoveryHoldPolicyCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoEdiscoveryHoldPolicyCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a ediscoveryHoldPolicy
 */
export function createEdiscoveryHoldPolicyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoEdiscoveryHoldPolicy;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a ediscoveryIndexOperation
 */
export function createEdiscoveryIndexOperationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoEdiscoveryIndexOperation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a ediscoveryNoncustodialDataSourceCollectionResponse
 */
export function createEdiscoveryNoncustodialDataSourceCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoEdiscoveryNoncustodialDataSourceCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a ediscoveryNoncustodialDataSource
 */
export function createEdiscoveryNoncustodialDataSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoEdiscoveryNoncustodialDataSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a ediscoveryPurgeDataOperation
 */
export function createEdiscoveryPurgeDataOperationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoEdiscoveryPurgeDataOperation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a ediscoveryReviewSetCollectionResponse
 */
export function createEdiscoveryReviewSetCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoEdiscoveryReviewSetCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a ediscoveryReviewSet
 */
export function createEdiscoveryReviewSetFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoEdiscoveryReviewSet;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a ediscoveryReviewSetQueryCollectionResponse
 */
export function createEdiscoveryReviewSetQueryCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoEdiscoveryReviewSetQueryCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a ediscoveryReviewSetQuery
 */
export function createEdiscoveryReviewSetQueryFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoEdiscoveryReviewSetQuery;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a ediscoveryReviewTagCollectionResponse
 */
export function createEdiscoveryReviewTagCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoEdiscoveryReviewTagCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a ediscoveryReviewTag
 */
export function createEdiscoveryReviewTagFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoEdiscoveryReviewTag;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a ediscoverySearchCollectionResponse
 */
export function createEdiscoverySearchCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoEdiscoverySearchCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a ediscoverySearchExportOperation
 */
export function createEdiscoverySearchExportOperationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoEdiscoverySearchExportOperation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a ediscoverySearch
 */
export function createEdiscoverySearchFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoEdiscoverySearch;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a ediscoveryTagOperation
 */
export function createEdiscoveryTagOperationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoEdiscoveryTagOperation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a emailContentThreatSubmission
 */
export function createEmailContentThreatSubmissionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoEmailContentThreatSubmission;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a emailSender
 */
export function createEmailSenderFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoEmailSender;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a emailThreatSubmissionCollectionResponse
 */
export function createEmailThreatSubmissionCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoEmailThreatSubmissionCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a emailThreatSubmission
 */
export function createEmailThreatSubmissionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.security.emailContentThreatSubmission":
                    return deserializeIntoEmailContentThreatSubmission;
                case "#microsoft.graph.security.emailUrlThreatSubmission":
                    return deserializeIntoEmailUrlThreatSubmission;
            }
        }
    }
    return deserializeIntoEmailThreatSubmission;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a emailThreatSubmissionPolicyCollectionResponse
 */
export function createEmailThreatSubmissionPolicyCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoEmailThreatSubmissionPolicyCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a emailThreatSubmissionPolicy
 */
export function createEmailThreatSubmissionPolicyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoEmailThreatSubmissionPolicy;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a emailUrlThreatSubmission
 */
export function createEmailUrlThreatSubmissionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoEmailUrlThreatSubmission;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a eventPropagationResult
 */
export function createEventPropagationResultFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoEventPropagationResult;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a eventQuery
 */
export function createEventQueryFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoEventQuery;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a exportFileMetadata
 */
export function createExportFileMetadataFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoExportFileMetadata;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a fileContentThreatSubmission
 */
export function createFileContentThreatSubmissionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoFileContentThreatSubmission;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a fileDetails
 */
export function createFileDetailsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoFileDetails;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a fileEvidence
 */
export function createFileEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoFileEvidence;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a file
 */
export function createFileFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.security.ediscoveryFile":
                    return deserializeIntoEdiscoveryFile;
            }
        }
    }
    return deserializeIntoFile;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a fileHash
 */
export function createFileHashFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoFileHash;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a filePlanDescriptorBase
 */
export function createFilePlanDescriptorBaseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.security.appliedCategory":
                    return deserializeIntoAppliedCategory;
                case "#microsoft.graph.security.authority":
                    return deserializeIntoAuthority;
                case "#microsoft.graph.security.citation":
                    return deserializeIntoCitation;
                case "#microsoft.graph.security.department":
                    return deserializeIntoDepartment;
                case "#microsoft.graph.security.filePlanReference":
                    return deserializeIntoFilePlanReference;
                case "#microsoft.graph.security.subCategory":
                    return deserializeIntoSubCategory;
            }
        }
    }
    return deserializeIntoFilePlanDescriptorBase;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a filePlanDescriptor
 */
export function createFilePlanDescriptorFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoFilePlanDescriptor;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a filePlanDescriptorTemplate
 */
export function createFilePlanDescriptorTemplateFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.security.authorityTemplate":
                    return deserializeIntoAuthorityTemplate;
                case "#microsoft.graph.security.categoryTemplate":
                    return deserializeIntoCategoryTemplate;
                case "#microsoft.graph.security.citationTemplate":
                    return deserializeIntoCitationTemplate;
                case "#microsoft.graph.security.departmentTemplate":
                    return deserializeIntoDepartmentTemplate;
                case "#microsoft.graph.security.filePlanReferenceTemplate":
                    return deserializeIntoFilePlanReferenceTemplate;
                case "#microsoft.graph.security.subCategoryTemplate":
                    return deserializeIntoSubCategoryTemplate;
            }
        }
    }
    return deserializeIntoFilePlanDescriptorTemplate;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a filePlanReference
 */
export function createFilePlanReferenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoFilePlanReference;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a filePlanReferenceTemplateCollectionResponse
 */
export function createFilePlanReferenceTemplateCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoFilePlanReferenceTemplateCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a filePlanReferenceTemplate
 */
export function createFilePlanReferenceTemplateFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoFilePlanReferenceTemplate;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a fileThreatSubmissionCollectionResponse
 */
export function createFileThreatSubmissionCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoFileThreatSubmissionCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a fileThreatSubmission
 */
export function createFileThreatSubmissionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.security.fileContentThreatSubmission":
                    return deserializeIntoFileContentThreatSubmission;
                case "#microsoft.graph.security.fileUrlThreatSubmission":
                    return deserializeIntoFileUrlThreatSubmission;
            }
        }
    }
    return deserializeIntoFileThreatSubmission;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a fileUrlThreatSubmission
 */
export function createFileUrlThreatSubmissionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoFileUrlThreatSubmission;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a forceUserPasswordResetResponseAction
 */
export function createForceUserPasswordResetResponseActionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoForceUserPasswordResetResponseAction;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a formattedContent
 */
export function createFormattedContentFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoFormattedContent;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a gitHubOrganizationEvidence
 */
export function createGitHubOrganizationEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoGitHubOrganizationEvidence;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a gitHubRepoEvidence
 */
export function createGitHubRepoEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoGitHubRepoEvidence;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a gitHubUserEvidence
 */
export function createGitHubUserEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoGitHubUserEvidence;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a googleCloudResourceEvidence
 */
export function createGoogleCloudResourceEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoGoogleCloudResourceEvidence;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a hardDeleteResponseAction
 */
export function createHardDeleteResponseActionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoHardDeleteResponseAction;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a hostCollectionResponse
 */
export function createHostCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoHostCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a hostComponentCollectionResponse
 */
export function createHostComponentCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoHostComponentCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a hostComponent
 */
export function createHostComponentFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoHostComponent;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a hostCookieCollectionResponse
 */
export function createHostCookieCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoHostCookieCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a hostCookie
 */
export function createHostCookieFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoHostCookie;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a host
 */
export function createHostFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.security.hostname":
                    return deserializeIntoHostname;
                case "#microsoft.graph.security.ipAddress":
                    return deserializeIntoIpAddress;
            }
        }
    }
    return deserializeIntoHost;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a hostLogonSessionEvidence
 */
export function createHostLogonSessionEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoHostLogonSessionEvidence;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a hostname
 */
export function createHostnameFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoHostname;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a hostPairCollectionResponse
 */
export function createHostPairCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoHostPairCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a hostPair
 */
export function createHostPairFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoHostPair;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a hostPortBanner
 */
export function createHostPortBannerFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoHostPortBanner;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a hostPortCollectionResponse
 */
export function createHostPortCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoHostPortCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a hostPortComponent
 */
export function createHostPortComponentFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoHostPortComponent;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a hostPort
 */
export function createHostPortFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoHostPort;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a hostReputation
 */
export function createHostReputationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoHostReputation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a hostReputationRule
 */
export function createHostReputationRuleFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoHostReputationRule;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a hostSslCertificateCollectionResponse
 */
export function createHostSslCertificateCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoHostSslCertificateCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a hostSslCertificate
 */
export function createHostSslCertificateFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoHostSslCertificate;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a hostSslCertificatePort
 */
export function createHostSslCertificatePortFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoHostSslCertificatePort;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a hostTrackerCollectionResponse
 */
export function createHostTrackerCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoHostTrackerCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a hostTracker
 */
export function createHostTrackerFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoHostTracker;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a huntingQueryResults
 */
export function createHuntingQueryResultsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoHuntingQueryResults;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a huntingRowResult
 */
export function createHuntingRowResultFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoHuntingRowResult;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a hyperlink
 */
export function createHyperlinkFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoHyperlink;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a impactedAsset
 */
export function createImpactedAssetFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.security.impactedDeviceAsset":
                    return deserializeIntoImpactedDeviceAsset;
                case "#microsoft.graph.security.impactedMailboxAsset":
                    return deserializeIntoImpactedMailboxAsset;
                case "#microsoft.graph.security.impactedUserAsset":
                    return deserializeIntoImpactedUserAsset;
            }
        }
    }
    return deserializeIntoImpactedAsset;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a impactedDeviceAsset
 */
export function createImpactedDeviceAssetFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoImpactedDeviceAsset;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a impactedMailboxAsset
 */
export function createImpactedMailboxAssetFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoImpactedMailboxAsset;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a impactedUserAsset
 */
export function createImpactedUserAssetFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoImpactedUserAsset;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a incidentCollectionResponse
 */
export function createIncidentCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoIncidentCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a incident
 */
export function createIncidentFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoIncident;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a indicator
 */
export function createIndicatorFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.security.articleIndicator":
                    return deserializeIntoArticleIndicator;
                case "#microsoft.graph.security.intelligenceProfileIndicator":
                    return deserializeIntoIntelligenceProfileIndicator;
            }
        }
    }
    return deserializeIntoIndicator;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a informationProtectionAction
 */
export function createInformationProtectionActionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.security.addContentFooterAction":
                    return deserializeIntoAddContentFooterAction;
                case "#microsoft.graph.security.addContentHeaderAction":
                    return deserializeIntoAddContentHeaderAction;
                case "#microsoft.graph.security.addWatermarkAction":
                    return deserializeIntoAddWatermarkAction;
                case "#microsoft.graph.security.applyLabelAction":
                    return deserializeIntoApplyLabelAction;
                case "#microsoft.graph.security.customAction":
                    return deserializeIntoCustomAction;
                case "#microsoft.graph.security.justifyAction":
                    return deserializeIntoJustifyAction;
                case "#microsoft.graph.security.metadataAction":
                    return deserializeIntoMetadataAction;
                case "#microsoft.graph.security.protectAdhocAction":
                    return deserializeIntoProtectAdhocAction;
                case "#microsoft.graph.security.protectByTemplateAction":
                    return deserializeIntoProtectByTemplateAction;
                case "#microsoft.graph.security.protectDoNotForwardAction":
                    return deserializeIntoProtectDoNotForwardAction;
                case "#microsoft.graph.security.recommendLabelAction":
                    return deserializeIntoRecommendLabelAction;
                case "#microsoft.graph.security.removeContentFooterAction":
                    return deserializeIntoRemoveContentFooterAction;
                case "#microsoft.graph.security.removeContentHeaderAction":
                    return deserializeIntoRemoveContentHeaderAction;
                case "#microsoft.graph.security.removeProtectionAction":
                    return deserializeIntoRemoveProtectionAction;
                case "#microsoft.graph.security.removeWatermarkAction":
                    return deserializeIntoRemoveWatermarkAction;
            }
        }
    }
    return deserializeIntoInformationProtectionAction;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a informationProtection
 */
export function createInformationProtectionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoInformationProtection;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a informationProtectionPolicySetting
 */
export function createInformationProtectionPolicySettingFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoInformationProtectionPolicySetting;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a initiateInvestigationResponseAction
 */
export function createInitiateInvestigationResponseActionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoInitiateInvestigationResponseAction;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a intelligenceProfileCollectionResponse
 */
export function createIntelligenceProfileCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoIntelligenceProfileCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a intelligenceProfileCountryOrRegionOfOrigin
 */
export function createIntelligenceProfileCountryOrRegionOfOriginFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoIntelligenceProfileCountryOrRegionOfOrigin;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a intelligenceProfile
 */
export function createIntelligenceProfileFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoIntelligenceProfile;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a intelligenceProfileIndicatorCollectionResponse
 */
export function createIntelligenceProfileIndicatorCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoIntelligenceProfileIndicatorCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a intelligenceProfileIndicator
 */
export function createIntelligenceProfileIndicatorFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoIntelligenceProfileIndicator;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a ioTDeviceEvidence
 */
export function createIoTDeviceEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoIoTDeviceEvidence;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a ipAddress
 */
export function createIpAddressFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoIpAddress;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a ipEvidence
 */
export function createIpEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoIpEvidence;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a isolateDeviceResponseAction
 */
export function createIsolateDeviceResponseActionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoIsolateDeviceResponseAction;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a justifyAction
 */
export function createJustifyActionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoJustifyAction;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a keyValuePair
 */
export function createKeyValuePairFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoKeyValuePair;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a kubernetesClusterEvidence
 */
export function createKubernetesClusterEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoKubernetesClusterEvidence;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a kubernetesControllerEvidence
 */
export function createKubernetesControllerEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoKubernetesControllerEvidence;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a kubernetesNamespaceEvidence
 */
export function createKubernetesNamespaceEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoKubernetesNamespaceEvidence;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a kubernetesPodEvidence
 */
export function createKubernetesPodEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoKubernetesPodEvidence;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a kubernetesSecretEvidence
 */
export function createKubernetesSecretEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoKubernetesSecretEvidence;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a kubernetesServiceAccountEvidence
 */
export function createKubernetesServiceAccountEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoKubernetesServiceAccountEvidence;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a kubernetesServiceEvidence
 */
export function createKubernetesServiceEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoKubernetesServiceEvidence;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a kubernetesServicePort
 */
export function createKubernetesServicePortFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoKubernetesServicePort;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a labelingOptions
 */
export function createLabelingOptionsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoLabelingOptions;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a labelsRoot
 */
export function createLabelsRootFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoLabelsRoot;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a loggedOnUser
 */
export function createLoggedOnUserFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoLoggedOnUser;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a mailboxEvidence
 */
export function createMailboxEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoMailboxEvidence;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a mailClusterEvidence
 */
export function createMailClusterEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoMailClusterEvidence;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a malwareEvidence
 */
export function createMalwareEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoMalwareEvidence;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a markUserAsCompromisedResponseAction
 */
export function createMarkUserAsCompromisedResponseActionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoMarkUserAsCompromisedResponseAction;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a metadataAction
 */
export function createMetadataActionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoMetadataAction;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a moveToDeletedItemsResponseAction
 */
export function createMoveToDeletedItemsResponseActionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoMoveToDeletedItemsResponseAction;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a moveToInboxResponseAction
 */
export function createMoveToInboxResponseActionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoMoveToInboxResponseAction;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a moveToJunkResponseAction
 */
export function createMoveToJunkResponseActionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoMoveToJunkResponseAction;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a networkConnectionEvidence
 */
export function createNetworkConnectionEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoNetworkConnectionEvidence;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a nicEvidence
 */
export function createNicEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoNicEvidence;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a oauthApplicationEvidence
 */
export function createOauthApplicationEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoOauthApplicationEvidence;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a ocrSettings
 */
export function createOcrSettingsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoOcrSettings;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a organizationalScope
 */
export function createOrganizationalScopeFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoOrganizationalScope;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a passiveDnsRecordCollectionResponse
 */
export function createPassiveDnsRecordCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoPassiveDnsRecordCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a passiveDnsRecord
 */
export function createPassiveDnsRecordFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoPassiveDnsRecord;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a policyBase
 */
export function createPolicyBaseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.security.ediscoveryHoldPolicy":
                    return deserializeIntoEdiscoveryHoldPolicy;
            }
        }
    }
    return deserializeIntoPolicyBase;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a processEvidence
 */
export function createProcessEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoProcessEvidence;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a protectAdhocAction
 */
export function createProtectAdhocActionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoProtectAdhocAction;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a protectByTemplateAction
 */
export function createProtectByTemplateActionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoProtectByTemplateAction;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a protectDoNotForwardAction
 */
export function createProtectDoNotForwardActionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoProtectDoNotForwardAction;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a protectionRule
 */
export function createProtectionRuleFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.security.detectionRule":
                    return deserializeIntoDetectionRule;
            }
        }
    }
    return deserializeIntoProtectionRule;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a queryCondition
 */
export function createQueryConditionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoQueryCondition;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a recommendedHuntingQuery
 */
export function createRecommendedHuntingQueryFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoRecommendedHuntingQuery;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a recommendLabelAction
 */
export function createRecommendLabelActionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoRecommendLabelAction;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a redundancyDetectionSettings
 */
export function createRedundancyDetectionSettingsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoRedundancyDetectionSettings;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a registryKeyEvidence
 */
export function createRegistryKeyEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoRegistryKeyEvidence;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a registryValueEvidence
 */
export function createRegistryValueEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoRegistryValueEvidence;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a removeContentFooterAction
 */
export function createRemoveContentFooterActionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoRemoveContentFooterAction;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a removeContentHeaderAction
 */
export function createRemoveContentHeaderActionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoRemoveContentHeaderAction;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a removeProtectionAction
 */
export function createRemoveProtectionActionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoRemoveProtectionAction;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a removeWatermarkAction
 */
export function createRemoveWatermarkActionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoRemoveWatermarkAction;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a responseAction
 */
export function createResponseActionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.security.allowFileResponseAction":
                    return deserializeIntoAllowFileResponseAction;
                case "#microsoft.graph.security.blockFileResponseAction":
                    return deserializeIntoBlockFileResponseAction;
                case "#microsoft.graph.security.collectInvestigationPackageResponseAction":
                    return deserializeIntoCollectInvestigationPackageResponseAction;
                case "#microsoft.graph.security.disableUserResponseAction":
                    return deserializeIntoDisableUserResponseAction;
                case "#microsoft.graph.security.forceUserPasswordResetResponseAction":
                    return deserializeIntoForceUserPasswordResetResponseAction;
                case "#microsoft.graph.security.hardDeleteResponseAction":
                    return deserializeIntoHardDeleteResponseAction;
                case "#microsoft.graph.security.initiateInvestigationResponseAction":
                    return deserializeIntoInitiateInvestigationResponseAction;
                case "#microsoft.graph.security.isolateDeviceResponseAction":
                    return deserializeIntoIsolateDeviceResponseAction;
                case "#microsoft.graph.security.markUserAsCompromisedResponseAction":
                    return deserializeIntoMarkUserAsCompromisedResponseAction;
                case "#microsoft.graph.security.moveToDeletedItemsResponseAction":
                    return deserializeIntoMoveToDeletedItemsResponseAction;
                case "#microsoft.graph.security.moveToInboxResponseAction":
                    return deserializeIntoMoveToInboxResponseAction;
                case "#microsoft.graph.security.moveToJunkResponseAction":
                    return deserializeIntoMoveToJunkResponseAction;
                case "#microsoft.graph.security.restrictAppExecutionResponseAction":
                    return deserializeIntoRestrictAppExecutionResponseAction;
                case "#microsoft.graph.security.runAntivirusScanResponseAction":
                    return deserializeIntoRunAntivirusScanResponseAction;
                case "#microsoft.graph.security.softDeleteResponseAction":
                    return deserializeIntoSoftDeleteResponseAction;
                case "#microsoft.graph.security.stopAndQuarantineFileResponseAction":
                    return deserializeIntoStopAndQuarantineFileResponseAction;
            }
        }
    }
    return deserializeIntoResponseAction;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a restrictAppExecutionResponseAction
 */
export function createRestrictAppExecutionResponseActionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoRestrictAppExecutionResponseAction;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a retentionDurationForever
 */
export function createRetentionDurationForeverFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoRetentionDurationForever;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a retentionDuration
 */
export function createRetentionDurationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.security.retentionDurationForever":
                    return deserializeIntoRetentionDurationForever;
                case "#microsoft.graph.security.retentionDurationInDays":
                    return deserializeIntoRetentionDurationInDays;
            }
        }
    }
    return deserializeIntoRetentionDuration;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a retentionDurationInDays
 */
export function createRetentionDurationInDaysFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoRetentionDurationInDays;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a retentionEventCollectionResponse
 */
export function createRetentionEventCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoRetentionEventCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a retentionEvent
 */
export function createRetentionEventFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoRetentionEvent;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a retentionEventStatus
 */
export function createRetentionEventStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoRetentionEventStatus;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a retentionEventTypeCollectionResponse
 */
export function createRetentionEventTypeCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoRetentionEventTypeCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a retentionEventType
 */
export function createRetentionEventTypeFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoRetentionEventType;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a retentionLabelCollectionResponse
 */
export function createRetentionLabelCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoRetentionLabelCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a retentionLabel
 */
export function createRetentionLabelFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoRetentionLabel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a ruleSchedule
 */
export function createRuleScheduleFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoRuleSchedule;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a runAntivirusScanResponseAction
 */
export function createRunAntivirusScanResponseActionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoRunAntivirusScanResponseAction;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a runDetails
 */
export function createRunDetailsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoRunDetails;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a sasTokenEvidence
 */
export function createSasTokenEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoSasTokenEvidence;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a search
 */
export function createSearchFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.security.ediscoveryReviewSetQuery":
                    return deserializeIntoEdiscoveryReviewSetQuery;
                case "#microsoft.graph.security.ediscoverySearch":
                    return deserializeIntoEdiscoverySearch;
            }
        }
    }
    return deserializeIntoSearch;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a security
 */
export function createSecurityFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoSecurity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a securityGroupEvidence
 */
export function createSecurityGroupEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoSecurityGroupEvidence;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a sensitivityLabelCollectionResponse
 */
export function createSensitivityLabelCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoSensitivityLabelCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a sensitivityLabel
 */
export function createSensitivityLabelFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoSensitivityLabel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a servicePrincipalEvidence
 */
export function createServicePrincipalEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoServicePrincipalEvidence;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a singlePropertySchema
 */
export function createSinglePropertySchemaFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoSinglePropertySchema;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a siteSourceCollectionResponse
 */
export function createSiteSourceCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoSiteSourceCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a siteSource
 */
export function createSiteSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoSiteSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a softDeleteResponseAction
 */
export function createSoftDeleteResponseActionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoSoftDeleteResponseAction;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a sslCertificateCollectionResponse
 */
export function createSslCertificateCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoSslCertificateCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a sslCertificateEntity
 */
export function createSslCertificateEntityFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoSslCertificateEntity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a sslCertificate
 */
export function createSslCertificateFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoSslCertificate;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a stopAndQuarantineFileResponseAction
 */
export function createStopAndQuarantineFileResponseActionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoStopAndQuarantineFileResponseAction;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a stringValueDictionary
 */
export function createStringValueDictionaryFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoStringValueDictionary;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a subCategory
 */
export function createSubCategoryFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoSubCategory;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a subCategoryTemplateCollectionResponse
 */
export function createSubCategoryTemplateCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoSubCategoryTemplateCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a subCategoryTemplate
 */
export function createSubCategoryTemplateFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoSubCategoryTemplate;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a subdomainCollectionResponse
 */
export function createSubdomainCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoSubdomainCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a subdomain
 */
export function createSubdomainFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoSubdomain;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a submissionAdminReview
 */
export function createSubmissionAdminReviewFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoSubmissionAdminReview;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a submissionDetectedFile
 */
export function createSubmissionDetectedFileFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoSubmissionDetectedFile;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a submissionMailEvidence
 */
export function createSubmissionMailEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoSubmissionMailEvidence;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a submissionResult
 */
export function createSubmissionResultFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoSubmissionResult;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a submissionUserIdentity
 */
export function createSubmissionUserIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoSubmissionUserIdentity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a tag
 */
export function createTagFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.security.ediscoveryReviewTag":
                    return deserializeIntoEdiscoveryReviewTag;
            }
        }
    }
    return deserializeIntoTag;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a tenantAllowBlockListEntryResult
 */
export function createTenantAllowBlockListEntryResultFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoTenantAllowBlockListEntryResult;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a tenantAllowOrBlockListAction
 */
export function createTenantAllowOrBlockListActionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoTenantAllowOrBlockListAction;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a threatIntelligence
 */
export function createThreatIntelligenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoThreatIntelligence;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a threatSubmission
 */
export function createThreatSubmissionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.security.emailContentThreatSubmission":
                    return deserializeIntoEmailContentThreatSubmission;
                case "#microsoft.graph.security.emailThreatSubmission":
                    return deserializeIntoEmailThreatSubmission;
                case "#microsoft.graph.security.emailUrlThreatSubmission":
                    return deserializeIntoEmailUrlThreatSubmission;
                case "#microsoft.graph.security.fileContentThreatSubmission":
                    return deserializeIntoFileContentThreatSubmission;
                case "#microsoft.graph.security.fileThreatSubmission":
                    return deserializeIntoFileThreatSubmission;
                case "#microsoft.graph.security.fileUrlThreatSubmission":
                    return deserializeIntoFileUrlThreatSubmission;
                case "#microsoft.graph.security.urlThreatSubmission":
                    return deserializeIntoUrlThreatSubmission;
            }
        }
    }
    return deserializeIntoThreatSubmission;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a threatSubmissionRoot
 */
export function createThreatSubmissionRootFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoThreatSubmissionRoot;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a topicModelingSettings
 */
export function createTopicModelingSettingsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoTopicModelingSettings;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a triggersRoot
 */
export function createTriggersRootFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoTriggersRoot;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a triggerTypesRoot
 */
export function createTriggerTypesRootFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoTriggerTypesRoot;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a unclassifiedArtifact
 */
export function createUnclassifiedArtifactFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoUnclassifiedArtifact;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a unifiedGroupSourceCollectionResponse
 */
export function createUnifiedGroupSourceCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoUnifiedGroupSourceCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a unifiedGroupSource
 */
export function createUnifiedGroupSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoUnifiedGroupSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a urlEvidence
 */
export function createUrlEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoUrlEvidence;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a urlThreatSubmissionCollectionResponse
 */
export function createUrlThreatSubmissionCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoUrlThreatSubmissionCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a urlThreatSubmission
 */
export function createUrlThreatSubmissionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoUrlThreatSubmission;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a userAccount
 */
export function createUserAccountFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoUserAccount;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a userEvidence
 */
export function createUserEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoUserEvidence;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a userSourceCollectionResponse
 */
export function createUserSourceCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoUserSourceCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a userSource
 */
export function createUserSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoUserSource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a vmMetadata
 */
export function createVmMetadataFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoVmMetadata;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a vulnerabilityCollectionResponse
 */
export function createVulnerabilityCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoVulnerabilityCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a vulnerabilityComponentCollectionResponse
 */
export function createVulnerabilityComponentCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoVulnerabilityComponentCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a vulnerabilityComponent
 */
export function createVulnerabilityComponentFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoVulnerabilityComponent;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a vulnerability
 */
export function createVulnerabilityFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoVulnerability;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a whoisBaseRecord
 */
export function createWhoisBaseRecordFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.security.whoisHistoryRecord":
                    return deserializeIntoWhoisHistoryRecord;
                case "#microsoft.graph.security.whoisRecord":
                    return deserializeIntoWhoisRecord;
            }
        }
    }
    return deserializeIntoWhoisBaseRecord;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a whoisContact
 */
export function createWhoisContactFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoWhoisContact;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a whoisHistoryRecordCollectionResponse
 */
export function createWhoisHistoryRecordCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoWhoisHistoryRecordCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a whoisHistoryRecord
 */
export function createWhoisHistoryRecordFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoWhoisHistoryRecord;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a whoisNameserver
 */
export function createWhoisNameserverFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoWhoisNameserver;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a whoisRecordCollectionResponse
 */
export function createWhoisRecordCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoWhoisRecordCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a whoisRecord
 */
export function createWhoisRecordFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoWhoisRecord;
}
export interface CustomAction extends InformationProtectionAction, Parsable {
    /**
     * Name of the custom action.
     */
    name?: string;
    /**
     * Properties, in key-value pair format, of the action.
     */
    properties?: KeyValuePair[];
}
export interface CvssSummary extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The CVSS score about this vulnerability.
     */
    score?: number;
    /**
     * The CVSS severity rating for this vulnerability. The possible values are: none, low, medium, high, critical, unknownFutureValue.
     */
    severity?: VulnerabilitySeverity;
    /**
     * The CVSS vector string for this vulnerability.
     */
    vectorString?: string;
}
export interface DataSet extends Entity, Parsable {
    /**
     * The createdBy property
     */
    createdBy?: IdentitySet;
    /**
     * The createdDateTime property
     */
    createdDateTime?: Date;
    /**
     * The displayName property
     */
    displayName?: string;
}
export interface DataSource extends Entity, Parsable {
    /**
     * The user who created the dataSource.
     */
    createdBy?: IdentitySet;
    /**
     * The date and time the dataSource was created.
     */
    createdDateTime?: Date;
    /**
     * The display name of the dataSource and is the name of the SharePoint site.
     */
    displayName?: string;
    /**
     * The hold status of the dataSource.The possible values are: notApplied, applied, applying, removing, partial
     */
    holdStatus?: DataSourceHoldStatus;
}
export interface DataSourceCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: DataSource[];
}
export interface DataSourceContainer extends Entity, Parsable {
    /**
     * Created date and time of the dataSourceContainer entity.
     */
    createdDateTime?: Date;
    /**
     * Display name of the dataSourceContainer entity.
     */
    displayName?: string;
    /**
     * The hold status of the dataSourceContainer. The possible values are: notApplied, applied, applying, removing, partial
     */
    holdStatus?: DataSourceHoldStatus;
    /**
     * Last modified date and time of the dataSourceContainer.
     */
    lastModifiedDateTime?: Date;
    /**
     * Date and time that the dataSourceContainer was released from the case.
     */
    releasedDateTime?: Date;
    /**
     * Latest status of the dataSourceContainer. Possible values are: Active, Released.
     */
    status?: DataSourceContainerStatus;
}
export type DataSourceContainerStatus = (typeof DataSourceContainerStatusObject)[keyof typeof DataSourceContainerStatusObject];
export type DataSourceHoldStatus = (typeof DataSourceHoldStatusObject)[keyof typeof DataSourceHoldStatusObject];
export type DataSourceScopes = (typeof DataSourceScopesObject)[keyof typeof DataSourceScopesObject];
export interface DefaultAuditData extends AuditData, Parsable {
}
export type DefaultRecordBehavior = (typeof DefaultRecordBehaviorObject)[keyof typeof DefaultRecordBehaviorObject];
export type DefenderAvStatus = (typeof DefenderAvStatusObject)[keyof typeof DefenderAvStatusObject];
export type DeliveryAction = (typeof DeliveryActionObject)[keyof typeof DeliveryActionObject];
export type DeliveryLocation = (typeof DeliveryLocationObject)[keyof typeof DeliveryLocationObject];
export interface Department extends FilePlanDescriptorBase, Parsable {
}
export interface DepartmentTemplate extends FilePlanDescriptorTemplate, Parsable {
}
export interface DepartmentTemplateCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: DepartmentTemplate[];
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoAddContentFooterAction(addContentFooterAction: AddContentFooterAction | undefined = {} as AddContentFooterAction) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoInformationProtectionAction(addContentFooterAction),
        "alignment": n => { addContentFooterAction.alignment = n.getEnumValue<ContentAlignment>(ContentAlignmentObject); },
        "fontColor": n => { addContentFooterAction.fontColor = n.getStringValue(); },
        "fontName": n => { addContentFooterAction.fontName = n.getStringValue(); },
        "fontSize": n => { addContentFooterAction.fontSize = n.getNumberValue(); },
        "margin": n => { addContentFooterAction.margin = n.getNumberValue(); },
        "text": n => { addContentFooterAction.text = n.getStringValue(); },
        "uiElementName": n => { addContentFooterAction.uiElementName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoAddContentHeaderAction(addContentHeaderAction: AddContentHeaderAction | undefined = {} as AddContentHeaderAction) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoInformationProtectionAction(addContentHeaderAction),
        "alignment": n => { addContentHeaderAction.alignment = n.getEnumValue<ContentAlignment>(ContentAlignmentObject); },
        "fontColor": n => { addContentHeaderAction.fontColor = n.getStringValue(); },
        "fontName": n => { addContentHeaderAction.fontName = n.getStringValue(); },
        "fontSize": n => { addContentHeaderAction.fontSize = n.getNumberValue(); },
        "margin": n => { addContentHeaderAction.margin = n.getNumberValue(); },
        "text": n => { addContentHeaderAction.text = n.getStringValue(); },
        "uiElementName": n => { addContentHeaderAction.uiElementName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoAddWatermarkAction(addWatermarkAction: AddWatermarkAction | undefined = {} as AddWatermarkAction) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoInformationProtectionAction(addWatermarkAction),
        "fontColor": n => { addWatermarkAction.fontColor = n.getStringValue(); },
        "fontName": n => { addWatermarkAction.fontName = n.getStringValue(); },
        "fontSize": n => { addWatermarkAction.fontSize = n.getNumberValue(); },
        "layout": n => { addWatermarkAction.layout = n.getEnumValue<WatermarkLayout>(WatermarkLayoutObject); },
        "text": n => { addWatermarkAction.text = n.getStringValue(); },
        "uiElementName": n => { addWatermarkAction.uiElementName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoAlert(alert: Alert | undefined = {} as Alert) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(alert),
        "actorDisplayName": n => { alert.actorDisplayName = n.getStringValue(); },
        "alertPolicyId": n => { alert.alertPolicyId = n.getStringValue(); },
        "alertWebUrl": n => { alert.alertWebUrl = n.getStringValue(); },
        "assignedTo": n => { alert.assignedTo = n.getStringValue(); },
        "category": n => { alert.category = n.getStringValue(); },
        "classification": n => { alert.classification = n.getEnumValue<AlertClassification>(AlertClassificationObject); },
        "comments": n => { alert.comments = n.getCollectionOfObjectValues<AlertComment>(createAlertCommentFromDiscriminatorValue); },
        "createdDateTime": n => { alert.createdDateTime = n.getDateValue(); },
        "description": n => { alert.description = n.getStringValue(); },
        "detectionSource": n => { alert.detectionSource = n.getEnumValue<DetectionSource>(DetectionSourceObject); },
        "detectorId": n => { alert.detectorId = n.getStringValue(); },
        "determination": n => { alert.determination = n.getEnumValue<AlertDetermination>(AlertDeterminationObject); },
        "evidence": n => { alert.evidence = n.getCollectionOfObjectValues<AlertEvidence>(createAlertEvidenceFromDiscriminatorValue); },
        "firstActivityDateTime": n => { alert.firstActivityDateTime = n.getDateValue(); },
        "incidentId": n => { alert.incidentId = n.getStringValue(); },
        "incidentWebUrl": n => { alert.incidentWebUrl = n.getStringValue(); },
        "lastActivityDateTime": n => { alert.lastActivityDateTime = n.getDateValue(); },
        "lastUpdateDateTime": n => { alert.lastUpdateDateTime = n.getDateValue(); },
        "mitreTechniques": n => { alert.mitreTechniques = n.getCollectionOfPrimitiveValues<string>(); },
        "productName": n => { alert.productName = n.getStringValue(); },
        "providerAlertId": n => { alert.providerAlertId = n.getStringValue(); },
        "recommendedActions": n => { alert.recommendedActions = n.getStringValue(); },
        "resolvedDateTime": n => { alert.resolvedDateTime = n.getDateValue(); },
        "serviceSource": n => { alert.serviceSource = n.getEnumValue<ServiceSource>(ServiceSourceObject); },
        "severity": n => { alert.severity = n.getEnumValue<AlertSeverity>(AlertSeverityObject); },
        "status": n => { alert.status = n.getEnumValue<AlertStatus>(AlertStatusObject); },
        "systemTags": n => { alert.systemTags = n.getCollectionOfPrimitiveValues<string>(); },
        "tenantId": n => { alert.tenantId = n.getStringValue(); },
        "threatDisplayName": n => { alert.threatDisplayName = n.getStringValue(); },
        "threatFamilyName": n => { alert.threatFamilyName = n.getStringValue(); },
        "title": n => { alert.title = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoAlertCollectionResponse(alertCollectionResponse: AlertCollectionResponse | undefined = {} as AlertCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(alertCollectionResponse),
        "value": n => { alertCollectionResponse.value = n.getCollectionOfObjectValues<Alert>(createAlertFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoAlertComment(alertComment: AlertComment | undefined = {} as AlertComment) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { alertComment.backingStoreEnabled = true; },
        "comment": n => { alertComment.comment = n.getStringValue(); },
        "createdByDisplayName": n => { alertComment.createdByDisplayName = n.getStringValue(); },
        "createdDateTime": n => { alertComment.createdDateTime = n.getDateValue(); },
        "@odata.type": n => { alertComment.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoAlertEvidence(alertEvidence: AlertEvidence | undefined = {} as AlertEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { alertEvidence.backingStoreEnabled = true; },
        "createdDateTime": n => { alertEvidence.createdDateTime = n.getDateValue(); },
        "detailedRoles": n => { alertEvidence.detailedRoles = n.getCollectionOfPrimitiveValues<string>(); },
        "@odata.type": n => { alertEvidence.odataType = n.getStringValue(); },
        "remediationStatus": n => { alertEvidence.remediationStatus = n.getEnumValue<EvidenceRemediationStatus>(EvidenceRemediationStatusObject); },
        "remediationStatusDetails": n => { alertEvidence.remediationStatusDetails = n.getStringValue(); },
        "roles": n => { alertEvidence.roles = n.getCollectionOfEnumValues<EvidenceRole>(EvidenceRoleObject); },
        "tags": n => { alertEvidence.tags = n.getCollectionOfPrimitiveValues<string>(); },
        "verdict": n => { alertEvidence.verdict = n.getEnumValue<EvidenceVerdict>(EvidenceVerdictObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoAlertTemplate(alertTemplate: AlertTemplate | undefined = {} as AlertTemplate) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { alertTemplate.backingStoreEnabled = true; },
        "category": n => { alertTemplate.category = n.getStringValue(); },
        "description": n => { alertTemplate.description = n.getStringValue(); },
        "impactedAssets": n => { alertTemplate.impactedAssets = n.getCollectionOfObjectValues<ImpactedAsset>(createImpactedAssetFromDiscriminatorValue); },
        "mitreTechniques": n => { alertTemplate.mitreTechniques = n.getCollectionOfPrimitiveValues<string>(); },
        "@odata.type": n => { alertTemplate.odataType = n.getStringValue(); },
        "recommendedActions": n => { alertTemplate.recommendedActions = n.getStringValue(); },
        "severity": n => { alertTemplate.severity = n.getEnumValue<AlertSeverity>(AlertSeverityObject); },
        "title": n => { alertTemplate.title = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoAllowFileResponseAction(allowFileResponseAction: AllowFileResponseAction | undefined = {} as AllowFileResponseAction) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoResponseAction(allowFileResponseAction),
        "deviceGroupNames": n => { allowFileResponseAction.deviceGroupNames = n.getCollectionOfPrimitiveValues<string>(); },
        "identifier": n => { allowFileResponseAction.identifier = n.getCollectionOfEnumValues<FileEntityIdentifier>(FileEntityIdentifierObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoAmazonResourceEvidence(amazonResourceEvidence: AmazonResourceEvidence | undefined = {} as AmazonResourceEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(amazonResourceEvidence),
        "amazonAccountId": n => { amazonResourceEvidence.amazonAccountId = n.getStringValue(); },
        "amazonResourceId": n => { amazonResourceEvidence.amazonResourceId = n.getStringValue(); },
        "resourceName": n => { amazonResourceEvidence.resourceName = n.getStringValue(); },
        "resourceType": n => { amazonResourceEvidence.resourceType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoAnalyzedEmail(analyzedEmail: AnalyzedEmail | undefined = {} as AnalyzedEmail) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(analyzedEmail),
        "alertIds": n => { analyzedEmail.alertIds = n.getCollectionOfPrimitiveValues<string>(); },
        "attachments": n => { analyzedEmail.attachments = n.getCollectionOfObjectValues<AnalyzedEmailAttachment>(createAnalyzedEmailAttachmentFromDiscriminatorValue); },
        "attachmentsCount": n => { analyzedEmail.attachmentsCount = n.getNumberValue(); },
        "authenticationDetails": n => { analyzedEmail.authenticationDetails = n.getObjectValue<AnalyzedEmailAuthenticationDetail>(createAnalyzedEmailAuthenticationDetailFromDiscriminatorValue); },
        "bulkComplaintLevel": n => { analyzedEmail.bulkComplaintLevel = n.getStringValue(); },
        "contexts": n => { analyzedEmail.contexts = n.getCollectionOfPrimitiveValues<string>(); },
        "detectionMethods": n => { analyzedEmail.detectionMethods = n.getCollectionOfPrimitiveValues<string>(); },
        "directionality": n => { analyzedEmail.directionality = n.getEnumValue<AntispamDirectionality>(AntispamDirectionalityObject); },
        "distributionList": n => { analyzedEmail.distributionList = n.getStringValue(); },
        "emailClusterId": n => { analyzedEmail.emailClusterId = n.getStringValue(); },
        "exchangeTransportRules": n => { analyzedEmail.exchangeTransportRules = n.getCollectionOfObjectValues<AnalyzedEmailExchangeTransportRuleInfo>(createAnalyzedEmailExchangeTransportRuleInfoFromDiscriminatorValue); },
        "internetMessageId": n => { analyzedEmail.internetMessageId = n.getStringValue(); },
        "language": n => { analyzedEmail.language = n.getStringValue(); },
        "latestDelivery": n => { analyzedEmail.latestDelivery = n.getObjectValue<AnalyzedEmailDeliveryDetail>(createAnalyzedEmailDeliveryDetailFromDiscriminatorValue); },
        "loggedDateTime": n => { analyzedEmail.loggedDateTime = n.getDateValue(); },
        "networkMessageId": n => { analyzedEmail.networkMessageId = n.getStringValue(); },
        "originalDelivery": n => { analyzedEmail.originalDelivery = n.getObjectValue<AnalyzedEmailDeliveryDetail>(createAnalyzedEmailDeliveryDetailFromDiscriminatorValue); },
        "overrideSources": n => { analyzedEmail.overrideSources = n.getCollectionOfPrimitiveValues<string>(); },
        "phishConfidenceLevel": n => { analyzedEmail.phishConfidenceLevel = n.getStringValue(); },
        "policy": n => { analyzedEmail.policy = n.getStringValue(); },
        "policyAction": n => { analyzedEmail.policyAction = n.getStringValue(); },
        "recipientEmailAddresses": n => { analyzedEmail.recipientEmailAddresses = n.getCollectionOfPrimitiveValues<string>(); },
        "returnPath": n => { analyzedEmail.returnPath = n.getStringValue(); },
        "senderDetail": n => { analyzedEmail.senderDetail = n.getObjectValue<AnalyzedEmailSenderDetail>(createAnalyzedEmailSenderDetailFromDiscriminatorValue); },
        "sizeInBytes": n => { analyzedEmail.sizeInBytes = n.getNumberValue(); },
        "spamConfidenceLevel": n => { analyzedEmail.spamConfidenceLevel = n.getStringValue(); },
        "subject": n => { analyzedEmail.subject = n.getStringValue(); },
        "threatType": n => { analyzedEmail.threatType = n.getEnumValue<ThreatType>(ThreatTypeObject); },
        "urls": n => { analyzedEmail.urls = n.getCollectionOfObjectValues<AnalyzedEmailUrl>(createAnalyzedEmailUrlFromDiscriminatorValue); },
        "urlsCount": n => { analyzedEmail.urlsCount = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoAnalyzedEmailAttachment(analyzedEmailAttachment: AnalyzedEmailAttachment | undefined = {} as AnalyzedEmailAttachment) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { analyzedEmailAttachment.backingStoreEnabled = true; },
        "detonationDetails": n => { analyzedEmailAttachment.detonationDetails = n.getObjectValue<DetonationDetails>(createDetonationDetailsFromDiscriminatorValue); },
        "fileName": n => { analyzedEmailAttachment.fileName = n.getStringValue(); },
        "fileType": n => { analyzedEmailAttachment.fileType = n.getStringValue(); },
        "@odata.type": n => { analyzedEmailAttachment.odataType = n.getStringValue(); },
        "sha256": n => { analyzedEmailAttachment.sha256 = n.getStringValue(); },
        "threatName": n => { analyzedEmailAttachment.threatName = n.getStringValue(); },
        "threatType": n => { analyzedEmailAttachment.threatType = n.getEnumValue<ThreatType>(ThreatTypeObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoAnalyzedEmailAuthenticationDetail(analyzedEmailAuthenticationDetail: AnalyzedEmailAuthenticationDetail | undefined = {} as AnalyzedEmailAuthenticationDetail) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { analyzedEmailAuthenticationDetail.backingStoreEnabled = true; },
        "compositeAuthentication": n => { analyzedEmailAuthenticationDetail.compositeAuthentication = n.getStringValue(); },
        "dkim": n => { analyzedEmailAuthenticationDetail.dkim = n.getStringValue(); },
        "dmarc": n => { analyzedEmailAuthenticationDetail.dmarc = n.getStringValue(); },
        "@odata.type": n => { analyzedEmailAuthenticationDetail.odataType = n.getStringValue(); },
        "senderPolicyFramework": n => { analyzedEmailAuthenticationDetail.senderPolicyFramework = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoAnalyzedEmailCollectionResponse(analyzedEmailCollectionResponse: AnalyzedEmailCollectionResponse | undefined = {} as AnalyzedEmailCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(analyzedEmailCollectionResponse),
        "value": n => { analyzedEmailCollectionResponse.value = n.getCollectionOfObjectValues<AnalyzedEmail>(createAnalyzedEmailFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoAnalyzedEmailDeliveryDetail(analyzedEmailDeliveryDetail: AnalyzedEmailDeliveryDetail | undefined = {} as AnalyzedEmailDeliveryDetail) : Record<string, (node: ParseNode) => void> {
    return {
        "action": n => { analyzedEmailDeliveryDetail.action = n.getEnumValue<DeliveryAction>(DeliveryActionObject); },
        "backingStoreEnabled": n => { analyzedEmailDeliveryDetail.backingStoreEnabled = true; },
        "location": n => { analyzedEmailDeliveryDetail.location = n.getEnumValue<DeliveryLocation>(DeliveryLocationObject); },
        "@odata.type": n => { analyzedEmailDeliveryDetail.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoAnalyzedEmailExchangeTransportRuleInfo(analyzedEmailExchangeTransportRuleInfo: AnalyzedEmailExchangeTransportRuleInfo | undefined = {} as AnalyzedEmailExchangeTransportRuleInfo) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { analyzedEmailExchangeTransportRuleInfo.backingStoreEnabled = true; },
        "name": n => { analyzedEmailExchangeTransportRuleInfo.name = n.getStringValue(); },
        "@odata.type": n => { analyzedEmailExchangeTransportRuleInfo.odataType = n.getStringValue(); },
        "ruleId": n => { analyzedEmailExchangeTransportRuleInfo.ruleId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoAnalyzedEmailSenderDetail(analyzedEmailSenderDetail: AnalyzedEmailSenderDetail | undefined = {} as AnalyzedEmailSenderDetail) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { analyzedEmailSenderDetail.backingStoreEnabled = true; },
        "fromAddress": n => { analyzedEmailSenderDetail.fromAddress = n.getStringValue(); },
        "ipv4": n => { analyzedEmailSenderDetail.ipv4 = n.getStringValue(); },
        "mailFromAddress": n => { analyzedEmailSenderDetail.mailFromAddress = n.getStringValue(); },
        "@odata.type": n => { analyzedEmailSenderDetail.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoAnalyzedEmailUrl(analyzedEmailUrl: AnalyzedEmailUrl | undefined = {} as AnalyzedEmailUrl) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { analyzedEmailUrl.backingStoreEnabled = true; },
        "detectionMethod": n => { analyzedEmailUrl.detectionMethod = n.getStringValue(); },
        "detonationDetails": n => { analyzedEmailUrl.detonationDetails = n.getObjectValue<DetonationDetails>(createDetonationDetailsFromDiscriminatorValue); },
        "@odata.type": n => { analyzedEmailUrl.odataType = n.getStringValue(); },
        "threatType": n => { analyzedEmailUrl.threatType = n.getEnumValue<ThreatType>(ThreatTypeObject); },
        "url": n => { analyzedEmailUrl.url = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoAnalyzedMessageEvidence(analyzedMessageEvidence: AnalyzedMessageEvidence | undefined = {} as AnalyzedMessageEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(analyzedMessageEvidence),
        "antiSpamDirection": n => { analyzedMessageEvidence.antiSpamDirection = n.getStringValue(); },
        "attachmentsCount": n => { analyzedMessageEvidence.attachmentsCount = n.getNumberValue(); },
        "deliveryAction": n => { analyzedMessageEvidence.deliveryAction = n.getStringValue(); },
        "deliveryLocation": n => { analyzedMessageEvidence.deliveryLocation = n.getStringValue(); },
        "internetMessageId": n => { analyzedMessageEvidence.internetMessageId = n.getStringValue(); },
        "language": n => { analyzedMessageEvidence.language = n.getStringValue(); },
        "networkMessageId": n => { analyzedMessageEvidence.networkMessageId = n.getStringValue(); },
        "p1Sender": n => { analyzedMessageEvidence.p1Sender = n.getObjectValue<EmailSender>(createEmailSenderFromDiscriminatorValue); },
        "p2Sender": n => { analyzedMessageEvidence.p2Sender = n.getObjectValue<EmailSender>(createEmailSenderFromDiscriminatorValue); },
        "receivedDateTime": n => { analyzedMessageEvidence.receivedDateTime = n.getDateValue(); },
        "recipientEmailAddress": n => { analyzedMessageEvidence.recipientEmailAddress = n.getStringValue(); },
        "senderIp": n => { analyzedMessageEvidence.senderIp = n.getStringValue(); },
        "subject": n => { analyzedMessageEvidence.subject = n.getStringValue(); },
        "threatDetectionMethods": n => { analyzedMessageEvidence.threatDetectionMethods = n.getCollectionOfPrimitiveValues<string>(); },
        "threats": n => { analyzedMessageEvidence.threats = n.getCollectionOfPrimitiveValues<string>(); },
        "urlCount": n => { analyzedMessageEvidence.urlCount = n.getNumberValue(); },
        "urls": n => { analyzedMessageEvidence.urls = n.getCollectionOfPrimitiveValues<string>(); },
        "urn": n => { analyzedMessageEvidence.urn = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoAppliedCategory(appliedCategory: AppliedCategory | undefined = {} as AppliedCategory) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoFilePlanDescriptorBase(appliedCategory),
        "subCategory": n => { appliedCategory.subCategory = n.getObjectValue<SubCategory>(createSubCategoryFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoApplyLabelAction(applyLabelAction: ApplyLabelAction | undefined = {} as ApplyLabelAction) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoInformationProtectionAction(applyLabelAction),
        "actions": n => { applyLabelAction.actions = n.getCollectionOfObjectValues<InformationProtectionAction>(createInformationProtectionActionFromDiscriminatorValue); },
        "actionSource": n => { applyLabelAction.actionSource = n.getEnumValue<ActionSource>(ActionSourceObject); },
        "responsibleSensitiveTypeIds": n => { applyLabelAction.responsibleSensitiveTypeIds = n.getCollectionOfPrimitiveValues<string>(); },
        "sensitivityLabelId": n => { applyLabelAction.sensitivityLabelId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoArticle(article: Article | undefined = {} as Article) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(article),
        "body": n => { article.body = n.getObjectValue<FormattedContent>(createFormattedContentFromDiscriminatorValue); },
        "createdDateTime": n => { article.createdDateTime = n.getDateValue(); },
        "imageUrl": n => { article.imageUrl = n.getStringValue(); },
        "indicators": n => { article.indicators = n.getCollectionOfObjectValues<ArticleIndicator>(createArticleIndicatorFromDiscriminatorValue); },
        "isFeatured": n => { article.isFeatured = n.getBooleanValue(); },
        "lastUpdatedDateTime": n => { article.lastUpdatedDateTime = n.getDateValue(); },
        "summary": n => { article.summary = n.getObjectValue<FormattedContent>(createFormattedContentFromDiscriminatorValue); },
        "tags": n => { article.tags = n.getCollectionOfPrimitiveValues<string>(); },
        "title": n => { article.title = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoArticleCollectionResponse(articleCollectionResponse: ArticleCollectionResponse | undefined = {} as ArticleCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(articleCollectionResponse),
        "value": n => { articleCollectionResponse.value = n.getCollectionOfObjectValues<Article>(createArticleFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoArticleIndicator(articleIndicator: ArticleIndicator | undefined = {} as ArticleIndicator) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIndicator(articleIndicator),
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoArticleIndicatorCollectionResponse(articleIndicatorCollectionResponse: ArticleIndicatorCollectionResponse | undefined = {} as ArticleIndicatorCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(articleIndicatorCollectionResponse),
        "value": n => { articleIndicatorCollectionResponse.value = n.getCollectionOfObjectValues<ArticleIndicator>(createArticleIndicatorFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoArtifact(artifact: Artifact | undefined = {} as Artifact) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(artifact),
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoAttackSimulationInfo(attackSimulationInfo: AttackSimulationInfo | undefined = {} as AttackSimulationInfo) : Record<string, (node: ParseNode) => void> {
    return {
        "attackSimDateTime": n => { attackSimulationInfo.attackSimDateTime = n.getDateValue(); },
        "attackSimDurationTime": n => { attackSimulationInfo.attackSimDurationTime = n.getDurationValue(); },
        "attackSimId": n => { attackSimulationInfo.attackSimId = n.getGuidValue(); },
        "attackSimUserId": n => { attackSimulationInfo.attackSimUserId = n.getStringValue(); },
        "backingStoreEnabled": n => { attackSimulationInfo.backingStoreEnabled = true; },
        "@odata.type": n => { attackSimulationInfo.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoAuditCoreRoot(auditCoreRoot: AuditCoreRoot | undefined = {} as AuditCoreRoot) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(auditCoreRoot),
        "queries": n => { auditCoreRoot.queries = n.getCollectionOfObjectValues<AuditLogQuery>(createAuditLogQueryFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoAuditData(auditData: AuditData | undefined = {} as AuditData) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { auditData.backingStoreEnabled = true; },
        "@odata.type": n => { auditData.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoAuditLogQuery(auditLogQuery: AuditLogQuery | undefined = {} as AuditLogQuery) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(auditLogQuery),
        "administrativeUnitIdFilters": n => { auditLogQuery.administrativeUnitIdFilters = n.getCollectionOfPrimitiveValues<string>(); },
        "displayName": n => { auditLogQuery.displayName = n.getStringValue(); },
        "filterEndDateTime": n => { auditLogQuery.filterEndDateTime = n.getDateValue(); },
        "filterStartDateTime": n => { auditLogQuery.filterStartDateTime = n.getDateValue(); },
        "ipAddressFilters": n => { auditLogQuery.ipAddressFilters = n.getCollectionOfPrimitiveValues<string>(); },
        "keywordFilter": n => { auditLogQuery.keywordFilter = n.getStringValue(); },
        "objectIdFilters": n => { auditLogQuery.objectIdFilters = n.getCollectionOfPrimitiveValues<string>(); },
        "operationFilters": n => { auditLogQuery.operationFilters = n.getCollectionOfPrimitiveValues<string>(); },
        "records": n => { auditLogQuery.records = n.getCollectionOfObjectValues<AuditLogRecord>(createAuditLogRecordFromDiscriminatorValue); },
        "recordTypeFilters": n => { auditLogQuery.recordTypeFilters = n.getCollectionOfEnumValues<AuditLogRecordType>(AuditLogRecordTypeObject); },
        "serviceFilters": n => { auditLogQuery.serviceFilters = n.getCollectionOfPrimitiveValues<string>(); },
        "status": n => { auditLogQuery.status = n.getEnumValue<AuditLogQueryStatus>(AuditLogQueryStatusObject); },
        "userPrincipalNameFilters": n => { auditLogQuery.userPrincipalNameFilters = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoAuditLogQueryCollectionResponse(auditLogQueryCollectionResponse: AuditLogQueryCollectionResponse | undefined = {} as AuditLogQueryCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(auditLogQueryCollectionResponse),
        "value": n => { auditLogQueryCollectionResponse.value = n.getCollectionOfObjectValues<AuditLogQuery>(createAuditLogQueryFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoAuditLogRecord(auditLogRecord: AuditLogRecord | undefined = {} as AuditLogRecord) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(auditLogRecord),
        "administrativeUnits": n => { auditLogRecord.administrativeUnits = n.getCollectionOfPrimitiveValues<string>(); },
        "auditData": n => { auditLogRecord.auditData = n.getObjectValue<AuditData>(createAuditDataFromDiscriminatorValue); },
        "auditLogRecordType": n => { auditLogRecord.auditLogRecordType = n.getEnumValue<AuditLogRecordType>(AuditLogRecordTypeObject); },
        "clientIp": n => { auditLogRecord.clientIp = n.getStringValue(); },
        "createdDateTime": n => { auditLogRecord.createdDateTime = n.getDateValue(); },
        "objectId": n => { auditLogRecord.objectId = n.getStringValue(); },
        "operation": n => { auditLogRecord.operation = n.getStringValue(); },
        "organizationId": n => { auditLogRecord.organizationId = n.getStringValue(); },
        "service": n => { auditLogRecord.service = n.getStringValue(); },
        "userId": n => { auditLogRecord.userId = n.getStringValue(); },
        "userPrincipalName": n => { auditLogRecord.userPrincipalName = n.getStringValue(); },
        "userType": n => { auditLogRecord.userType = n.getEnumValue<AuditLogUserType>(AuditLogUserTypeObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoAuditLogRecordCollectionResponse(auditLogRecordCollectionResponse: AuditLogRecordCollectionResponse | undefined = {} as AuditLogRecordCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(auditLogRecordCollectionResponse),
        "value": n => { auditLogRecordCollectionResponse.value = n.getCollectionOfObjectValues<AuditLogRecord>(createAuditLogRecordFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoAuthority(authority: Authority | undefined = {} as Authority) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoFilePlanDescriptorBase(authority),
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoAuthorityTemplate(authorityTemplate: AuthorityTemplate | undefined = {} as AuthorityTemplate) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoFilePlanDescriptorTemplate(authorityTemplate),
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoAuthorityTemplateCollectionResponse(authorityTemplateCollectionResponse: AuthorityTemplateCollectionResponse | undefined = {} as AuthorityTemplateCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(authorityTemplateCollectionResponse),
        "value": n => { authorityTemplateCollectionResponse.value = n.getCollectionOfObjectValues<AuthorityTemplate>(createAuthorityTemplateFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoAutonomousSystem(autonomousSystem: AutonomousSystem | undefined = {} as AutonomousSystem) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { autonomousSystem.backingStoreEnabled = true; },
        "name": n => { autonomousSystem.name = n.getStringValue(); },
        "number": n => { autonomousSystem.number = n.getNumberValue(); },
        "@odata.type": n => { autonomousSystem.odataType = n.getStringValue(); },
        "organization": n => { autonomousSystem.organization = n.getStringValue(); },
        "value": n => { autonomousSystem.value = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoAzureResourceEvidence(azureResourceEvidence: AzureResourceEvidence | undefined = {} as AzureResourceEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(azureResourceEvidence),
        "resourceId": n => { azureResourceEvidence.resourceId = n.getStringValue(); },
        "resourceName": n => { azureResourceEvidence.resourceName = n.getStringValue(); },
        "resourceType": n => { azureResourceEvidence.resourceType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoBlobContainerEvidence(blobContainerEvidence: BlobContainerEvidence | undefined = {} as BlobContainerEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(blobContainerEvidence),
        "name": n => { blobContainerEvidence.name = n.getStringValue(); },
        "storageResource": n => { blobContainerEvidence.storageResource = n.getObjectValue<AzureResourceEvidence>(createAzureResourceEvidenceFromDiscriminatorValue); },
        "url": n => { blobContainerEvidence.url = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoBlobEvidence(blobEvidence: BlobEvidence | undefined = {} as BlobEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(blobEvidence),
        "blobContainer": n => { blobEvidence.blobContainer = n.getObjectValue<BlobContainerEvidence>(createBlobContainerEvidenceFromDiscriminatorValue); },
        "etag": n => { blobEvidence.etag = n.getStringValue(); },
        "fileHashes": n => { blobEvidence.fileHashes = n.getCollectionOfObjectValues<FileHash>(createFileHashFromDiscriminatorValue); },
        "name": n => { blobEvidence.name = n.getStringValue(); },
        "url": n => { blobEvidence.url = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoBlockFileResponseAction(blockFileResponseAction: BlockFileResponseAction | undefined = {} as BlockFileResponseAction) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoResponseAction(blockFileResponseAction),
        "deviceGroupNames": n => { blockFileResponseAction.deviceGroupNames = n.getCollectionOfPrimitiveValues<string>(); },
        "identifier": n => { blockFileResponseAction.identifier = n.getCollectionOfEnumValues<FileEntityIdentifier>(FileEntityIdentifierObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoCaseEscaped(caseEscaped: CaseEscaped | undefined = {} as CaseEscaped) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(caseEscaped),
        "createdDateTime": n => { caseEscaped.createdDateTime = n.getDateValue(); },
        "description": n => { caseEscaped.description = n.getStringValue(); },
        "displayName": n => { caseEscaped.displayName = n.getStringValue(); },
        "lastModifiedBy": n => { caseEscaped.lastModifiedBy = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "lastModifiedDateTime": n => { caseEscaped.lastModifiedDateTime = n.getDateValue(); },
        "status": n => { caseEscaped.status = n.getEnumValue<CaseStatus>(CaseStatusObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoCaseOperation(caseOperation: CaseOperation | undefined = {} as CaseOperation) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(caseOperation),
        "action": n => { caseOperation.action = n.getEnumValue<CaseAction>(CaseActionObject); },
        "completedDateTime": n => { caseOperation.completedDateTime = n.getDateValue(); },
        "createdBy": n => { caseOperation.createdBy = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "createdDateTime": n => { caseOperation.createdDateTime = n.getDateValue(); },
        "percentProgress": n => { caseOperation.percentProgress = n.getNumberValue(); },
        "resultInfo": n => { caseOperation.resultInfo = n.getObjectValue<ResultInfo>(createResultInfoFromDiscriminatorValue); },
        "status": n => { caseOperation.status = n.getEnumValue<CaseOperationStatus>(CaseOperationStatusObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoCaseOperationCollectionResponse(caseOperationCollectionResponse: CaseOperationCollectionResponse | undefined = {} as CaseOperationCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(caseOperationCollectionResponse),
        "value": n => { caseOperationCollectionResponse.value = n.getCollectionOfObjectValues<CaseOperation>(createCaseOperationFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoCasesRoot(casesRoot: CasesRoot | undefined = {} as CasesRoot) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(casesRoot),
        "ediscoveryCases": n => { casesRoot.ediscoveryCases = n.getCollectionOfObjectValues<EdiscoveryCase>(createEdiscoveryCaseFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoCategoryTemplate(categoryTemplate: CategoryTemplate | undefined = {} as CategoryTemplate) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoFilePlanDescriptorTemplate(categoryTemplate),
        "subCategories": n => { categoryTemplate.subCategories = n.getCollectionOfObjectValues<SubCategoryTemplate>(createSubCategoryTemplateFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoCategoryTemplateCollectionResponse(categoryTemplateCollectionResponse: CategoryTemplateCollectionResponse | undefined = {} as CategoryTemplateCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(categoryTemplateCollectionResponse),
        "value": n => { categoryTemplateCollectionResponse.value = n.getCollectionOfObjectValues<CategoryTemplate>(createCategoryTemplateFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoCitation(citation: Citation | undefined = {} as Citation) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoFilePlanDescriptorBase(citation),
        "citationJurisdiction": n => { citation.citationJurisdiction = n.getStringValue(); },
        "citationUrl": n => { citation.citationUrl = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoCitationTemplate(citationTemplate: CitationTemplate | undefined = {} as CitationTemplate) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoFilePlanDescriptorTemplate(citationTemplate),
        "citationJurisdiction": n => { citationTemplate.citationJurisdiction = n.getStringValue(); },
        "citationUrl": n => { citationTemplate.citationUrl = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoCitationTemplateCollectionResponse(citationTemplateCollectionResponse: CitationTemplateCollectionResponse | undefined = {} as CitationTemplateCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(citationTemplateCollectionResponse),
        "value": n => { citationTemplateCollectionResponse.value = n.getCollectionOfObjectValues<CitationTemplate>(createCitationTemplateFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoClassificationResult(classificationResult: ClassificationResult | undefined = {} as ClassificationResult) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { classificationResult.backingStoreEnabled = true; },
        "confidenceLevel": n => { classificationResult.confidenceLevel = n.getNumberValue(); },
        "count": n => { classificationResult.count = n.getNumberValue(); },
        "@odata.type": n => { classificationResult.odataType = n.getStringValue(); },
        "sensitiveTypeId": n => { classificationResult.sensitiveTypeId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoCloudApplicationEvidence(cloudApplicationEvidence: CloudApplicationEvidence | undefined = {} as CloudApplicationEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(cloudApplicationEvidence),
        "appId": n => { cloudApplicationEvidence.appId = n.getNumberValue(); },
        "displayName": n => { cloudApplicationEvidence.displayName = n.getStringValue(); },
        "instanceId": n => { cloudApplicationEvidence.instanceId = n.getNumberValue(); },
        "instanceName": n => { cloudApplicationEvidence.instanceName = n.getStringValue(); },
        "saasAppId": n => { cloudApplicationEvidence.saasAppId = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoCollaborationRoot(collaborationRoot: CollaborationRoot | undefined = {} as CollaborationRoot) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(collaborationRoot),
        "analyzedEmails": n => { collaborationRoot.analyzedEmails = n.getCollectionOfObjectValues<AnalyzedEmail>(createAnalyzedEmailFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoCollectInvestigationPackageResponseAction(collectInvestigationPackageResponseAction: CollectInvestigationPackageResponseAction | undefined = {} as CollectInvestigationPackageResponseAction) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoResponseAction(collectInvestigationPackageResponseAction),
        "identifier": n => { collectInvestigationPackageResponseAction.identifier = n.getCollectionOfEnumValues<DeviceIdEntityIdentifier>(DeviceIdEntityIdentifierObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoContainerEvidence(containerEvidence: ContainerEvidence | undefined = {} as ContainerEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(containerEvidence),
        "args": n => { containerEvidence.args = n.getCollectionOfPrimitiveValues<string>(); },
        "command": n => { containerEvidence.command = n.getCollectionOfPrimitiveValues<string>(); },
        "containerId": n => { containerEvidence.containerId = n.getStringValue(); },
        "image": n => { containerEvidence.image = n.getObjectValue<ContainerImageEvidence>(createContainerImageEvidenceFromDiscriminatorValue); },
        "isPrivileged": n => { containerEvidence.isPrivileged = n.getBooleanValue(); },
        "name": n => { containerEvidence.name = n.getStringValue(); },
        "pod": n => { containerEvidence.pod = n.getObjectValue<KubernetesPodEvidence>(createKubernetesPodEvidenceFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoContainerImageEvidence(containerImageEvidence: ContainerImageEvidence | undefined = {} as ContainerImageEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(containerImageEvidence),
        "digestImage": n => { containerImageEvidence.digestImage = n.getObjectValue<ContainerImageEvidence>(createContainerImageEvidenceFromDiscriminatorValue); },
        "imageId": n => { containerImageEvidence.imageId = n.getStringValue(); },
        "registry": n => { containerImageEvidence.registry = n.getObjectValue<ContainerRegistryEvidence>(createContainerRegistryEvidenceFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoContainerRegistryEvidence(containerRegistryEvidence: ContainerRegistryEvidence | undefined = {} as ContainerRegistryEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(containerRegistryEvidence),
        "registry": n => { containerRegistryEvidence.registry = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoContentInfo(contentInfo: ContentInfo | undefined = {} as ContentInfo) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { contentInfo.backingStoreEnabled = true; },
        "contentFormat": n => { contentInfo.contentFormat = n.getStringValue(); },
        "identifier": n => { contentInfo.identifier = n.getStringValue(); },
        "metadata": n => { contentInfo.metadata = n.getCollectionOfObjectValues<KeyValuePair>(createKeyValuePairFromDiscriminatorValue); },
        "@odata.type": n => { contentInfo.odataType = n.getStringValue(); },
        "state": n => { contentInfo.state = n.getEnumValue<ContentState>(ContentStateObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoContentLabel(contentLabel: ContentLabel | undefined = {} as ContentLabel) : Record<string, (node: ParseNode) => void> {
    return {
        "assignmentMethod": n => { contentLabel.assignmentMethod = n.getEnumValue<AssignmentMethod>(AssignmentMethodObject); },
        "backingStoreEnabled": n => { contentLabel.backingStoreEnabled = true; },
        "createdDateTime": n => { contentLabel.createdDateTime = n.getDateValue(); },
        "@odata.type": n => { contentLabel.odataType = n.getStringValue(); },
        "sensitivityLabelId": n => { contentLabel.sensitivityLabelId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoCustomAction(customAction: CustomAction | undefined = {} as CustomAction) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoInformationProtectionAction(customAction),
        "name": n => { customAction.name = n.getStringValue(); },
        "properties": n => { customAction.properties = n.getCollectionOfObjectValues<KeyValuePair>(createKeyValuePairFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoCvssSummary(cvssSummary: CvssSummary | undefined = {} as CvssSummary) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { cvssSummary.backingStoreEnabled = true; },
        "@odata.type": n => { cvssSummary.odataType = n.getStringValue(); },
        "score": n => { cvssSummary.score = n.getNumberValue(); },
        "severity": n => { cvssSummary.severity = n.getEnumValue<VulnerabilitySeverity>(VulnerabilitySeverityObject); },
        "vectorString": n => { cvssSummary.vectorString = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoDataSet(dataSet: DataSet | undefined = {} as DataSet) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(dataSet),
        "createdBy": n => { dataSet.createdBy = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "createdDateTime": n => { dataSet.createdDateTime = n.getDateValue(); },
        "displayName": n => { dataSet.displayName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoDataSource(dataSource: DataSource | undefined = {} as DataSource) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(dataSource),
        "createdBy": n => { dataSource.createdBy = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "createdDateTime": n => { dataSource.createdDateTime = n.getDateValue(); },
        "displayName": n => { dataSource.displayName = n.getStringValue(); },
        "holdStatus": n => { dataSource.holdStatus = n.getEnumValue<DataSourceHoldStatus>(DataSourceHoldStatusObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoDataSourceCollectionResponse(dataSourceCollectionResponse: DataSourceCollectionResponse | undefined = {} as DataSourceCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(dataSourceCollectionResponse),
        "value": n => { dataSourceCollectionResponse.value = n.getCollectionOfObjectValues<DataSource>(createDataSourceFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoDataSourceContainer(dataSourceContainer: DataSourceContainer | undefined = {} as DataSourceContainer) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(dataSourceContainer),
        "createdDateTime": n => { dataSourceContainer.createdDateTime = n.getDateValue(); },
        "displayName": n => { dataSourceContainer.displayName = n.getStringValue(); },
        "holdStatus": n => { dataSourceContainer.holdStatus = n.getEnumValue<DataSourceHoldStatus>(DataSourceHoldStatusObject); },
        "lastModifiedDateTime": n => { dataSourceContainer.lastModifiedDateTime = n.getDateValue(); },
        "releasedDateTime": n => { dataSourceContainer.releasedDateTime = n.getDateValue(); },
        "status": n => { dataSourceContainer.status = n.getEnumValue<DataSourceContainerStatus>(DataSourceContainerStatusObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoDefaultAuditData(defaultAuditData: DefaultAuditData | undefined = {} as DefaultAuditData) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAuditData(defaultAuditData),
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoDepartment(department: Department | undefined = {} as Department) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoFilePlanDescriptorBase(department),
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoDepartmentTemplate(departmentTemplate: DepartmentTemplate | undefined = {} as DepartmentTemplate) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoFilePlanDescriptorTemplate(departmentTemplate),
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoDepartmentTemplateCollectionResponse(departmentTemplateCollectionResponse: DepartmentTemplateCollectionResponse | undefined = {} as DepartmentTemplateCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(departmentTemplateCollectionResponse),
        "value": n => { departmentTemplateCollectionResponse.value = n.getCollectionOfObjectValues<DepartmentTemplate>(createDepartmentTemplateFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoDetectionAction(detectionAction: DetectionAction | undefined = {} as DetectionAction) : Record<string, (node: ParseNode) => void> {
    return {
        "alertTemplate": n => { detectionAction.alertTemplate = n.getObjectValue<AlertTemplate>(createAlertTemplateFromDiscriminatorValue); },
        "backingStoreEnabled": n => { detectionAction.backingStoreEnabled = true; },
        "@odata.type": n => { detectionAction.odataType = n.getStringValue(); },
        "organizationalScope": n => { detectionAction.organizationalScope = n.getObjectValue<OrganizationalScope>(createOrganizationalScopeFromDiscriminatorValue); },
        "responseActions": n => { detectionAction.responseActions = n.getCollectionOfObjectValues<ResponseAction>(createResponseActionFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoDetectionRule(detectionRule: DetectionRule | undefined = {} as DetectionRule) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoProtectionRule(detectionRule),
        "detectionAction": n => { detectionRule.detectionAction = n.getObjectValue<DetectionAction>(createDetectionActionFromDiscriminatorValue); },
        "detectorId": n => { detectionRule.detectorId = n.getStringValue(); },
        "lastRunDetails": n => { detectionRule.lastRunDetails = n.getObjectValue<RunDetails>(createRunDetailsFromDiscriminatorValue); },
        "queryCondition": n => { detectionRule.queryCondition = n.getObjectValue<QueryCondition>(createQueryConditionFromDiscriminatorValue); },
        "schedule": n => { detectionRule.schedule = n.getObjectValue<RuleSchedule>(createRuleScheduleFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoDetonationChain(detonationChain: DetonationChain | undefined = {} as DetonationChain) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { detonationChain.backingStoreEnabled = true; },
        "childNodes": n => { detonationChain.childNodes = n.getCollectionOfObjectValues<DetonationChain>(createDetonationChainFromDiscriminatorValue); },
        "@odata.type": n => { detonationChain.odataType = n.getStringValue(); },
        "value": n => { detonationChain.value = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoDetonationDetails(detonationDetails: DetonationDetails | undefined = {} as DetonationDetails) : Record<string, (node: ParseNode) => void> {
    return {
        "analysisDateTime": n => { detonationDetails.analysisDateTime = n.getDateValue(); },
        "backingStoreEnabled": n => { detonationDetails.backingStoreEnabled = true; },
        "detonationChain": n => { detonationDetails.detonationChain = n.getObjectValue<DetonationChain>(createDetonationChainFromDiscriminatorValue); },
        "detonationObservables": n => { detonationDetails.detonationObservables = n.getObjectValue<DetonationObservables>(createDetonationObservablesFromDiscriminatorValue); },
        "detonationVerdict": n => { detonationDetails.detonationVerdict = n.getStringValue(); },
        "detonationVerdictReason": n => { detonationDetails.detonationVerdictReason = n.getStringValue(); },
        "@odata.type": n => { detonationDetails.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoDetonationObservables(detonationObservables: DetonationObservables | undefined = {} as DetonationObservables) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { detonationObservables.backingStoreEnabled = true; },
        "contactedIps": n => { detonationObservables.contactedIps = n.getCollectionOfPrimitiveValues<string>(); },
        "contactedUrls": n => { detonationObservables.contactedUrls = n.getCollectionOfPrimitiveValues<string>(); },
        "droppedfiles": n => { detonationObservables.droppedfiles = n.getCollectionOfPrimitiveValues<string>(); },
        "@odata.type": n => { detonationObservables.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoDeviceEvidence(deviceEvidence: DeviceEvidence | undefined = {} as DeviceEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(deviceEvidence),
        "azureAdDeviceId": n => { deviceEvidence.azureAdDeviceId = n.getStringValue(); },
        "defenderAvStatus": n => { deviceEvidence.defenderAvStatus = n.getEnumValue<DefenderAvStatus>(DefenderAvStatusObject); },
        "deviceDnsName": n => { deviceEvidence.deviceDnsName = n.getStringValue(); },
        "firstSeenDateTime": n => { deviceEvidence.firstSeenDateTime = n.getDateValue(); },
        "healthStatus": n => { deviceEvidence.healthStatus = n.getEnumValue<DeviceHealthStatus>(DeviceHealthStatusObject); },
        "ipInterfaces": n => { deviceEvidence.ipInterfaces = n.getCollectionOfPrimitiveValues<string>(); },
        "loggedOnUsers": n => { deviceEvidence.loggedOnUsers = n.getCollectionOfObjectValues<LoggedOnUser>(createLoggedOnUserFromDiscriminatorValue); },
        "mdeDeviceId": n => { deviceEvidence.mdeDeviceId = n.getStringValue(); },
        "onboardingStatus": n => { deviceEvidence.onboardingStatus = n.getEnumValue<OnboardingStatus>(OnboardingStatusObject); },
        "osBuild": n => { deviceEvidence.osBuild = n.getNumberValue(); },
        "osPlatform": n => { deviceEvidence.osPlatform = n.getStringValue(); },
        "rbacGroupId": n => { deviceEvidence.rbacGroupId = n.getNumberValue(); },
        "rbacGroupName": n => { deviceEvidence.rbacGroupName = n.getStringValue(); },
        "riskScore": n => { deviceEvidence.riskScore = n.getEnumValue<DeviceRiskScore>(DeviceRiskScoreObject); },
        "version": n => { deviceEvidence.version = n.getStringValue(); },
        "vmMetadata": n => { deviceEvidence.vmMetadata = n.getObjectValue<VmMetadata>(createVmMetadataFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoDictionary(dictionary: Dictionary | undefined = {} as Dictionary) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { dictionary.backingStoreEnabled = true; },
        "@odata.type": n => { dictionary.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoDisableUserResponseAction(disableUserResponseAction: DisableUserResponseAction | undefined = {} as DisableUserResponseAction) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoResponseAction(disableUserResponseAction),
        "identifier": n => { disableUserResponseAction.identifier = n.getCollectionOfEnumValues<DisableUserEntityIdentifier>(DisableUserEntityIdentifierObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoDispositionReviewStage(dispositionReviewStage: DispositionReviewStage | undefined = {} as DispositionReviewStage) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(dispositionReviewStage),
        "name": n => { dispositionReviewStage.name = n.getStringValue(); },
        "reviewersEmailAddresses": n => { dispositionReviewStage.reviewersEmailAddresses = n.getCollectionOfPrimitiveValues<string>(); },
        "stageNumber": n => { dispositionReviewStage.stageNumber = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoDispositionReviewStageCollectionResponse(dispositionReviewStageCollectionResponse: DispositionReviewStageCollectionResponse | undefined = {} as DispositionReviewStageCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(dispositionReviewStageCollectionResponse),
        "value": n => { dispositionReviewStageCollectionResponse.value = n.getCollectionOfObjectValues<DispositionReviewStage>(createDispositionReviewStageFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoDowngradeJustification(downgradeJustification: DowngradeJustification | undefined = {} as DowngradeJustification) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { downgradeJustification.backingStoreEnabled = true; },
        "isDowngradeJustified": n => { downgradeJustification.isDowngradeJustified = n.getBooleanValue(); },
        "justificationMessage": n => { downgradeJustification.justificationMessage = n.getStringValue(); },
        "@odata.type": n => { downgradeJustification.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoEdiscoveryAddToReviewSetOperation(ediscoveryAddToReviewSetOperation: EdiscoveryAddToReviewSetOperation | undefined = {} as EdiscoveryAddToReviewSetOperation) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoCaseOperation(ediscoveryAddToReviewSetOperation),
        "reviewSet": n => { ediscoveryAddToReviewSetOperation.reviewSet = n.getObjectValue<EdiscoveryReviewSet>(createEdiscoveryReviewSetFromDiscriminatorValue); },
        "search": n => { ediscoveryAddToReviewSetOperation.search = n.getObjectValue<EdiscoverySearch>(createEdiscoverySearchFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoEdiscoveryCase(ediscoveryCase: EdiscoveryCase | undefined = {} as EdiscoveryCase) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoCaseEscaped(ediscoveryCase),
        "closedBy": n => { ediscoveryCase.closedBy = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "closedDateTime": n => { ediscoveryCase.closedDateTime = n.getDateValue(); },
        "custodians": n => { ediscoveryCase.custodians = n.getCollectionOfObjectValues<EdiscoveryCustodian>(createEdiscoveryCustodianFromDiscriminatorValue); },
        "externalId": n => { ediscoveryCase.externalId = n.getStringValue(); },
        "legalHolds": n => { ediscoveryCase.legalHolds = n.getCollectionOfObjectValues<EdiscoveryHoldPolicy>(createEdiscoveryHoldPolicyFromDiscriminatorValue); },
        "noncustodialDataSources": n => { ediscoveryCase.noncustodialDataSources = n.getCollectionOfObjectValues<EdiscoveryNoncustodialDataSource>(createEdiscoveryNoncustodialDataSourceFromDiscriminatorValue); },
        "operations": n => { ediscoveryCase.operations = n.getCollectionOfObjectValues<CaseOperation>(createCaseOperationFromDiscriminatorValue); },
        "reviewSets": n => { ediscoveryCase.reviewSets = n.getCollectionOfObjectValues<EdiscoveryReviewSet>(createEdiscoveryReviewSetFromDiscriminatorValue); },
        "searches": n => { ediscoveryCase.searches = n.getCollectionOfObjectValues<EdiscoverySearch>(createEdiscoverySearchFromDiscriminatorValue); },
        "settings": n => { ediscoveryCase.settings = n.getObjectValue<EdiscoveryCaseSettings>(createEdiscoveryCaseSettingsFromDiscriminatorValue); },
        "tags": n => { ediscoveryCase.tags = n.getCollectionOfObjectValues<EdiscoveryReviewTag>(createEdiscoveryReviewTagFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoEdiscoveryCaseCollectionResponse(ediscoveryCaseCollectionResponse: EdiscoveryCaseCollectionResponse | undefined = {} as EdiscoveryCaseCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(ediscoveryCaseCollectionResponse),
        "value": n => { ediscoveryCaseCollectionResponse.value = n.getCollectionOfObjectValues<EdiscoveryCase>(createEdiscoveryCaseFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoEdiscoveryCaseSettings(ediscoveryCaseSettings: EdiscoveryCaseSettings | undefined = {} as EdiscoveryCaseSettings) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(ediscoveryCaseSettings),
        "ocr": n => { ediscoveryCaseSettings.ocr = n.getObjectValue<OcrSettings>(createOcrSettingsFromDiscriminatorValue); },
        "redundancyDetection": n => { ediscoveryCaseSettings.redundancyDetection = n.getObjectValue<RedundancyDetectionSettings>(createRedundancyDetectionSettingsFromDiscriminatorValue); },
        "topicModeling": n => { ediscoveryCaseSettings.topicModeling = n.getObjectValue<TopicModelingSettings>(createTopicModelingSettingsFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoEdiscoveryCustodian(ediscoveryCustodian: EdiscoveryCustodian | undefined = {} as EdiscoveryCustodian) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoDataSourceContainer(ediscoveryCustodian),
        "acknowledgedDateTime": n => { ediscoveryCustodian.acknowledgedDateTime = n.getDateValue(); },
        "email": n => { ediscoveryCustodian.email = n.getStringValue(); },
        "lastIndexOperation": n => { ediscoveryCustodian.lastIndexOperation = n.getObjectValue<EdiscoveryIndexOperation>(createEdiscoveryIndexOperationFromDiscriminatorValue); },
        "siteSources": n => { ediscoveryCustodian.siteSources = n.getCollectionOfObjectValues<SiteSource>(createSiteSourceFromDiscriminatorValue); },
        "unifiedGroupSources": n => { ediscoveryCustodian.unifiedGroupSources = n.getCollectionOfObjectValues<UnifiedGroupSource>(createUnifiedGroupSourceFromDiscriminatorValue); },
        "userSources": n => { ediscoveryCustodian.userSources = n.getCollectionOfObjectValues<UserSource>(createUserSourceFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoEdiscoveryCustodianCollectionResponse(ediscoveryCustodianCollectionResponse: EdiscoveryCustodianCollectionResponse | undefined = {} as EdiscoveryCustodianCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(ediscoveryCustodianCollectionResponse),
        "value": n => { ediscoveryCustodianCollectionResponse.value = n.getCollectionOfObjectValues<EdiscoveryCustodian>(createEdiscoveryCustodianFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoEdiscoveryEstimateOperation(ediscoveryEstimateOperation: EdiscoveryEstimateOperation | undefined = {} as EdiscoveryEstimateOperation) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoCaseOperation(ediscoveryEstimateOperation),
        "indexedItemCount": n => { ediscoveryEstimateOperation.indexedItemCount = n.getNumberValue(); },
        "indexedItemsSize": n => { ediscoveryEstimateOperation.indexedItemsSize = n.getNumberValue(); },
        "mailboxCount": n => { ediscoveryEstimateOperation.mailboxCount = n.getNumberValue(); },
        "search": n => { ediscoveryEstimateOperation.search = n.getObjectValue<EdiscoverySearch>(createEdiscoverySearchFromDiscriminatorValue); },
        "siteCount": n => { ediscoveryEstimateOperation.siteCount = n.getNumberValue(); },
        "unindexedItemCount": n => { ediscoveryEstimateOperation.unindexedItemCount = n.getNumberValue(); },
        "unindexedItemsSize": n => { ediscoveryEstimateOperation.unindexedItemsSize = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoEdiscoveryExportOperation(ediscoveryExportOperation: EdiscoveryExportOperation | undefined = {} as EdiscoveryExportOperation) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoCaseOperation(ediscoveryExportOperation),
        "azureBlobContainer": n => { ediscoveryExportOperation.azureBlobContainer = n.getStringValue(); },
        "azureBlobToken": n => { ediscoveryExportOperation.azureBlobToken = n.getStringValue(); },
        "description": n => { ediscoveryExportOperation.description = n.getStringValue(); },
        "exportFileMetadata": n => { ediscoveryExportOperation.exportFileMetadata = n.getCollectionOfObjectValues<ExportFileMetadata>(createExportFileMetadataFromDiscriminatorValue); },
        "exportOptions": n => { ediscoveryExportOperation.exportOptions = n.getCollectionOfEnumValues<ExportOptions>(ExportOptionsObject); },
        "exportStructure": n => { ediscoveryExportOperation.exportStructure = n.getEnumValue<ExportFileStructure>(ExportFileStructureObject); },
        "outputFolderId": n => { ediscoveryExportOperation.outputFolderId = n.getStringValue(); },
        "outputName": n => { ediscoveryExportOperation.outputName = n.getStringValue(); },
        "reviewSet": n => { ediscoveryExportOperation.reviewSet = n.getObjectValue<EdiscoveryReviewSet>(createEdiscoveryReviewSetFromDiscriminatorValue); },
        "reviewSetQuery": n => { ediscoveryExportOperation.reviewSetQuery = n.getObjectValue<EdiscoveryReviewSetQuery>(createEdiscoveryReviewSetQueryFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoEdiscoveryFile(ediscoveryFile: EdiscoveryFile | undefined = {} as EdiscoveryFile) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoFile(ediscoveryFile),
        "custodian": n => { ediscoveryFile.custodian = n.getObjectValue<EdiscoveryCustodian>(createEdiscoveryCustodianFromDiscriminatorValue); },
        "tags": n => { ediscoveryFile.tags = n.getCollectionOfObjectValues<EdiscoveryReviewTag>(createEdiscoveryReviewTagFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoEdiscoveryFileCollectionResponse(ediscoveryFileCollectionResponse: EdiscoveryFileCollectionResponse | undefined = {} as EdiscoveryFileCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(ediscoveryFileCollectionResponse),
        "value": n => { ediscoveryFileCollectionResponse.value = n.getCollectionOfObjectValues<EdiscoveryFile>(createEdiscoveryFileFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoEdiscoveryHoldOperation(ediscoveryHoldOperation: EdiscoveryHoldOperation | undefined = {} as EdiscoveryHoldOperation) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoCaseOperation(ediscoveryHoldOperation),
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoEdiscoveryHoldPolicy(ediscoveryHoldPolicy: EdiscoveryHoldPolicy | undefined = {} as EdiscoveryHoldPolicy) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoPolicyBase(ediscoveryHoldPolicy),
        "contentQuery": n => { ediscoveryHoldPolicy.contentQuery = n.getStringValue(); },
        "errors": n => { ediscoveryHoldPolicy.errors = n.getCollectionOfPrimitiveValues<string>(); },
        "isEnabled": n => { ediscoveryHoldPolicy.isEnabled = n.getBooleanValue(); },
        "siteSources": n => { ediscoveryHoldPolicy.siteSources = n.getCollectionOfObjectValues<SiteSource>(createSiteSourceFromDiscriminatorValue); },
        "userSources": n => { ediscoveryHoldPolicy.userSources = n.getCollectionOfObjectValues<UserSource>(createUserSourceFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoEdiscoveryHoldPolicyCollectionResponse(ediscoveryHoldPolicyCollectionResponse: EdiscoveryHoldPolicyCollectionResponse | undefined = {} as EdiscoveryHoldPolicyCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(ediscoveryHoldPolicyCollectionResponse),
        "value": n => { ediscoveryHoldPolicyCollectionResponse.value = n.getCollectionOfObjectValues<EdiscoveryHoldPolicy>(createEdiscoveryHoldPolicyFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoEdiscoveryIndexOperation(ediscoveryIndexOperation: EdiscoveryIndexOperation | undefined = {} as EdiscoveryIndexOperation) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoCaseOperation(ediscoveryIndexOperation),
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoEdiscoveryNoncustodialDataSource(ediscoveryNoncustodialDataSource: EdiscoveryNoncustodialDataSource | undefined = {} as EdiscoveryNoncustodialDataSource) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoDataSourceContainer(ediscoveryNoncustodialDataSource),
        "dataSource": n => { ediscoveryNoncustodialDataSource.dataSource = n.getObjectValue<DataSource>(createDataSourceFromDiscriminatorValue); },
        "lastIndexOperation": n => { ediscoveryNoncustodialDataSource.lastIndexOperation = n.getObjectValue<EdiscoveryIndexOperation>(createEdiscoveryIndexOperationFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoEdiscoveryNoncustodialDataSourceCollectionResponse(ediscoveryNoncustodialDataSourceCollectionResponse: EdiscoveryNoncustodialDataSourceCollectionResponse | undefined = {} as EdiscoveryNoncustodialDataSourceCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(ediscoveryNoncustodialDataSourceCollectionResponse),
        "value": n => { ediscoveryNoncustodialDataSourceCollectionResponse.value = n.getCollectionOfObjectValues<EdiscoveryNoncustodialDataSource>(createEdiscoveryNoncustodialDataSourceFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoEdiscoveryPurgeDataOperation(ediscoveryPurgeDataOperation: EdiscoveryPurgeDataOperation | undefined = {} as EdiscoveryPurgeDataOperation) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoCaseOperation(ediscoveryPurgeDataOperation),
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoEdiscoveryReviewSet(ediscoveryReviewSet: EdiscoveryReviewSet | undefined = {} as EdiscoveryReviewSet) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoDataSet(ediscoveryReviewSet),
        "files": n => { ediscoveryReviewSet.files = n.getCollectionOfObjectValues<EdiscoveryFile>(createEdiscoveryFileFromDiscriminatorValue); },
        "queries": n => { ediscoveryReviewSet.queries = n.getCollectionOfObjectValues<EdiscoveryReviewSetQuery>(createEdiscoveryReviewSetQueryFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoEdiscoveryReviewSetCollectionResponse(ediscoveryReviewSetCollectionResponse: EdiscoveryReviewSetCollectionResponse | undefined = {} as EdiscoveryReviewSetCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(ediscoveryReviewSetCollectionResponse),
        "value": n => { ediscoveryReviewSetCollectionResponse.value = n.getCollectionOfObjectValues<EdiscoveryReviewSet>(createEdiscoveryReviewSetFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoEdiscoveryReviewSetQuery(ediscoveryReviewSetQuery: EdiscoveryReviewSetQuery | undefined = {} as EdiscoveryReviewSetQuery) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoSearch(ediscoveryReviewSetQuery),
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoEdiscoveryReviewSetQueryCollectionResponse(ediscoveryReviewSetQueryCollectionResponse: EdiscoveryReviewSetQueryCollectionResponse | undefined = {} as EdiscoveryReviewSetQueryCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(ediscoveryReviewSetQueryCollectionResponse),
        "value": n => { ediscoveryReviewSetQueryCollectionResponse.value = n.getCollectionOfObjectValues<EdiscoveryReviewSetQuery>(createEdiscoveryReviewSetQueryFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoEdiscoveryReviewTag(ediscoveryReviewTag: EdiscoveryReviewTag | undefined = {} as EdiscoveryReviewTag) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoTag(ediscoveryReviewTag),
        "childSelectability": n => { ediscoveryReviewTag.childSelectability = n.getEnumValue<ChildSelectability>(ChildSelectabilityObject); },
        "childTags": n => { ediscoveryReviewTag.childTags = n.getCollectionOfObjectValues<EdiscoveryReviewTag>(createEdiscoveryReviewTagFromDiscriminatorValue); },
        "parent": n => { ediscoveryReviewTag.parent = n.getObjectValue<EdiscoveryReviewTag>(createEdiscoveryReviewTagFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoEdiscoveryReviewTagCollectionResponse(ediscoveryReviewTagCollectionResponse: EdiscoveryReviewTagCollectionResponse | undefined = {} as EdiscoveryReviewTagCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(ediscoveryReviewTagCollectionResponse),
        "value": n => { ediscoveryReviewTagCollectionResponse.value = n.getCollectionOfObjectValues<EdiscoveryReviewTag>(createEdiscoveryReviewTagFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoEdiscoverySearch(ediscoverySearch: EdiscoverySearch | undefined = {} as EdiscoverySearch) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoSearch(ediscoverySearch),
        "additionalSources": n => { ediscoverySearch.additionalSources = n.getCollectionOfObjectValues<DataSource>(createDataSourceFromDiscriminatorValue); },
        "addToReviewSetOperation": n => { ediscoverySearch.addToReviewSetOperation = n.getObjectValue<EdiscoveryAddToReviewSetOperation>(createEdiscoveryAddToReviewSetOperationFromDiscriminatorValue); },
        "custodianSources": n => { ediscoverySearch.custodianSources = n.getCollectionOfObjectValues<DataSource>(createDataSourceFromDiscriminatorValue); },
        "dataSourceScopes": n => { ediscoverySearch.dataSourceScopes = n.getCollectionOfEnumValues<DataSourceScopes>(DataSourceScopesObject); },
        "lastEstimateStatisticsOperation": n => { ediscoverySearch.lastEstimateStatisticsOperation = n.getObjectValue<EdiscoveryEstimateOperation>(createEdiscoveryEstimateOperationFromDiscriminatorValue); },
        "noncustodialSources": n => { ediscoverySearch.noncustodialSources = n.getCollectionOfObjectValues<EdiscoveryNoncustodialDataSource>(createEdiscoveryNoncustodialDataSourceFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoEdiscoverySearchCollectionResponse(ediscoverySearchCollectionResponse: EdiscoverySearchCollectionResponse | undefined = {} as EdiscoverySearchCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(ediscoverySearchCollectionResponse),
        "value": n => { ediscoverySearchCollectionResponse.value = n.getCollectionOfObjectValues<EdiscoverySearch>(createEdiscoverySearchFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoEdiscoverySearchExportOperation(ediscoverySearchExportOperation: EdiscoverySearchExportOperation | undefined = {} as EdiscoverySearchExportOperation) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoCaseOperation(ediscoverySearchExportOperation),
        "additionalOptions": n => { ediscoverySearchExportOperation.additionalOptions = n.getCollectionOfEnumValues<AdditionalOptions>(AdditionalOptionsObject); },
        "description": n => { ediscoverySearchExportOperation.description = n.getStringValue(); },
        "displayName": n => { ediscoverySearchExportOperation.displayName = n.getStringValue(); },
        "exportCriteria": n => { ediscoverySearchExportOperation.exportCriteria = n.getCollectionOfEnumValues<ExportCriteria>(ExportCriteriaObject); },
        "exportFileMetadata": n => { ediscoverySearchExportOperation.exportFileMetadata = n.getCollectionOfObjectValues<ExportFileMetadata>(createExportFileMetadataFromDiscriminatorValue); },
        "exportFormat": n => { ediscoverySearchExportOperation.exportFormat = n.getEnumValue<ExportFormat>(ExportFormatObject); },
        "exportLocation": n => { ediscoverySearchExportOperation.exportLocation = n.getCollectionOfEnumValues<ExportLocation>(ExportLocationObject); },
        "exportSingleItems": n => { ediscoverySearchExportOperation.exportSingleItems = n.getBooleanValue(); },
        "search": n => { ediscoverySearchExportOperation.search = n.getObjectValue<EdiscoverySearch>(createEdiscoverySearchFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoEdiscoveryTagOperation(ediscoveryTagOperation: EdiscoveryTagOperation | undefined = {} as EdiscoveryTagOperation) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoCaseOperation(ediscoveryTagOperation),
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoEmailContentThreatSubmission(emailContentThreatSubmission: EmailContentThreatSubmission | undefined = {} as EmailContentThreatSubmission) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEmailThreatSubmission(emailContentThreatSubmission),
        "fileContent": n => { emailContentThreatSubmission.fileContent = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoEmailSender(emailSender: EmailSender | undefined = {} as EmailSender) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { emailSender.backingStoreEnabled = true; },
        "displayName": n => { emailSender.displayName = n.getStringValue(); },
        "domainName": n => { emailSender.domainName = n.getStringValue(); },
        "emailAddress": n => { emailSender.emailAddress = n.getStringValue(); },
        "@odata.type": n => { emailSender.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoEmailThreatSubmission(emailThreatSubmission: EmailThreatSubmission | undefined = {} as EmailThreatSubmission) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoThreatSubmission(emailThreatSubmission),
        "attackSimulationInfo": n => { emailThreatSubmission.attackSimulationInfo = n.getObjectValue<AttackSimulationInfo>(createAttackSimulationInfoFromDiscriminatorValue); },
        "internetMessageId": n => { emailThreatSubmission.internetMessageId = n.getStringValue(); },
        "originalCategory": n => { emailThreatSubmission.originalCategory = n.getEnumValue<SubmissionCategory>(SubmissionCategoryObject); },
        "receivedDateTime": n => { emailThreatSubmission.receivedDateTime = n.getDateValue(); },
        "recipientEmailAddress": n => { emailThreatSubmission.recipientEmailAddress = n.getStringValue(); },
        "sender": n => { emailThreatSubmission.sender = n.getStringValue(); },
        "senderIP": n => { emailThreatSubmission.senderIP = n.getStringValue(); },
        "subject": n => { emailThreatSubmission.subject = n.getStringValue(); },
        "tenantAllowOrBlockListAction": n => { emailThreatSubmission.tenantAllowOrBlockListAction = n.getObjectValue<TenantAllowOrBlockListAction>(createTenantAllowOrBlockListActionFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoEmailThreatSubmissionCollectionResponse(emailThreatSubmissionCollectionResponse: EmailThreatSubmissionCollectionResponse | undefined = {} as EmailThreatSubmissionCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(emailThreatSubmissionCollectionResponse),
        "value": n => { emailThreatSubmissionCollectionResponse.value = n.getCollectionOfObjectValues<EmailThreatSubmission>(createEmailThreatSubmissionFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoEmailThreatSubmissionPolicy(emailThreatSubmissionPolicy: EmailThreatSubmissionPolicy | undefined = {} as EmailThreatSubmissionPolicy) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(emailThreatSubmissionPolicy),
        "customizedNotificationSenderEmailAddress": n => { emailThreatSubmissionPolicy.customizedNotificationSenderEmailAddress = n.getStringValue(); },
        "customizedReportRecipientEmailAddress": n => { emailThreatSubmissionPolicy.customizedReportRecipientEmailAddress = n.getStringValue(); },
        "isAlwaysReportEnabledForUsers": n => { emailThreatSubmissionPolicy.isAlwaysReportEnabledForUsers = n.getBooleanValue(); },
        "isAskMeEnabledForUsers": n => { emailThreatSubmissionPolicy.isAskMeEnabledForUsers = n.getBooleanValue(); },
        "isCustomizedMessageEnabled": n => { emailThreatSubmissionPolicy.isCustomizedMessageEnabled = n.getBooleanValue(); },
        "isCustomizedMessageEnabledForPhishing": n => { emailThreatSubmissionPolicy.isCustomizedMessageEnabledForPhishing = n.getBooleanValue(); },
        "isCustomizedNotificationSenderEnabled": n => { emailThreatSubmissionPolicy.isCustomizedNotificationSenderEnabled = n.getBooleanValue(); },
        "isNeverReportEnabledForUsers": n => { emailThreatSubmissionPolicy.isNeverReportEnabledForUsers = n.getBooleanValue(); },
        "isOrganizationBrandingEnabled": n => { emailThreatSubmissionPolicy.isOrganizationBrandingEnabled = n.getBooleanValue(); },
        "isReportFromQuarantineEnabled": n => { emailThreatSubmissionPolicy.isReportFromQuarantineEnabled = n.getBooleanValue(); },
        "isReportToCustomizedEmailAddressEnabled": n => { emailThreatSubmissionPolicy.isReportToCustomizedEmailAddressEnabled = n.getBooleanValue(); },
        "isReportToMicrosoftEnabled": n => { emailThreatSubmissionPolicy.isReportToMicrosoftEnabled = n.getBooleanValue(); },
        "isReviewEmailNotificationEnabled": n => { emailThreatSubmissionPolicy.isReviewEmailNotificationEnabled = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoEmailThreatSubmissionPolicyCollectionResponse(emailThreatSubmissionPolicyCollectionResponse: EmailThreatSubmissionPolicyCollectionResponse | undefined = {} as EmailThreatSubmissionPolicyCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(emailThreatSubmissionPolicyCollectionResponse),
        "value": n => { emailThreatSubmissionPolicyCollectionResponse.value = n.getCollectionOfObjectValues<EmailThreatSubmissionPolicy>(createEmailThreatSubmissionPolicyFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoEmailUrlThreatSubmission(emailUrlThreatSubmission: EmailUrlThreatSubmission | undefined = {} as EmailUrlThreatSubmission) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEmailThreatSubmission(emailUrlThreatSubmission),
        "messageUrl": n => { emailUrlThreatSubmission.messageUrl = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoEventPropagationResult(eventPropagationResult: EventPropagationResult | undefined = {} as EventPropagationResult) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { eventPropagationResult.backingStoreEnabled = true; },
        "location": n => { eventPropagationResult.location = n.getStringValue(); },
        "@odata.type": n => { eventPropagationResult.odataType = n.getStringValue(); },
        "serviceName": n => { eventPropagationResult.serviceName = n.getStringValue(); },
        "status": n => { eventPropagationResult.status = n.getEnumValue<EventPropagationStatus>(EventPropagationStatusObject); },
        "statusInformation": n => { eventPropagationResult.statusInformation = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoEventQuery(eventQuery: EventQuery | undefined = {} as EventQuery) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { eventQuery.backingStoreEnabled = true; },
        "@odata.type": n => { eventQuery.odataType = n.getStringValue(); },
        "query": n => { eventQuery.query = n.getStringValue(); },
        "queryType": n => { eventQuery.queryType = n.getEnumValue<QueryType>(QueryTypeObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoExportFileMetadata(exportFileMetadata: ExportFileMetadata | undefined = {} as ExportFileMetadata) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { exportFileMetadata.backingStoreEnabled = true; },
        "downloadUrl": n => { exportFileMetadata.downloadUrl = n.getStringValue(); },
        "fileName": n => { exportFileMetadata.fileName = n.getStringValue(); },
        "@odata.type": n => { exportFileMetadata.odataType = n.getStringValue(); },
        "size": n => { exportFileMetadata.size = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoFile(file: File | undefined = {} as File) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(file),
        "content": n => { file.content = n.getStringValue(); },
        "dateTime": n => { file.dateTime = n.getDateValue(); },
        "extension": n => { file.extension = n.getStringValue(); },
        "extractedTextContent": n => { file.extractedTextContent = n.getStringValue(); },
        "mediaType": n => { file.mediaType = n.getStringValue(); },
        "name": n => { file.name = n.getStringValue(); },
        "otherProperties": n => { file.otherProperties = n.getObjectValue<StringValueDictionary>(createStringValueDictionaryFromDiscriminatorValue); },
        "processingStatus": n => { file.processingStatus = n.getEnumValue<FileProcessingStatus>(FileProcessingStatusObject); },
        "senderOrAuthors": n => { file.senderOrAuthors = n.getCollectionOfPrimitiveValues<string>(); },
        "size": n => { file.size = n.getNumberValue(); },
        "sourceType": n => { file.sourceType = n.getCollectionOfEnumValues<SourceType>(SourceTypeObject); },
        "subjectTitle": n => { file.subjectTitle = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoFileContentThreatSubmission(fileContentThreatSubmission: FileContentThreatSubmission | undefined = {} as FileContentThreatSubmission) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoFileThreatSubmission(fileContentThreatSubmission),
        "fileContent": n => { fileContentThreatSubmission.fileContent = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoFileDetails(fileDetails: FileDetails | undefined = {} as FileDetails) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { fileDetails.backingStoreEnabled = true; },
        "fileName": n => { fileDetails.fileName = n.getStringValue(); },
        "filePath": n => { fileDetails.filePath = n.getStringValue(); },
        "filePublisher": n => { fileDetails.filePublisher = n.getStringValue(); },
        "fileSize": n => { fileDetails.fileSize = n.getNumberValue(); },
        "issuer": n => { fileDetails.issuer = n.getStringValue(); },
        "@odata.type": n => { fileDetails.odataType = n.getStringValue(); },
        "sha1": n => { fileDetails.sha1 = n.getStringValue(); },
        "sha256": n => { fileDetails.sha256 = n.getStringValue(); },
        "signer": n => { fileDetails.signer = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoFileEvidence(fileEvidence: FileEvidence | undefined = {} as FileEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(fileEvidence),
        "detectionStatus": n => { fileEvidence.detectionStatus = n.getEnumValue<DetectionStatus>(DetectionStatusObject); },
        "fileDetails": n => { fileEvidence.fileDetails = n.getObjectValue<FileDetails>(createFileDetailsFromDiscriminatorValue); },
        "mdeDeviceId": n => { fileEvidence.mdeDeviceId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoFileHash(fileHash: FileHash | undefined = {} as FileHash) : Record<string, (node: ParseNode) => void> {
    return {
        "algorithm": n => { fileHash.algorithm = n.getEnumValue<FileHashAlgorithm>(FileHashAlgorithmObject); },
        "backingStoreEnabled": n => { fileHash.backingStoreEnabled = true; },
        "@odata.type": n => { fileHash.odataType = n.getStringValue(); },
        "value": n => { fileHash.value = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoFilePlanDescriptor(filePlanDescriptor: FilePlanDescriptor | undefined = {} as FilePlanDescriptor) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(filePlanDescriptor),
        "authority": n => { filePlanDescriptor.authority = n.getObjectValue<Authority>(createAuthorityFromDiscriminatorValue); },
        "authorityTemplate": n => { filePlanDescriptor.authorityTemplate = n.getObjectValue<AuthorityTemplate>(createAuthorityTemplateFromDiscriminatorValue); },
        "category": n => { filePlanDescriptor.category = n.getObjectValue<AppliedCategory>(createAppliedCategoryFromDiscriminatorValue); },
        "categoryTemplate": n => { filePlanDescriptor.categoryTemplate = n.getObjectValue<CategoryTemplate>(createCategoryTemplateFromDiscriminatorValue); },
        "citation": n => { filePlanDescriptor.citation = n.getObjectValue<Citation>(createCitationFromDiscriminatorValue); },
        "citationTemplate": n => { filePlanDescriptor.citationTemplate = n.getObjectValue<CitationTemplate>(createCitationTemplateFromDiscriminatorValue); },
        "department": n => { filePlanDescriptor.department = n.getObjectValue<Department>(createDepartmentFromDiscriminatorValue); },
        "departmentTemplate": n => { filePlanDescriptor.departmentTemplate = n.getObjectValue<DepartmentTemplate>(createDepartmentTemplateFromDiscriminatorValue); },
        "filePlanReference": n => { filePlanDescriptor.filePlanReference = n.getObjectValue<FilePlanReference>(createFilePlanReferenceFromDiscriminatorValue); },
        "filePlanReferenceTemplate": n => { filePlanDescriptor.filePlanReferenceTemplate = n.getObjectValue<FilePlanReferenceTemplate>(createFilePlanReferenceTemplateFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoFilePlanDescriptorBase(filePlanDescriptorBase: FilePlanDescriptorBase | undefined = {} as FilePlanDescriptorBase) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { filePlanDescriptorBase.backingStoreEnabled = true; },
        "displayName": n => { filePlanDescriptorBase.displayName = n.getStringValue(); },
        "@odata.type": n => { filePlanDescriptorBase.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoFilePlanDescriptorTemplate(filePlanDescriptorTemplate: FilePlanDescriptorTemplate | undefined = {} as FilePlanDescriptorTemplate) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(filePlanDescriptorTemplate),
        "createdBy": n => { filePlanDescriptorTemplate.createdBy = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "createdDateTime": n => { filePlanDescriptorTemplate.createdDateTime = n.getDateValue(); },
        "displayName": n => { filePlanDescriptorTemplate.displayName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoFilePlanReference(filePlanReference: FilePlanReference | undefined = {} as FilePlanReference) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoFilePlanDescriptorBase(filePlanReference),
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoFilePlanReferenceTemplate(filePlanReferenceTemplate: FilePlanReferenceTemplate | undefined = {} as FilePlanReferenceTemplate) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoFilePlanDescriptorTemplate(filePlanReferenceTemplate),
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoFilePlanReferenceTemplateCollectionResponse(filePlanReferenceTemplateCollectionResponse: FilePlanReferenceTemplateCollectionResponse | undefined = {} as FilePlanReferenceTemplateCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(filePlanReferenceTemplateCollectionResponse),
        "value": n => { filePlanReferenceTemplateCollectionResponse.value = n.getCollectionOfObjectValues<FilePlanReferenceTemplate>(createFilePlanReferenceTemplateFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoFileThreatSubmission(fileThreatSubmission: FileThreatSubmission | undefined = {} as FileThreatSubmission) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoThreatSubmission(fileThreatSubmission),
        "fileName": n => { fileThreatSubmission.fileName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoFileThreatSubmissionCollectionResponse(fileThreatSubmissionCollectionResponse: FileThreatSubmissionCollectionResponse | undefined = {} as FileThreatSubmissionCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(fileThreatSubmissionCollectionResponse),
        "value": n => { fileThreatSubmissionCollectionResponse.value = n.getCollectionOfObjectValues<FileThreatSubmission>(createFileThreatSubmissionFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoFileUrlThreatSubmission(fileUrlThreatSubmission: FileUrlThreatSubmission | undefined = {} as FileUrlThreatSubmission) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoFileThreatSubmission(fileUrlThreatSubmission),
        "fileUrl": n => { fileUrlThreatSubmission.fileUrl = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoForceUserPasswordResetResponseAction(forceUserPasswordResetResponseAction: ForceUserPasswordResetResponseAction | undefined = {} as ForceUserPasswordResetResponseAction) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoResponseAction(forceUserPasswordResetResponseAction),
        "identifier": n => { forceUserPasswordResetResponseAction.identifier = n.getCollectionOfEnumValues<ForceUserPasswordResetEntityIdentifier>(ForceUserPasswordResetEntityIdentifierObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoFormattedContent(formattedContent: FormattedContent | undefined = {} as FormattedContent) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { formattedContent.backingStoreEnabled = true; },
        "content": n => { formattedContent.content = n.getStringValue(); },
        "format": n => { formattedContent.format = n.getEnumValue<ContentFormat>(ContentFormatObject); },
        "@odata.type": n => { formattedContent.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoGitHubOrganizationEvidence(gitHubOrganizationEvidence: GitHubOrganizationEvidence | undefined = {} as GitHubOrganizationEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(gitHubOrganizationEvidence),
        "company": n => { gitHubOrganizationEvidence.company = n.getStringValue(); },
        "displayName": n => { gitHubOrganizationEvidence.displayName = n.getStringValue(); },
        "email": n => { gitHubOrganizationEvidence.email = n.getStringValue(); },
        "login": n => { gitHubOrganizationEvidence.login = n.getStringValue(); },
        "orgId": n => { gitHubOrganizationEvidence.orgId = n.getStringValue(); },
        "webUrl": n => { gitHubOrganizationEvidence.webUrl = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoGitHubRepoEvidence(gitHubRepoEvidence: GitHubRepoEvidence | undefined = {} as GitHubRepoEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(gitHubRepoEvidence),
        "baseUrl": n => { gitHubRepoEvidence.baseUrl = n.getStringValue(); },
        "login": n => { gitHubRepoEvidence.login = n.getStringValue(); },
        "owner": n => { gitHubRepoEvidence.owner = n.getStringValue(); },
        "ownerType": n => { gitHubRepoEvidence.ownerType = n.getStringValue(); },
        "repoId": n => { gitHubRepoEvidence.repoId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoGitHubUserEvidence(gitHubUserEvidence: GitHubUserEvidence | undefined = {} as GitHubUserEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(gitHubUserEvidence),
        "email": n => { gitHubUserEvidence.email = n.getStringValue(); },
        "login": n => { gitHubUserEvidence.login = n.getStringValue(); },
        "name": n => { gitHubUserEvidence.name = n.getStringValue(); },
        "userId": n => { gitHubUserEvidence.userId = n.getStringValue(); },
        "webUrl": n => { gitHubUserEvidence.webUrl = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoGoogleCloudResourceEvidence(googleCloudResourceEvidence: GoogleCloudResourceEvidence | undefined = {} as GoogleCloudResourceEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(googleCloudResourceEvidence),
        "location": n => { googleCloudResourceEvidence.location = n.getStringValue(); },
        "locationType": n => { googleCloudResourceEvidence.locationType = n.getEnumValue<GoogleCloudLocationType>(GoogleCloudLocationTypeObject); },
        "projectId": n => { googleCloudResourceEvidence.projectId = n.getStringValue(); },
        "projectNumber": n => { googleCloudResourceEvidence.projectNumber = n.getNumberValue(); },
        "resourceName": n => { googleCloudResourceEvidence.resourceName = n.getStringValue(); },
        "resourceType": n => { googleCloudResourceEvidence.resourceType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoHardDeleteResponseAction(hardDeleteResponseAction: HardDeleteResponseAction | undefined = {} as HardDeleteResponseAction) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoResponseAction(hardDeleteResponseAction),
        "identifier": n => { hardDeleteResponseAction.identifier = n.getCollectionOfEnumValues<EmailEntityIdentifier>(EmailEntityIdentifierObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoHost(host: Host | undefined = {} as Host) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoArtifact(host),
        "childHostPairs": n => { host.childHostPairs = n.getCollectionOfObjectValues<HostPair>(createHostPairFromDiscriminatorValue); },
        "components": n => { host.components = n.getCollectionOfObjectValues<HostComponent>(createHostComponentFromDiscriminatorValue); },
        "cookies": n => { host.cookies = n.getCollectionOfObjectValues<HostCookie>(createHostCookieFromDiscriminatorValue); },
        "firstSeenDateTime": n => { host.firstSeenDateTime = n.getDateValue(); },
        "hostPairs": n => { host.hostPairs = n.getCollectionOfObjectValues<HostPair>(createHostPairFromDiscriminatorValue); },
        "lastSeenDateTime": n => { host.lastSeenDateTime = n.getDateValue(); },
        "parentHostPairs": n => { host.parentHostPairs = n.getCollectionOfObjectValues<HostPair>(createHostPairFromDiscriminatorValue); },
        "passiveDns": n => { host.passiveDns = n.getCollectionOfObjectValues<PassiveDnsRecord>(createPassiveDnsRecordFromDiscriminatorValue); },
        "passiveDnsReverse": n => { host.passiveDnsReverse = n.getCollectionOfObjectValues<PassiveDnsRecord>(createPassiveDnsRecordFromDiscriminatorValue); },
        "ports": n => { host.ports = n.getCollectionOfObjectValues<HostPort>(createHostPortFromDiscriminatorValue); },
        "reputation": n => { host.reputation = n.getObjectValue<HostReputation>(createHostReputationFromDiscriminatorValue); },
        "sslCertificates": n => { host.sslCertificates = n.getCollectionOfObjectValues<HostSslCertificate>(createHostSslCertificateFromDiscriminatorValue); },
        "subdomains": n => { host.subdomains = n.getCollectionOfObjectValues<Subdomain>(createSubdomainFromDiscriminatorValue); },
        "trackers": n => { host.trackers = n.getCollectionOfObjectValues<HostTracker>(createHostTrackerFromDiscriminatorValue); },
        "whois": n => { host.whois = n.getObjectValue<WhoisRecord>(createWhoisRecordFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoHostCollectionResponse(hostCollectionResponse: HostCollectionResponse | undefined = {} as HostCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(hostCollectionResponse),
        "value": n => { hostCollectionResponse.value = n.getCollectionOfObjectValues<Host>(createHostFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoHostComponent(hostComponent: HostComponent | undefined = {} as HostComponent) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoArtifact(hostComponent),
        "category": n => { hostComponent.category = n.getStringValue(); },
        "firstSeenDateTime": n => { hostComponent.firstSeenDateTime = n.getDateValue(); },
        "host": n => { hostComponent.host = n.getObjectValue<Host>(createHostFromDiscriminatorValue); },
        "lastSeenDateTime": n => { hostComponent.lastSeenDateTime = n.getDateValue(); },
        "name": n => { hostComponent.name = n.getStringValue(); },
        "version": n => { hostComponent.version = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoHostComponentCollectionResponse(hostComponentCollectionResponse: HostComponentCollectionResponse | undefined = {} as HostComponentCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(hostComponentCollectionResponse),
        "value": n => { hostComponentCollectionResponse.value = n.getCollectionOfObjectValues<HostComponent>(createHostComponentFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoHostCookie(hostCookie: HostCookie | undefined = {} as HostCookie) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoArtifact(hostCookie),
        "domain": n => { hostCookie.domain = n.getStringValue(); },
        "firstSeenDateTime": n => { hostCookie.firstSeenDateTime = n.getDateValue(); },
        "host": n => { hostCookie.host = n.getObjectValue<Host>(createHostFromDiscriminatorValue); },
        "lastSeenDateTime": n => { hostCookie.lastSeenDateTime = n.getDateValue(); },
        "name": n => { hostCookie.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoHostCookieCollectionResponse(hostCookieCollectionResponse: HostCookieCollectionResponse | undefined = {} as HostCookieCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(hostCookieCollectionResponse),
        "value": n => { hostCookieCollectionResponse.value = n.getCollectionOfObjectValues<HostCookie>(createHostCookieFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoHostLogonSessionEvidence(hostLogonSessionEvidence: HostLogonSessionEvidence | undefined = {} as HostLogonSessionEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(hostLogonSessionEvidence),
        "account": n => { hostLogonSessionEvidence.account = n.getObjectValue<UserEvidence>(createUserEvidenceFromDiscriminatorValue); },
        "endUtcDateTime": n => { hostLogonSessionEvidence.endUtcDateTime = n.getDateValue(); },
        "host": n => { hostLogonSessionEvidence.host = n.getObjectValue<DeviceEvidence>(createDeviceEvidenceFromDiscriminatorValue); },
        "sessionId": n => { hostLogonSessionEvidence.sessionId = n.getStringValue(); },
        "startUtcDateTime": n => { hostLogonSessionEvidence.startUtcDateTime = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoHostname(hostname: Hostname | undefined = {} as Hostname) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoHost(hostname),
        "registrant": n => { hostname.registrant = n.getStringValue(); },
        "registrar": n => { hostname.registrar = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoHostPair(hostPair: HostPair | undefined = {} as HostPair) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(hostPair),
        "childHost": n => { hostPair.childHost = n.getObjectValue<Host>(createHostFromDiscriminatorValue); },
        "firstSeenDateTime": n => { hostPair.firstSeenDateTime = n.getDateValue(); },
        "lastSeenDateTime": n => { hostPair.lastSeenDateTime = n.getDateValue(); },
        "linkKind": n => { hostPair.linkKind = n.getStringValue(); },
        "parentHost": n => { hostPair.parentHost = n.getObjectValue<Host>(createHostFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoHostPairCollectionResponse(hostPairCollectionResponse: HostPairCollectionResponse | undefined = {} as HostPairCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(hostPairCollectionResponse),
        "value": n => { hostPairCollectionResponse.value = n.getCollectionOfObjectValues<HostPair>(createHostPairFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoHostPort(hostPort: HostPort | undefined = {} as HostPort) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(hostPort),
        "banners": n => { hostPort.banners = n.getCollectionOfObjectValues<HostPortBanner>(createHostPortBannerFromDiscriminatorValue); },
        "firstSeenDateTime": n => { hostPort.firstSeenDateTime = n.getDateValue(); },
        "host": n => { hostPort.host = n.getObjectValue<Host>(createHostFromDiscriminatorValue); },
        "lastScanDateTime": n => { hostPort.lastScanDateTime = n.getDateValue(); },
        "lastSeenDateTime": n => { hostPort.lastSeenDateTime = n.getDateValue(); },
        "mostRecentSslCertificate": n => { hostPort.mostRecentSslCertificate = n.getObjectValue<SslCertificate>(createSslCertificateFromDiscriminatorValue); },
        "port": n => { hostPort.port = n.getNumberValue(); },
        "protocol": n => { hostPort.protocol = n.getEnumValue<HostPortProtocol>(HostPortProtocolObject); },
        "services": n => { hostPort.services = n.getCollectionOfObjectValues<HostPortComponent>(createHostPortComponentFromDiscriminatorValue); },
        "status": n => { hostPort.status = n.getEnumValue<HostPortStatus>(HostPortStatusObject); },
        "timesObserved": n => { hostPort.timesObserved = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoHostPortBanner(hostPortBanner: HostPortBanner | undefined = {} as HostPortBanner) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { hostPortBanner.backingStoreEnabled = true; },
        "banner": n => { hostPortBanner.banner = n.getStringValue(); },
        "firstSeenDateTime": n => { hostPortBanner.firstSeenDateTime = n.getDateValue(); },
        "lastSeenDateTime": n => { hostPortBanner.lastSeenDateTime = n.getDateValue(); },
        "@odata.type": n => { hostPortBanner.odataType = n.getStringValue(); },
        "scanProtocol": n => { hostPortBanner.scanProtocol = n.getStringValue(); },
        "timesObserved": n => { hostPortBanner.timesObserved = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoHostPortCollectionResponse(hostPortCollectionResponse: HostPortCollectionResponse | undefined = {} as HostPortCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(hostPortCollectionResponse),
        "value": n => { hostPortCollectionResponse.value = n.getCollectionOfObjectValues<HostPort>(createHostPortFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoHostPortComponent(hostPortComponent: HostPortComponent | undefined = {} as HostPortComponent) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { hostPortComponent.backingStoreEnabled = true; },
        "component": n => { hostPortComponent.component = n.getObjectValue<HostComponent>(createHostComponentFromDiscriminatorValue); },
        "firstSeenDateTime": n => { hostPortComponent.firstSeenDateTime = n.getDateValue(); },
        "isRecent": n => { hostPortComponent.isRecent = n.getBooleanValue(); },
        "lastSeenDateTime": n => { hostPortComponent.lastSeenDateTime = n.getDateValue(); },
        "@odata.type": n => { hostPortComponent.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoHostReputation(hostReputation: HostReputation | undefined = {} as HostReputation) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(hostReputation),
        "classification": n => { hostReputation.classification = n.getEnumValue<HostReputationClassification>(HostReputationClassificationObject); },
        "rules": n => { hostReputation.rules = n.getCollectionOfObjectValues<HostReputationRule>(createHostReputationRuleFromDiscriminatorValue); },
        "score": n => { hostReputation.score = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoHostReputationRule(hostReputationRule: HostReputationRule | undefined = {} as HostReputationRule) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { hostReputationRule.backingStoreEnabled = true; },
        "description": n => { hostReputationRule.description = n.getStringValue(); },
        "name": n => { hostReputationRule.name = n.getStringValue(); },
        "@odata.type": n => { hostReputationRule.odataType = n.getStringValue(); },
        "relatedDetailsUrl": n => { hostReputationRule.relatedDetailsUrl = n.getStringValue(); },
        "severity": n => { hostReputationRule.severity = n.getEnumValue<HostReputationRuleSeverity>(HostReputationRuleSeverityObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoHostSslCertificate(hostSslCertificate: HostSslCertificate | undefined = {} as HostSslCertificate) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoArtifact(hostSslCertificate),
        "firstSeenDateTime": n => { hostSslCertificate.firstSeenDateTime = n.getDateValue(); },
        "host": n => { hostSslCertificate.host = n.getObjectValue<Host>(createHostFromDiscriminatorValue); },
        "lastSeenDateTime": n => { hostSslCertificate.lastSeenDateTime = n.getDateValue(); },
        "ports": n => { hostSslCertificate.ports = n.getCollectionOfObjectValues<HostSslCertificatePort>(createHostSslCertificatePortFromDiscriminatorValue); },
        "sslCertificate": n => { hostSslCertificate.sslCertificate = n.getObjectValue<SslCertificate>(createSslCertificateFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoHostSslCertificateCollectionResponse(hostSslCertificateCollectionResponse: HostSslCertificateCollectionResponse | undefined = {} as HostSslCertificateCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(hostSslCertificateCollectionResponse),
        "value": n => { hostSslCertificateCollectionResponse.value = n.getCollectionOfObjectValues<HostSslCertificate>(createHostSslCertificateFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoHostSslCertificatePort(hostSslCertificatePort: HostSslCertificatePort | undefined = {} as HostSslCertificatePort) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { hostSslCertificatePort.backingStoreEnabled = true; },
        "firstSeenDateTime": n => { hostSslCertificatePort.firstSeenDateTime = n.getDateValue(); },
        "lastSeenDateTime": n => { hostSslCertificatePort.lastSeenDateTime = n.getDateValue(); },
        "@odata.type": n => { hostSslCertificatePort.odataType = n.getStringValue(); },
        "port": n => { hostSslCertificatePort.port = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoHostTracker(hostTracker: HostTracker | undefined = {} as HostTracker) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoArtifact(hostTracker),
        "firstSeenDateTime": n => { hostTracker.firstSeenDateTime = n.getDateValue(); },
        "host": n => { hostTracker.host = n.getObjectValue<Host>(createHostFromDiscriminatorValue); },
        "kind": n => { hostTracker.kind = n.getStringValue(); },
        "lastSeenDateTime": n => { hostTracker.lastSeenDateTime = n.getDateValue(); },
        "value": n => { hostTracker.value = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoHostTrackerCollectionResponse(hostTrackerCollectionResponse: HostTrackerCollectionResponse | undefined = {} as HostTrackerCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(hostTrackerCollectionResponse),
        "value": n => { hostTrackerCollectionResponse.value = n.getCollectionOfObjectValues<HostTracker>(createHostTrackerFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoHuntingQueryResults(huntingQueryResults: HuntingQueryResults | undefined = {} as HuntingQueryResults) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { huntingQueryResults.backingStoreEnabled = true; },
        "@odata.type": n => { huntingQueryResults.odataType = n.getStringValue(); },
        "results": n => { huntingQueryResults.results = n.getCollectionOfObjectValues<HuntingRowResult>(createHuntingRowResultFromDiscriminatorValue); },
        "schema": n => { huntingQueryResults.schema = n.getCollectionOfObjectValues<SinglePropertySchema>(createSinglePropertySchemaFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoHuntingRowResult(huntingRowResult: HuntingRowResult | undefined = {} as HuntingRowResult) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { huntingRowResult.backingStoreEnabled = true; },
        "@odata.type": n => { huntingRowResult.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoHyperlink(hyperlink: Hyperlink | undefined = {} as Hyperlink) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { hyperlink.backingStoreEnabled = true; },
        "name": n => { hyperlink.name = n.getStringValue(); },
        "@odata.type": n => { hyperlink.odataType = n.getStringValue(); },
        "url": n => { hyperlink.url = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoImpactedAsset(impactedAsset: ImpactedAsset | undefined = {} as ImpactedAsset) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { impactedAsset.backingStoreEnabled = true; },
        "@odata.type": n => { impactedAsset.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoImpactedDeviceAsset(impactedDeviceAsset: ImpactedDeviceAsset | undefined = {} as ImpactedDeviceAsset) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoImpactedAsset(impactedDeviceAsset),
        "identifier": n => { impactedDeviceAsset.identifier = n.getEnumValue<DeviceAssetIdentifier>(DeviceAssetIdentifierObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoImpactedMailboxAsset(impactedMailboxAsset: ImpactedMailboxAsset | undefined = {} as ImpactedMailboxAsset) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoImpactedAsset(impactedMailboxAsset),
        "identifier": n => { impactedMailboxAsset.identifier = n.getEnumValue<MailboxAssetIdentifier>(MailboxAssetIdentifierObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoImpactedUserAsset(impactedUserAsset: ImpactedUserAsset | undefined = {} as ImpactedUserAsset) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoImpactedAsset(impactedUserAsset),
        "identifier": n => { impactedUserAsset.identifier = n.getEnumValue<UserAssetIdentifier>(UserAssetIdentifierObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoIncident(incident: Incident | undefined = {} as Incident) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(incident),
        "alerts": n => { incident.alerts = n.getCollectionOfObjectValues<Alert>(createAlertFromDiscriminatorValue); },
        "assignedTo": n => { incident.assignedTo = n.getStringValue(); },
        "classification": n => { incident.classification = n.getEnumValue<AlertClassification>(AlertClassificationObject); },
        "comments": n => { incident.comments = n.getCollectionOfObjectValues<AlertComment>(createAlertCommentFromDiscriminatorValue); },
        "createdDateTime": n => { incident.createdDateTime = n.getDateValue(); },
        "customTags": n => { incident.customTags = n.getCollectionOfPrimitiveValues<string>(); },
        "description": n => { incident.description = n.getStringValue(); },
        "determination": n => { incident.determination = n.getEnumValue<AlertDetermination>(AlertDeterminationObject); },
        "displayName": n => { incident.displayName = n.getStringValue(); },
        "incidentWebUrl": n => { incident.incidentWebUrl = n.getStringValue(); },
        "lastModifiedBy": n => { incident.lastModifiedBy = n.getStringValue(); },
        "lastUpdateDateTime": n => { incident.lastUpdateDateTime = n.getDateValue(); },
        "recommendedActions": n => { incident.recommendedActions = n.getStringValue(); },
        "recommendedHuntingQueries": n => { incident.recommendedHuntingQueries = n.getCollectionOfObjectValues<RecommendedHuntingQuery>(createRecommendedHuntingQueryFromDiscriminatorValue); },
        "redirectIncidentId": n => { incident.redirectIncidentId = n.getStringValue(); },
        "severity": n => { incident.severity = n.getEnumValue<AlertSeverity>(AlertSeverityObject); },
        "status": n => { incident.status = n.getEnumValue<IncidentStatus>(IncidentStatusObject); },
        "systemTags": n => { incident.systemTags = n.getCollectionOfPrimitiveValues<string>(); },
        "tenantId": n => { incident.tenantId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoIncidentCollectionResponse(incidentCollectionResponse: IncidentCollectionResponse | undefined = {} as IncidentCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(incidentCollectionResponse),
        "value": n => { incidentCollectionResponse.value = n.getCollectionOfObjectValues<Incident>(createIncidentFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoIndicator(indicator: Indicator | undefined = {} as Indicator) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(indicator),
        "artifact": n => { indicator.artifact = n.getObjectValue<Artifact>(createArtifactFromDiscriminatorValue); },
        "source": n => { indicator.source = n.getEnumValue<IndicatorSource>(IndicatorSourceObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoInformationProtection(informationProtection: InformationProtection | undefined = {} as InformationProtection) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(informationProtection),
        "labelPolicySettings": n => { informationProtection.labelPolicySettings = n.getObjectValue<InformationProtectionPolicySetting>(createInformationProtectionPolicySettingFromDiscriminatorValue); },
        "sensitivityLabels": n => { informationProtection.sensitivityLabels = n.getCollectionOfObjectValues<SensitivityLabel>(createSensitivityLabelFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoInformationProtectionAction(informationProtectionAction: InformationProtectionAction | undefined = {} as InformationProtectionAction) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { informationProtectionAction.backingStoreEnabled = true; },
        "@odata.type": n => { informationProtectionAction.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoInformationProtectionPolicySetting(informationProtectionPolicySetting: InformationProtectionPolicySetting | undefined = {} as InformationProtectionPolicySetting) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(informationProtectionPolicySetting),
        "defaultLabelId": n => { informationProtectionPolicySetting.defaultLabelId = n.getStringValue(); },
        "isDowngradeJustificationRequired": n => { informationProtectionPolicySetting.isDowngradeJustificationRequired = n.getBooleanValue(); },
        "isMandatory": n => { informationProtectionPolicySetting.isMandatory = n.getBooleanValue(); },
        "moreInfoUrl": n => { informationProtectionPolicySetting.moreInfoUrl = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoInitiateInvestigationResponseAction(initiateInvestigationResponseAction: InitiateInvestigationResponseAction | undefined = {} as InitiateInvestigationResponseAction) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoResponseAction(initiateInvestigationResponseAction),
        "identifier": n => { initiateInvestigationResponseAction.identifier = n.getCollectionOfEnumValues<DeviceIdEntityIdentifier>(DeviceIdEntityIdentifierObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoIntelligenceProfile(intelligenceProfile: IntelligenceProfile | undefined = {} as IntelligenceProfile) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(intelligenceProfile),
        "aliases": n => { intelligenceProfile.aliases = n.getCollectionOfPrimitiveValues<string>(); },
        "countriesOrRegionsOfOrigin": n => { intelligenceProfile.countriesOrRegionsOfOrigin = n.getCollectionOfObjectValues<IntelligenceProfileCountryOrRegionOfOrigin>(createIntelligenceProfileCountryOrRegionOfOriginFromDiscriminatorValue); },
        "description": n => { intelligenceProfile.description = n.getObjectValue<FormattedContent>(createFormattedContentFromDiscriminatorValue); },
        "firstActiveDateTime": n => { intelligenceProfile.firstActiveDateTime = n.getDateValue(); },
        "indicators": n => { intelligenceProfile.indicators = n.getCollectionOfObjectValues<IntelligenceProfileIndicator>(createIntelligenceProfileIndicatorFromDiscriminatorValue); },
        "kind": n => { intelligenceProfile.kind = n.getEnumValue<IntelligenceProfileKind>(IntelligenceProfileKindObject); },
        "summary": n => { intelligenceProfile.summary = n.getObjectValue<FormattedContent>(createFormattedContentFromDiscriminatorValue); },
        "targets": n => { intelligenceProfile.targets = n.getCollectionOfPrimitiveValues<string>(); },
        "title": n => { intelligenceProfile.title = n.getStringValue(); },
        "tradecraft": n => { intelligenceProfile.tradecraft = n.getObjectValue<FormattedContent>(createFormattedContentFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoIntelligenceProfileCollectionResponse(intelligenceProfileCollectionResponse: IntelligenceProfileCollectionResponse | undefined = {} as IntelligenceProfileCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(intelligenceProfileCollectionResponse),
        "value": n => { intelligenceProfileCollectionResponse.value = n.getCollectionOfObjectValues<IntelligenceProfile>(createIntelligenceProfileFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoIntelligenceProfileCountryOrRegionOfOrigin(intelligenceProfileCountryOrRegionOfOrigin: IntelligenceProfileCountryOrRegionOfOrigin | undefined = {} as IntelligenceProfileCountryOrRegionOfOrigin) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { intelligenceProfileCountryOrRegionOfOrigin.backingStoreEnabled = true; },
        "code": n => { intelligenceProfileCountryOrRegionOfOrigin.code = n.getStringValue(); },
        "label": n => { intelligenceProfileCountryOrRegionOfOrigin.label = n.getStringValue(); },
        "@odata.type": n => { intelligenceProfileCountryOrRegionOfOrigin.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoIntelligenceProfileIndicator(intelligenceProfileIndicator: IntelligenceProfileIndicator | undefined = {} as IntelligenceProfileIndicator) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIndicator(intelligenceProfileIndicator),
        "firstSeenDateTime": n => { intelligenceProfileIndicator.firstSeenDateTime = n.getDateValue(); },
        "lastSeenDateTime": n => { intelligenceProfileIndicator.lastSeenDateTime = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoIntelligenceProfileIndicatorCollectionResponse(intelligenceProfileIndicatorCollectionResponse: IntelligenceProfileIndicatorCollectionResponse | undefined = {} as IntelligenceProfileIndicatorCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(intelligenceProfileIndicatorCollectionResponse),
        "value": n => { intelligenceProfileIndicatorCollectionResponse.value = n.getCollectionOfObjectValues<IntelligenceProfileIndicator>(createIntelligenceProfileIndicatorFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoIoTDeviceEvidence(ioTDeviceEvidence: IoTDeviceEvidence | undefined = {} as IoTDeviceEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(ioTDeviceEvidence),
        "deviceId": n => { ioTDeviceEvidence.deviceId = n.getStringValue(); },
        "deviceName": n => { ioTDeviceEvidence.deviceName = n.getStringValue(); },
        "devicePageLink": n => { ioTDeviceEvidence.devicePageLink = n.getStringValue(); },
        "deviceSubType": n => { ioTDeviceEvidence.deviceSubType = n.getStringValue(); },
        "deviceType": n => { ioTDeviceEvidence.deviceType = n.getStringValue(); },
        "importance": n => { ioTDeviceEvidence.importance = n.getEnumValue<IoTDeviceImportanceType>(IoTDeviceImportanceTypeObject); },
        "ioTHub": n => { ioTDeviceEvidence.ioTHub = n.getObjectValue<AzureResourceEvidence>(createAzureResourceEvidenceFromDiscriminatorValue); },
        "ioTSecurityAgentId": n => { ioTDeviceEvidence.ioTSecurityAgentId = n.getStringValue(); },
        "ipAddress": n => { ioTDeviceEvidence.ipAddress = n.getObjectValue<IpEvidence>(createIpEvidenceFromDiscriminatorValue); },
        "isAuthorized": n => { ioTDeviceEvidence.isAuthorized = n.getBooleanValue(); },
        "isProgramming": n => { ioTDeviceEvidence.isProgramming = n.getBooleanValue(); },
        "isScanner": n => { ioTDeviceEvidence.isScanner = n.getBooleanValue(); },
        "macAddress": n => { ioTDeviceEvidence.macAddress = n.getStringValue(); },
        "manufacturer": n => { ioTDeviceEvidence.manufacturer = n.getStringValue(); },
        "model": n => { ioTDeviceEvidence.model = n.getStringValue(); },
        "nics": n => { ioTDeviceEvidence.nics = n.getObjectValue<NicEvidence>(createNicEvidenceFromDiscriminatorValue); },
        "operatingSystem": n => { ioTDeviceEvidence.operatingSystem = n.getStringValue(); },
        "owners": n => { ioTDeviceEvidence.owners = n.getCollectionOfPrimitiveValues<string>(); },
        "protocols": n => { ioTDeviceEvidence.protocols = n.getCollectionOfPrimitiveValues<string>(); },
        "purdueLayer": n => { ioTDeviceEvidence.purdueLayer = n.getStringValue(); },
        "sensor": n => { ioTDeviceEvidence.sensor = n.getStringValue(); },
        "serialNumber": n => { ioTDeviceEvidence.serialNumber = n.getStringValue(); },
        "site": n => { ioTDeviceEvidence.site = n.getStringValue(); },
        "source": n => { ioTDeviceEvidence.source = n.getStringValue(); },
        "sourceRef": n => { ioTDeviceEvidence.sourceRef = n.getObjectValue<UrlEvidence>(createUrlEvidenceFromDiscriminatorValue); },
        "zone": n => { ioTDeviceEvidence.zone = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoIpAddress(ipAddress: IpAddress | undefined = {} as IpAddress) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoHost(ipAddress),
        "autonomousSystem": n => { ipAddress.autonomousSystem = n.getObjectValue<AutonomousSystem>(createAutonomousSystemFromDiscriminatorValue); },
        "countryOrRegion": n => { ipAddress.countryOrRegion = n.getStringValue(); },
        "hostingProvider": n => { ipAddress.hostingProvider = n.getStringValue(); },
        "netblock": n => { ipAddress.netblock = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoIpEvidence(ipEvidence: IpEvidence | undefined = {} as IpEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(ipEvidence),
        "countryLetterCode": n => { ipEvidence.countryLetterCode = n.getStringValue(); },
        "ipAddress": n => { ipEvidence.ipAddress = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoIsolateDeviceResponseAction(isolateDeviceResponseAction: IsolateDeviceResponseAction | undefined = {} as IsolateDeviceResponseAction) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoResponseAction(isolateDeviceResponseAction),
        "identifier": n => { isolateDeviceResponseAction.identifier = n.getCollectionOfEnumValues<DeviceIdEntityIdentifier>(DeviceIdEntityIdentifierObject); },
        "isolationType": n => { isolateDeviceResponseAction.isolationType = n.getEnumValue<IsolationType>(IsolationTypeObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoJustifyAction(justifyAction: JustifyAction | undefined = {} as JustifyAction) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoInformationProtectionAction(justifyAction),
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoKeyValuePair(keyValuePair: KeyValuePair | undefined = {} as KeyValuePair) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { keyValuePair.backingStoreEnabled = true; },
        "name": n => { keyValuePair.name = n.getStringValue(); },
        "@odata.type": n => { keyValuePair.odataType = n.getStringValue(); },
        "value": n => { keyValuePair.value = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoKubernetesClusterEvidence(kubernetesClusterEvidence: KubernetesClusterEvidence | undefined = {} as KubernetesClusterEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(kubernetesClusterEvidence),
        "cloudResource": n => { kubernetesClusterEvidence.cloudResource = n.getObjectValue<AlertEvidence>(createAlertEvidenceFromDiscriminatorValue); },
        "distribution": n => { kubernetesClusterEvidence.distribution = n.getStringValue(); },
        "name": n => { kubernetesClusterEvidence.name = n.getStringValue(); },
        "platform": n => { kubernetesClusterEvidence.platform = n.getEnumValue<KubernetesPlatform>(KubernetesPlatformObject); },
        "version": n => { kubernetesClusterEvidence.version = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoKubernetesControllerEvidence(kubernetesControllerEvidence: KubernetesControllerEvidence | undefined = {} as KubernetesControllerEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(kubernetesControllerEvidence),
        "labels": n => { kubernetesControllerEvidence.labels = n.getObjectValue<Dictionary>(createDictionaryFromDiscriminatorValue); },
        "name": n => { kubernetesControllerEvidence.name = n.getStringValue(); },
        "namespace": n => { kubernetesControllerEvidence.namespace = n.getObjectValue<KubernetesNamespaceEvidence>(createKubernetesNamespaceEvidenceFromDiscriminatorValue); },
        "type": n => { kubernetesControllerEvidence.type = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoKubernetesNamespaceEvidence(kubernetesNamespaceEvidence: KubernetesNamespaceEvidence | undefined = {} as KubernetesNamespaceEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(kubernetesNamespaceEvidence),
        "cluster": n => { kubernetesNamespaceEvidence.cluster = n.getObjectValue<KubernetesClusterEvidence>(createKubernetesClusterEvidenceFromDiscriminatorValue); },
        "labels": n => { kubernetesNamespaceEvidence.labels = n.getObjectValue<Dictionary>(createDictionaryFromDiscriminatorValue); },
        "name": n => { kubernetesNamespaceEvidence.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoKubernetesPodEvidence(kubernetesPodEvidence: KubernetesPodEvidence | undefined = {} as KubernetesPodEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(kubernetesPodEvidence),
        "containers": n => { kubernetesPodEvidence.containers = n.getCollectionOfObjectValues<ContainerEvidence>(createContainerEvidenceFromDiscriminatorValue); },
        "controller": n => { kubernetesPodEvidence.controller = n.getObjectValue<KubernetesControllerEvidence>(createKubernetesControllerEvidenceFromDiscriminatorValue); },
        "ephemeralContainers": n => { kubernetesPodEvidence.ephemeralContainers = n.getCollectionOfObjectValues<ContainerEvidence>(createContainerEvidenceFromDiscriminatorValue); },
        "initContainers": n => { kubernetesPodEvidence.initContainers = n.getCollectionOfObjectValues<ContainerEvidence>(createContainerEvidenceFromDiscriminatorValue); },
        "labels": n => { kubernetesPodEvidence.labels = n.getObjectValue<Dictionary>(createDictionaryFromDiscriminatorValue); },
        "name": n => { kubernetesPodEvidence.name = n.getStringValue(); },
        "namespace": n => { kubernetesPodEvidence.namespace = n.getObjectValue<KubernetesNamespaceEvidence>(createKubernetesNamespaceEvidenceFromDiscriminatorValue); },
        "podIp": n => { kubernetesPodEvidence.podIp = n.getObjectValue<IpEvidence>(createIpEvidenceFromDiscriminatorValue); },
        "serviceAccount": n => { kubernetesPodEvidence.serviceAccount = n.getObjectValue<KubernetesServiceAccountEvidence>(createKubernetesServiceAccountEvidenceFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoKubernetesSecretEvidence(kubernetesSecretEvidence: KubernetesSecretEvidence | undefined = {} as KubernetesSecretEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(kubernetesSecretEvidence),
        "name": n => { kubernetesSecretEvidence.name = n.getStringValue(); },
        "namespace": n => { kubernetesSecretEvidence.namespace = n.getObjectValue<KubernetesNamespaceEvidence>(createKubernetesNamespaceEvidenceFromDiscriminatorValue); },
        "secretType": n => { kubernetesSecretEvidence.secretType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoKubernetesServiceAccountEvidence(kubernetesServiceAccountEvidence: KubernetesServiceAccountEvidence | undefined = {} as KubernetesServiceAccountEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(kubernetesServiceAccountEvidence),
        "name": n => { kubernetesServiceAccountEvidence.name = n.getStringValue(); },
        "namespace": n => { kubernetesServiceAccountEvidence.namespace = n.getObjectValue<KubernetesNamespaceEvidence>(createKubernetesNamespaceEvidenceFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoKubernetesServiceEvidence(kubernetesServiceEvidence: KubernetesServiceEvidence | undefined = {} as KubernetesServiceEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(kubernetesServiceEvidence),
        "clusterIP": n => { kubernetesServiceEvidence.clusterIP = n.getObjectValue<IpEvidence>(createIpEvidenceFromDiscriminatorValue); },
        "externalIPs": n => { kubernetesServiceEvidence.externalIPs = n.getCollectionOfObjectValues<IpEvidence>(createIpEvidenceFromDiscriminatorValue); },
        "labels": n => { kubernetesServiceEvidence.labels = n.getObjectValue<Dictionary>(createDictionaryFromDiscriminatorValue); },
        "name": n => { kubernetesServiceEvidence.name = n.getStringValue(); },
        "namespace": n => { kubernetesServiceEvidence.namespace = n.getObjectValue<KubernetesNamespaceEvidence>(createKubernetesNamespaceEvidenceFromDiscriminatorValue); },
        "selector": n => { kubernetesServiceEvidence.selector = n.getObjectValue<Dictionary>(createDictionaryFromDiscriminatorValue); },
        "servicePorts": n => { kubernetesServiceEvidence.servicePorts = n.getCollectionOfObjectValues<KubernetesServicePort>(createKubernetesServicePortFromDiscriminatorValue); },
        "serviceType": n => { kubernetesServiceEvidence.serviceType = n.getEnumValue<KubernetesServiceType>(KubernetesServiceTypeObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoKubernetesServicePort(kubernetesServicePort: KubernetesServicePort | undefined = {} as KubernetesServicePort) : Record<string, (node: ParseNode) => void> {
    return {
        "appProtocol": n => { kubernetesServicePort.appProtocol = n.getStringValue(); },
        "backingStoreEnabled": n => { kubernetesServicePort.backingStoreEnabled = true; },
        "name": n => { kubernetesServicePort.name = n.getStringValue(); },
        "nodePort": n => { kubernetesServicePort.nodePort = n.getNumberValue(); },
        "@odata.type": n => { kubernetesServicePort.odataType = n.getStringValue(); },
        "port": n => { kubernetesServicePort.port = n.getNumberValue(); },
        "protocol": n => { kubernetesServicePort.protocol = n.getEnumValue<ContainerPortProtocol>(ContainerPortProtocolObject); },
        "targetPort": n => { kubernetesServicePort.targetPort = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoLabelingOptions(labelingOptions: LabelingOptions | undefined = {} as LabelingOptions) : Record<string, (node: ParseNode) => void> {
    return {
        "assignmentMethod": n => { labelingOptions.assignmentMethod = n.getEnumValue<AssignmentMethod>(AssignmentMethodObject); },
        "backingStoreEnabled": n => { labelingOptions.backingStoreEnabled = true; },
        "downgradeJustification": n => { labelingOptions.downgradeJustification = n.getObjectValue<DowngradeJustification>(createDowngradeJustificationFromDiscriminatorValue); },
        "extendedProperties": n => { labelingOptions.extendedProperties = n.getCollectionOfObjectValues<KeyValuePair>(createKeyValuePairFromDiscriminatorValue); },
        "labelId": n => { labelingOptions.labelId = n.getStringValue(); },
        "@odata.type": n => { labelingOptions.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoLabelsRoot(labelsRoot: LabelsRoot | undefined = {} as LabelsRoot) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(labelsRoot),
        "authorities": n => { labelsRoot.authorities = n.getCollectionOfObjectValues<AuthorityTemplate>(createAuthorityTemplateFromDiscriminatorValue); },
        "categories": n => { labelsRoot.categories = n.getCollectionOfObjectValues<CategoryTemplate>(createCategoryTemplateFromDiscriminatorValue); },
        "citations": n => { labelsRoot.citations = n.getCollectionOfObjectValues<CitationTemplate>(createCitationTemplateFromDiscriminatorValue); },
        "departments": n => { labelsRoot.departments = n.getCollectionOfObjectValues<DepartmentTemplate>(createDepartmentTemplateFromDiscriminatorValue); },
        "filePlanReferences": n => { labelsRoot.filePlanReferences = n.getCollectionOfObjectValues<FilePlanReferenceTemplate>(createFilePlanReferenceTemplateFromDiscriminatorValue); },
        "retentionLabels": n => { labelsRoot.retentionLabels = n.getCollectionOfObjectValues<RetentionLabel>(createRetentionLabelFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoLoggedOnUser(loggedOnUser: LoggedOnUser | undefined = {} as LoggedOnUser) : Record<string, (node: ParseNode) => void> {
    return {
        "accountName": n => { loggedOnUser.accountName = n.getStringValue(); },
        "backingStoreEnabled": n => { loggedOnUser.backingStoreEnabled = true; },
        "domainName": n => { loggedOnUser.domainName = n.getStringValue(); },
        "@odata.type": n => { loggedOnUser.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoMailboxEvidence(mailboxEvidence: MailboxEvidence | undefined = {} as MailboxEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(mailboxEvidence),
        "displayName": n => { mailboxEvidence.displayName = n.getStringValue(); },
        "primaryAddress": n => { mailboxEvidence.primaryAddress = n.getStringValue(); },
        "userAccount": n => { mailboxEvidence.userAccount = n.getObjectValue<UserAccount>(createUserAccountFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoMailClusterEvidence(mailClusterEvidence: MailClusterEvidence | undefined = {} as MailClusterEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(mailClusterEvidence),
        "clusterBy": n => { mailClusterEvidence.clusterBy = n.getStringValue(); },
        "clusterByValue": n => { mailClusterEvidence.clusterByValue = n.getStringValue(); },
        "emailCount": n => { mailClusterEvidence.emailCount = n.getNumberValue(); },
        "networkMessageIds": n => { mailClusterEvidence.networkMessageIds = n.getCollectionOfPrimitiveValues<string>(); },
        "query": n => { mailClusterEvidence.query = n.getStringValue(); },
        "urn": n => { mailClusterEvidence.urn = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoMalwareEvidence(malwareEvidence: MalwareEvidence | undefined = {} as MalwareEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(malwareEvidence),
        "category": n => { malwareEvidence.category = n.getStringValue(); },
        "files": n => { malwareEvidence.files = n.getCollectionOfObjectValues<FileEvidence>(createFileEvidenceFromDiscriminatorValue); },
        "name": n => { malwareEvidence.name = n.getStringValue(); },
        "processes": n => { malwareEvidence.processes = n.getCollectionOfObjectValues<ProcessEvidence>(createProcessEvidenceFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoMarkUserAsCompromisedResponseAction(markUserAsCompromisedResponseAction: MarkUserAsCompromisedResponseAction | undefined = {} as MarkUserAsCompromisedResponseAction) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoResponseAction(markUserAsCompromisedResponseAction),
        "identifier": n => { markUserAsCompromisedResponseAction.identifier = n.getCollectionOfEnumValues<MarkUserAsCompromisedEntityIdentifier>(MarkUserAsCompromisedEntityIdentifierObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoMetadataAction(metadataAction: MetadataAction | undefined = {} as MetadataAction) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoInformationProtectionAction(metadataAction),
        "metadataToAdd": n => { metadataAction.metadataToAdd = n.getCollectionOfObjectValues<KeyValuePair>(createKeyValuePairFromDiscriminatorValue); },
        "metadataToRemove": n => { metadataAction.metadataToRemove = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoMoveToDeletedItemsResponseAction(moveToDeletedItemsResponseAction: MoveToDeletedItemsResponseAction | undefined = {} as MoveToDeletedItemsResponseAction) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoResponseAction(moveToDeletedItemsResponseAction),
        "identifier": n => { moveToDeletedItemsResponseAction.identifier = n.getCollectionOfEnumValues<EmailEntityIdentifier>(EmailEntityIdentifierObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoMoveToInboxResponseAction(moveToInboxResponseAction: MoveToInboxResponseAction | undefined = {} as MoveToInboxResponseAction) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoResponseAction(moveToInboxResponseAction),
        "identifier": n => { moveToInboxResponseAction.identifier = n.getCollectionOfEnumValues<EmailEntityIdentifier>(EmailEntityIdentifierObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoMoveToJunkResponseAction(moveToJunkResponseAction: MoveToJunkResponseAction | undefined = {} as MoveToJunkResponseAction) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoResponseAction(moveToJunkResponseAction),
        "identifier": n => { moveToJunkResponseAction.identifier = n.getCollectionOfEnumValues<EmailEntityIdentifier>(EmailEntityIdentifierObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoNetworkConnectionEvidence(networkConnectionEvidence: NetworkConnectionEvidence | undefined = {} as NetworkConnectionEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(networkConnectionEvidence),
        "destinationAddress": n => { networkConnectionEvidence.destinationAddress = n.getObjectValue<IpEvidence>(createIpEvidenceFromDiscriminatorValue); },
        "destinationPort": n => { networkConnectionEvidence.destinationPort = n.getNumberValue(); },
        "protocol": n => { networkConnectionEvidence.protocol = n.getEnumValue<ProtocolType>(ProtocolTypeObject); },
        "sourceAddress": n => { networkConnectionEvidence.sourceAddress = n.getObjectValue<IpEvidence>(createIpEvidenceFromDiscriminatorValue); },
        "sourcePort": n => { networkConnectionEvidence.sourcePort = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoNicEvidence(nicEvidence: NicEvidence | undefined = {} as NicEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(nicEvidence),
        "ipAddress": n => { nicEvidence.ipAddress = n.getObjectValue<IpEvidence>(createIpEvidenceFromDiscriminatorValue); },
        "macAddress": n => { nicEvidence.macAddress = n.getStringValue(); },
        "vlans": n => { nicEvidence.vlans = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoOauthApplicationEvidence(oauthApplicationEvidence: OauthApplicationEvidence | undefined = {} as OauthApplicationEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(oauthApplicationEvidence),
        "appId": n => { oauthApplicationEvidence.appId = n.getStringValue(); },
        "displayName": n => { oauthApplicationEvidence.displayName = n.getStringValue(); },
        "objectId": n => { oauthApplicationEvidence.objectId = n.getStringValue(); },
        "publisher": n => { oauthApplicationEvidence.publisher = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoOcrSettings(ocrSettings: OcrSettings | undefined = {} as OcrSettings) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { ocrSettings.backingStoreEnabled = true; },
        "isEnabled": n => { ocrSettings.isEnabled = n.getBooleanValue(); },
        "maxImageSize": n => { ocrSettings.maxImageSize = n.getNumberValue(); },
        "@odata.type": n => { ocrSettings.odataType = n.getStringValue(); },
        "timeout": n => { ocrSettings.timeout = n.getDurationValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoOrganizationalScope(organizationalScope: OrganizationalScope | undefined = {} as OrganizationalScope) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { organizationalScope.backingStoreEnabled = true; },
        "@odata.type": n => { organizationalScope.odataType = n.getStringValue(); },
        "scopeNames": n => { organizationalScope.scopeNames = n.getCollectionOfPrimitiveValues<string>(); },
        "scopeType": n => { organizationalScope.scopeType = n.getEnumValue<ScopeType>(ScopeTypeObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoPassiveDnsRecord(passiveDnsRecord: PassiveDnsRecord | undefined = {} as PassiveDnsRecord) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoArtifact(passiveDnsRecord),
        "artifact": n => { passiveDnsRecord.artifact = n.getObjectValue<Artifact>(createArtifactFromDiscriminatorValue); },
        "collectedDateTime": n => { passiveDnsRecord.collectedDateTime = n.getDateValue(); },
        "firstSeenDateTime": n => { passiveDnsRecord.firstSeenDateTime = n.getDateValue(); },
        "lastSeenDateTime": n => { passiveDnsRecord.lastSeenDateTime = n.getDateValue(); },
        "parentHost": n => { passiveDnsRecord.parentHost = n.getObjectValue<Host>(createHostFromDiscriminatorValue); },
        "recordType": n => { passiveDnsRecord.recordType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoPassiveDnsRecordCollectionResponse(passiveDnsRecordCollectionResponse: PassiveDnsRecordCollectionResponse | undefined = {} as PassiveDnsRecordCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(passiveDnsRecordCollectionResponse),
        "value": n => { passiveDnsRecordCollectionResponse.value = n.getCollectionOfObjectValues<PassiveDnsRecord>(createPassiveDnsRecordFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoPolicyBase(policyBase: PolicyBase | undefined = {} as PolicyBase) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(policyBase),
        "createdBy": n => { policyBase.createdBy = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "createdDateTime": n => { policyBase.createdDateTime = n.getDateValue(); },
        "description": n => { policyBase.description = n.getStringValue(); },
        "displayName": n => { policyBase.displayName = n.getStringValue(); },
        "lastModifiedBy": n => { policyBase.lastModifiedBy = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "lastModifiedDateTime": n => { policyBase.lastModifiedDateTime = n.getDateValue(); },
        "status": n => { policyBase.status = n.getEnumValue<PolicyStatus>(PolicyStatusObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoProcessEvidence(processEvidence: ProcessEvidence | undefined = {} as ProcessEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(processEvidence),
        "detectionStatus": n => { processEvidence.detectionStatus = n.getEnumValue<DetectionStatus>(DetectionStatusObject); },
        "imageFile": n => { processEvidence.imageFile = n.getObjectValue<FileDetails>(createFileDetailsFromDiscriminatorValue); },
        "mdeDeviceId": n => { processEvidence.mdeDeviceId = n.getStringValue(); },
        "parentProcessCreationDateTime": n => { processEvidence.parentProcessCreationDateTime = n.getDateValue(); },
        "parentProcessId": n => { processEvidence.parentProcessId = n.getNumberValue(); },
        "parentProcessImageFile": n => { processEvidence.parentProcessImageFile = n.getObjectValue<FileDetails>(createFileDetailsFromDiscriminatorValue); },
        "processCommandLine": n => { processEvidence.processCommandLine = n.getStringValue(); },
        "processCreationDateTime": n => { processEvidence.processCreationDateTime = n.getDateValue(); },
        "processId": n => { processEvidence.processId = n.getNumberValue(); },
        "userAccount": n => { processEvidence.userAccount = n.getObjectValue<UserAccount>(createUserAccountFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoProtectAdhocAction(protectAdhocAction: ProtectAdhocAction | undefined = {} as ProtectAdhocAction) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoInformationProtectionAction(protectAdhocAction),
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoProtectByTemplateAction(protectByTemplateAction: ProtectByTemplateAction | undefined = {} as ProtectByTemplateAction) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoInformationProtectionAction(protectByTemplateAction),
        "templateId": n => { protectByTemplateAction.templateId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoProtectDoNotForwardAction(protectDoNotForwardAction: ProtectDoNotForwardAction | undefined = {} as ProtectDoNotForwardAction) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoInformationProtectionAction(protectDoNotForwardAction),
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoProtectionRule(protectionRule: ProtectionRule | undefined = {} as ProtectionRule) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(protectionRule),
        "createdBy": n => { protectionRule.createdBy = n.getStringValue(); },
        "createdDateTime": n => { protectionRule.createdDateTime = n.getDateValue(); },
        "displayName": n => { protectionRule.displayName = n.getStringValue(); },
        "isEnabled": n => { protectionRule.isEnabled = n.getBooleanValue(); },
        "lastModifiedBy": n => { protectionRule.lastModifiedBy = n.getStringValue(); },
        "lastModifiedDateTime": n => { protectionRule.lastModifiedDateTime = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoQueryCondition(queryCondition: QueryCondition | undefined = {} as QueryCondition) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { queryCondition.backingStoreEnabled = true; },
        "lastModifiedDateTime": n => { queryCondition.lastModifiedDateTime = n.getDateValue(); },
        "@odata.type": n => { queryCondition.odataType = n.getStringValue(); },
        "queryText": n => { queryCondition.queryText = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoRecommendedHuntingQuery(recommendedHuntingQuery: RecommendedHuntingQuery | undefined = {} as RecommendedHuntingQuery) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { recommendedHuntingQuery.backingStoreEnabled = true; },
        "kqlText": n => { recommendedHuntingQuery.kqlText = n.getStringValue(); },
        "@odata.type": n => { recommendedHuntingQuery.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoRecommendLabelAction(recommendLabelAction: RecommendLabelAction | undefined = {} as RecommendLabelAction) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoInformationProtectionAction(recommendLabelAction),
        "actions": n => { recommendLabelAction.actions = n.getCollectionOfObjectValues<InformationProtectionAction>(createInformationProtectionActionFromDiscriminatorValue); },
        "actionSource": n => { recommendLabelAction.actionSource = n.getEnumValue<ActionSource>(ActionSourceObject); },
        "responsibleSensitiveTypeIds": n => { recommendLabelAction.responsibleSensitiveTypeIds = n.getCollectionOfPrimitiveValues<string>(); },
        "sensitivityLabelId": n => { recommendLabelAction.sensitivityLabelId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoRedundancyDetectionSettings(redundancyDetectionSettings: RedundancyDetectionSettings | undefined = {} as RedundancyDetectionSettings) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { redundancyDetectionSettings.backingStoreEnabled = true; },
        "isEnabled": n => { redundancyDetectionSettings.isEnabled = n.getBooleanValue(); },
        "maxWords": n => { redundancyDetectionSettings.maxWords = n.getNumberValue(); },
        "minWords": n => { redundancyDetectionSettings.minWords = n.getNumberValue(); },
        "@odata.type": n => { redundancyDetectionSettings.odataType = n.getStringValue(); },
        "similarityThreshold": n => { redundancyDetectionSettings.similarityThreshold = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoRegistryKeyEvidence(registryKeyEvidence: RegistryKeyEvidence | undefined = {} as RegistryKeyEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(registryKeyEvidence),
        "registryHive": n => { registryKeyEvidence.registryHive = n.getStringValue(); },
        "registryKey": n => { registryKeyEvidence.registryKey = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoRegistryValueEvidence(registryValueEvidence: RegistryValueEvidence | undefined = {} as RegistryValueEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(registryValueEvidence),
        "mdeDeviceId": n => { registryValueEvidence.mdeDeviceId = n.getStringValue(); },
        "registryHive": n => { registryValueEvidence.registryHive = n.getStringValue(); },
        "registryKey": n => { registryValueEvidence.registryKey = n.getStringValue(); },
        "registryValue": n => { registryValueEvidence.registryValue = n.getStringValue(); },
        "registryValueName": n => { registryValueEvidence.registryValueName = n.getStringValue(); },
        "registryValueType": n => { registryValueEvidence.registryValueType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoRemoveContentFooterAction(removeContentFooterAction: RemoveContentFooterAction | undefined = {} as RemoveContentFooterAction) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoInformationProtectionAction(removeContentFooterAction),
        "uiElementNames": n => { removeContentFooterAction.uiElementNames = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoRemoveContentHeaderAction(removeContentHeaderAction: RemoveContentHeaderAction | undefined = {} as RemoveContentHeaderAction) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoInformationProtectionAction(removeContentHeaderAction),
        "uiElementNames": n => { removeContentHeaderAction.uiElementNames = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoRemoveProtectionAction(removeProtectionAction: RemoveProtectionAction | undefined = {} as RemoveProtectionAction) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoInformationProtectionAction(removeProtectionAction),
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoRemoveWatermarkAction(removeWatermarkAction: RemoveWatermarkAction | undefined = {} as RemoveWatermarkAction) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoInformationProtectionAction(removeWatermarkAction),
        "uiElementNames": n => { removeWatermarkAction.uiElementNames = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoResponseAction(responseAction: ResponseAction | undefined = {} as ResponseAction) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { responseAction.backingStoreEnabled = true; },
        "@odata.type": n => { responseAction.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoRestrictAppExecutionResponseAction(restrictAppExecutionResponseAction: RestrictAppExecutionResponseAction | undefined = {} as RestrictAppExecutionResponseAction) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoResponseAction(restrictAppExecutionResponseAction),
        "identifier": n => { restrictAppExecutionResponseAction.identifier = n.getCollectionOfEnumValues<DeviceIdEntityIdentifier>(DeviceIdEntityIdentifierObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoRetentionDuration(retentionDuration: RetentionDuration | undefined = {} as RetentionDuration) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { retentionDuration.backingStoreEnabled = true; },
        "@odata.type": n => { retentionDuration.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoRetentionDurationForever(retentionDurationForever: RetentionDurationForever | undefined = {} as RetentionDurationForever) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoRetentionDuration(retentionDurationForever),
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoRetentionDurationInDays(retentionDurationInDays: RetentionDurationInDays | undefined = {} as RetentionDurationInDays) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoRetentionDuration(retentionDurationInDays),
        "days": n => { retentionDurationInDays.days = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoRetentionEvent(retentionEvent: RetentionEvent | undefined = {} as RetentionEvent) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(retentionEvent),
        "createdBy": n => { retentionEvent.createdBy = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "createdDateTime": n => { retentionEvent.createdDateTime = n.getDateValue(); },
        "description": n => { retentionEvent.description = n.getStringValue(); },
        "displayName": n => { retentionEvent.displayName = n.getStringValue(); },
        "eventPropagationResults": n => { retentionEvent.eventPropagationResults = n.getCollectionOfObjectValues<EventPropagationResult>(createEventPropagationResultFromDiscriminatorValue); },
        "eventQueries": n => { retentionEvent.eventQueries = n.getCollectionOfObjectValues<EventQuery>(createEventQueryFromDiscriminatorValue); },
        "eventStatus": n => { retentionEvent.eventStatus = n.getObjectValue<RetentionEventStatus>(createRetentionEventStatusFromDiscriminatorValue); },
        "eventTriggerDateTime": n => { retentionEvent.eventTriggerDateTime = n.getDateValue(); },
        "lastModifiedBy": n => { retentionEvent.lastModifiedBy = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "lastModifiedDateTime": n => { retentionEvent.lastModifiedDateTime = n.getDateValue(); },
        "lastStatusUpdateDateTime": n => { retentionEvent.lastStatusUpdateDateTime = n.getDateValue(); },
        "retentionEventType": n => { retentionEvent.retentionEventType = n.getObjectValue<RetentionEventType>(createRetentionEventTypeFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoRetentionEventCollectionResponse(retentionEventCollectionResponse: RetentionEventCollectionResponse | undefined = {} as RetentionEventCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(retentionEventCollectionResponse),
        "value": n => { retentionEventCollectionResponse.value = n.getCollectionOfObjectValues<RetentionEvent>(createRetentionEventFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoRetentionEventStatus(retentionEventStatus: RetentionEventStatus | undefined = {} as RetentionEventStatus) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { retentionEventStatus.backingStoreEnabled = true; },
        "error": n => { retentionEventStatus.errorEscaped = n.getObjectValue<PublicError>(createPublicErrorFromDiscriminatorValue); },
        "@odata.type": n => { retentionEventStatus.odataType = n.getStringValue(); },
        "status": n => { retentionEventStatus.status = n.getEnumValue<EventStatusType>(EventStatusTypeObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoRetentionEventType(retentionEventType: RetentionEventType | undefined = {} as RetentionEventType) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(retentionEventType),
        "createdBy": n => { retentionEventType.createdBy = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "createdDateTime": n => { retentionEventType.createdDateTime = n.getDateValue(); },
        "description": n => { retentionEventType.description = n.getStringValue(); },
        "displayName": n => { retentionEventType.displayName = n.getStringValue(); },
        "lastModifiedBy": n => { retentionEventType.lastModifiedBy = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "lastModifiedDateTime": n => { retentionEventType.lastModifiedDateTime = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoRetentionEventTypeCollectionResponse(retentionEventTypeCollectionResponse: RetentionEventTypeCollectionResponse | undefined = {} as RetentionEventTypeCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(retentionEventTypeCollectionResponse),
        "value": n => { retentionEventTypeCollectionResponse.value = n.getCollectionOfObjectValues<RetentionEventType>(createRetentionEventTypeFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoRetentionLabel(retentionLabel: RetentionLabel | undefined = {} as RetentionLabel) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(retentionLabel),
        "actionAfterRetentionPeriod": n => { retentionLabel.actionAfterRetentionPeriod = n.getEnumValue<ActionAfterRetentionPeriod>(ActionAfterRetentionPeriodObject); },
        "behaviorDuringRetentionPeriod": n => { retentionLabel.behaviorDuringRetentionPeriod = n.getEnumValue<BehaviorDuringRetentionPeriod>(BehaviorDuringRetentionPeriodObject); },
        "createdBy": n => { retentionLabel.createdBy = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "createdDateTime": n => { retentionLabel.createdDateTime = n.getDateValue(); },
        "defaultRecordBehavior": n => { retentionLabel.defaultRecordBehavior = n.getEnumValue<DefaultRecordBehavior>(DefaultRecordBehaviorObject); },
        "descriptionForAdmins": n => { retentionLabel.descriptionForAdmins = n.getStringValue(); },
        "descriptionForUsers": n => { retentionLabel.descriptionForUsers = n.getStringValue(); },
        "descriptors": n => { retentionLabel.descriptors = n.getObjectValue<FilePlanDescriptor>(createFilePlanDescriptorFromDiscriminatorValue); },
        "displayName": n => { retentionLabel.displayName = n.getStringValue(); },
        "dispositionReviewStages": n => { retentionLabel.dispositionReviewStages = n.getCollectionOfObjectValues<DispositionReviewStage>(createDispositionReviewStageFromDiscriminatorValue); },
        "isInUse": n => { retentionLabel.isInUse = n.getBooleanValue(); },
        "labelToBeApplied": n => { retentionLabel.labelToBeApplied = n.getStringValue(); },
        "lastModifiedBy": n => { retentionLabel.lastModifiedBy = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "lastModifiedDateTime": n => { retentionLabel.lastModifiedDateTime = n.getDateValue(); },
        "retentionDuration": n => { retentionLabel.retentionDuration = n.getObjectValue<RetentionDuration>(createRetentionDurationFromDiscriminatorValue); },
        "retentionEventType": n => { retentionLabel.retentionEventType = n.getObjectValue<RetentionEventType>(createRetentionEventTypeFromDiscriminatorValue); },
        "retentionTrigger": n => { retentionLabel.retentionTrigger = n.getEnumValue<RetentionTrigger>(RetentionTriggerObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoRetentionLabelCollectionResponse(retentionLabelCollectionResponse: RetentionLabelCollectionResponse | undefined = {} as RetentionLabelCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(retentionLabelCollectionResponse),
        "value": n => { retentionLabelCollectionResponse.value = n.getCollectionOfObjectValues<RetentionLabel>(createRetentionLabelFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoRuleSchedule(ruleSchedule: RuleSchedule | undefined = {} as RuleSchedule) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { ruleSchedule.backingStoreEnabled = true; },
        "nextRunDateTime": n => { ruleSchedule.nextRunDateTime = n.getDateValue(); },
        "@odata.type": n => { ruleSchedule.odataType = n.getStringValue(); },
        "period": n => { ruleSchedule.period = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoRunAntivirusScanResponseAction(runAntivirusScanResponseAction: RunAntivirusScanResponseAction | undefined = {} as RunAntivirusScanResponseAction) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoResponseAction(runAntivirusScanResponseAction),
        "identifier": n => { runAntivirusScanResponseAction.identifier = n.getCollectionOfEnumValues<DeviceIdEntityIdentifier>(DeviceIdEntityIdentifierObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoRunDetails(runDetails: RunDetails | undefined = {} as RunDetails) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { runDetails.backingStoreEnabled = true; },
        "errorCode": n => { runDetails.errorCode = n.getEnumValue<HuntingRuleErrorCode>(HuntingRuleErrorCodeObject); },
        "failureReason": n => { runDetails.failureReason = n.getStringValue(); },
        "lastRunDateTime": n => { runDetails.lastRunDateTime = n.getDateValue(); },
        "@odata.type": n => { runDetails.odataType = n.getStringValue(); },
        "status": n => { runDetails.status = n.getEnumValue<HuntingRuleRunStatus>(HuntingRuleRunStatusObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoSasTokenEvidence(sasTokenEvidence: SasTokenEvidence | undefined = {} as SasTokenEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(sasTokenEvidence),
        "allowedIpAddresses": n => { sasTokenEvidence.allowedIpAddresses = n.getStringValue(); },
        "allowedResourceTypes": n => { sasTokenEvidence.allowedResourceTypes = n.getCollectionOfPrimitiveValues<string>(); },
        "allowedServices": n => { sasTokenEvidence.allowedServices = n.getCollectionOfPrimitiveValues<string>(); },
        "expiryDateTime": n => { sasTokenEvidence.expiryDateTime = n.getDateValue(); },
        "permissions": n => { sasTokenEvidence.permissions = n.getCollectionOfPrimitiveValues<string>(); },
        "protocol": n => { sasTokenEvidence.protocol = n.getStringValue(); },
        "signatureHash": n => { sasTokenEvidence.signatureHash = n.getStringValue(); },
        "signedWith": n => { sasTokenEvidence.signedWith = n.getStringValue(); },
        "startDateTime": n => { sasTokenEvidence.startDateTime = n.getDateValue(); },
        "storageResource": n => { sasTokenEvidence.storageResource = n.getObjectValue<AzureResourceEvidence>(createAzureResourceEvidenceFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoSearch(search: Search | undefined = {} as Search) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(search),
        "contentQuery": n => { search.contentQuery = n.getStringValue(); },
        "createdBy": n => { search.createdBy = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "createdDateTime": n => { search.createdDateTime = n.getDateValue(); },
        "description": n => { search.description = n.getStringValue(); },
        "displayName": n => { search.displayName = n.getStringValue(); },
        "lastModifiedBy": n => { search.lastModifiedBy = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "lastModifiedDateTime": n => { search.lastModifiedDateTime = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoSecurity(security: Security | undefined = {} as Security) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(security),
        "informationProtection": n => { security.informationProtection = n.getObjectValue<InformationProtection>(createInformationProtectionFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoSecurityGroupEvidence(securityGroupEvidence: SecurityGroupEvidence | undefined = {} as SecurityGroupEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(securityGroupEvidence),
        "displayName": n => { securityGroupEvidence.displayName = n.getStringValue(); },
        "securityGroupId": n => { securityGroupEvidence.securityGroupId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoSensitivityLabel(sensitivityLabel: SensitivityLabel | undefined = {} as SensitivityLabel) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(sensitivityLabel),
        "color": n => { sensitivityLabel.color = n.getStringValue(); },
        "contentFormats": n => { sensitivityLabel.contentFormats = n.getCollectionOfPrimitiveValues<string>(); },
        "description": n => { sensitivityLabel.description = n.getStringValue(); },
        "hasProtection": n => { sensitivityLabel.hasProtection = n.getBooleanValue(); },
        "isActive": n => { sensitivityLabel.isActive = n.getBooleanValue(); },
        "isAppliable": n => { sensitivityLabel.isAppliable = n.getBooleanValue(); },
        "name": n => { sensitivityLabel.name = n.getStringValue(); },
        "parent": n => { sensitivityLabel.parent = n.getObjectValue<SensitivityLabel>(createSensitivityLabelFromDiscriminatorValue); },
        "sensitivity": n => { sensitivityLabel.sensitivity = n.getNumberValue(); },
        "tooltip": n => { sensitivityLabel.tooltip = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoSensitivityLabelCollectionResponse(sensitivityLabelCollectionResponse: SensitivityLabelCollectionResponse | undefined = {} as SensitivityLabelCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(sensitivityLabelCollectionResponse),
        "value": n => { sensitivityLabelCollectionResponse.value = n.getCollectionOfObjectValues<SensitivityLabel>(createSensitivityLabelFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoServicePrincipalEvidence(servicePrincipalEvidence: ServicePrincipalEvidence | undefined = {} as ServicePrincipalEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(servicePrincipalEvidence),
        "appId": n => { servicePrincipalEvidence.appId = n.getStringValue(); },
        "appOwnerTenantId": n => { servicePrincipalEvidence.appOwnerTenantId = n.getStringValue(); },
        "servicePrincipalName": n => { servicePrincipalEvidence.servicePrincipalName = n.getStringValue(); },
        "servicePrincipalObjectId": n => { servicePrincipalEvidence.servicePrincipalObjectId = n.getStringValue(); },
        "servicePrincipalType": n => { servicePrincipalEvidence.servicePrincipalType = n.getEnumValue<ServicePrincipalType>(ServicePrincipalTypeObject); },
        "tenantId": n => { servicePrincipalEvidence.tenantId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoSinglePropertySchema(singlePropertySchema: SinglePropertySchema | undefined = {} as SinglePropertySchema) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { singlePropertySchema.backingStoreEnabled = true; },
        "name": n => { singlePropertySchema.name = n.getStringValue(); },
        "@odata.type": n => { singlePropertySchema.odataType = n.getStringValue(); },
        "type": n => { singlePropertySchema.type = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoSiteSource(siteSource: SiteSource | undefined = {} as SiteSource) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoDataSource(siteSource),
        "site": n => { siteSource.site = n.getObjectValue<Site>(createSiteFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoSiteSourceCollectionResponse(siteSourceCollectionResponse: SiteSourceCollectionResponse | undefined = {} as SiteSourceCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(siteSourceCollectionResponse),
        "value": n => { siteSourceCollectionResponse.value = n.getCollectionOfObjectValues<SiteSource>(createSiteSourceFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoSoftDeleteResponseAction(softDeleteResponseAction: SoftDeleteResponseAction | undefined = {} as SoftDeleteResponseAction) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoResponseAction(softDeleteResponseAction),
        "identifier": n => { softDeleteResponseAction.identifier = n.getCollectionOfEnumValues<EmailEntityIdentifier>(EmailEntityIdentifierObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoSslCertificate(sslCertificate: SslCertificate | undefined = {} as SslCertificate) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoArtifact(sslCertificate),
        "expirationDateTime": n => { sslCertificate.expirationDateTime = n.getDateValue(); },
        "fingerprint": n => { sslCertificate.fingerprint = n.getStringValue(); },
        "firstSeenDateTime": n => { sslCertificate.firstSeenDateTime = n.getDateValue(); },
        "issueDateTime": n => { sslCertificate.issueDateTime = n.getDateValue(); },
        "issuer": n => { sslCertificate.issuer = n.getObjectValue<SslCertificateEntity>(createSslCertificateEntityFromDiscriminatorValue); },
        "lastSeenDateTime": n => { sslCertificate.lastSeenDateTime = n.getDateValue(); },
        "relatedHosts": n => { sslCertificate.relatedHosts = n.getCollectionOfObjectValues<Host>(createHostFromDiscriminatorValue); },
        "serialNumber": n => { sslCertificate.serialNumber = n.getStringValue(); },
        "sha1": n => { sslCertificate.sha1 = n.getStringValue(); },
        "subject": n => { sslCertificate.subject = n.getObjectValue<SslCertificateEntity>(createSslCertificateEntityFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoSslCertificateCollectionResponse(sslCertificateCollectionResponse: SslCertificateCollectionResponse | undefined = {} as SslCertificateCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(sslCertificateCollectionResponse),
        "value": n => { sslCertificateCollectionResponse.value = n.getCollectionOfObjectValues<SslCertificate>(createSslCertificateFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoSslCertificateEntity(sslCertificateEntity: SslCertificateEntity | undefined = {} as SslCertificateEntity) : Record<string, (node: ParseNode) => void> {
    return {
        "address": n => { sslCertificateEntity.address = n.getObjectValue<PhysicalAddress>(createPhysicalAddressFromDiscriminatorValue); },
        "alternateNames": n => { sslCertificateEntity.alternateNames = n.getCollectionOfPrimitiveValues<string>(); },
        "backingStoreEnabled": n => { sslCertificateEntity.backingStoreEnabled = true; },
        "commonName": n => { sslCertificateEntity.commonName = n.getStringValue(); },
        "email": n => { sslCertificateEntity.email = n.getStringValue(); },
        "givenName": n => { sslCertificateEntity.givenName = n.getStringValue(); },
        "@odata.type": n => { sslCertificateEntity.odataType = n.getStringValue(); },
        "organizationName": n => { sslCertificateEntity.organizationName = n.getStringValue(); },
        "organizationUnitName": n => { sslCertificateEntity.organizationUnitName = n.getStringValue(); },
        "serialNumber": n => { sslCertificateEntity.serialNumber = n.getStringValue(); },
        "surname": n => { sslCertificateEntity.surname = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoStopAndQuarantineFileResponseAction(stopAndQuarantineFileResponseAction: StopAndQuarantineFileResponseAction | undefined = {} as StopAndQuarantineFileResponseAction) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoResponseAction(stopAndQuarantineFileResponseAction),
        "identifier": n => { stopAndQuarantineFileResponseAction.identifier = n.getCollectionOfEnumValues<StopAndQuarantineFileEntityIdentifier>(StopAndQuarantineFileEntityIdentifierObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoStringValueDictionary(stringValueDictionary: StringValueDictionary | undefined = {} as StringValueDictionary) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { stringValueDictionary.backingStoreEnabled = true; },
        "@odata.type": n => { stringValueDictionary.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoSubCategory(subCategory: SubCategory | undefined = {} as SubCategory) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoFilePlanDescriptorBase(subCategory),
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoSubCategoryTemplate(subCategoryTemplate: SubCategoryTemplate | undefined = {} as SubCategoryTemplate) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoFilePlanDescriptorTemplate(subCategoryTemplate),
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoSubCategoryTemplateCollectionResponse(subCategoryTemplateCollectionResponse: SubCategoryTemplateCollectionResponse | undefined = {} as SubCategoryTemplateCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(subCategoryTemplateCollectionResponse),
        "value": n => { subCategoryTemplateCollectionResponse.value = n.getCollectionOfObjectValues<SubCategoryTemplate>(createSubCategoryTemplateFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoSubdomain(subdomain: Subdomain | undefined = {} as Subdomain) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(subdomain),
        "firstSeenDateTime": n => { subdomain.firstSeenDateTime = n.getDateValue(); },
        "host": n => { subdomain.host = n.getObjectValue<Host>(createHostFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoSubdomainCollectionResponse(subdomainCollectionResponse: SubdomainCollectionResponse | undefined = {} as SubdomainCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(subdomainCollectionResponse),
        "value": n => { subdomainCollectionResponse.value = n.getCollectionOfObjectValues<Subdomain>(createSubdomainFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoSubmissionAdminReview(submissionAdminReview: SubmissionAdminReview | undefined = {} as SubmissionAdminReview) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { submissionAdminReview.backingStoreEnabled = true; },
        "@odata.type": n => { submissionAdminReview.odataType = n.getStringValue(); },
        "reviewBy": n => { submissionAdminReview.reviewBy = n.getStringValue(); },
        "reviewDateTime": n => { submissionAdminReview.reviewDateTime = n.getDateValue(); },
        "reviewResult": n => { submissionAdminReview.reviewResult = n.getEnumValue<SubmissionResultCategory>(SubmissionResultCategoryObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoSubmissionDetectedFile(submissionDetectedFile: SubmissionDetectedFile | undefined = {} as SubmissionDetectedFile) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { submissionDetectedFile.backingStoreEnabled = true; },
        "fileHash": n => { submissionDetectedFile.fileHash = n.getStringValue(); },
        "fileName": n => { submissionDetectedFile.fileName = n.getStringValue(); },
        "@odata.type": n => { submissionDetectedFile.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoSubmissionMailEvidence(submissionMailEvidence: SubmissionMailEvidence | undefined = {} as SubmissionMailEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(submissionMailEvidence),
        "networkMessageId": n => { submissionMailEvidence.networkMessageId = n.getStringValue(); },
        "recipient": n => { submissionMailEvidence.recipient = n.getStringValue(); },
        "reportType": n => { submissionMailEvidence.reportType = n.getStringValue(); },
        "sender": n => { submissionMailEvidence.sender = n.getStringValue(); },
        "senderIp": n => { submissionMailEvidence.senderIp = n.getStringValue(); },
        "subject": n => { submissionMailEvidence.subject = n.getStringValue(); },
        "submissionDateTime": n => { submissionMailEvidence.submissionDateTime = n.getDateValue(); },
        "submissionId": n => { submissionMailEvidence.submissionId = n.getStringValue(); },
        "submitter": n => { submissionMailEvidence.submitter = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoSubmissionResult(submissionResult: SubmissionResult | undefined = {} as SubmissionResult) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { submissionResult.backingStoreEnabled = true; },
        "category": n => { submissionResult.category = n.getEnumValue<SubmissionResultCategory>(SubmissionResultCategoryObject); },
        "detail": n => { submissionResult.detail = n.getEnumValue<SubmissionResultDetail>(SubmissionResultDetailObject); },
        "detectedFiles": n => { submissionResult.detectedFiles = n.getCollectionOfObjectValues<SubmissionDetectedFile>(createSubmissionDetectedFileFromDiscriminatorValue); },
        "detectedUrls": n => { submissionResult.detectedUrls = n.getCollectionOfPrimitiveValues<string>(); },
        "@odata.type": n => { submissionResult.odataType = n.getStringValue(); },
        "userMailboxSetting": n => { submissionResult.userMailboxSetting = n.getCollectionOfEnumValues<UserMailboxSetting>(UserMailboxSettingObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoSubmissionUserIdentity(submissionUserIdentity: SubmissionUserIdentity | undefined = {} as SubmissionUserIdentity) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(submissionUserIdentity),
        "email": n => { submissionUserIdentity.email = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoTag(tag: Tag | undefined = {} as Tag) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(tag),
        "createdBy": n => { tag.createdBy = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "description": n => { tag.description = n.getStringValue(); },
        "displayName": n => { tag.displayName = n.getStringValue(); },
        "lastModifiedDateTime": n => { tag.lastModifiedDateTime = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoTenantAllowBlockListEntryResult(tenantAllowBlockListEntryResult: TenantAllowBlockListEntryResult | undefined = {} as TenantAllowBlockListEntryResult) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { tenantAllowBlockListEntryResult.backingStoreEnabled = true; },
        "entryType": n => { tenantAllowBlockListEntryResult.entryType = n.getEnumValue<TenantAllowBlockListEntryType>(TenantAllowBlockListEntryTypeObject); },
        "expirationDateTime": n => { tenantAllowBlockListEntryResult.expirationDateTime = n.getDateValue(); },
        "identity": n => { tenantAllowBlockListEntryResult.identity = n.getStringValue(); },
        "@odata.type": n => { tenantAllowBlockListEntryResult.odataType = n.getStringValue(); },
        "status": n => { tenantAllowBlockListEntryResult.status = n.getEnumValue<LongRunningOperationStatus>(LongRunningOperationStatusObject); },
        "value": n => { tenantAllowBlockListEntryResult.value = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoTenantAllowOrBlockListAction(tenantAllowOrBlockListAction: TenantAllowOrBlockListAction | undefined = {} as TenantAllowOrBlockListAction) : Record<string, (node: ParseNode) => void> {
    return {
        "action": n => { tenantAllowOrBlockListAction.action = n.getEnumValue<TenantAllowBlockListAction>(TenantAllowBlockListActionObject); },
        "backingStoreEnabled": n => { tenantAllowOrBlockListAction.backingStoreEnabled = true; },
        "expirationDateTime": n => { tenantAllowOrBlockListAction.expirationDateTime = n.getDateValue(); },
        "note": n => { tenantAllowOrBlockListAction.note = n.getStringValue(); },
        "@odata.type": n => { tenantAllowOrBlockListAction.odataType = n.getStringValue(); },
        "results": n => { tenantAllowOrBlockListAction.results = n.getCollectionOfObjectValues<TenantAllowBlockListEntryResult>(createTenantAllowBlockListEntryResultFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoThreatIntelligence(threatIntelligence: ThreatIntelligence | undefined = {} as ThreatIntelligence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(threatIntelligence),
        "articleIndicators": n => { threatIntelligence.articleIndicators = n.getCollectionOfObjectValues<ArticleIndicator>(createArticleIndicatorFromDiscriminatorValue); },
        "articles": n => { threatIntelligence.articles = n.getCollectionOfObjectValues<Article>(createArticleFromDiscriminatorValue); },
        "hostComponents": n => { threatIntelligence.hostComponents = n.getCollectionOfObjectValues<HostComponent>(createHostComponentFromDiscriminatorValue); },
        "hostCookies": n => { threatIntelligence.hostCookies = n.getCollectionOfObjectValues<HostCookie>(createHostCookieFromDiscriminatorValue); },
        "hostPairs": n => { threatIntelligence.hostPairs = n.getCollectionOfObjectValues<HostPair>(createHostPairFromDiscriminatorValue); },
        "hostPorts": n => { threatIntelligence.hostPorts = n.getCollectionOfObjectValues<HostPort>(createHostPortFromDiscriminatorValue); },
        "hosts": n => { threatIntelligence.hosts = n.getCollectionOfObjectValues<Host>(createHostFromDiscriminatorValue); },
        "hostSslCertificates": n => { threatIntelligence.hostSslCertificates = n.getCollectionOfObjectValues<HostSslCertificate>(createHostSslCertificateFromDiscriminatorValue); },
        "hostTrackers": n => { threatIntelligence.hostTrackers = n.getCollectionOfObjectValues<HostTracker>(createHostTrackerFromDiscriminatorValue); },
        "intelligenceProfileIndicators": n => { threatIntelligence.intelligenceProfileIndicators = n.getCollectionOfObjectValues<IntelligenceProfileIndicator>(createIntelligenceProfileIndicatorFromDiscriminatorValue); },
        "intelProfiles": n => { threatIntelligence.intelProfiles = n.getCollectionOfObjectValues<IntelligenceProfile>(createIntelligenceProfileFromDiscriminatorValue); },
        "passiveDnsRecords": n => { threatIntelligence.passiveDnsRecords = n.getCollectionOfObjectValues<PassiveDnsRecord>(createPassiveDnsRecordFromDiscriminatorValue); },
        "sslCertificates": n => { threatIntelligence.sslCertificates = n.getCollectionOfObjectValues<SslCertificate>(createSslCertificateFromDiscriminatorValue); },
        "subdomains": n => { threatIntelligence.subdomains = n.getCollectionOfObjectValues<Subdomain>(createSubdomainFromDiscriminatorValue); },
        "vulnerabilities": n => { threatIntelligence.vulnerabilities = n.getCollectionOfObjectValues<Vulnerability>(createVulnerabilityFromDiscriminatorValue); },
        "whoisHistoryRecords": n => { threatIntelligence.whoisHistoryRecords = n.getCollectionOfObjectValues<WhoisHistoryRecord>(createWhoisHistoryRecordFromDiscriminatorValue); },
        "whoisRecords": n => { threatIntelligence.whoisRecords = n.getCollectionOfObjectValues<WhoisRecord>(createWhoisRecordFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoThreatSubmission(threatSubmission: ThreatSubmission | undefined = {} as ThreatSubmission) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(threatSubmission),
        "adminReview": n => { threatSubmission.adminReview = n.getObjectValue<SubmissionAdminReview>(createSubmissionAdminReviewFromDiscriminatorValue); },
        "category": n => { threatSubmission.category = n.getEnumValue<SubmissionCategory>(SubmissionCategoryObject); },
        "clientSource": n => { threatSubmission.clientSource = n.getEnumValue<SubmissionClientSource>(SubmissionClientSourceObject); },
        "contentType": n => { threatSubmission.contentType = n.getEnumValue<SubmissionContentType>(SubmissionContentTypeObject); },
        "createdBy": n => { threatSubmission.createdBy = n.getObjectValue<SubmissionUserIdentity>(createSubmissionUserIdentityFromDiscriminatorValue); },
        "createdDateTime": n => { threatSubmission.createdDateTime = n.getDateValue(); },
        "result": n => { threatSubmission.result = n.getObjectValue<SubmissionResult>(createSubmissionResultFromDiscriminatorValue); },
        "source": n => { threatSubmission.source = n.getEnumValue<SubmissionSource>(SubmissionSourceObject); },
        "status": n => { threatSubmission.status = n.getEnumValue<LongRunningOperationStatus>(LongRunningOperationStatusObject); },
        "tenantId": n => { threatSubmission.tenantId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoThreatSubmissionRoot(threatSubmissionRoot: ThreatSubmissionRoot | undefined = {} as ThreatSubmissionRoot) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(threatSubmissionRoot),
        "emailThreats": n => { threatSubmissionRoot.emailThreats = n.getCollectionOfObjectValues<EmailThreatSubmission>(createEmailThreatSubmissionFromDiscriminatorValue); },
        "emailThreatSubmissionPolicies": n => { threatSubmissionRoot.emailThreatSubmissionPolicies = n.getCollectionOfObjectValues<EmailThreatSubmissionPolicy>(createEmailThreatSubmissionPolicyFromDiscriminatorValue); },
        "fileThreats": n => { threatSubmissionRoot.fileThreats = n.getCollectionOfObjectValues<FileThreatSubmission>(createFileThreatSubmissionFromDiscriminatorValue); },
        "urlThreats": n => { threatSubmissionRoot.urlThreats = n.getCollectionOfObjectValues<UrlThreatSubmission>(createUrlThreatSubmissionFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoTopicModelingSettings(topicModelingSettings: TopicModelingSettings | undefined = {} as TopicModelingSettings) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { topicModelingSettings.backingStoreEnabled = true; },
        "dynamicallyAdjustTopicCount": n => { topicModelingSettings.dynamicallyAdjustTopicCount = n.getBooleanValue(); },
        "ignoreNumbers": n => { topicModelingSettings.ignoreNumbers = n.getBooleanValue(); },
        "isEnabled": n => { topicModelingSettings.isEnabled = n.getBooleanValue(); },
        "@odata.type": n => { topicModelingSettings.odataType = n.getStringValue(); },
        "topicCount": n => { topicModelingSettings.topicCount = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoTriggersRoot(triggersRoot: TriggersRoot | undefined = {} as TriggersRoot) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(triggersRoot),
        "retentionEvents": n => { triggersRoot.retentionEvents = n.getCollectionOfObjectValues<RetentionEvent>(createRetentionEventFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoTriggerTypesRoot(triggerTypesRoot: TriggerTypesRoot | undefined = {} as TriggerTypesRoot) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(triggerTypesRoot),
        "retentionEventTypes": n => { triggerTypesRoot.retentionEventTypes = n.getCollectionOfObjectValues<RetentionEventType>(createRetentionEventTypeFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoUnclassifiedArtifact(unclassifiedArtifact: UnclassifiedArtifact | undefined = {} as UnclassifiedArtifact) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoArtifact(unclassifiedArtifact),
        "kind": n => { unclassifiedArtifact.kind = n.getStringValue(); },
        "value": n => { unclassifiedArtifact.value = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoUnifiedGroupSource(unifiedGroupSource: UnifiedGroupSource | undefined = {} as UnifiedGroupSource) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoDataSource(unifiedGroupSource),
        "group": n => { unifiedGroupSource.group = n.getObjectValue<Group>(createGroupFromDiscriminatorValue); },
        "includedSources": n => { unifiedGroupSource.includedSources = n.getCollectionOfEnumValues<SourceType>(SourceTypeObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoUnifiedGroupSourceCollectionResponse(unifiedGroupSourceCollectionResponse: UnifiedGroupSourceCollectionResponse | undefined = {} as UnifiedGroupSourceCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(unifiedGroupSourceCollectionResponse),
        "value": n => { unifiedGroupSourceCollectionResponse.value = n.getCollectionOfObjectValues<UnifiedGroupSource>(createUnifiedGroupSourceFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoUrlEvidence(urlEvidence: UrlEvidence | undefined = {} as UrlEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(urlEvidence),
        "url": n => { urlEvidence.url = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoUrlThreatSubmission(urlThreatSubmission: UrlThreatSubmission | undefined = {} as UrlThreatSubmission) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoThreatSubmission(urlThreatSubmission),
        "webUrl": n => { urlThreatSubmission.webUrl = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoUrlThreatSubmissionCollectionResponse(urlThreatSubmissionCollectionResponse: UrlThreatSubmissionCollectionResponse | undefined = {} as UrlThreatSubmissionCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(urlThreatSubmissionCollectionResponse),
        "value": n => { urlThreatSubmissionCollectionResponse.value = n.getCollectionOfObjectValues<UrlThreatSubmission>(createUrlThreatSubmissionFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoUserAccount(userAccount: UserAccount | undefined = {} as UserAccount) : Record<string, (node: ParseNode) => void> {
    return {
        "accountName": n => { userAccount.accountName = n.getStringValue(); },
        "azureAdUserId": n => { userAccount.azureAdUserId = n.getStringValue(); },
        "backingStoreEnabled": n => { userAccount.backingStoreEnabled = true; },
        "displayName": n => { userAccount.displayName = n.getStringValue(); },
        "domainName": n => { userAccount.domainName = n.getStringValue(); },
        "@odata.type": n => { userAccount.odataType = n.getStringValue(); },
        "userPrincipalName": n => { userAccount.userPrincipalName = n.getStringValue(); },
        "userSid": n => { userAccount.userSid = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoUserEvidence(userEvidence: UserEvidence | undefined = {} as UserEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(userEvidence),
        "userAccount": n => { userEvidence.userAccount = n.getObjectValue<UserAccount>(createUserAccountFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoUserSource(userSource: UserSource | undefined = {} as UserSource) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoDataSource(userSource),
        "email": n => { userSource.email = n.getStringValue(); },
        "includedSources": n => { userSource.includedSources = n.getCollectionOfEnumValues<SourceType>(SourceTypeObject); },
        "siteWebUrl": n => { userSource.siteWebUrl = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoUserSourceCollectionResponse(userSourceCollectionResponse: UserSourceCollectionResponse | undefined = {} as UserSourceCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(userSourceCollectionResponse),
        "value": n => { userSourceCollectionResponse.value = n.getCollectionOfObjectValues<UserSource>(createUserSourceFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoVmMetadata(vmMetadata: VmMetadata | undefined = {} as VmMetadata) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { vmMetadata.backingStoreEnabled = true; },
        "cloudProvider": n => { vmMetadata.cloudProvider = n.getEnumValue<VmCloudProvider>(VmCloudProviderObject); },
        "@odata.type": n => { vmMetadata.odataType = n.getStringValue(); },
        "resourceId": n => { vmMetadata.resourceId = n.getStringValue(); },
        "subscriptionId": n => { vmMetadata.subscriptionId = n.getStringValue(); },
        "vmId": n => { vmMetadata.vmId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoVulnerability(vulnerability: Vulnerability | undefined = {} as Vulnerability) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(vulnerability),
        "activeExploitsObserved": n => { vulnerability.activeExploitsObserved = n.getBooleanValue(); },
        "articles": n => { vulnerability.articles = n.getCollectionOfObjectValues<Article>(createArticleFromDiscriminatorValue); },
        "commonWeaknessEnumerationIds": n => { vulnerability.commonWeaknessEnumerationIds = n.getCollectionOfPrimitiveValues<string>(); },
        "components": n => { vulnerability.components = n.getCollectionOfObjectValues<VulnerabilityComponent>(createVulnerabilityComponentFromDiscriminatorValue); },
        "createdDateTime": n => { vulnerability.createdDateTime = n.getDateValue(); },
        "cvss2Summary": n => { vulnerability.cvss2Summary = n.getObjectValue<CvssSummary>(createCvssSummaryFromDiscriminatorValue); },
        "cvss3Summary": n => { vulnerability.cvss3Summary = n.getObjectValue<CvssSummary>(createCvssSummaryFromDiscriminatorValue); },
        "description": n => { vulnerability.description = n.getObjectValue<FormattedContent>(createFormattedContentFromDiscriminatorValue); },
        "exploits": n => { vulnerability.exploits = n.getCollectionOfObjectValues<Hyperlink>(createHyperlinkFromDiscriminatorValue); },
        "exploitsAvailable": n => { vulnerability.exploitsAvailable = n.getBooleanValue(); },
        "hasChatter": n => { vulnerability.hasChatter = n.getBooleanValue(); },
        "lastModifiedDateTime": n => { vulnerability.lastModifiedDateTime = n.getDateValue(); },
        "priorityScore": n => { vulnerability.priorityScore = n.getNumberValue(); },
        "publishedDateTime": n => { vulnerability.publishedDateTime = n.getDateValue(); },
        "references": n => { vulnerability.references = n.getCollectionOfObjectValues<Hyperlink>(createHyperlinkFromDiscriminatorValue); },
        "remediation": n => { vulnerability.remediation = n.getObjectValue<FormattedContent>(createFormattedContentFromDiscriminatorValue); },
        "severity": n => { vulnerability.severity = n.getEnumValue<VulnerabilitySeverity>(VulnerabilitySeverityObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoVulnerabilityCollectionResponse(vulnerabilityCollectionResponse: VulnerabilityCollectionResponse | undefined = {} as VulnerabilityCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(vulnerabilityCollectionResponse),
        "value": n => { vulnerabilityCollectionResponse.value = n.getCollectionOfObjectValues<Vulnerability>(createVulnerabilityFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoVulnerabilityComponent(vulnerabilityComponent: VulnerabilityComponent | undefined = {} as VulnerabilityComponent) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(vulnerabilityComponent),
        "name": n => { vulnerabilityComponent.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoVulnerabilityComponentCollectionResponse(vulnerabilityComponentCollectionResponse: VulnerabilityComponentCollectionResponse | undefined = {} as VulnerabilityComponentCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(vulnerabilityComponentCollectionResponse),
        "value": n => { vulnerabilityComponentCollectionResponse.value = n.getCollectionOfObjectValues<VulnerabilityComponent>(createVulnerabilityComponentFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoWhoisBaseRecord(whoisBaseRecord: WhoisBaseRecord | undefined = {} as WhoisBaseRecord) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(whoisBaseRecord),
        "abuse": n => { whoisBaseRecord.abuse = n.getObjectValue<WhoisContact>(createWhoisContactFromDiscriminatorValue); },
        "admin": n => { whoisBaseRecord.admin = n.getObjectValue<WhoisContact>(createWhoisContactFromDiscriminatorValue); },
        "billing": n => { whoisBaseRecord.billing = n.getObjectValue<WhoisContact>(createWhoisContactFromDiscriminatorValue); },
        "domainStatus": n => { whoisBaseRecord.domainStatus = n.getStringValue(); },
        "expirationDateTime": n => { whoisBaseRecord.expirationDateTime = n.getDateValue(); },
        "firstSeenDateTime": n => { whoisBaseRecord.firstSeenDateTime = n.getDateValue(); },
        "host": n => { whoisBaseRecord.host = n.getObjectValue<Host>(createHostFromDiscriminatorValue); },
        "lastSeenDateTime": n => { whoisBaseRecord.lastSeenDateTime = n.getDateValue(); },
        "lastUpdateDateTime": n => { whoisBaseRecord.lastUpdateDateTime = n.getDateValue(); },
        "nameservers": n => { whoisBaseRecord.nameservers = n.getCollectionOfObjectValues<WhoisNameserver>(createWhoisNameserverFromDiscriminatorValue); },
        "noc": n => { whoisBaseRecord.noc = n.getObjectValue<WhoisContact>(createWhoisContactFromDiscriminatorValue); },
        "rawWhoisText": n => { whoisBaseRecord.rawWhoisText = n.getStringValue(); },
        "registrant": n => { whoisBaseRecord.registrant = n.getObjectValue<WhoisContact>(createWhoisContactFromDiscriminatorValue); },
        "registrar": n => { whoisBaseRecord.registrar = n.getObjectValue<WhoisContact>(createWhoisContactFromDiscriminatorValue); },
        "registrationDateTime": n => { whoisBaseRecord.registrationDateTime = n.getDateValue(); },
        "technical": n => { whoisBaseRecord.technical = n.getObjectValue<WhoisContact>(createWhoisContactFromDiscriminatorValue); },
        "whoisServer": n => { whoisBaseRecord.whoisServer = n.getStringValue(); },
        "zone": n => { whoisBaseRecord.zone = n.getObjectValue<WhoisContact>(createWhoisContactFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoWhoisContact(whoisContact: WhoisContact | undefined = {} as WhoisContact) : Record<string, (node: ParseNode) => void> {
    return {
        "address": n => { whoisContact.address = n.getObjectValue<PhysicalAddress>(createPhysicalAddressFromDiscriminatorValue); },
        "backingStoreEnabled": n => { whoisContact.backingStoreEnabled = true; },
        "email": n => { whoisContact.email = n.getStringValue(); },
        "fax": n => { whoisContact.fax = n.getStringValue(); },
        "name": n => { whoisContact.name = n.getStringValue(); },
        "@odata.type": n => { whoisContact.odataType = n.getStringValue(); },
        "organization": n => { whoisContact.organization = n.getStringValue(); },
        "telephone": n => { whoisContact.telephone = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoWhoisHistoryRecord(whoisHistoryRecord: WhoisHistoryRecord | undefined = {} as WhoisHistoryRecord) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoWhoisBaseRecord(whoisHistoryRecord),
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoWhoisHistoryRecordCollectionResponse(whoisHistoryRecordCollectionResponse: WhoisHistoryRecordCollectionResponse | undefined = {} as WhoisHistoryRecordCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(whoisHistoryRecordCollectionResponse),
        "value": n => { whoisHistoryRecordCollectionResponse.value = n.getCollectionOfObjectValues<WhoisHistoryRecord>(createWhoisHistoryRecordFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoWhoisNameserver(whoisNameserver: WhoisNameserver | undefined = {} as WhoisNameserver) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { whoisNameserver.backingStoreEnabled = true; },
        "firstSeenDateTime": n => { whoisNameserver.firstSeenDateTime = n.getDateValue(); },
        "host": n => { whoisNameserver.host = n.getObjectValue<Host>(createHostFromDiscriminatorValue); },
        "lastSeenDateTime": n => { whoisNameserver.lastSeenDateTime = n.getDateValue(); },
        "@odata.type": n => { whoisNameserver.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoWhoisRecord(whoisRecord: WhoisRecord | undefined = {} as WhoisRecord) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoWhoisBaseRecord(whoisRecord),
        "history": n => { whoisRecord.history = n.getCollectionOfObjectValues<WhoisHistoryRecord>(createWhoisHistoryRecordFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoWhoisRecordCollectionResponse(whoisRecordCollectionResponse: WhoisRecordCollectionResponse | undefined = {} as WhoisRecordCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(whoisRecordCollectionResponse),
        "value": n => { whoisRecordCollectionResponse.value = n.getCollectionOfObjectValues<WhoisRecord>(createWhoisRecordFromDiscriminatorValue); },
    }
}
export interface DetectionAction extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The alertTemplate property
     */
    alertTemplate?: AlertTemplate;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The organizationalScope property
     */
    organizationalScope?: OrganizationalScope;
    /**
     * The responseActions property
     */
    responseActions?: ResponseAction[];
}
export interface DetectionRule extends Parsable, ProtectionRule {
    /**
     * The detectionAction property
     */
    detectionAction?: DetectionAction;
    /**
     * The detectorId property
     */
    detectorId?: string;
    /**
     * The lastRunDetails property
     */
    lastRunDetails?: RunDetails;
    /**
     * The queryCondition property
     */
    queryCondition?: QueryCondition;
    /**
     * The schedule property
     */
    schedule?: RuleSchedule;
}
export type DetectionSource = (typeof DetectionSourceObject)[keyof typeof DetectionSourceObject];
export type DetectionStatus = (typeof DetectionStatusObject)[keyof typeof DetectionStatusObject];
export interface DetonationChain extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The childNodes property
     */
    childNodes?: DetonationChain[];
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The value property
     */
    value?: string;
}
export interface DetonationDetails extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The analysisDateTime property
     */
    analysisDateTime?: Date;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The detonationChain property
     */
    detonationChain?: DetonationChain;
    /**
     * The detonationObservables property
     */
    detonationObservables?: DetonationObservables;
    /**
     * The detonationVerdict property
     */
    detonationVerdict?: string;
    /**
     * The detonationVerdictReason property
     */
    detonationVerdictReason?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export interface DetonationObservables extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The contactedIps property
     */
    contactedIps?: string[];
    /**
     * The contactedUrls property
     */
    contactedUrls?: string[];
    /**
     * The droppedfiles property
     */
    droppedfiles?: string[];
    /**
     * The OdataType property
     */
    odataType?: string;
}
export type DeviceAssetIdentifier = (typeof DeviceAssetIdentifierObject)[keyof typeof DeviceAssetIdentifierObject];
export interface DeviceEvidence extends AlertEvidence, Parsable {
    /**
     * A unique identifier assigned to a device by Microsoft Entra ID when device is Microsoft Entra joined.
     */
    azureAdDeviceId?: string;
    /**
     * State of the Defender AntiMalware engine. The possible values are: notReporting, disabled, notUpdated, updated, unknown, notSupported, unknownFutureValue.
     */
    defenderAvStatus?: DefenderAvStatus;
    /**
     * The fully qualified domain name (FQDN) for the device.
     */
    deviceDnsName?: string;
    /**
     * The date and time when the device was first seen.
     */
    firstSeenDateTime?: Date;
    /**
     * The health state of the device. The possible values are: active, inactive, impairedCommunication, noSensorData, noSensorDataImpairedCommunication, unknown, unknownFutureValue.
     */
    healthStatus?: DeviceHealthStatus;
    /**
     * Ip interfaces of the device during the time of the alert.
     */
    ipInterfaces?: string[];
    /**
     * Users that were logged on the machine during the time of the alert.
     */
    loggedOnUsers?: LoggedOnUser[];
    /**
     * A unique identifier assigned to a device by Microsoft Defender for Endpoint.
     */
    mdeDeviceId?: string;
    /**
     * The status of the machine onboarding to Microsoft Defender for Endpoint. The possible values are: insufficientInfo, onboarded, canBeOnboarded, unsupported, unknownFutureValue.
     */
    onboardingStatus?: OnboardingStatus;
    /**
     * The build version for the operating system the device is running.
     */
    osBuild?: number;
    /**
     * The operating system platform the device is running.
     */
    osPlatform?: string;
    /**
     * The ID of the role-based access control device group.
     */
    rbacGroupId?: number;
    /**
     * The name of the role-based access control device group.
     */
    rbacGroupName?: string;
    /**
     * Risk score as evaluated by Microsoft Defender for Endpoint. The possible values are: none, informational, low, medium, high, unknownFutureValue.
     */
    riskScore?: DeviceRiskScore;
    /**
     * The version of the operating system platform.
     */
    version?: string;
    /**
     * Metadata of the virtual machine (VM) on which Microsoft Defender for Endpoint is running.
     */
    vmMetadata?: VmMetadata;
}
export type DeviceHealthStatus = (typeof DeviceHealthStatusObject)[keyof typeof DeviceHealthStatusObject];
export type DeviceIdEntityIdentifier = (typeof DeviceIdEntityIdentifierObject)[keyof typeof DeviceIdEntityIdentifierObject];
export type DeviceRiskScore = (typeof DeviceRiskScoreObject)[keyof typeof DeviceRiskScoreObject];
export interface Dictionary extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export type DisableUserEntityIdentifier = (typeof DisableUserEntityIdentifierObject)[keyof typeof DisableUserEntityIdentifierObject];
export interface DisableUserResponseAction extends Parsable, ResponseAction {
    /**
     * The identifier property
     */
    identifier?: DisableUserEntityIdentifier[];
}
export interface DispositionReviewStage extends Entity, Parsable {
    /**
     * Name representing each stage within a collection.
     */
    name?: string;
    /**
     * A collection of reviewers at each stage.
     */
    reviewersEmailAddresses?: string[];
    /**
     * The sequence number for each stage of the disposition review.
     */
    stageNumber?: number;
}
export interface DispositionReviewStageCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: DispositionReviewStage[];
}
export interface DowngradeJustification extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * Indicates whether the downgrade is or isn't justified.
     */
    isDowngradeJustified?: boolean;
    /**
     * Message that indicates why a downgrade is justified. The message appears in administrative logs.
     */
    justificationMessage?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export interface EdiscoveryAddToReviewSetOperation extends CaseOperation, Parsable {
    /**
     * eDiscovery review set to which items matching source collection query gets added.
     */
    reviewSet?: EdiscoveryReviewSet;
    /**
     * eDiscovery search that gets added to review set.
     */
    search?: EdiscoverySearch;
}
export interface EdiscoveryCase extends CaseEscaped, Parsable {
    /**
     * The user who closed the case.
     */
    closedBy?: IdentitySet;
    /**
     * The date and time when the case was closed. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
     */
    closedDateTime?: Date;
    /**
     * Returns a list of case ediscoveryCustodian objects for this case.
     */
    custodians?: EdiscoveryCustodian[];
    /**
     * The external case number for customer reference.
     */
    externalId?: string;
    /**
     * Returns a list of case eDiscoveryHoldPolicy objects for this case.
     */
    legalHolds?: EdiscoveryHoldPolicy[];
    /**
     * Returns a list of case ediscoveryNoncustodialDataSource objects for this case.
     */
    noncustodialDataSources?: EdiscoveryNoncustodialDataSource[];
    /**
     * Returns a list of case caseOperation objects for this case.
     */
    operations?: CaseOperation[];
    /**
     * Returns a list of eDiscoveryReviewSet objects in the case.
     */
    reviewSets?: EdiscoveryReviewSet[];
    /**
     * Returns a list of eDiscoverySearch objects associated with this case.
     */
    searches?: EdiscoverySearch[];
    /**
     * Returns a list of eDIscoverySettings objects in the case.
     */
    settings?: EdiscoveryCaseSettings;
    /**
     * Returns a list of ediscoveryReviewTag objects associated to this case.
     */
    tags?: EdiscoveryReviewTag[];
}
export interface EdiscoveryCaseCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: EdiscoveryCase[];
}
export interface EdiscoveryCaseSettings extends Entity, Parsable {
    /**
     * The OCR (Optical Character Recognition) settings for the case.
     */
    ocr?: OcrSettings;
    /**
     * The redundancy (near duplicate and email threading) detection settings for the case.
     */
    redundancyDetection?: RedundancyDetectionSettings;
    /**
     * The Topic Modeling (Themes) settings for the case.
     */
    topicModeling?: TopicModelingSettings;
}
export interface EdiscoveryCustodian extends DataSourceContainer, Parsable {
    /**
     * Date and time the custodian acknowledged a hold notification.
     */
    acknowledgedDateTime?: Date;
    /**
     * Email address of the custodian.
     */
    email?: string;
    /**
     * Operation entity that represents the latest indexing for the custodian.
     */
    lastIndexOperation?: EdiscoveryIndexOperation;
    /**
     * Data source entity for SharePoint sites associated with the custodian.
     */
    siteSources?: SiteSource[];
    /**
     * Data source entity for groups associated with the custodian.
     */
    unifiedGroupSources?: UnifiedGroupSource[];
    /**
     * Data source entity for a custodian. This is the container for a custodian's mailbox and OneDrive for Business site.
     */
    userSources?: UserSource[];
}
export interface EdiscoveryCustodianCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: EdiscoveryCustodian[];
}
export interface EdiscoveryEstimateOperation extends CaseOperation, Parsable {
    /**
     * The estimated count of items for the search that matched the content query.
     */
    indexedItemCount?: number;
    /**
     * The estimated size of items for the search that matched the content query.
     */
    indexedItemsSize?: number;
    /**
     * The number of mailboxes that had search hits.
     */
    mailboxCount?: number;
    /**
     * eDiscovery search.
     */
    search?: EdiscoverySearch;
    /**
     * The number of mailboxes that had search hits.
     */
    siteCount?: number;
    /**
     * The estimated count of unindexed items for the collection.
     */
    unindexedItemCount?: number;
    /**
     * The estimated size of unindexed items for the collection.
     */
    unindexedItemsSize?: number;
}
export interface EdiscoveryExportOperation extends CaseOperation, Parsable {
    /**
     * The azureBlobContainer property
     */
    azureBlobContainer?: string;
    /**
     * The azureBlobToken property
     */
    azureBlobToken?: string;
    /**
     * The description provided for the export.
     */
    description?: string;
    /**
     * The exportFileMetadata property
     */
    exportFileMetadata?: ExportFileMetadata[];
    /**
     * The options provided for the export. For more information, see reviewSet: export. Possible values are: originalFiles, text, pdfReplacement, fileInfo, tags. The fileInfo member is deprecated and will stop returning data on April 30, 2023. Going forward, the summary and load file are always included.
     */
    exportOptions?: ExportOptions[];
    /**
     * The options provided that specify the structure of the export. For more information, see reviewSet: export. Possible values are: none, directory, pst.
     */
    exportStructure?: ExportFileStructure;
    /**
     * The outputFolderId property
     */
    outputFolderId?: string;
    /**
     * The name provided for the export.
     */
    outputName?: string;
    /**
     * Review set from where documents are exported.
     */
    reviewSet?: EdiscoveryReviewSet;
    /**
     * The review set query that is used to filter the documents for export.
     */
    reviewSetQuery?: EdiscoveryReviewSetQuery;
}
export interface EdiscoveryFile extends File, Parsable {
    /**
     * Custodians associated with the file.
     */
    custodian?: EdiscoveryCustodian;
    /**
     * Tags associated with the file.
     */
    tags?: EdiscoveryReviewTag[];
}
export interface EdiscoveryFileCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: EdiscoveryFile[];
}
export interface EdiscoveryHoldOperation extends CaseOperation, Parsable {
}
export interface EdiscoveryHoldPolicy extends Parsable, PolicyBase {
    /**
     * KQL query that specifies content to be held in the specified locations. To learn more, see Keyword queries and search conditions for Content Search and eDiscovery.  To hold all content in the specified locations, leave contentQuery blank.
     */
    contentQuery?: string;
    /**
     * Lists any errors that happened while placing the hold.
     */
    errors?: string[];
    /**
     * Indicates whether the hold is enabled and actively holding content.
     */
    isEnabled?: boolean;
    /**
     * Data sources that represent SharePoint sites.
     */
    siteSources?: SiteSource[];
    /**
     * Data sources that represent Exchange mailboxes.
     */
    userSources?: UserSource[];
}
export interface EdiscoveryHoldPolicyCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: EdiscoveryHoldPolicy[];
}
export interface EdiscoveryIndexOperation extends CaseOperation, Parsable {
}
export interface EdiscoveryNoncustodialDataSource extends DataSourceContainer, Parsable {
    /**
     * User source or SharePoint site data source as non-custodial data source.
     */
    dataSource?: DataSource;
    /**
     * Operation entity that represents the latest indexing for the non-custodial data source.
     */
    lastIndexOperation?: EdiscoveryIndexOperation;
}
export interface EdiscoveryNoncustodialDataSourceCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: EdiscoveryNoncustodialDataSource[];
}
export interface EdiscoveryPurgeDataOperation extends CaseOperation, Parsable {
}
export interface EdiscoveryReviewSet extends DataSet, Parsable {
    /**
     * Represents files within the review set.
     */
    files?: EdiscoveryFile[];
    /**
     * Represents queries within the review set.
     */
    queries?: EdiscoveryReviewSetQuery[];
}
export interface EdiscoveryReviewSetCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: EdiscoveryReviewSet[];
}
export interface EdiscoveryReviewSetQuery extends Parsable, Search {
}
export interface EdiscoveryReviewSetQueryCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: EdiscoveryReviewSetQuery[];
}
export interface EdiscoveryReviewTag extends Parsable, Tag {
    /**
     * Indicates whether a single or multiple child tags can be associated with a document. Possible values are: One, Many.  This value controls whether the UX presents the tags as checkboxes or a radio button group.
     */
    childSelectability?: ChildSelectability;
    /**
     * Returns the tags that are a child of a tag.
     */
    childTags?: EdiscoveryReviewTag[];
    /**
     * Returns the parent tag of the specified tag.
     */
    parent?: EdiscoveryReviewTag;
}
export interface EdiscoveryReviewTagCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: EdiscoveryReviewTag[];
}
export interface EdiscoverySearch extends Parsable, Search {
    /**
     * Adds an additional source to the eDiscovery search.
     */
    additionalSources?: DataSource[];
    /**
     * Adds the results of the eDiscovery search to the specified reviewSet.
     */
    addToReviewSetOperation?: EdiscoveryAddToReviewSetOperation;
    /**
     * Custodian sources that are included in the eDiscovery search.
     */
    custodianSources?: DataSource[];
    /**
     * When specified, the collection will span across a service for an entire workload. Possible values are: none, allTenantMailboxes, allTenantSites, allCaseCustodians, allCaseNoncustodialDataSources.
     */
    dataSourceScopes?: DataSourceScopes[];
    /**
     * The last estimate operation associated with the eDiscovery search.
     */
    lastEstimateStatisticsOperation?: EdiscoveryEstimateOperation;
    /**
     * noncustodialDataSource sources that are included in the eDiscovery search
     */
    noncustodialSources?: EdiscoveryNoncustodialDataSource[];
}
export interface EdiscoverySearchCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: EdiscoverySearch[];
}
export interface EdiscoverySearchExportOperation extends CaseOperation, Parsable {
    /**
     * The additionalOptions property
     */
    additionalOptions?: AdditionalOptions[];
    /**
     * The description property
     */
    description?: string;
    /**
     * The displayName property
     */
    displayName?: string;
    /**
     * The exportCriteria property
     */
    exportCriteria?: ExportCriteria[];
    /**
     * The exportFileMetadata property
     */
    exportFileMetadata?: ExportFileMetadata[];
    /**
     * The exportFormat property
     */
    exportFormat?: ExportFormat;
    /**
     * The exportLocation property
     */
    exportLocation?: ExportLocation[];
    /**
     * The exportSingleItems property
     */
    exportSingleItems?: boolean;
    /**
     * The search property
     */
    search?: EdiscoverySearch;
}
export interface EdiscoveryTagOperation extends CaseOperation, Parsable {
}
export interface EmailContentThreatSubmission extends EmailThreatSubmission, Parsable {
    /**
     * Base64 encoded file content.
     */
    fileContent?: string;
}
export type EmailEntityIdentifier = (typeof EmailEntityIdentifierObject)[keyof typeof EmailEntityIdentifierObject];
export interface EmailSender extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The name of the sender.
     */
    displayName?: string;
    /**
     * Sender domain.
     */
    domainName?: string;
    /**
     * Sender email address.
     */
    emailAddress?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export interface EmailThreatSubmission extends Parsable, ThreatSubmission {
    /**
     * If the email is phishing simulation, this field won't be null.
     */
    attackSimulationInfo?: AttackSimulationInfo;
    /**
     * Specifies the internet message ID of the email being submitted. This information is present in the email header.
     */
    internetMessageId?: string;
    /**
     * The original category of the submission. The possible values are: notJunk, spam, phishing, malware and unkownFutureValue.
     */
    originalCategory?: SubmissionCategory;
    /**
     * Specifies the date and time stamp when the email was received.
     */
    receivedDateTime?: Date;
    /**
     * Specifies the email address (in smtp format) of the recipient who received the email.
     */
    recipientEmailAddress?: string;
    /**
     * Specifies the email address of the sender.
     */
    sender?: string;
    /**
     * Specifies the IP address of the sender.
     */
    senderIP?: string;
    /**
     * Specifies the subject of the email.
     */
    subject?: string;
    /**
     * It's used to automatically add allows for the components such as URL, file, sender; which are deemed bad by Microsoft so that similar messages in the future can be allowed.
     */
    tenantAllowOrBlockListAction?: TenantAllowOrBlockListAction;
}
export interface EmailThreatSubmissionCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: EmailThreatSubmission[];
}
export interface EmailThreatSubmissionPolicy extends Entity, Parsable {
    /**
     * Specifies the email address of the sender from which email notifications will be sent to end users to inform them whether an email is spam, phish or clean. The default value is null. Optional for creation.
     */
    customizedNotificationSenderEmailAddress?: string;
    /**
     * Specifies the destination where the reported messages from end users land whenever they report something as phish, junk or not junk. The default value is null. Optional for creation.
     */
    customizedReportRecipientEmailAddress?: string;
    /**
     * Indicates whether end users can report a message as spam, phish or junk directly without a confirmation(popup). The default value is true.  Optional for creation.
     */
    isAlwaysReportEnabledForUsers?: boolean;
    /**
     * Indicates whether end users can confirm using a popup before reporting messages as spam, phish or not junk. The default value is true.  Optional for creation.
     */
    isAskMeEnabledForUsers?: boolean;
    /**
     * Indicates whether the email notifications sent to end users to inform them if an email is a phish mail, spam or junk is customized or not. The default value is false. Optional for creation.
     */
    isCustomizedMessageEnabled?: boolean;
    /**
     * If enabled, customized message only shows when email is reported as phishing. The default value is false. Optional for creation.
     */
    isCustomizedMessageEnabledForPhishing?: boolean;
    /**
     * Indicates whether to use the sender email address set using customizedNotificationSenderEmailAddress for sending email notifications to end users. The default value is false. Optional for creation.
     */
    isCustomizedNotificationSenderEnabled?: boolean;
    /**
     * Indicates whether end users can move the message from one folder to another based on the action of spam, phish or not junk without actually reporting it. The default value is true. Optional for creation.
     */
    isNeverReportEnabledForUsers?: boolean;
    /**
     * Indicates whether the branding logo should be used in the email notifications sent to end users. The default value is false. Optional for creation.
     */
    isOrganizationBrandingEnabled?: boolean;
    /**
     * Indicates whether end users can submit from the quarantine page. The default value is true. Optional for creation.
     */
    isReportFromQuarantineEnabled?: boolean;
    /**
     * Indicates whether emails reported by end users should be sent to the custom mailbox configured using customizedReportRecipientEmailAddress.  The default value is false. Optional for creation.
     */
    isReportToCustomizedEmailAddressEnabled?: boolean;
    /**
     * If enabled, the email is sent to Microsoft for analysis. The default value is false. Required for creation.
     */
    isReportToMicrosoftEnabled?: boolean;
    /**
     * Indicates whether an email notification is sent to the end user who reported the email when it has been reviewed by the admin. The default value is false. Optional for creation.
     */
    isReviewEmailNotificationEnabled?: boolean;
}
export interface EmailThreatSubmissionPolicyCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: EmailThreatSubmissionPolicy[];
}
export interface EmailUrlThreatSubmission extends EmailThreatSubmission, Parsable {
    /**
     * Specifies the url of the message to be submitted.
     */
    messageUrl?: string;
}
export interface EventPropagationResult extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The name of the specific location in the workload associated with the event.
     */
    location?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The name of the workload associated with the event.
     */
    serviceName?: string;
    /**
     * Indicates the status of the event creation request. The possible values are: none, inProcessing, failed, success.
     */
    status?: EventPropagationStatus;
    /**
     * Additional information about the status of the event creation request.
     */
    statusInformation?: string;
}
export type EventPropagationStatus = (typeof EventPropagationStatusObject)[keyof typeof EventPropagationStatusObject];
export interface EventQuery extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The query property
     */
    query?: string;
    /**
     * The queryType property
     */
    queryType?: QueryType;
}
export type EventStatusType = (typeof EventStatusTypeObject)[keyof typeof EventStatusTypeObject];
export type EvidenceRemediationStatus = (typeof EvidenceRemediationStatusObject)[keyof typeof EvidenceRemediationStatusObject];
export type EvidenceRole = (typeof EvidenceRoleObject)[keyof typeof EvidenceRoleObject];
export type EvidenceVerdict = (typeof EvidenceVerdictObject)[keyof typeof EvidenceVerdictObject];
export type ExportCriteria = (typeof ExportCriteriaObject)[keyof typeof ExportCriteriaObject];
export interface ExportFileMetadata extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The downloadUrl property
     */
    downloadUrl?: string;
    /**
     * The fileName property
     */
    fileName?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The size property
     */
    size?: number;
}
export type ExportFileStructure = (typeof ExportFileStructureObject)[keyof typeof ExportFileStructureObject];
export type ExportFormat = (typeof ExportFormatObject)[keyof typeof ExportFormatObject];
export type ExportLocation = (typeof ExportLocationObject)[keyof typeof ExportLocationObject];
export type ExportOptions = (typeof ExportOptionsObject)[keyof typeof ExportOptionsObject];
export interface File extends Entity, Parsable {
    /**
     * The content property
     */
    content?: string;
    /**
     * The dateTime property
     */
    dateTime?: Date;
    /**
     * The extension property
     */
    extension?: string;
    /**
     * The extractedTextContent property
     */
    extractedTextContent?: string;
    /**
     * The mediaType property
     */
    mediaType?: string;
    /**
     * The name property
     */
    name?: string;
    /**
     * The otherProperties property
     */
    otherProperties?: StringValueDictionary;
    /**
     * The processingStatus property
     */
    processingStatus?: FileProcessingStatus;
    /**
     * The senderOrAuthors property
     */
    senderOrAuthors?: string[];
    /**
     * The size property
     */
    size?: number;
    /**
     * The sourceType property
     */
    sourceType?: SourceType[];
    /**
     * The subjectTitle property
     */
    subjectTitle?: string;
}
export interface FileContentThreatSubmission extends FileThreatSubmission, Parsable {
    /**
     * It specifies the file content in base 64 format.
     */
    fileContent?: string;
}
export interface FileDetails extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The name of the file.
     */
    fileName?: string;
    /**
     * The file path (location) of the file instance.
     */
    filePath?: string;
    /**
     * The publisher of the file.
     */
    filePublisher?: string;
    /**
     * The size of the file in bytes.
     */
    fileSize?: number;
    /**
     * The certificate authority (CA) that issued the certificate.
     */
    issuer?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The Sha1 cryptographic hash of the file content.
     */
    sha1?: string;
    /**
     * The Sha256 cryptographic hash of the file content.
     */
    sha256?: string;
    /**
     * The signer of the signed file.
     */
    signer?: string;
}
export type FileEntityIdentifier = (typeof FileEntityIdentifierObject)[keyof typeof FileEntityIdentifierObject];
export interface FileEvidence extends AlertEvidence, Parsable {
    /**
     * The status of the detection.The possible values are: detected, blocked, prevented, unknownFutureValue.
     */
    detectionStatus?: DetectionStatus;
    /**
     * The file details.
     */
    fileDetails?: FileDetails;
    /**
     * A unique identifier assigned to a device by Microsoft Defender for Endpoint.
     */
    mdeDeviceId?: string;
}
export interface FileHash extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The algorithm property
     */
    algorithm?: FileHashAlgorithm;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The hash value.
     */
    value?: string;
}
export type FileHashAlgorithm = (typeof FileHashAlgorithmObject)[keyof typeof FileHashAlgorithmObject];
export interface FilePlanDescriptor extends Entity, Parsable {
    /**
     * Represents the file plan descriptor of type authority applied to a particular retention label.
     */
    authority?: Authority;
    /**
     * Specifies the underlying authority that describes the type of content to be retained and its retention schedule.
     */
    authorityTemplate?: AuthorityTemplate;
    /**
     * The category property
     */
    category?: AppliedCategory;
    /**
     * Specifies a group of similar types of content in a particular department.
     */
    categoryTemplate?: CategoryTemplate;
    /**
     * Represents the file plan descriptor of type citation applied to a particular retention label.
     */
    citation?: Citation;
    /**
     * The specific rule or regulation created by a jurisdiction used to determine whether certain labels and content should be retained or deleted.
     */
    citationTemplate?: CitationTemplate;
    /**
     * Represents the file plan descriptor of type department applied to a particular retention label.
     */
    department?: Department;
    /**
     * Specifies the  department or business unit of an organization to which a label belongs.
     */
    departmentTemplate?: DepartmentTemplate;
    /**
     * Represents the file plan descriptor of type filePlanReference applied to a particular retention label.
     */
    filePlanReference?: FilePlanReference;
    /**
     * Specifies a unique alpha-numeric identifier for an organization’s retention schedule.
     */
    filePlanReferenceTemplate?: FilePlanReferenceTemplate;
}
export interface FilePlanDescriptorBase extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * Unique string that defines the name for each file plan descriptor associated with a particular retention label.
     */
    displayName?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export interface FilePlanDescriptorTemplate extends Entity, Parsable {
    /**
     * Represents the user who created the filePlanDescriptorTemplate column.
     */
    createdBy?: IdentitySet;
    /**
     * Represents the date and time in which the filePlanDescriptorTemplate is created.
     */
    createdDateTime?: Date;
    /**
     * Unique string that defines a filePlanDescriptorTemplate name.
     */
    displayName?: string;
}
export interface FilePlanReference extends FilePlanDescriptorBase, Parsable {
}
export interface FilePlanReferenceTemplate extends FilePlanDescriptorTemplate, Parsable {
}
export interface FilePlanReferenceTemplateCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: FilePlanReferenceTemplate[];
}
export type FileProcessingStatus = (typeof FileProcessingStatusObject)[keyof typeof FileProcessingStatusObject];
export interface FileThreatSubmission extends Parsable, ThreatSubmission {
    /**
     * It specifies the file name to be submitted.
     */
    fileName?: string;
}
export interface FileThreatSubmissionCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: FileThreatSubmission[];
}
export interface FileUrlThreatSubmission extends FileThreatSubmission, Parsable {
    /**
     * It specifies the URL of the file that needs to be submitted.
     */
    fileUrl?: string;
}
export type ForceUserPasswordResetEntityIdentifier = (typeof ForceUserPasswordResetEntityIdentifierObject)[keyof typeof ForceUserPasswordResetEntityIdentifierObject];
export interface ForceUserPasswordResetResponseAction extends Parsable, ResponseAction {
    /**
     * The identifier property
     */
    identifier?: ForceUserPasswordResetEntityIdentifier[];
}
export interface FormattedContent extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The content of this formattedContent.
     */
    content?: string;
    /**
     * The format of the content. The possible values are: text, html, markdown, unknownFutureValue.
     */
    format?: ContentFormat;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export interface GitHubOrganizationEvidence extends AlertEvidence, Parsable {
    /**
     * The company property
     */
    company?: string;
    /**
     * The displayName property
     */
    displayName?: string;
    /**
     * The email property
     */
    email?: string;
    /**
     * The login property
     */
    login?: string;
    /**
     * The orgId property
     */
    orgId?: string;
    /**
     * The webUrl property
     */
    webUrl?: string;
}
export interface GitHubRepoEvidence extends AlertEvidence, Parsable {
    /**
     * The baseUrl property
     */
    baseUrl?: string;
    /**
     * The login property
     */
    login?: string;
    /**
     * The owner property
     */
    owner?: string;
    /**
     * The ownerType property
     */
    ownerType?: string;
    /**
     * The repoId property
     */
    repoId?: string;
}
export interface GitHubUserEvidence extends AlertEvidence, Parsable {
    /**
     * The email property
     */
    email?: string;
    /**
     * The login property
     */
    login?: string;
    /**
     * The name property
     */
    name?: string;
    /**
     * The userId property
     */
    userId?: string;
    /**
     * The webUrl property
     */
    webUrl?: string;
}
export type GoogleCloudLocationType = (typeof GoogleCloudLocationTypeObject)[keyof typeof GoogleCloudLocationTypeObject];
export interface GoogleCloudResourceEvidence extends AlertEvidence, Parsable {
    /**
     * The zone or region where the resource is located.
     */
    location?: string;
    /**
     * The type of location. Possible values are: unknown, regional, zonal, global, unknownFutureValue.
     */
    locationType?: GoogleCloudLocationType;
    /**
     * The Google project ID as defined by the user.
     */
    projectId?: string;
    /**
     * The project number assigned by Google.
     */
    projectNumber?: number;
    /**
     * The name of the resource.
     */
    resourceName?: string;
    /**
     * The type of the resource.
     */
    resourceType?: string;
}
export interface HardDeleteResponseAction extends Parsable, ResponseAction {
    /**
     * The identifier property
     */
    identifier?: EmailEntityIdentifier[];
}
export interface Host extends Artifact, Parsable {
    /**
     * The hostPairs that are resources associated with a host, where that host is the parentHost and has an outgoing pairing to a cihldHost.
     */
    childHostPairs?: HostPair[];
    /**
     * The hostComponents that are associated with this host.
     */
    components?: HostComponent[];
    /**
     * The hostCookies that are associated with this host.
     */
    cookies?: HostCookie[];
    /**
     * The first date and time when this host was observed. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    firstSeenDateTime?: Date;
    /**
     * The hostPairs that are associated with this host, where this host is either the parentHost or childHost.
     */
    hostPairs?: HostPair[];
    /**
     * The most recent date and time when this host was observed. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    lastSeenDateTime?: Date;
    /**
     * The hostPairs that are associated with a host, where that host is the childHost and has an incoming pairing with a parentHost.
     */
    parentHostPairs?: HostPair[];
    /**
     * Passive DNS retrieval about this host.
     */
    passiveDns?: PassiveDnsRecord[];
    /**
     * Reverse passive DNS retrieval about this host.
     */
    passiveDnsReverse?: PassiveDnsRecord[];
    /**
     * The hostPorts associated with a host.
     */
    ports?: HostPort[];
    /**
     * Represents a calculated reputation of this host.
     */
    reputation?: HostReputation;
    /**
     * The hostSslCertificates that are associated with this host.
     */
    sslCertificates?: HostSslCertificate[];
    /**
     * The subdomains that are associated with this host.
     */
    subdomains?: Subdomain[];
    /**
     * The hostTrackers that are associated with this host.
     */
    trackers?: HostTracker[];
    /**
     * The most recent whoisRecord for this host.
     */
    whois?: WhoisRecord;
}
export interface HostCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: Host[];
}
export interface HostComponent extends Artifact, Parsable {
    /**
     * The type of component that was detected (for example, Operating System, Framework, Remote Access, or Server).
     */
    category?: string;
    /**
     * The first date and time when this web component was observed by Microsoft Defender Threat Intelligence. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    firstSeenDateTime?: Date;
    /**
     * The host property
     */
    host?: Host;
    /**
     * The most recent date and time when this web component was observed by Microsoft Defender Threat Intelligence. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    lastSeenDateTime?: Date;
    /**
     * A name running on the artifact, for example, Microsoft IIS.
     */
    name?: string;
    /**
     * The component version running on the artifact, for example, v8.5. This shouldn't be assumed to be strictly numerical.
     */
    version?: string;
}
export interface HostComponentCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: HostComponent[];
}
export interface HostCookie extends Artifact, Parsable {
    /**
     * The URI for which the cookie is valid.
     */
    domain?: string;
    /**
     * The first date and time when this hostCookie was observed by Microsoft Defender Threat Intelligence. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    firstSeenDateTime?: Date;
    /**
     * The host property
     */
    host?: Host;
    /**
     * The most recent date and time when this hostCookie was observed by Microsoft Defender Threat Intelligence. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    lastSeenDateTime?: Date;
    /**
     * The name of the cookie, for example, JSESSIONID or SEARCH_NAMESITE.
     */
    name?: string;
}
export interface HostCookieCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: HostCookie[];
}
export interface HostLogonSessionEvidence extends AlertEvidence, Parsable {
    /**
     * The account property
     */
    account?: UserEvidence;
    /**
     * The endUtcDateTime property
     */
    endUtcDateTime?: Date;
    /**
     * The host property
     */
    host?: DeviceEvidence;
    /**
     * The sessionId property
     */
    sessionId?: string;
    /**
     * The startUtcDateTime property
     */
    startUtcDateTime?: Date;
}
export interface Hostname extends Host, Parsable {
    /**
     * The company or individual who registered this hostname, from WHOIS data.
     */
    registrant?: string;
    /**
     * The registrar for this hostname, from WHOIS data.
     */
    registrar?: string;
}
export interface HostPair extends Entity, Parsable {
    /**
     * The childHost property
     */
    childHost?: Host;
    /**
     * The first date and time when Microsoft Defender Threat Intelligence observed the hostPair. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z.
     */
    firstSeenDateTime?: Date;
    /**
     * The last date and time when Microsoft Defender Threat Intelligence observed the hostPair. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z.
     */
    lastSeenDateTime?: Date;
    /**
     * The reason that two hosts are identified as hostPair.
     */
    linkKind?: string;
    /**
     * The parentHost property
     */
    parentHost?: Host;
}
export interface HostPairCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: HostPair[];
}
export interface HostPort extends Entity, Parsable {
    /**
     * The hostPortBanners retrieved from scanning the port.
     */
    banners?: HostPortBanner[];
    /**
     * The first date and time when Microsoft Defender Threat Intelligence observed the hostPort. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z.
     */
    firstSeenDateTime?: Date;
    /**
     * The host property
     */
    host?: Host;
    /**
     * The last date and time when Microsoft Defender Threat Intelligence scanned the hostPort. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z.
     */
    lastScanDateTime?: Date;
    /**
     * The last date and time when Microsoft Defender Threat Intelligence observed the hostPort. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z.
     */
    lastSeenDateTime?: Date;
    /**
     * The most recent sslCertificate used to communicate on the port.
     */
    mostRecentSslCertificate?: SslCertificate;
    /**
     * The numerical identifier of the port which is standardized across the internet.
     */
    port?: number;
    /**
     * The general protocol used to scan the port. The possible values are: tcp, udp, unknownFutureValue.
     */
    protocol?: HostPortProtocol;
    /**
     * The hostPortComponents retrieved from scanning the port.
     */
    services?: HostPortComponent[];
    /**
     * The status of the port. The possible values are: open, filtered, closed, unknownFutureValue.
     */
    status?: HostPortStatus;
    /**
     * The total amount of times that Microsoft Defender Threat Intelligence has observed the hostPort in all its scans.
     */
    timesObserved?: number;
}
export interface HostPortBanner extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The text response received from a web component when scanning a hostPort.
     */
    banner?: string;
    /**
     * The first date and time when Microsoft Defender Threat Intelligence observed the hostPortBanner. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z.
     */
    firstSeenDateTime?: Date;
    /**
     * The last date and time when Microsoft Defender Threat Intelligence observed the hostPortBanner. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z.
     */
    lastSeenDateTime?: Date;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The specific protocol used to scan the hostPort.
     */
    scanProtocol?: string;
    /**
     * The total amount of times that Microsoft Defender Threat Intelligence has observed the hostPortBanner in all its scans.
     */
    timesObserved?: number;
}
export interface HostPortCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: HostPort[];
}
export interface HostPortComponent extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The component property
     */
    component?: HostComponent;
    /**
     * The first date and time when Microsoft Defender Threat Intelligence observed the hostPortComponent. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z.
     */
    firstSeenDateTime?: Date;
    /**
     * Indicates whether this hostPortComponent is recent, which is determined by whether the hostPortComponent was observed either at the same time or after the latest hostPortBanner in the scan history, or within two days of the latest scan of the hostPort when there are no hostPortBanners in the scan history.
     */
    isRecent?: boolean;
    /**
     * The last date and time when Microsoft Defender Threat Intelligence observed the hostPortComponent. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z.
     */
    lastSeenDateTime?: Date;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export type HostPortProtocol = (typeof HostPortProtocolObject)[keyof typeof HostPortProtocolObject];
export type HostPortStatus = (typeof HostPortStatusObject)[keyof typeof HostPortStatusObject];
export interface HostReputation extends Entity, Parsable {
    /**
     * The classification property
     */
    classification?: HostReputationClassification;
    /**
     * A collection of rules that have been used to calculate the classification and score.
     */
    rules?: HostReputationRule[];
    /**
     * The calculated score (0-100) of the requested host. A higher value indicates that this host is more likely to be suspicious or malicious.
     */
    score?: number;
}
export type HostReputationClassification = (typeof HostReputationClassificationObject)[keyof typeof HostReputationClassificationObject];
export interface HostReputationRule extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The description of the rule that gives more context.
     */
    description?: string;
    /**
     * The name of the rule.
     */
    name?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Link to a web page with details related to this rule.
     */
    relatedDetailsUrl?: string;
    /**
     * The severity property
     */
    severity?: HostReputationRuleSeverity;
}
export type HostReputationRuleSeverity = (typeof HostReputationRuleSeverityObject)[keyof typeof HostReputationRuleSeverityObject];
export interface HostSslCertificate extends Artifact, Parsable {
    /**
     * The first date and time that this hostSslCertificate was observed. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    firstSeenDateTime?: Date;
    /**
     * The host for this hostSslCertificate.
     */
    host?: Host;
    /**
     * The most recent date and time that this hostSslCertificate was observed. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    lastSeenDateTime?: Date;
    /**
     * The ports related with this hostSslCertificate.
     */
    ports?: HostSslCertificatePort[];
    /**
     * The sslCertificate for this hostSslCertificate.
     */
    sslCertificate?: SslCertificate;
}
export interface HostSslCertificateCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: HostSslCertificate[];
}
export interface HostSslCertificatePort extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The first date and time that this port was observed. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    firstSeenDateTime?: Date;
    /**
     * The most recent date and time that this port was observed. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    lastSeenDateTime?: Date;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The port number.
     */
    port?: number;
}
export interface HostTracker extends Artifact, Parsable {
    /**
     * The first date and time when this hostTracker was observed by Microsoft Defender Threat Intelligence. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    firstSeenDateTime?: Date;
    /**
     * The host property
     */
    host?: Host;
    /**
     * The kind of hostTracker that was detected. For example, GoogleAnalyticsID or JarmHash.
     */
    kind?: string;
    /**
     * The most recent date and time when this hostTracker was observed by Microsoft Defender Threat Intelligence. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    lastSeenDateTime?: Date;
    /**
     * The identification value for the hostTracker.
     */
    value?: string;
}
export interface HostTrackerCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: HostTracker[];
}
export interface HuntingQueryResults extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The results of the hunting query.
     */
    results?: HuntingRowResult[];
    /**
     * The schema for the response.
     */
    schema?: SinglePropertySchema[];
}
export interface HuntingRowResult extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export type HuntingRuleErrorCode = (typeof HuntingRuleErrorCodeObject)[keyof typeof HuntingRuleErrorCodeObject];
export type HuntingRuleRunStatus = (typeof HuntingRuleRunStatusObject)[keyof typeof HuntingRuleRunStatusObject];
export interface Hyperlink extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The name for this hyperlink.
     */
    name?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The URL for this hyperlink.
     */
    url?: string;
}
export interface ImpactedAsset extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export interface ImpactedDeviceAsset extends ImpactedAsset, Parsable {
    /**
     * The identifier property
     */
    identifier?: DeviceAssetIdentifier;
}
export interface ImpactedMailboxAsset extends ImpactedAsset, Parsable {
    /**
     * The identifier property
     */
    identifier?: MailboxAssetIdentifier;
}
export interface ImpactedUserAsset extends ImpactedAsset, Parsable {
    /**
     * The identifier property
     */
    identifier?: UserAssetIdentifier;
}
export interface Incident extends Entity, Parsable {
    /**
     * The list of related alerts. Supports $expand.
     */
    alerts?: Alert[];
    /**
     * Owner of the incident, or null if no owner is assigned. Free editable text.
     */
    assignedTo?: string;
    /**
     * The specification for the incident. Possible values are: unknown, falsePositive, truePositive, informationalExpectedActivity, unknownFutureValue.
     */
    classification?: AlertClassification;
    /**
     * Array of comments created by the Security Operations (SecOps) team when the incident is managed.
     */
    comments?: AlertComment[];
    /**
     * Time when the incident was first created.
     */
    createdDateTime?: Date;
    /**
     * Array of custom tags associated with an incident.
     */
    customTags?: string[];
    /**
     * The description property
     */
    description?: string;
    /**
     * Specifies the determination of the incident. Possible values are: unknown, apt, malware, securityPersonnel, securityTesting, unwantedSoftware, other, multiStagedAttack, compromisedUser, phishing, maliciousUserActivity, clean, insufficientData, confirmedUserActivity, lineOfBusinessApplication, unknownFutureValue.
     */
    determination?: AlertDetermination;
    /**
     * The incident name.
     */
    displayName?: string;
    /**
     * The URL for the incident page in the Microsoft 365 Defender portal.
     */
    incidentWebUrl?: string;
    /**
     * The lastModifiedBy property
     */
    lastModifiedBy?: string;
    /**
     * Time when the incident was last updated.
     */
    lastUpdateDateTime?: Date;
    /**
     * The recommendedActions property
     */
    recommendedActions?: string;
    /**
     * The recommendedHuntingQueries property
     */
    recommendedHuntingQueries?: RecommendedHuntingQuery[];
    /**
     * Only populated in case an incident is grouped together with another incident, as part of the logic that processes incidents. In such a case, the status property is redirected.
     */
    redirectIncidentId?: string;
    /**
     * The severity property
     */
    severity?: AlertSeverity;
    /**
     * The status property
     */
    status?: IncidentStatus;
    /**
     * The systemTags property
     */
    systemTags?: string[];
    /**
     * The Microsoft Entra tenant in which the alert was created.
     */
    tenantId?: string;
}
export interface IncidentCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: Incident[];
}
export type IncidentStatus = (typeof IncidentStatusObject)[keyof typeof IncidentStatusObject];
export interface Indicator extends Entity, Parsable {
    /**
     * The artifact property
     */
    artifact?: Artifact;
    /**
     * The source property
     */
    source?: IndicatorSource;
}
export type IndicatorSource = (typeof IndicatorSourceObject)[keyof typeof IndicatorSourceObject];
export interface InformationProtection extends Entity, Parsable {
    /**
     * Read the Microsoft Purview Information Protection policy settings for the user or organization.
     */
    labelPolicySettings?: InformationProtectionPolicySetting;
    /**
     * Read the Microsoft Purview Information Protection labels for the user or organization.
     */
    sensitivityLabels?: SensitivityLabel[];
}
export interface InformationProtectionAction extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export interface InformationProtectionPolicySetting extends Entity, Parsable {
    /**
     * The defaultLabelId property
     */
    defaultLabelId?: string;
    /**
     * Exposes whether justification input is required on label downgrade.
     */
    isDowngradeJustificationRequired?: boolean;
    /**
     * Exposes whether mandatory labeling is enabled.
     */
    isMandatory?: boolean;
    /**
     * Exposes the more information URL that can be configured by the administrator.
     */
    moreInfoUrl?: string;
}
export interface InitiateInvestigationResponseAction extends Parsable, ResponseAction {
    /**
     * The identifier property
     */
    identifier?: DeviceIdEntityIdentifier[];
}
export interface IntelligenceProfile extends Entity, Parsable {
    /**
     * A list of commonly-known aliases for the threat intelligence included in the intelligenceProfile.
     */
    aliases?: string[];
    /**
     * The country/region of origin for the given actor or threat associated with this intelligenceProfile.
     */
    countriesOrRegionsOfOrigin?: IntelligenceProfileCountryOrRegionOfOrigin[];
    /**
     * The description property
     */
    description?: FormattedContent;
    /**
     * The date and time when this intelligenceProfile was first active.  The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    firstActiveDateTime?: Date;
    /**
     * Includes an assemblage of high-fidelity network indicators of compromise.
     */
    indicators?: IntelligenceProfileIndicator[];
    /**
     * The kind property
     */
    kind?: IntelligenceProfileKind;
    /**
     * The summary property
     */
    summary?: FormattedContent;
    /**
     * Known targets related to this intelligenceProfile.
     */
    targets?: string[];
    /**
     * The title of this intelligenceProfile.
     */
    title?: string;
    /**
     * Formatted information featuring a description of the distinctive tactics, techniques, and procedures (TTP) of the group, followed by a list of all known custom, commodity, and publicly available implants used by the group.
     */
    tradecraft?: FormattedContent;
}
export interface IntelligenceProfileCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: IntelligenceProfile[];
}
export interface IntelligenceProfileCountryOrRegionOfOrigin extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * A codified representation for this country/region of origin.
     */
    code?: string;
    /**
     * A display label for this ountry/region of origin.
     */
    label?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export interface IntelligenceProfileIndicator extends Indicator, Parsable {
    /**
     * Designate when an artifact was first used actively in an attack, when a particular sample was compiled, or if neither of those could be ascertained when the file was first seen in public repositories (for example, VirusTotal, ANY.RUN, Hybrid Analysis) or reported publicly.
     */
    firstSeenDateTime?: Date;
    /**
     * Designate when an artifact was most recently used actively in an attack, when a particular sample was compiled, or if neither of those could be ascertained when the file was first seen in public repositories (for example, VirusTotal, ANY.RUN, Hybrid Analysis) or reported publicly.
     */
    lastSeenDateTime?: Date;
}
export interface IntelligenceProfileIndicatorCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: IntelligenceProfileIndicator[];
}
export type IntelligenceProfileKind = (typeof IntelligenceProfileKindObject)[keyof typeof IntelligenceProfileKindObject];
export interface IoTDeviceEvidence extends AlertEvidence, Parsable {
    /**
     * The deviceId property
     */
    deviceId?: string;
    /**
     * The deviceName property
     */
    deviceName?: string;
    /**
     * The devicePageLink property
     */
    devicePageLink?: string;
    /**
     * The deviceSubType property
     */
    deviceSubType?: string;
    /**
     * The deviceType property
     */
    deviceType?: string;
    /**
     * The importance property
     */
    importance?: IoTDeviceImportanceType;
    /**
     * The ioTHub property
     */
    ioTHub?: AzureResourceEvidence;
    /**
     * The ioTSecurityAgentId property
     */
    ioTSecurityAgentId?: string;
    /**
     * The ipAddress property
     */
    ipAddress?: IpEvidence;
    /**
     * The isAuthorized property
     */
    isAuthorized?: boolean;
    /**
     * The isProgramming property
     */
    isProgramming?: boolean;
    /**
     * The isScanner property
     */
    isScanner?: boolean;
    /**
     * The macAddress property
     */
    macAddress?: string;
    /**
     * The manufacturer property
     */
    manufacturer?: string;
    /**
     * The model property
     */
    model?: string;
    /**
     * The nics property
     */
    nics?: NicEvidence;
    /**
     * The operatingSystem property
     */
    operatingSystem?: string;
    /**
     * The owners property
     */
    owners?: string[];
    /**
     * The protocols property
     */
    protocols?: string[];
    /**
     * The purdueLayer property
     */
    purdueLayer?: string;
    /**
     * The sensor property
     */
    sensor?: string;
    /**
     * The serialNumber property
     */
    serialNumber?: string;
    /**
     * The site property
     */
    site?: string;
    /**
     * The source property
     */
    source?: string;
    /**
     * The sourceRef property
     */
    sourceRef?: UrlEvidence;
    /**
     * The zone property
     */
    zone?: string;
}
export type IoTDeviceImportanceType = (typeof IoTDeviceImportanceTypeObject)[keyof typeof IoTDeviceImportanceTypeObject];
export interface IpAddress extends Host, Parsable {
    /**
     * The details about the autonomous system to which this IP address belongs.
     */
    autonomousSystem?: AutonomousSystem;
    /**
     * The country/region for this IP address.
     */
    countryOrRegion?: string;
    /**
     * The hosting company listed for this host.
     */
    hostingProvider?: string;
    /**
     * The block of IP addresses this IP address belongs to.
     */
    netblock?: string;
}
export interface IpEvidence extends AlertEvidence, Parsable {
    /**
     * The two-letter country code according to ISO 3166 format, for example: US, UK, or CA.).
     */
    countryLetterCode?: string;
    /**
     * The value of the IP Address can be either in V4 address or V6 address format.
     */
    ipAddress?: string;
}
export interface IsolateDeviceResponseAction extends Parsable, ResponseAction {
    /**
     * The identifier property
     */
    identifier?: DeviceIdEntityIdentifier[];
    /**
     * The isolationType property
     */
    isolationType?: IsolationType;
}
export type IsolationType = (typeof IsolationTypeObject)[keyof typeof IsolationTypeObject];
export interface JustifyAction extends InformationProtectionAction, Parsable {
}
export interface KeyValuePair extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * Name for this key-value pair.
     */
    name?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Value for this key-value pair.
     */
    value?: string;
}
export interface KubernetesClusterEvidence extends AlertEvidence, Parsable {
    /**
     * The cloud identifier of the cluster. Can be either an amazonResourceEvidence, azureResourceEvidence, or googleCloudResourceEvidence object.
     */
    cloudResource?: AlertEvidence;
    /**
     * The distribution type of the cluster.
     */
    distribution?: string;
    /**
     * The cluster name.
     */
    name?: string;
    /**
     * The platform the cluster runs on. Possible values are: unknown, aks, eks, gke, arc, unknownFutureValue.
     */
    platform?: KubernetesPlatform;
    /**
     * The kubernetes version of the cluster.
     */
    version?: string;
}
export interface KubernetesControllerEvidence extends AlertEvidence, Parsable {
    /**
     * The labels for the Kubernetes pod.
     */
    labels?: Dictionary;
    /**
     * The controller name.
     */
    name?: string;
    /**
     * The service account namespace.
     */
    namespace?: KubernetesNamespaceEvidence;
    /**
     * The controller type.
     */
    type?: string;
}
export interface KubernetesNamespaceEvidence extends AlertEvidence, Parsable {
    /**
     * The namespace cluster.
     */
    cluster?: KubernetesClusterEvidence;
    /**
     * The labels for the Kubernetes pod.
     */
    labels?: Dictionary;
    /**
     * The namespace name.
     */
    name?: string;
}
export type KubernetesPlatform = (typeof KubernetesPlatformObject)[keyof typeof KubernetesPlatformObject];
export interface KubernetesPodEvidence extends AlertEvidence, Parsable {
    /**
     * The list of pod containers which are not init or ephemeral containers.
     */
    containers?: ContainerEvidence[];
    /**
     * The pod controller.
     */
    controller?: KubernetesControllerEvidence;
    /**
     * The list of pod ephemeral containers.
     */
    ephemeralContainers?: ContainerEvidence[];
    /**
     * The list of pod init containers.
     */
    initContainers?: ContainerEvidence[];
    /**
     * The pod labels.
     */
    labels?: Dictionary;
    /**
     * The pod name.
     */
    name?: string;
    /**
     * The pod namespace.
     */
    namespace?: KubernetesNamespaceEvidence;
    /**
     * The pod IP.
     */
    podIp?: IpEvidence;
    /**
     * The pod service account.
     */
    serviceAccount?: KubernetesServiceAccountEvidence;
}
export interface KubernetesSecretEvidence extends AlertEvidence, Parsable {
    /**
     * The secret name.
     */
    name?: string;
    /**
     * The secret namespace.
     */
    namespace?: KubernetesNamespaceEvidence;
    /**
     * The secret type can include both built-in types and custom ones. Examples of built-in types are: Opaque, kubernetes.io/service-account-token, kubernetes.io/dockercfg, kubernetes.io/dockerconfigjson, kubernetes.io/basic-auth, kubernetes.io/ssh-auth, kubernetes.io/tls, bootstrap.kubernetes.io/token.
     */
    secretType?: string;
}
export interface KubernetesServiceAccountEvidence extends AlertEvidence, Parsable {
    /**
     * The service account name.
     */
    name?: string;
    /**
     * The service account namespace.
     */
    namespace?: KubernetesNamespaceEvidence;
}
export interface KubernetesServiceEvidence extends AlertEvidence, Parsable {
    /**
     * The service cluster IP.
     */
    clusterIP?: IpEvidence;
    /**
     * The service external IPs.
     */
    externalIPs?: IpEvidence[];
    /**
     * The service labels.
     */
    labels?: Dictionary;
    /**
     * The service name.
     */
    name?: string;
    /**
     * The service namespace.
     */
    namespace?: KubernetesNamespaceEvidence;
    /**
     * The service selector.
     */
    selector?: Dictionary;
    /**
     * The list of service ports.
     */
    servicePorts?: KubernetesServicePort[];
    /**
     * The serviceType property
     */
    serviceType?: KubernetesServiceType;
}
export interface KubernetesServicePort extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The application protocol for this port.
     */
    appProtocol?: string;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The name of this port within the service.
     */
    name?: string;
    /**
     * The port on each node on which this service is exposed when the type is either NodePort or LoadBalancer.
     */
    nodePort?: number;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The port that this service exposes.
     */
    port?: number;
    /**
     * The protocol name. Possible values are: udp, tcp, sctp, unknownFutureValue.
     */
    protocol?: ContainerPortProtocol;
    /**
     * The name or number of the port to access on the pods targeted by the service. The port number must be in the range 1 to 65535. The name must be an IANASVCNAME.
     */
    targetPort?: string;
}
export type KubernetesServiceType = (typeof KubernetesServiceTypeObject)[keyof typeof KubernetesServiceTypeObject];
export interface LabelingOptions extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The assignmentMethod property
     */
    assignmentMethod?: AssignmentMethod;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The downgrade justification object that indicates if downgrade was justified and, if so, the reason.
     */
    downgradeJustification?: DowngradeJustification;
    /**
     * Extended properties will be parsed and returned in the standard Microsoft Purview Information Protection labeled metadata format as part of the label information.
     */
    extendedProperties?: KeyValuePair[];
    /**
     * The GUID of the label that should be applied to the information.
     */
    labelId?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export interface LabelsRoot extends Entity, Parsable {
    /**
     * Specifies the underlying authority that describes the type of content to be retained and its retention schedule.
     */
    authorities?: AuthorityTemplate[];
    /**
     * Specifies a group of similar types of content in a particular department.
     */
    categories?: CategoryTemplate[];
    /**
     * The specific rule or regulation created by a jurisdiction used to determine whether certain labels and content should be retained or deleted.
     */
    citations?: CitationTemplate[];
    /**
     * Specifies the department or business unit of an organization to which a label belongs.
     */
    departments?: DepartmentTemplate[];
    /**
     * Specifies a unique alpha-numeric identifier for an organization’s retention schedule.
     */
    filePlanReferences?: FilePlanReferenceTemplate[];
    /**
     * Represents how customers can manage their data, whether and for how long to retain or delete it.
     */
    retentionLabels?: RetentionLabel[];
}
export interface LoggedOnUser extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * User account name of the logged-on user.
     */
    accountName?: string;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * User account domain of the logged-on user.
     */
    domainName?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export type LongRunningOperationStatus = (typeof LongRunningOperationStatusObject)[keyof typeof LongRunningOperationStatusObject];
export type MailboxAssetIdentifier = (typeof MailboxAssetIdentifierObject)[keyof typeof MailboxAssetIdentifierObject];
export interface MailboxEvidence extends AlertEvidence, Parsable {
    /**
     * The name associated with the mailbox.
     */
    displayName?: string;
    /**
     * The primary email address of the mailbox.
     */
    primaryAddress?: string;
    /**
     * The user account of the mailbox.
     */
    userAccount?: UserAccount;
}
export interface MailClusterEvidence extends AlertEvidence, Parsable {
    /**
     * The clustering logic of the emails inside the cluster.
     */
    clusterBy?: string;
    /**
     * The value utilized to cluster the similar emails.
     */
    clusterByValue?: string;
    /**
     * Count of emails in the email cluster.
     */
    emailCount?: number;
    /**
     * Unique identifiers for the emails in the cluster, generated by Microsoft 365.
     */
    networkMessageIds?: string[];
    /**
     * The query used to identify the email cluster.
     */
    query?: string;
    /**
     * Uniform resource name (URN) of the automated investigation where the cluster was identified.
     */
    urn?: string;
}
export interface MalwareEvidence extends AlertEvidence, Parsable {
    /**
     * The category property
     */
    category?: string;
    /**
     * The files property
     */
    files?: FileEvidence[];
    /**
     * The name property
     */
    name?: string;
    /**
     * The processes property
     */
    processes?: ProcessEvidence[];
}
export type MarkUserAsCompromisedEntityIdentifier = (typeof MarkUserAsCompromisedEntityIdentifierObject)[keyof typeof MarkUserAsCompromisedEntityIdentifierObject];
export interface MarkUserAsCompromisedResponseAction extends Parsable, ResponseAction {
    /**
     * The identifier property
     */
    identifier?: MarkUserAsCompromisedEntityIdentifier[];
}
export interface MetadataAction extends InformationProtectionAction, Parsable {
    /**
     * A collection of key-value pairs that should be added to the file.
     */
    metadataToAdd?: KeyValuePair[];
    /**
     * A collection of strings that indicate which keys to remove from the file metadata.
     */
    metadataToRemove?: string[];
}
export interface MoveToDeletedItemsResponseAction extends Parsable, ResponseAction {
    /**
     * The identifier property
     */
    identifier?: EmailEntityIdentifier[];
}
export interface MoveToInboxResponseAction extends Parsable, ResponseAction {
    /**
     * The identifier property
     */
    identifier?: EmailEntityIdentifier[];
}
export interface MoveToJunkResponseAction extends Parsable, ResponseAction {
    /**
     * The identifier property
     */
    identifier?: EmailEntityIdentifier[];
}
export interface NetworkConnectionEvidence extends AlertEvidence, Parsable {
    /**
     * The destinationAddress property
     */
    destinationAddress?: IpEvidence;
    /**
     * The destinationPort property
     */
    destinationPort?: number;
    /**
     * The protocol property
     */
    protocol?: ProtocolType;
    /**
     * The sourceAddress property
     */
    sourceAddress?: IpEvidence;
    /**
     * The sourcePort property
     */
    sourcePort?: number;
}
export interface NicEvidence extends AlertEvidence, Parsable {
    /**
     * The ipAddress property
     */
    ipAddress?: IpEvidence;
    /**
     * The macAddress property
     */
    macAddress?: string;
    /**
     * The vlans property
     */
    vlans?: string[];
}
export interface OauthApplicationEvidence extends AlertEvidence, Parsable {
    /**
     * Unique identifier of the application.
     */
    appId?: string;
    /**
     * Name of the application.
     */
    displayName?: string;
    /**
     * The unique identifier of the application object in Azure AD.
     */
    objectId?: string;
    /**
     * The name of the application publisher.
     */
    publisher?: string;
}
export interface OcrSettings extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * Indicates whether or not OCR is enabled for the case.
     */
    isEnabled?: boolean;
    /**
     * Maximum image size that will be processed in KB).
     */
    maxImageSize?: number;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The timeout duration for the OCR engine. A longer timeout might increase success of OCR, but might add to the total processing time.
     */
    timeout?: Duration;
}
export type OnboardingStatus = (typeof OnboardingStatusObject)[keyof typeof OnboardingStatusObject];
export interface OrganizationalScope extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The scopeNames property
     */
    scopeNames?: string[];
    /**
     * The scopeType property
     */
    scopeType?: ScopeType;
}
export interface PassiveDnsRecord extends Artifact, Parsable {
    /**
     * The artifact property
     */
    artifact?: Artifact;
    /**
     * The date and time that this passiveDnsRecord entry was collected by Microsoft. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    collectedDateTime?: Date;
    /**
     * The date and time when this passiveDnsRecord entry was first seen. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    firstSeenDateTime?: Date;
    /**
     * The date and time when this passiveDnsRecord entry was most recently seen. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    lastSeenDateTime?: Date;
    /**
     * The parentHost property
     */
    parentHost?: Host;
    /**
     * The DNS record type for this passiveDnsRecord entry.
     */
    recordType?: string;
}
export interface PassiveDnsRecordCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: PassiveDnsRecord[];
}
export interface PolicyBase extends Entity, Parsable {
    /**
     * The createdBy property
     */
    createdBy?: IdentitySet;
    /**
     * The createdDateTime property
     */
    createdDateTime?: Date;
    /**
     * The description property
     */
    description?: string;
    /**
     * The displayName property
     */
    displayName?: string;
    /**
     * The lastModifiedBy property
     */
    lastModifiedBy?: IdentitySet;
    /**
     * The lastModifiedDateTime property
     */
    lastModifiedDateTime?: Date;
    /**
     * The status property
     */
    status?: PolicyStatus;
}
export type PolicyStatus = (typeof PolicyStatusObject)[keyof typeof PolicyStatusObject];
export interface ProcessEvidence extends AlertEvidence, Parsable {
    /**
     * The status of the detection. The possible values are: detected, blocked, prevented, unknownFutureValue.
     */
    detectionStatus?: DetectionStatus;
    /**
     * Image file details.
     */
    imageFile?: FileDetails;
    /**
     * A unique identifier assigned to a device by Microsoft Defender for Endpoint.
     */
    mdeDeviceId?: string;
    /**
     * Date and time when the parent of the process was created. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    parentProcessCreationDateTime?: Date;
    /**
     * Process ID (PID) of the parent process that spawned the process.
     */
    parentProcessId?: number;
    /**
     * Parent process image file details.
     */
    parentProcessImageFile?: FileDetails;
    /**
     * Command line used to create the new process.
     */
    processCommandLine?: string;
    /**
     * Date and time when the process was created. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    processCreationDateTime?: Date;
    /**
     * Process ID (PID) of the newly created process.
     */
    processId?: number;
    /**
     * User details of the user that ran the process.
     */
    userAccount?: UserAccount;
}
export interface ProtectAdhocAction extends InformationProtectionAction, Parsable {
}
export interface ProtectByTemplateAction extends InformationProtectionAction, Parsable {
    /**
     * The unique identifier for a protection template in Microsoft Purview Information Protection to apply to the content.
     */
    templateId?: string;
}
export interface ProtectDoNotForwardAction extends InformationProtectionAction, Parsable {
}
export interface ProtectionRule extends Entity, Parsable {
    /**
     * The createdBy property
     */
    createdBy?: string;
    /**
     * The createdDateTime property
     */
    createdDateTime?: Date;
    /**
     * The displayName property
     */
    displayName?: string;
    /**
     * The isEnabled property
     */
    isEnabled?: boolean;
    /**
     * The lastModifiedBy property
     */
    lastModifiedBy?: string;
    /**
     * The lastModifiedDateTime property
     */
    lastModifiedDateTime?: Date;
}
export type ProtocolType = (typeof ProtocolTypeObject)[keyof typeof ProtocolTypeObject];
export type PurgeAreas = (typeof PurgeAreasObject)[keyof typeof PurgeAreasObject];
export type PurgeType = (typeof PurgeTypeObject)[keyof typeof PurgeTypeObject];
export interface QueryCondition extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The lastModifiedDateTime property
     */
    lastModifiedDateTime?: Date;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The queryText property
     */
    queryText?: string;
}
export type QueryType = (typeof QueryTypeObject)[keyof typeof QueryTypeObject];
export interface RecommendedHuntingQuery extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The kqlText property
     */
    kqlText?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export interface RecommendLabelAction extends InformationProtectionAction, Parsable {
    /**
     * Actions to take if the label is accepted by the user.
     */
    actions?: InformationProtectionAction[];
    /**
     * The actionSource property
     */
    actionSource?: ActionSource;
    /**
     * The sensitive information type GUIDs that caused the recommendation to be given.
     */
    responsibleSensitiveTypeIds?: string[];
    /**
     * The sensitivityLabelId property
     */
    sensitivityLabelId?: string;
}
export interface RedundancyDetectionSettings extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * Indicates whether email threading and near duplicate detection are enabled.
     */
    isEnabled?: boolean;
    /**
     * Specifies the maximum number of words used for email threading and near duplicate detection. To learn more, see Minimum/maximum number of words.
     */
    maxWords?: number;
    /**
     * Specifies the minimum number of words used for email threading and near duplicate detection. To learn more, see Minimum/maximum number of words.
     */
    minWords?: number;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Specifies the similarity level for documents to be put in the same near duplicate set. To learn more, see Document and email similarity threshold.
     */
    similarityThreshold?: number;
}
export interface RegistryKeyEvidence extends AlertEvidence, Parsable {
    /**
     * Registry hive of the key that the recorded action was applied to.
     */
    registryHive?: string;
    /**
     * Registry key that the recorded action was applied to.
     */
    registryKey?: string;
}
export interface RegistryValueEvidence extends AlertEvidence, Parsable {
    /**
     * A unique identifier assigned to a device by Microsoft Defender for Endpoint.
     */
    mdeDeviceId?: string;
    /**
     * Registry hive of the key that the recorded action was applied to.
     */
    registryHive?: string;
    /**
     * Registry key that the recorded action was applied to.
     */
    registryKey?: string;
    /**
     * Data of the registry value that the recorded action was applied to.
     */
    registryValue?: string;
    /**
     * Name of the registry value that the recorded action was applied to.
     */
    registryValueName?: string;
    /**
     * Data type, such as binary or string, of the registry value that the recorded action was applied to.
     */
    registryValueType?: string;
}
export type RemediationAction = (typeof RemediationActionObject)[keyof typeof RemediationActionObject];
export type RemediationSeverity = (typeof RemediationSeverityObject)[keyof typeof RemediationSeverityObject];
export interface RemoveContentFooterAction extends InformationProtectionAction, Parsable {
    /**
     * The name of the UI element of the footer to be removed.
     */
    uiElementNames?: string[];
}
export interface RemoveContentHeaderAction extends InformationProtectionAction, Parsable {
    /**
     * The name of the UI element of the header to be removed.
     */
    uiElementNames?: string[];
}
export interface RemoveProtectionAction extends InformationProtectionAction, Parsable {
}
export interface RemoveWatermarkAction extends InformationProtectionAction, Parsable {
    /**
     * The name of the UI element of watermark to be removed.
     */
    uiElementNames?: string[];
}
export interface ResponseAction extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export interface RestrictAppExecutionResponseAction extends Parsable, ResponseAction {
    /**
     * The identifier property
     */
    identifier?: DeviceIdEntityIdentifier[];
}
export interface RetentionDuration extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export interface RetentionDurationForever extends Parsable, RetentionDuration {
}
export interface RetentionDurationInDays extends Parsable, RetentionDuration {
    /**
     * Specifies the time period in days for which an item with the applied retention label will be retained for.
     */
    days?: number;
}
export interface RetentionEvent extends Entity, Parsable {
    /**
     * The user who created the retentionEvent.
     */
    createdBy?: IdentitySet;
    /**
     * The date time when the retentionEvent was created.
     */
    createdDateTime?: Date;
    /**
     * Optional information about the event.
     */
    description?: string;
    /**
     * Name of the event.
     */
    displayName?: string;
    /**
     * The eventPropagationResults property
     */
    eventPropagationResults?: EventPropagationResult[];
    /**
     * Represents the workload (SharePoint Online, OneDrive for Business, Exchange Online) and identification information associated with a retention event.
     */
    eventQueries?: EventQuery[];
    /**
     * The eventStatus property
     */
    eventStatus?: RetentionEventStatus;
    /**
     * Optional time when the event should be triggered.
     */
    eventTriggerDateTime?: Date;
    /**
     * The user who last modified the retentionEvent.
     */
    lastModifiedBy?: IdentitySet;
    /**
     * The latest date time when the retentionEvent was modified.
     */
    lastModifiedDateTime?: Date;
    /**
     * Last time the status of the event was updated.
     */
    lastStatusUpdateDateTime?: Date;
    /**
     * Specifies the event that will start the retention period for labels that use this event type when an event is created.
     */
    retentionEventType?: RetentionEventType;
}
export interface RetentionEventCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: RetentionEvent[];
}
export interface RetentionEventStatus extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The error if the status isn't successful.
     */
    errorEscaped?: PublicError;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The status of the distribution. The possible values are: pending, error, success, notAvaliable.
     */
    status?: EventStatusType;
}
export interface RetentionEventType extends Entity, Parsable {
    /**
     * The user who created the retentionEventType.
     */
    createdBy?: IdentitySet;
    /**
     * The date time when the retentionEventType was created.
     */
    createdDateTime?: Date;
    /**
     * Optional information about the event type.
     */
    description?: string;
    /**
     * Name of the event type.
     */
    displayName?: string;
    /**
     * The user who last modified the retentionEventType.
     */
    lastModifiedBy?: IdentitySet;
    /**
     * The latest date time when the retentionEventType was modified.
     */
    lastModifiedDateTime?: Date;
}
export interface RetentionEventTypeCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: RetentionEventType[];
}
export interface RetentionLabel extends Entity, Parsable {
    /**
     * Specifies the action to take on a document with this label applied during the retention period. The possible values are: none, delete, startDispositionReview, unknownFutureValue.
     */
    actionAfterRetentionPeriod?: ActionAfterRetentionPeriod;
    /**
     * Specifies how the behavior of a document with this label should be during the retention period. The possible values are: doNotRetain, retain, retainAsRecord, retainAsRegulatoryRecord, unknownFutureValue.
     */
    behaviorDuringRetentionPeriod?: BehaviorDuringRetentionPeriod;
    /**
     * Represents the user who created the retentionLabel.
     */
    createdBy?: IdentitySet;
    /**
     * Represents the date and time in which the retentionLabel is created.
     */
    createdDateTime?: Date;
    /**
     * Specifies the locked or unlocked state of a record label when it is created.The possible values are: startLocked, startUnlocked, unknownFutureValue.
     */
    defaultRecordBehavior?: DefaultRecordBehavior;
    /**
     * Provides label information for the admin. Optional.
     */
    descriptionForAdmins?: string;
    /**
     * Provides the label information for the user. Optional.
     */
    descriptionForUsers?: string;
    /**
     * Represents out-of-the-box values that provide more options to improve the manageability and organization of the content you need to label.
     */
    descriptors?: FilePlanDescriptor;
    /**
     * Unique string that defines a label name.
     */
    displayName?: string;
    /**
     * When action at the end of retention is chosen as 'dispositionReview', dispositionReviewStages specifies a sequential set of stages with at least one reviewer in each stage.
     */
    dispositionReviewStages?: DispositionReviewStage[];
    /**
     * Specifies whether the label is currently being used.
     */
    isInUse?: boolean;
    /**
     * Specifies the replacement label to be applied automatically after the retention period of the current label ends.
     */
    labelToBeApplied?: string;
    /**
     * The user who last modified the retentionLabel.
     */
    lastModifiedBy?: IdentitySet;
    /**
     * The latest date time when the retentionLabel was modified.
     */
    lastModifiedDateTime?: Date;
    /**
     * Specifies the number of days to retain the content.
     */
    retentionDuration?: RetentionDuration;
    /**
     * Represents the type associated with a retention event.
     */
    retentionEventType?: RetentionEventType;
    /**
     * Specifies whether the retention duration is calculated from the content creation date, labeled date, or last modification date. The possible values are: dateLabeled, dateCreated, dateModified, dateOfEvent, unknownFutureValue.
     */
    retentionTrigger?: RetentionTrigger;
}
export interface RetentionLabelCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: RetentionLabel[];
}
export type RetentionTrigger = (typeof RetentionTriggerObject)[keyof typeof RetentionTriggerObject];
export interface RuleSchedule extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The nextRunDateTime property
     */
    nextRunDateTime?: Date;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The period property
     */
    period?: string;
}
export interface RunAntivirusScanResponseAction extends Parsable, ResponseAction {
    /**
     * The identifier property
     */
    identifier?: DeviceIdEntityIdentifier[];
}
export interface RunDetails extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The errorCode property
     */
    errorCode?: HuntingRuleErrorCode;
    /**
     * The failureReason property
     */
    failureReason?: string;
    /**
     * The lastRunDateTime property
     */
    lastRunDateTime?: Date;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The status property
     */
    status?: HuntingRuleRunStatus;
}
export interface SasTokenEvidence extends AlertEvidence, Parsable {
    /**
     * The allowedIpAddresses property
     */
    allowedIpAddresses?: string;
    /**
     * The allowedResourceTypes property
     */
    allowedResourceTypes?: string[];
    /**
     * The allowedServices property
     */
    allowedServices?: string[];
    /**
     * The expiryDateTime property
     */
    expiryDateTime?: Date;
    /**
     * The permissions property
     */
    permissions?: string[];
    /**
     * The protocol property
     */
    protocol?: string;
    /**
     * The signatureHash property
     */
    signatureHash?: string;
    /**
     * The signedWith property
     */
    signedWith?: string;
    /**
     * The startDateTime property
     */
    startDateTime?: Date;
    /**
     * The storageResource property
     */
    storageResource?: AzureResourceEvidence;
}
export type ScopeType = (typeof ScopeTypeObject)[keyof typeof ScopeTypeObject];
export interface Search extends Entity, Parsable {
    /**
     * The contentQuery property
     */
    contentQuery?: string;
    /**
     * The createdBy property
     */
    createdBy?: IdentitySet;
    /**
     * The createdDateTime property
     */
    createdDateTime?: Date;
    /**
     * The description property
     */
    description?: string;
    /**
     * The displayName property
     */
    displayName?: string;
    /**
     * The lastModifiedBy property
     */
    lastModifiedBy?: IdentitySet;
    /**
     * The lastModifiedDateTime property
     */
    lastModifiedDateTime?: Date;
}
export interface Security extends Entity, Parsable {
    /**
     * The informationProtection property
     */
    informationProtection?: InformationProtection;
}
export interface SecurityGroupEvidence extends AlertEvidence, Parsable {
    /**
     * The name of the security group.
     */
    displayName?: string;
    /**
     * Unique identifier of the security group.
     */
    securityGroupId?: string;
}
export interface SensitivityLabel extends Entity, Parsable {
    /**
     * The color that the UI should display for the label, if configured.
     */
    color?: string;
    /**
     * Returns the supported content formats for the label.
     */
    contentFormats?: string[];
    /**
     * The admin-defined description for the label.
     */
    description?: string;
    /**
     * Indicates whether the label has protection actions configured.
     */
    hasProtection?: boolean;
    /**
     * Indicates whether the label is active or not. Active labels should be hidden or disabled in the UI.
     */
    isActive?: boolean;
    /**
     * Indicates whether the label can be applied to content. False if the label is a parent with child labels.
     */
    isAppliable?: boolean;
    /**
     * The plaintext name of the label.
     */
    name?: string;
    /**
     * The parent label associated with a child label. Null if the label has no parent.
     */
    parent?: SensitivityLabel;
    /**
     * The sensitivity value of the label, where lower is less sensitive.
     */
    sensitivity?: number;
    /**
     * The tooltip that should be displayed for the label in a UI.
     */
    tooltip?: string;
}
export interface SensitivityLabelCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: SensitivityLabel[];
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAddContentFooterAction(writer: SerializationWriter, addContentFooterAction: AddContentFooterAction | undefined = {} as AddContentFooterAction) : void {
    serializeInformationProtectionAction(writer, addContentFooterAction)
    writer.writeEnumValue<ContentAlignment>("alignment", addContentFooterAction.alignment);
    writer.writeStringValue("fontColor", addContentFooterAction.fontColor);
    writer.writeStringValue("fontName", addContentFooterAction.fontName);
    writer.writeNumberValue("fontSize", addContentFooterAction.fontSize);
    writer.writeNumberValue("margin", addContentFooterAction.margin);
    writer.writeStringValue("text", addContentFooterAction.text);
    writer.writeStringValue("uiElementName", addContentFooterAction.uiElementName);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAddContentHeaderAction(writer: SerializationWriter, addContentHeaderAction: AddContentHeaderAction | undefined = {} as AddContentHeaderAction) : void {
    serializeInformationProtectionAction(writer, addContentHeaderAction)
    writer.writeEnumValue<ContentAlignment>("alignment", addContentHeaderAction.alignment);
    writer.writeStringValue("fontColor", addContentHeaderAction.fontColor);
    writer.writeStringValue("fontName", addContentHeaderAction.fontName);
    writer.writeNumberValue("fontSize", addContentHeaderAction.fontSize);
    writer.writeNumberValue("margin", addContentHeaderAction.margin);
    writer.writeStringValue("text", addContentHeaderAction.text);
    writer.writeStringValue("uiElementName", addContentHeaderAction.uiElementName);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAddWatermarkAction(writer: SerializationWriter, addWatermarkAction: AddWatermarkAction | undefined = {} as AddWatermarkAction) : void {
    serializeInformationProtectionAction(writer, addWatermarkAction)
    writer.writeStringValue("fontColor", addWatermarkAction.fontColor);
    writer.writeStringValue("fontName", addWatermarkAction.fontName);
    writer.writeNumberValue("fontSize", addWatermarkAction.fontSize);
    writer.writeEnumValue<WatermarkLayout>("layout", addWatermarkAction.layout);
    writer.writeStringValue("text", addWatermarkAction.text);
    writer.writeStringValue("uiElementName", addWatermarkAction.uiElementName);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAlert(writer: SerializationWriter, alert: Alert | undefined = {} as Alert) : void {
    serializeEntity(writer, alert)
    writer.writeStringValue("actorDisplayName", alert.actorDisplayName);
    writer.writeStringValue("alertPolicyId", alert.alertPolicyId);
    writer.writeStringValue("alertWebUrl", alert.alertWebUrl);
    writer.writeStringValue("assignedTo", alert.assignedTo);
    writer.writeStringValue("category", alert.category);
    writer.writeEnumValue<AlertClassification>("classification", alert.classification);
    writer.writeCollectionOfObjectValues<AlertComment>("comments", alert.comments, serializeAlertComment);
    writer.writeDateValue("createdDateTime", alert.createdDateTime);
    writer.writeStringValue("description", alert.description);
    writer.writeEnumValue<DetectionSource>("detectionSource", alert.detectionSource);
    writer.writeStringValue("detectorId", alert.detectorId);
    writer.writeEnumValue<AlertDetermination>("determination", alert.determination);
    writer.writeCollectionOfObjectValues<AlertEvidence>("evidence", alert.evidence, serializeAlertEvidence);
    writer.writeDateValue("firstActivityDateTime", alert.firstActivityDateTime);
    writer.writeStringValue("incidentId", alert.incidentId);
    writer.writeStringValue("incidentWebUrl", alert.incidentWebUrl);
    writer.writeDateValue("lastActivityDateTime", alert.lastActivityDateTime);
    writer.writeDateValue("lastUpdateDateTime", alert.lastUpdateDateTime);
    writer.writeCollectionOfPrimitiveValues<string>("mitreTechniques", alert.mitreTechniques);
    writer.writeStringValue("productName", alert.productName);
    writer.writeStringValue("providerAlertId", alert.providerAlertId);
    writer.writeStringValue("recommendedActions", alert.recommendedActions);
    writer.writeDateValue("resolvedDateTime", alert.resolvedDateTime);
    writer.writeEnumValue<ServiceSource>("serviceSource", alert.serviceSource);
    writer.writeEnumValue<AlertSeverity>("severity", alert.severity);
    writer.writeEnumValue<AlertStatus>("status", alert.status);
    writer.writeCollectionOfPrimitiveValues<string>("systemTags", alert.systemTags);
    writer.writeStringValue("tenantId", alert.tenantId);
    writer.writeStringValue("threatDisplayName", alert.threatDisplayName);
    writer.writeStringValue("threatFamilyName", alert.threatFamilyName);
    writer.writeStringValue("title", alert.title);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAlertCollectionResponse(writer: SerializationWriter, alertCollectionResponse: AlertCollectionResponse | undefined = {} as AlertCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, alertCollectionResponse)
    writer.writeCollectionOfObjectValues<Alert>("value", alertCollectionResponse.value, serializeAlert);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAlertComment(writer: SerializationWriter, alertComment: AlertComment | undefined = {} as AlertComment) : void {
    writer.writeStringValue("comment", alertComment.comment);
    writer.writeStringValue("createdByDisplayName", alertComment.createdByDisplayName);
    writer.writeDateValue("createdDateTime", alertComment.createdDateTime);
    writer.writeStringValue("@odata.type", alertComment.odataType);
    writer.writeAdditionalData(alertComment.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAlertEvidence(writer: SerializationWriter, alertEvidence: AlertEvidence | undefined = {} as AlertEvidence) : void {
    writer.writeDateValue("createdDateTime", alertEvidence.createdDateTime);
    writer.writeCollectionOfPrimitiveValues<string>("detailedRoles", alertEvidence.detailedRoles);
    writer.writeStringValue("@odata.type", alertEvidence.odataType);
    writer.writeEnumValue<EvidenceRemediationStatus>("remediationStatus", alertEvidence.remediationStatus);
    writer.writeStringValue("remediationStatusDetails", alertEvidence.remediationStatusDetails);
    if(alertEvidence.roles)
    writer.writeEnumValue<EvidenceRole>("roles", ...alertEvidence.roles);
    writer.writeCollectionOfPrimitiveValues<string>("tags", alertEvidence.tags);
    writer.writeEnumValue<EvidenceVerdict>("verdict", alertEvidence.verdict);
    writer.writeAdditionalData(alertEvidence.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAlertTemplate(writer: SerializationWriter, alertTemplate: AlertTemplate | undefined = {} as AlertTemplate) : void {
    writer.writeStringValue("category", alertTemplate.category);
    writer.writeStringValue("description", alertTemplate.description);
    writer.writeCollectionOfObjectValues<ImpactedAsset>("impactedAssets", alertTemplate.impactedAssets, serializeImpactedAsset);
    writer.writeCollectionOfPrimitiveValues<string>("mitreTechniques", alertTemplate.mitreTechniques);
    writer.writeStringValue("@odata.type", alertTemplate.odataType);
    writer.writeStringValue("recommendedActions", alertTemplate.recommendedActions);
    writer.writeEnumValue<AlertSeverity>("severity", alertTemplate.severity);
    writer.writeStringValue("title", alertTemplate.title);
    writer.writeAdditionalData(alertTemplate.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAllowFileResponseAction(writer: SerializationWriter, allowFileResponseAction: AllowFileResponseAction | undefined = {} as AllowFileResponseAction) : void {
    serializeResponseAction(writer, allowFileResponseAction)
    writer.writeCollectionOfPrimitiveValues<string>("deviceGroupNames", allowFileResponseAction.deviceGroupNames);
    writer.writeEnumValue<FileEntityIdentifier[]>("identifier", allowFileResponseAction.identifier);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAmazonResourceEvidence(writer: SerializationWriter, amazonResourceEvidence: AmazonResourceEvidence | undefined = {} as AmazonResourceEvidence) : void {
    serializeAlertEvidence(writer, amazonResourceEvidence)
    writer.writeStringValue("amazonAccountId", amazonResourceEvidence.amazonAccountId);
    writer.writeStringValue("amazonResourceId", amazonResourceEvidence.amazonResourceId);
    writer.writeStringValue("resourceName", amazonResourceEvidence.resourceName);
    writer.writeStringValue("resourceType", amazonResourceEvidence.resourceType);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAnalyzedEmail(writer: SerializationWriter, analyzedEmail: AnalyzedEmail | undefined = {} as AnalyzedEmail) : void {
    serializeEntity(writer, analyzedEmail)
    writer.writeCollectionOfPrimitiveValues<string>("alertIds", analyzedEmail.alertIds);
    writer.writeCollectionOfObjectValues<AnalyzedEmailAttachment>("attachments", analyzedEmail.attachments, serializeAnalyzedEmailAttachment);
    writer.writeNumberValue("attachmentsCount", analyzedEmail.attachmentsCount);
    writer.writeObjectValue<AnalyzedEmailAuthenticationDetail>("authenticationDetails", analyzedEmail.authenticationDetails, serializeAnalyzedEmailAuthenticationDetail);
    writer.writeStringValue("bulkComplaintLevel", analyzedEmail.bulkComplaintLevel);
    writer.writeCollectionOfPrimitiveValues<string>("contexts", analyzedEmail.contexts);
    writer.writeCollectionOfPrimitiveValues<string>("detectionMethods", analyzedEmail.detectionMethods);
    writer.writeEnumValue<AntispamDirectionality>("directionality", analyzedEmail.directionality);
    writer.writeStringValue("distributionList", analyzedEmail.distributionList);
    writer.writeStringValue("emailClusterId", analyzedEmail.emailClusterId);
    writer.writeCollectionOfObjectValues<AnalyzedEmailExchangeTransportRuleInfo>("exchangeTransportRules", analyzedEmail.exchangeTransportRules, serializeAnalyzedEmailExchangeTransportRuleInfo);
    writer.writeStringValue("internetMessageId", analyzedEmail.internetMessageId);
    writer.writeStringValue("language", analyzedEmail.language);
    writer.writeObjectValue<AnalyzedEmailDeliveryDetail>("latestDelivery", analyzedEmail.latestDelivery, serializeAnalyzedEmailDeliveryDetail);
    writer.writeDateValue("loggedDateTime", analyzedEmail.loggedDateTime);
    writer.writeStringValue("networkMessageId", analyzedEmail.networkMessageId);
    writer.writeObjectValue<AnalyzedEmailDeliveryDetail>("originalDelivery", analyzedEmail.originalDelivery, serializeAnalyzedEmailDeliveryDetail);
    writer.writeCollectionOfPrimitiveValues<string>("overrideSources", analyzedEmail.overrideSources);
    writer.writeStringValue("phishConfidenceLevel", analyzedEmail.phishConfidenceLevel);
    writer.writeStringValue("policy", analyzedEmail.policy);
    writer.writeStringValue("policyAction", analyzedEmail.policyAction);
    writer.writeCollectionOfPrimitiveValues<string>("recipientEmailAddresses", analyzedEmail.recipientEmailAddresses);
    writer.writeStringValue("returnPath", analyzedEmail.returnPath);
    writer.writeObjectValue<AnalyzedEmailSenderDetail>("senderDetail", analyzedEmail.senderDetail, serializeAnalyzedEmailSenderDetail);
    writer.writeNumberValue("sizeInBytes", analyzedEmail.sizeInBytes);
    writer.writeStringValue("spamConfidenceLevel", analyzedEmail.spamConfidenceLevel);
    writer.writeStringValue("subject", analyzedEmail.subject);
    writer.writeEnumValue<ThreatType>("threatType", analyzedEmail.threatType);
    writer.writeCollectionOfObjectValues<AnalyzedEmailUrl>("urls", analyzedEmail.urls, serializeAnalyzedEmailUrl);
    writer.writeNumberValue("urlsCount", analyzedEmail.urlsCount);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAnalyzedEmailAttachment(writer: SerializationWriter, analyzedEmailAttachment: AnalyzedEmailAttachment | undefined = {} as AnalyzedEmailAttachment) : void {
    writer.writeObjectValue<DetonationDetails>("detonationDetails", analyzedEmailAttachment.detonationDetails, serializeDetonationDetails);
    writer.writeStringValue("fileName", analyzedEmailAttachment.fileName);
    writer.writeStringValue("fileType", analyzedEmailAttachment.fileType);
    writer.writeStringValue("@odata.type", analyzedEmailAttachment.odataType);
    writer.writeStringValue("sha256", analyzedEmailAttachment.sha256);
    writer.writeStringValue("threatName", analyzedEmailAttachment.threatName);
    writer.writeEnumValue<ThreatType>("threatType", analyzedEmailAttachment.threatType);
    writer.writeAdditionalData(analyzedEmailAttachment.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAnalyzedEmailAuthenticationDetail(writer: SerializationWriter, analyzedEmailAuthenticationDetail: AnalyzedEmailAuthenticationDetail | undefined = {} as AnalyzedEmailAuthenticationDetail) : void {
    writer.writeStringValue("compositeAuthentication", analyzedEmailAuthenticationDetail.compositeAuthentication);
    writer.writeStringValue("dkim", analyzedEmailAuthenticationDetail.dkim);
    writer.writeStringValue("dmarc", analyzedEmailAuthenticationDetail.dmarc);
    writer.writeStringValue("@odata.type", analyzedEmailAuthenticationDetail.odataType);
    writer.writeStringValue("senderPolicyFramework", analyzedEmailAuthenticationDetail.senderPolicyFramework);
    writer.writeAdditionalData(analyzedEmailAuthenticationDetail.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAnalyzedEmailCollectionResponse(writer: SerializationWriter, analyzedEmailCollectionResponse: AnalyzedEmailCollectionResponse | undefined = {} as AnalyzedEmailCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, analyzedEmailCollectionResponse)
    writer.writeCollectionOfObjectValues<AnalyzedEmail>("value", analyzedEmailCollectionResponse.value, serializeAnalyzedEmail);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAnalyzedEmailDeliveryDetail(writer: SerializationWriter, analyzedEmailDeliveryDetail: AnalyzedEmailDeliveryDetail | undefined = {} as AnalyzedEmailDeliveryDetail) : void {
    writer.writeEnumValue<DeliveryAction>("action", analyzedEmailDeliveryDetail.action);
    writer.writeEnumValue<DeliveryLocation>("location", analyzedEmailDeliveryDetail.location);
    writer.writeStringValue("@odata.type", analyzedEmailDeliveryDetail.odataType);
    writer.writeAdditionalData(analyzedEmailDeliveryDetail.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAnalyzedEmailExchangeTransportRuleInfo(writer: SerializationWriter, analyzedEmailExchangeTransportRuleInfo: AnalyzedEmailExchangeTransportRuleInfo | undefined = {} as AnalyzedEmailExchangeTransportRuleInfo) : void {
    writer.writeStringValue("name", analyzedEmailExchangeTransportRuleInfo.name);
    writer.writeStringValue("@odata.type", analyzedEmailExchangeTransportRuleInfo.odataType);
    writer.writeStringValue("ruleId", analyzedEmailExchangeTransportRuleInfo.ruleId);
    writer.writeAdditionalData(analyzedEmailExchangeTransportRuleInfo.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAnalyzedEmailSenderDetail(writer: SerializationWriter, analyzedEmailSenderDetail: AnalyzedEmailSenderDetail | undefined = {} as AnalyzedEmailSenderDetail) : void {
    writer.writeStringValue("fromAddress", analyzedEmailSenderDetail.fromAddress);
    writer.writeStringValue("ipv4", analyzedEmailSenderDetail.ipv4);
    writer.writeStringValue("mailFromAddress", analyzedEmailSenderDetail.mailFromAddress);
    writer.writeStringValue("@odata.type", analyzedEmailSenderDetail.odataType);
    writer.writeAdditionalData(analyzedEmailSenderDetail.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAnalyzedEmailUrl(writer: SerializationWriter, analyzedEmailUrl: AnalyzedEmailUrl | undefined = {} as AnalyzedEmailUrl) : void {
    writer.writeStringValue("detectionMethod", analyzedEmailUrl.detectionMethod);
    writer.writeObjectValue<DetonationDetails>("detonationDetails", analyzedEmailUrl.detonationDetails, serializeDetonationDetails);
    writer.writeStringValue("@odata.type", analyzedEmailUrl.odataType);
    writer.writeEnumValue<ThreatType>("threatType", analyzedEmailUrl.threatType);
    writer.writeStringValue("url", analyzedEmailUrl.url);
    writer.writeAdditionalData(analyzedEmailUrl.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAnalyzedMessageEvidence(writer: SerializationWriter, analyzedMessageEvidence: AnalyzedMessageEvidence | undefined = {} as AnalyzedMessageEvidence) : void {
    serializeAlertEvidence(writer, analyzedMessageEvidence)
    writer.writeStringValue("antiSpamDirection", analyzedMessageEvidence.antiSpamDirection);
    writer.writeNumberValue("attachmentsCount", analyzedMessageEvidence.attachmentsCount);
    writer.writeStringValue("deliveryAction", analyzedMessageEvidence.deliveryAction);
    writer.writeStringValue("deliveryLocation", analyzedMessageEvidence.deliveryLocation);
    writer.writeStringValue("internetMessageId", analyzedMessageEvidence.internetMessageId);
    writer.writeStringValue("language", analyzedMessageEvidence.language);
    writer.writeStringValue("networkMessageId", analyzedMessageEvidence.networkMessageId);
    writer.writeObjectValue<EmailSender>("p1Sender", analyzedMessageEvidence.p1Sender, serializeEmailSender);
    writer.writeObjectValue<EmailSender>("p2Sender", analyzedMessageEvidence.p2Sender, serializeEmailSender);
    writer.writeDateValue("receivedDateTime", analyzedMessageEvidence.receivedDateTime);
    writer.writeStringValue("recipientEmailAddress", analyzedMessageEvidence.recipientEmailAddress);
    writer.writeStringValue("senderIp", analyzedMessageEvidence.senderIp);
    writer.writeStringValue("subject", analyzedMessageEvidence.subject);
    writer.writeCollectionOfPrimitiveValues<string>("threatDetectionMethods", analyzedMessageEvidence.threatDetectionMethods);
    writer.writeCollectionOfPrimitiveValues<string>("threats", analyzedMessageEvidence.threats);
    writer.writeNumberValue("urlCount", analyzedMessageEvidence.urlCount);
    writer.writeCollectionOfPrimitiveValues<string>("urls", analyzedMessageEvidence.urls);
    writer.writeStringValue("urn", analyzedMessageEvidence.urn);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAppliedCategory(writer: SerializationWriter, appliedCategory: AppliedCategory | undefined = {} as AppliedCategory) : void {
    serializeFilePlanDescriptorBase(writer, appliedCategory)
    writer.writeObjectValue<SubCategory>("subCategory", appliedCategory.subCategory, serializeSubCategory);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeApplyLabelAction(writer: SerializationWriter, applyLabelAction: ApplyLabelAction | undefined = {} as ApplyLabelAction) : void {
    serializeInformationProtectionAction(writer, applyLabelAction)
    writer.writeCollectionOfObjectValues<InformationProtectionAction>("actions", applyLabelAction.actions, serializeInformationProtectionAction);
    writer.writeEnumValue<ActionSource>("actionSource", applyLabelAction.actionSource);
    writer.writeCollectionOfPrimitiveValues<string>("responsibleSensitiveTypeIds", applyLabelAction.responsibleSensitiveTypeIds);
    writer.writeStringValue("sensitivityLabelId", applyLabelAction.sensitivityLabelId);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeArticle(writer: SerializationWriter, article: Article | undefined = {} as Article) : void {
    serializeEntity(writer, article)
    writer.writeObjectValue<FormattedContent>("body", article.body, serializeFormattedContent);
    writer.writeDateValue("createdDateTime", article.createdDateTime);
    writer.writeStringValue("imageUrl", article.imageUrl);
    writer.writeCollectionOfObjectValues<ArticleIndicator>("indicators", article.indicators, serializeArticleIndicator);
    writer.writeBooleanValue("isFeatured", article.isFeatured);
    writer.writeDateValue("lastUpdatedDateTime", article.lastUpdatedDateTime);
    writer.writeObjectValue<FormattedContent>("summary", article.summary, serializeFormattedContent);
    writer.writeCollectionOfPrimitiveValues<string>("tags", article.tags);
    writer.writeStringValue("title", article.title);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeArticleCollectionResponse(writer: SerializationWriter, articleCollectionResponse: ArticleCollectionResponse | undefined = {} as ArticleCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, articleCollectionResponse)
    writer.writeCollectionOfObjectValues<Article>("value", articleCollectionResponse.value, serializeArticle);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeArticleIndicator(writer: SerializationWriter, articleIndicator: ArticleIndicator | undefined = {} as ArticleIndicator) : void {
    serializeIndicator(writer, articleIndicator)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeArticleIndicatorCollectionResponse(writer: SerializationWriter, articleIndicatorCollectionResponse: ArticleIndicatorCollectionResponse | undefined = {} as ArticleIndicatorCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, articleIndicatorCollectionResponse)
    writer.writeCollectionOfObjectValues<ArticleIndicator>("value", articleIndicatorCollectionResponse.value, serializeArticleIndicator);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeArtifact(writer: SerializationWriter, artifact: Artifact | undefined = {} as Artifact) : void {
    serializeEntity(writer, artifact)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAttackSimulationInfo(writer: SerializationWriter, attackSimulationInfo: AttackSimulationInfo | undefined = {} as AttackSimulationInfo) : void {
    writer.writeDateValue("attackSimDateTime", attackSimulationInfo.attackSimDateTime);
    writer.writeDurationValue("attackSimDurationTime", attackSimulationInfo.attackSimDurationTime);
    writer.writeGuidValue("attackSimId", attackSimulationInfo.attackSimId);
    writer.writeStringValue("attackSimUserId", attackSimulationInfo.attackSimUserId);
    writer.writeStringValue("@odata.type", attackSimulationInfo.odataType);
    writer.writeAdditionalData(attackSimulationInfo.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAuditCoreRoot(writer: SerializationWriter, auditCoreRoot: AuditCoreRoot | undefined = {} as AuditCoreRoot) : void {
    serializeEntity(writer, auditCoreRoot)
    writer.writeCollectionOfObjectValues<AuditLogQuery>("queries", auditCoreRoot.queries, serializeAuditLogQuery);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAuditData(writer: SerializationWriter, auditData: AuditData | undefined = {} as AuditData) : void {
    writer.writeStringValue("@odata.type", auditData.odataType);
    writer.writeAdditionalData(auditData.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAuditLogQuery(writer: SerializationWriter, auditLogQuery: AuditLogQuery | undefined = {} as AuditLogQuery) : void {
    serializeEntity(writer, auditLogQuery)
    writer.writeCollectionOfPrimitiveValues<string>("administrativeUnitIdFilters", auditLogQuery.administrativeUnitIdFilters);
    writer.writeStringValue("displayName", auditLogQuery.displayName);
    writer.writeDateValue("filterEndDateTime", auditLogQuery.filterEndDateTime);
    writer.writeDateValue("filterStartDateTime", auditLogQuery.filterStartDateTime);
    writer.writeCollectionOfPrimitiveValues<string>("ipAddressFilters", auditLogQuery.ipAddressFilters);
    writer.writeStringValue("keywordFilter", auditLogQuery.keywordFilter);
    writer.writeCollectionOfPrimitiveValues<string>("objectIdFilters", auditLogQuery.objectIdFilters);
    writer.writeCollectionOfPrimitiveValues<string>("operationFilters", auditLogQuery.operationFilters);
    writer.writeCollectionOfObjectValues<AuditLogRecord>("records", auditLogQuery.records, serializeAuditLogRecord);
    if(auditLogQuery.recordTypeFilters)
    writer.writeEnumValue<AuditLogRecordType>("recordTypeFilters", ...auditLogQuery.recordTypeFilters);
    writer.writeCollectionOfPrimitiveValues<string>("serviceFilters", auditLogQuery.serviceFilters);
    writer.writeEnumValue<AuditLogQueryStatus>("status", auditLogQuery.status);
    writer.writeCollectionOfPrimitiveValues<string>("userPrincipalNameFilters", auditLogQuery.userPrincipalNameFilters);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAuditLogQueryCollectionResponse(writer: SerializationWriter, auditLogQueryCollectionResponse: AuditLogQueryCollectionResponse | undefined = {} as AuditLogQueryCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, auditLogQueryCollectionResponse)
    writer.writeCollectionOfObjectValues<AuditLogQuery>("value", auditLogQueryCollectionResponse.value, serializeAuditLogQuery);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAuditLogRecord(writer: SerializationWriter, auditLogRecord: AuditLogRecord | undefined = {} as AuditLogRecord) : void {
    serializeEntity(writer, auditLogRecord)
    writer.writeCollectionOfPrimitiveValues<string>("administrativeUnits", auditLogRecord.administrativeUnits);
    writer.writeObjectValue<AuditData>("auditData", auditLogRecord.auditData, serializeAuditData);
    writer.writeEnumValue<AuditLogRecordType>("auditLogRecordType", auditLogRecord.auditLogRecordType);
    writer.writeStringValue("clientIp", auditLogRecord.clientIp);
    writer.writeDateValue("createdDateTime", auditLogRecord.createdDateTime);
    writer.writeStringValue("objectId", auditLogRecord.objectId);
    writer.writeStringValue("operation", auditLogRecord.operation);
    writer.writeStringValue("organizationId", auditLogRecord.organizationId);
    writer.writeStringValue("service", auditLogRecord.service);
    writer.writeStringValue("userId", auditLogRecord.userId);
    writer.writeStringValue("userPrincipalName", auditLogRecord.userPrincipalName);
    writer.writeEnumValue<AuditLogUserType>("userType", auditLogRecord.userType);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAuditLogRecordCollectionResponse(writer: SerializationWriter, auditLogRecordCollectionResponse: AuditLogRecordCollectionResponse | undefined = {} as AuditLogRecordCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, auditLogRecordCollectionResponse)
    writer.writeCollectionOfObjectValues<AuditLogRecord>("value", auditLogRecordCollectionResponse.value, serializeAuditLogRecord);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAuthority(writer: SerializationWriter, authority: Authority | undefined = {} as Authority) : void {
    serializeFilePlanDescriptorBase(writer, authority)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAuthorityTemplate(writer: SerializationWriter, authorityTemplate: AuthorityTemplate | undefined = {} as AuthorityTemplate) : void {
    serializeFilePlanDescriptorTemplate(writer, authorityTemplate)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAuthorityTemplateCollectionResponse(writer: SerializationWriter, authorityTemplateCollectionResponse: AuthorityTemplateCollectionResponse | undefined = {} as AuthorityTemplateCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, authorityTemplateCollectionResponse)
    writer.writeCollectionOfObjectValues<AuthorityTemplate>("value", authorityTemplateCollectionResponse.value, serializeAuthorityTemplate);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAutonomousSystem(writer: SerializationWriter, autonomousSystem: AutonomousSystem | undefined = {} as AutonomousSystem) : void {
    writer.writeStringValue("name", autonomousSystem.name);
    writer.writeNumberValue("number", autonomousSystem.number);
    writer.writeStringValue("@odata.type", autonomousSystem.odataType);
    writer.writeStringValue("organization", autonomousSystem.organization);
    writer.writeStringValue("value", autonomousSystem.value);
    writer.writeAdditionalData(autonomousSystem.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAzureResourceEvidence(writer: SerializationWriter, azureResourceEvidence: AzureResourceEvidence | undefined = {} as AzureResourceEvidence) : void {
    serializeAlertEvidence(writer, azureResourceEvidence)
    writer.writeStringValue("resourceId", azureResourceEvidence.resourceId);
    writer.writeStringValue("resourceName", azureResourceEvidence.resourceName);
    writer.writeStringValue("resourceType", azureResourceEvidence.resourceType);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeBlobContainerEvidence(writer: SerializationWriter, blobContainerEvidence: BlobContainerEvidence | undefined = {} as BlobContainerEvidence) : void {
    serializeAlertEvidence(writer, blobContainerEvidence)
    writer.writeStringValue("name", blobContainerEvidence.name);
    writer.writeObjectValue<AzureResourceEvidence>("storageResource", blobContainerEvidence.storageResource, serializeAzureResourceEvidence);
    writer.writeStringValue("url", blobContainerEvidence.url);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeBlobEvidence(writer: SerializationWriter, blobEvidence: BlobEvidence | undefined = {} as BlobEvidence) : void {
    serializeAlertEvidence(writer, blobEvidence)
    writer.writeObjectValue<BlobContainerEvidence>("blobContainer", blobEvidence.blobContainer, serializeBlobContainerEvidence);
    writer.writeStringValue("etag", blobEvidence.etag);
    writer.writeCollectionOfObjectValues<FileHash>("fileHashes", blobEvidence.fileHashes, serializeFileHash);
    writer.writeStringValue("name", blobEvidence.name);
    writer.writeStringValue("url", blobEvidence.url);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeBlockFileResponseAction(writer: SerializationWriter, blockFileResponseAction: BlockFileResponseAction | undefined = {} as BlockFileResponseAction) : void {
    serializeResponseAction(writer, blockFileResponseAction)
    writer.writeCollectionOfPrimitiveValues<string>("deviceGroupNames", blockFileResponseAction.deviceGroupNames);
    writer.writeEnumValue<FileEntityIdentifier[]>("identifier", blockFileResponseAction.identifier);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeCaseEscaped(writer: SerializationWriter, caseEscaped: CaseEscaped | undefined = {} as CaseEscaped) : void {
    serializeEntity(writer, caseEscaped)
    writer.writeDateValue("createdDateTime", caseEscaped.createdDateTime);
    writer.writeStringValue("description", caseEscaped.description);
    writer.writeStringValue("displayName", caseEscaped.displayName);
    writer.writeObjectValue<IdentitySet>("lastModifiedBy", caseEscaped.lastModifiedBy, serializeIdentitySet);
    writer.writeDateValue("lastModifiedDateTime", caseEscaped.lastModifiedDateTime);
    writer.writeEnumValue<CaseStatus>("status", caseEscaped.status);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeCaseOperation(writer: SerializationWriter, caseOperation: CaseOperation | undefined = {} as CaseOperation) : void {
    serializeEntity(writer, caseOperation)
    writer.writeEnumValue<CaseAction>("action", caseOperation.action);
    writer.writeDateValue("completedDateTime", caseOperation.completedDateTime);
    writer.writeObjectValue<IdentitySet>("createdBy", caseOperation.createdBy, serializeIdentitySet);
    writer.writeDateValue("createdDateTime", caseOperation.createdDateTime);
    writer.writeNumberValue("percentProgress", caseOperation.percentProgress);
    writer.writeObjectValue<ResultInfo>("resultInfo", caseOperation.resultInfo, serializeResultInfo);
    writer.writeEnumValue<CaseOperationStatus>("status", caseOperation.status);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeCaseOperationCollectionResponse(writer: SerializationWriter, caseOperationCollectionResponse: CaseOperationCollectionResponse | undefined = {} as CaseOperationCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, caseOperationCollectionResponse)
    writer.writeCollectionOfObjectValues<CaseOperation>("value", caseOperationCollectionResponse.value, serializeCaseOperation);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeCasesRoot(writer: SerializationWriter, casesRoot: CasesRoot | undefined = {} as CasesRoot) : void {
    serializeEntity(writer, casesRoot)
    writer.writeCollectionOfObjectValues<EdiscoveryCase>("ediscoveryCases", casesRoot.ediscoveryCases, serializeEdiscoveryCase);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeCategoryTemplate(writer: SerializationWriter, categoryTemplate: CategoryTemplate | undefined = {} as CategoryTemplate) : void {
    serializeFilePlanDescriptorTemplate(writer, categoryTemplate)
    writer.writeCollectionOfObjectValues<SubCategoryTemplate>("subCategories", categoryTemplate.subCategories, serializeSubCategoryTemplate);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeCategoryTemplateCollectionResponse(writer: SerializationWriter, categoryTemplateCollectionResponse: CategoryTemplateCollectionResponse | undefined = {} as CategoryTemplateCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, categoryTemplateCollectionResponse)
    writer.writeCollectionOfObjectValues<CategoryTemplate>("value", categoryTemplateCollectionResponse.value, serializeCategoryTemplate);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeCitation(writer: SerializationWriter, citation: Citation | undefined = {} as Citation) : void {
    serializeFilePlanDescriptorBase(writer, citation)
    writer.writeStringValue("citationJurisdiction", citation.citationJurisdiction);
    writer.writeStringValue("citationUrl", citation.citationUrl);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeCitationTemplate(writer: SerializationWriter, citationTemplate: CitationTemplate | undefined = {} as CitationTemplate) : void {
    serializeFilePlanDescriptorTemplate(writer, citationTemplate)
    writer.writeStringValue("citationJurisdiction", citationTemplate.citationJurisdiction);
    writer.writeStringValue("citationUrl", citationTemplate.citationUrl);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeCitationTemplateCollectionResponse(writer: SerializationWriter, citationTemplateCollectionResponse: CitationTemplateCollectionResponse | undefined = {} as CitationTemplateCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, citationTemplateCollectionResponse)
    writer.writeCollectionOfObjectValues<CitationTemplate>("value", citationTemplateCollectionResponse.value, serializeCitationTemplate);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeClassificationResult(writer: SerializationWriter, classificationResult: ClassificationResult | undefined = {} as ClassificationResult) : void {
    writer.writeNumberValue("confidenceLevel", classificationResult.confidenceLevel);
    writer.writeNumberValue("count", classificationResult.count);
    writer.writeStringValue("@odata.type", classificationResult.odataType);
    writer.writeStringValue("sensitiveTypeId", classificationResult.sensitiveTypeId);
    writer.writeAdditionalData(classificationResult.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeCloudApplicationEvidence(writer: SerializationWriter, cloudApplicationEvidence: CloudApplicationEvidence | undefined = {} as CloudApplicationEvidence) : void {
    serializeAlertEvidence(writer, cloudApplicationEvidence)
    writer.writeNumberValue("appId", cloudApplicationEvidence.appId);
    writer.writeStringValue("displayName", cloudApplicationEvidence.displayName);
    writer.writeNumberValue("instanceId", cloudApplicationEvidence.instanceId);
    writer.writeStringValue("instanceName", cloudApplicationEvidence.instanceName);
    writer.writeNumberValue("saasAppId", cloudApplicationEvidence.saasAppId);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeCollaborationRoot(writer: SerializationWriter, collaborationRoot: CollaborationRoot | undefined = {} as CollaborationRoot) : void {
    serializeEntity(writer, collaborationRoot)
    writer.writeCollectionOfObjectValues<AnalyzedEmail>("analyzedEmails", collaborationRoot.analyzedEmails, serializeAnalyzedEmail);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeCollectInvestigationPackageResponseAction(writer: SerializationWriter, collectInvestigationPackageResponseAction: CollectInvestigationPackageResponseAction | undefined = {} as CollectInvestigationPackageResponseAction) : void {
    serializeResponseAction(writer, collectInvestigationPackageResponseAction)
    writer.writeEnumValue<DeviceIdEntityIdentifier[]>("identifier", collectInvestigationPackageResponseAction.identifier);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeContainerEvidence(writer: SerializationWriter, containerEvidence: ContainerEvidence | undefined = {} as ContainerEvidence) : void {
    serializeAlertEvidence(writer, containerEvidence)
    writer.writeCollectionOfPrimitiveValues<string>("args", containerEvidence.args);
    writer.writeCollectionOfPrimitiveValues<string>("command", containerEvidence.command);
    writer.writeStringValue("containerId", containerEvidence.containerId);
    writer.writeObjectValue<ContainerImageEvidence>("image", containerEvidence.image, serializeContainerImageEvidence);
    writer.writeBooleanValue("isPrivileged", containerEvidence.isPrivileged);
    writer.writeStringValue("name", containerEvidence.name);
    writer.writeObjectValue<KubernetesPodEvidence>("pod", containerEvidence.pod, serializeKubernetesPodEvidence);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeContainerImageEvidence(writer: SerializationWriter, containerImageEvidence: ContainerImageEvidence | undefined = {} as ContainerImageEvidence) : void {
    serializeAlertEvidence(writer, containerImageEvidence)
    writer.writeObjectValue<ContainerImageEvidence>("digestImage", containerImageEvidence.digestImage, serializeContainerImageEvidence);
    writer.writeStringValue("imageId", containerImageEvidence.imageId);
    writer.writeObjectValue<ContainerRegistryEvidence>("registry", containerImageEvidence.registry, serializeContainerRegistryEvidence);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeContainerRegistryEvidence(writer: SerializationWriter, containerRegistryEvidence: ContainerRegistryEvidence | undefined = {} as ContainerRegistryEvidence) : void {
    serializeAlertEvidence(writer, containerRegistryEvidence)
    writer.writeStringValue("registry", containerRegistryEvidence.registry);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeContentInfo(writer: SerializationWriter, contentInfo: ContentInfo | undefined = {} as ContentInfo) : void {
    writer.writeStringValue("contentFormat", contentInfo.contentFormat);
    writer.writeStringValue("identifier", contentInfo.identifier);
    writer.writeCollectionOfObjectValues<KeyValuePair>("metadata", contentInfo.metadata, serializeKeyValuePair);
    writer.writeStringValue("@odata.type", contentInfo.odataType);
    writer.writeEnumValue<ContentState>("state", contentInfo.state);
    writer.writeAdditionalData(contentInfo.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeContentLabel(writer: SerializationWriter, contentLabel: ContentLabel | undefined = {} as ContentLabel) : void {
    writer.writeEnumValue<AssignmentMethod>("assignmentMethod", contentLabel.assignmentMethod);
    writer.writeDateValue("createdDateTime", contentLabel.createdDateTime);
    writer.writeStringValue("@odata.type", contentLabel.odataType);
    writer.writeStringValue("sensitivityLabelId", contentLabel.sensitivityLabelId);
    writer.writeAdditionalData(contentLabel.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeCustomAction(writer: SerializationWriter, customAction: CustomAction | undefined = {} as CustomAction) : void {
    serializeInformationProtectionAction(writer, customAction)
    writer.writeStringValue("name", customAction.name);
    writer.writeCollectionOfObjectValues<KeyValuePair>("properties", customAction.properties, serializeKeyValuePair);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeCvssSummary(writer: SerializationWriter, cvssSummary: CvssSummary | undefined = {} as CvssSummary) : void {
    writer.writeStringValue("@odata.type", cvssSummary.odataType);
    writer.writeNumberValue("score", cvssSummary.score);
    writer.writeEnumValue<VulnerabilitySeverity>("severity", cvssSummary.severity);
    writer.writeStringValue("vectorString", cvssSummary.vectorString);
    writer.writeAdditionalData(cvssSummary.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeDataSet(writer: SerializationWriter, dataSet: DataSet | undefined = {} as DataSet) : void {
    serializeEntity(writer, dataSet)
    writer.writeObjectValue<IdentitySet>("createdBy", dataSet.createdBy, serializeIdentitySet);
    writer.writeDateValue("createdDateTime", dataSet.createdDateTime);
    writer.writeStringValue("displayName", dataSet.displayName);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeDataSource(writer: SerializationWriter, dataSource: DataSource | undefined = {} as DataSource) : void {
    serializeEntity(writer, dataSource)
    writer.writeObjectValue<IdentitySet>("createdBy", dataSource.createdBy, serializeIdentitySet);
    writer.writeDateValue("createdDateTime", dataSource.createdDateTime);
    writer.writeStringValue("displayName", dataSource.displayName);
    writer.writeEnumValue<DataSourceHoldStatus>("holdStatus", dataSource.holdStatus);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeDataSourceCollectionResponse(writer: SerializationWriter, dataSourceCollectionResponse: DataSourceCollectionResponse | undefined = {} as DataSourceCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, dataSourceCollectionResponse)
    writer.writeCollectionOfObjectValues<DataSource>("value", dataSourceCollectionResponse.value, serializeDataSource);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeDataSourceContainer(writer: SerializationWriter, dataSourceContainer: DataSourceContainer | undefined = {} as DataSourceContainer) : void {
    serializeEntity(writer, dataSourceContainer)
    writer.writeDateValue("createdDateTime", dataSourceContainer.createdDateTime);
    writer.writeStringValue("displayName", dataSourceContainer.displayName);
    writer.writeEnumValue<DataSourceHoldStatus>("holdStatus", dataSourceContainer.holdStatus);
    writer.writeDateValue("lastModifiedDateTime", dataSourceContainer.lastModifiedDateTime);
    writer.writeDateValue("releasedDateTime", dataSourceContainer.releasedDateTime);
    writer.writeEnumValue<DataSourceContainerStatus>("status", dataSourceContainer.status);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeDefaultAuditData(writer: SerializationWriter, defaultAuditData: DefaultAuditData | undefined = {} as DefaultAuditData) : void {
    serializeAuditData(writer, defaultAuditData)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeDepartment(writer: SerializationWriter, department: Department | undefined = {} as Department) : void {
    serializeFilePlanDescriptorBase(writer, department)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeDepartmentTemplate(writer: SerializationWriter, departmentTemplate: DepartmentTemplate | undefined = {} as DepartmentTemplate) : void {
    serializeFilePlanDescriptorTemplate(writer, departmentTemplate)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeDepartmentTemplateCollectionResponse(writer: SerializationWriter, departmentTemplateCollectionResponse: DepartmentTemplateCollectionResponse | undefined = {} as DepartmentTemplateCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, departmentTemplateCollectionResponse)
    writer.writeCollectionOfObjectValues<DepartmentTemplate>("value", departmentTemplateCollectionResponse.value, serializeDepartmentTemplate);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeDetectionAction(writer: SerializationWriter, detectionAction: DetectionAction | undefined = {} as DetectionAction) : void {
    writer.writeObjectValue<AlertTemplate>("alertTemplate", detectionAction.alertTemplate, serializeAlertTemplate);
    writer.writeStringValue("@odata.type", detectionAction.odataType);
    writer.writeObjectValue<OrganizationalScope>("organizationalScope", detectionAction.organizationalScope, serializeOrganizationalScope);
    writer.writeCollectionOfObjectValues<ResponseAction>("responseActions", detectionAction.responseActions, serializeResponseAction);
    writer.writeAdditionalData(detectionAction.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeDetectionRule(writer: SerializationWriter, detectionRule: DetectionRule | undefined = {} as DetectionRule) : void {
    serializeProtectionRule(writer, detectionRule)
    writer.writeObjectValue<DetectionAction>("detectionAction", detectionRule.detectionAction, serializeDetectionAction);
    writer.writeStringValue("detectorId", detectionRule.detectorId);
    writer.writeObjectValue<RunDetails>("lastRunDetails", detectionRule.lastRunDetails, serializeRunDetails);
    writer.writeObjectValue<QueryCondition>("queryCondition", detectionRule.queryCondition, serializeQueryCondition);
    writer.writeObjectValue<RuleSchedule>("schedule", detectionRule.schedule, serializeRuleSchedule);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeDetonationChain(writer: SerializationWriter, detonationChain: DetonationChain | undefined = {} as DetonationChain) : void {
    writer.writeCollectionOfObjectValues<DetonationChain>("childNodes", detonationChain.childNodes, serializeDetonationChain);
    writer.writeStringValue("@odata.type", detonationChain.odataType);
    writer.writeStringValue("value", detonationChain.value);
    writer.writeAdditionalData(detonationChain.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeDetonationDetails(writer: SerializationWriter, detonationDetails: DetonationDetails | undefined = {} as DetonationDetails) : void {
    writer.writeDateValue("analysisDateTime", detonationDetails.analysisDateTime);
    writer.writeObjectValue<DetonationChain>("detonationChain", detonationDetails.detonationChain, serializeDetonationChain);
    writer.writeObjectValue<DetonationObservables>("detonationObservables", detonationDetails.detonationObservables, serializeDetonationObservables);
    writer.writeStringValue("detonationVerdict", detonationDetails.detonationVerdict);
    writer.writeStringValue("detonationVerdictReason", detonationDetails.detonationVerdictReason);
    writer.writeStringValue("@odata.type", detonationDetails.odataType);
    writer.writeAdditionalData(detonationDetails.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeDetonationObservables(writer: SerializationWriter, detonationObservables: DetonationObservables | undefined = {} as DetonationObservables) : void {
    writer.writeCollectionOfPrimitiveValues<string>("contactedIps", detonationObservables.contactedIps);
    writer.writeCollectionOfPrimitiveValues<string>("contactedUrls", detonationObservables.contactedUrls);
    writer.writeCollectionOfPrimitiveValues<string>("droppedfiles", detonationObservables.droppedfiles);
    writer.writeStringValue("@odata.type", detonationObservables.odataType);
    writer.writeAdditionalData(detonationObservables.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeDeviceEvidence(writer: SerializationWriter, deviceEvidence: DeviceEvidence | undefined = {} as DeviceEvidence) : void {
    serializeAlertEvidence(writer, deviceEvidence)
    writer.writeStringValue("azureAdDeviceId", deviceEvidence.azureAdDeviceId);
    writer.writeEnumValue<DefenderAvStatus>("defenderAvStatus", deviceEvidence.defenderAvStatus);
    writer.writeStringValue("deviceDnsName", deviceEvidence.deviceDnsName);
    writer.writeDateValue("firstSeenDateTime", deviceEvidence.firstSeenDateTime);
    writer.writeEnumValue<DeviceHealthStatus>("healthStatus", deviceEvidence.healthStatus);
    writer.writeCollectionOfPrimitiveValues<string>("ipInterfaces", deviceEvidence.ipInterfaces);
    writer.writeCollectionOfObjectValues<LoggedOnUser>("loggedOnUsers", deviceEvidence.loggedOnUsers, serializeLoggedOnUser);
    writer.writeStringValue("mdeDeviceId", deviceEvidence.mdeDeviceId);
    writer.writeEnumValue<OnboardingStatus>("onboardingStatus", deviceEvidence.onboardingStatus);
    writer.writeNumberValue("osBuild", deviceEvidence.osBuild);
    writer.writeStringValue("osPlatform", deviceEvidence.osPlatform);
    writer.writeNumberValue("rbacGroupId", deviceEvidence.rbacGroupId);
    writer.writeStringValue("rbacGroupName", deviceEvidence.rbacGroupName);
    writer.writeEnumValue<DeviceRiskScore>("riskScore", deviceEvidence.riskScore);
    writer.writeStringValue("version", deviceEvidence.version);
    writer.writeObjectValue<VmMetadata>("vmMetadata", deviceEvidence.vmMetadata, serializeVmMetadata);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeDictionary(writer: SerializationWriter, dictionary: Dictionary | undefined = {} as Dictionary) : void {
    writer.writeStringValue("@odata.type", dictionary.odataType);
    writer.writeAdditionalData(dictionary.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeDisableUserResponseAction(writer: SerializationWriter, disableUserResponseAction: DisableUserResponseAction | undefined = {} as DisableUserResponseAction) : void {
    serializeResponseAction(writer, disableUserResponseAction)
    writer.writeEnumValue<DisableUserEntityIdentifier[]>("identifier", disableUserResponseAction.identifier);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeDispositionReviewStage(writer: SerializationWriter, dispositionReviewStage: DispositionReviewStage | undefined = {} as DispositionReviewStage) : void {
    serializeEntity(writer, dispositionReviewStage)
    writer.writeStringValue("name", dispositionReviewStage.name);
    writer.writeCollectionOfPrimitiveValues<string>("reviewersEmailAddresses", dispositionReviewStage.reviewersEmailAddresses);
    writer.writeNumberValue("stageNumber", dispositionReviewStage.stageNumber);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeDispositionReviewStageCollectionResponse(writer: SerializationWriter, dispositionReviewStageCollectionResponse: DispositionReviewStageCollectionResponse | undefined = {} as DispositionReviewStageCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, dispositionReviewStageCollectionResponse)
    writer.writeCollectionOfObjectValues<DispositionReviewStage>("value", dispositionReviewStageCollectionResponse.value, serializeDispositionReviewStage);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeDowngradeJustification(writer: SerializationWriter, downgradeJustification: DowngradeJustification | undefined = {} as DowngradeJustification) : void {
    writer.writeBooleanValue("isDowngradeJustified", downgradeJustification.isDowngradeJustified);
    writer.writeStringValue("justificationMessage", downgradeJustification.justificationMessage);
    writer.writeStringValue("@odata.type", downgradeJustification.odataType);
    writer.writeAdditionalData(downgradeJustification.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeEdiscoveryAddToReviewSetOperation(writer: SerializationWriter, ediscoveryAddToReviewSetOperation: EdiscoveryAddToReviewSetOperation | undefined = {} as EdiscoveryAddToReviewSetOperation) : void {
    serializeCaseOperation(writer, ediscoveryAddToReviewSetOperation)
    writer.writeObjectValue<EdiscoveryReviewSet>("reviewSet", ediscoveryAddToReviewSetOperation.reviewSet, serializeEdiscoveryReviewSet);
    writer.writeObjectValue<EdiscoverySearch>("search", ediscoveryAddToReviewSetOperation.search, serializeEdiscoverySearch);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeEdiscoveryCase(writer: SerializationWriter, ediscoveryCase: EdiscoveryCase | undefined = {} as EdiscoveryCase) : void {
    serializeCaseEscaped(writer, ediscoveryCase)
    writer.writeObjectValue<IdentitySet>("closedBy", ediscoveryCase.closedBy, serializeIdentitySet);
    writer.writeDateValue("closedDateTime", ediscoveryCase.closedDateTime);
    writer.writeCollectionOfObjectValues<EdiscoveryCustodian>("custodians", ediscoveryCase.custodians, serializeEdiscoveryCustodian);
    writer.writeStringValue("externalId", ediscoveryCase.externalId);
    writer.writeCollectionOfObjectValues<EdiscoveryHoldPolicy>("legalHolds", ediscoveryCase.legalHolds, serializeEdiscoveryHoldPolicy);
    writer.writeCollectionOfObjectValues<EdiscoveryNoncustodialDataSource>("noncustodialDataSources", ediscoveryCase.noncustodialDataSources, serializeEdiscoveryNoncustodialDataSource);
    writer.writeCollectionOfObjectValues<CaseOperation>("operations", ediscoveryCase.operations, serializeCaseOperation);
    writer.writeCollectionOfObjectValues<EdiscoveryReviewSet>("reviewSets", ediscoveryCase.reviewSets, serializeEdiscoveryReviewSet);
    writer.writeCollectionOfObjectValues<EdiscoverySearch>("searches", ediscoveryCase.searches, serializeEdiscoverySearch);
    writer.writeObjectValue<EdiscoveryCaseSettings>("settings", ediscoveryCase.settings, serializeEdiscoveryCaseSettings);
    writer.writeCollectionOfObjectValues<EdiscoveryReviewTag>("tags", ediscoveryCase.tags, serializeEdiscoveryReviewTag);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeEdiscoveryCaseCollectionResponse(writer: SerializationWriter, ediscoveryCaseCollectionResponse: EdiscoveryCaseCollectionResponse | undefined = {} as EdiscoveryCaseCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, ediscoveryCaseCollectionResponse)
    writer.writeCollectionOfObjectValues<EdiscoveryCase>("value", ediscoveryCaseCollectionResponse.value, serializeEdiscoveryCase);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeEdiscoveryCaseSettings(writer: SerializationWriter, ediscoveryCaseSettings: EdiscoveryCaseSettings | undefined = {} as EdiscoveryCaseSettings) : void {
    serializeEntity(writer, ediscoveryCaseSettings)
    writer.writeObjectValue<OcrSettings>("ocr", ediscoveryCaseSettings.ocr, serializeOcrSettings);
    writer.writeObjectValue<RedundancyDetectionSettings>("redundancyDetection", ediscoveryCaseSettings.redundancyDetection, serializeRedundancyDetectionSettings);
    writer.writeObjectValue<TopicModelingSettings>("topicModeling", ediscoveryCaseSettings.topicModeling, serializeTopicModelingSettings);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeEdiscoveryCustodian(writer: SerializationWriter, ediscoveryCustodian: EdiscoveryCustodian | undefined = {} as EdiscoveryCustodian) : void {
    serializeDataSourceContainer(writer, ediscoveryCustodian)
    writer.writeDateValue("acknowledgedDateTime", ediscoveryCustodian.acknowledgedDateTime);
    writer.writeStringValue("email", ediscoveryCustodian.email);
    writer.writeObjectValue<EdiscoveryIndexOperation>("lastIndexOperation", ediscoveryCustodian.lastIndexOperation, serializeEdiscoveryIndexOperation);
    writer.writeCollectionOfObjectValues<SiteSource>("siteSources", ediscoveryCustodian.siteSources, serializeSiteSource);
    writer.writeCollectionOfObjectValues<UnifiedGroupSource>("unifiedGroupSources", ediscoveryCustodian.unifiedGroupSources, serializeUnifiedGroupSource);
    writer.writeCollectionOfObjectValues<UserSource>("userSources", ediscoveryCustodian.userSources, serializeUserSource);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeEdiscoveryCustodianCollectionResponse(writer: SerializationWriter, ediscoveryCustodianCollectionResponse: EdiscoveryCustodianCollectionResponse | undefined = {} as EdiscoveryCustodianCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, ediscoveryCustodianCollectionResponse)
    writer.writeCollectionOfObjectValues<EdiscoveryCustodian>("value", ediscoveryCustodianCollectionResponse.value, serializeEdiscoveryCustodian);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeEdiscoveryEstimateOperation(writer: SerializationWriter, ediscoveryEstimateOperation: EdiscoveryEstimateOperation | undefined = {} as EdiscoveryEstimateOperation) : void {
    serializeCaseOperation(writer, ediscoveryEstimateOperation)
    writer.writeNumberValue("indexedItemCount", ediscoveryEstimateOperation.indexedItemCount);
    writer.writeNumberValue("indexedItemsSize", ediscoveryEstimateOperation.indexedItemsSize);
    writer.writeNumberValue("mailboxCount", ediscoveryEstimateOperation.mailboxCount);
    writer.writeObjectValue<EdiscoverySearch>("search", ediscoveryEstimateOperation.search, serializeEdiscoverySearch);
    writer.writeNumberValue("siteCount", ediscoveryEstimateOperation.siteCount);
    writer.writeNumberValue("unindexedItemCount", ediscoveryEstimateOperation.unindexedItemCount);
    writer.writeNumberValue("unindexedItemsSize", ediscoveryEstimateOperation.unindexedItemsSize);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeEdiscoveryExportOperation(writer: SerializationWriter, ediscoveryExportOperation: EdiscoveryExportOperation | undefined = {} as EdiscoveryExportOperation) : void {
    serializeCaseOperation(writer, ediscoveryExportOperation)
    writer.writeStringValue("azureBlobContainer", ediscoveryExportOperation.azureBlobContainer);
    writer.writeStringValue("azureBlobToken", ediscoveryExportOperation.azureBlobToken);
    writer.writeStringValue("description", ediscoveryExportOperation.description);
    writer.writeCollectionOfObjectValues<ExportFileMetadata>("exportFileMetadata", ediscoveryExportOperation.exportFileMetadata, serializeExportFileMetadata);
    writer.writeEnumValue<ExportOptions[]>("exportOptions", ediscoveryExportOperation.exportOptions);
    writer.writeEnumValue<ExportFileStructure>("exportStructure", ediscoveryExportOperation.exportStructure);
    writer.writeStringValue("outputFolderId", ediscoveryExportOperation.outputFolderId);
    writer.writeStringValue("outputName", ediscoveryExportOperation.outputName);
    writer.writeObjectValue<EdiscoveryReviewSet>("reviewSet", ediscoveryExportOperation.reviewSet, serializeEdiscoveryReviewSet);
    writer.writeObjectValue<EdiscoveryReviewSetQuery>("reviewSetQuery", ediscoveryExportOperation.reviewSetQuery, serializeEdiscoveryReviewSetQuery);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeEdiscoveryFile(writer: SerializationWriter, ediscoveryFile: EdiscoveryFile | undefined = {} as EdiscoveryFile) : void {
    serializeFile(writer, ediscoveryFile)
    writer.writeObjectValue<EdiscoveryCustodian>("custodian", ediscoveryFile.custodian, serializeEdiscoveryCustodian);
    writer.writeCollectionOfObjectValues<EdiscoveryReviewTag>("tags", ediscoveryFile.tags, serializeEdiscoveryReviewTag);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeEdiscoveryFileCollectionResponse(writer: SerializationWriter, ediscoveryFileCollectionResponse: EdiscoveryFileCollectionResponse | undefined = {} as EdiscoveryFileCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, ediscoveryFileCollectionResponse)
    writer.writeCollectionOfObjectValues<EdiscoveryFile>("value", ediscoveryFileCollectionResponse.value, serializeEdiscoveryFile);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeEdiscoveryHoldOperation(writer: SerializationWriter, ediscoveryHoldOperation: EdiscoveryHoldOperation | undefined = {} as EdiscoveryHoldOperation) : void {
    serializeCaseOperation(writer, ediscoveryHoldOperation)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeEdiscoveryHoldPolicy(writer: SerializationWriter, ediscoveryHoldPolicy: EdiscoveryHoldPolicy | undefined = {} as EdiscoveryHoldPolicy) : void {
    serializePolicyBase(writer, ediscoveryHoldPolicy)
    writer.writeStringValue("contentQuery", ediscoveryHoldPolicy.contentQuery);
    writer.writeCollectionOfPrimitiveValues<string>("errors", ediscoveryHoldPolicy.errors);
    writer.writeBooleanValue("isEnabled", ediscoveryHoldPolicy.isEnabled);
    writer.writeCollectionOfObjectValues<SiteSource>("siteSources", ediscoveryHoldPolicy.siteSources, serializeSiteSource);
    writer.writeCollectionOfObjectValues<UserSource>("userSources", ediscoveryHoldPolicy.userSources, serializeUserSource);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeEdiscoveryHoldPolicyCollectionResponse(writer: SerializationWriter, ediscoveryHoldPolicyCollectionResponse: EdiscoveryHoldPolicyCollectionResponse | undefined = {} as EdiscoveryHoldPolicyCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, ediscoveryHoldPolicyCollectionResponse)
    writer.writeCollectionOfObjectValues<EdiscoveryHoldPolicy>("value", ediscoveryHoldPolicyCollectionResponse.value, serializeEdiscoveryHoldPolicy);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeEdiscoveryIndexOperation(writer: SerializationWriter, ediscoveryIndexOperation: EdiscoveryIndexOperation | undefined = {} as EdiscoveryIndexOperation) : void {
    serializeCaseOperation(writer, ediscoveryIndexOperation)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeEdiscoveryNoncustodialDataSource(writer: SerializationWriter, ediscoveryNoncustodialDataSource: EdiscoveryNoncustodialDataSource | undefined = {} as EdiscoveryNoncustodialDataSource) : void {
    serializeDataSourceContainer(writer, ediscoveryNoncustodialDataSource)
    writer.writeObjectValue<DataSource>("dataSource", ediscoveryNoncustodialDataSource.dataSource, serializeDataSource);
    writer.writeObjectValue<EdiscoveryIndexOperation>("lastIndexOperation", ediscoveryNoncustodialDataSource.lastIndexOperation, serializeEdiscoveryIndexOperation);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeEdiscoveryNoncustodialDataSourceCollectionResponse(writer: SerializationWriter, ediscoveryNoncustodialDataSourceCollectionResponse: EdiscoveryNoncustodialDataSourceCollectionResponse | undefined = {} as EdiscoveryNoncustodialDataSourceCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, ediscoveryNoncustodialDataSourceCollectionResponse)
    writer.writeCollectionOfObjectValues<EdiscoveryNoncustodialDataSource>("value", ediscoveryNoncustodialDataSourceCollectionResponse.value, serializeEdiscoveryNoncustodialDataSource);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeEdiscoveryPurgeDataOperation(writer: SerializationWriter, ediscoveryPurgeDataOperation: EdiscoveryPurgeDataOperation | undefined = {} as EdiscoveryPurgeDataOperation) : void {
    serializeCaseOperation(writer, ediscoveryPurgeDataOperation)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeEdiscoveryReviewSet(writer: SerializationWriter, ediscoveryReviewSet: EdiscoveryReviewSet | undefined = {} as EdiscoveryReviewSet) : void {
    serializeDataSet(writer, ediscoveryReviewSet)
    writer.writeCollectionOfObjectValues<EdiscoveryFile>("files", ediscoveryReviewSet.files, serializeEdiscoveryFile);
    writer.writeCollectionOfObjectValues<EdiscoveryReviewSetQuery>("queries", ediscoveryReviewSet.queries, serializeEdiscoveryReviewSetQuery);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeEdiscoveryReviewSetCollectionResponse(writer: SerializationWriter, ediscoveryReviewSetCollectionResponse: EdiscoveryReviewSetCollectionResponse | undefined = {} as EdiscoveryReviewSetCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, ediscoveryReviewSetCollectionResponse)
    writer.writeCollectionOfObjectValues<EdiscoveryReviewSet>("value", ediscoveryReviewSetCollectionResponse.value, serializeEdiscoveryReviewSet);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeEdiscoveryReviewSetQuery(writer: SerializationWriter, ediscoveryReviewSetQuery: EdiscoveryReviewSetQuery | undefined = {} as EdiscoveryReviewSetQuery) : void {
    serializeSearch(writer, ediscoveryReviewSetQuery)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeEdiscoveryReviewSetQueryCollectionResponse(writer: SerializationWriter, ediscoveryReviewSetQueryCollectionResponse: EdiscoveryReviewSetQueryCollectionResponse | undefined = {} as EdiscoveryReviewSetQueryCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, ediscoveryReviewSetQueryCollectionResponse)
    writer.writeCollectionOfObjectValues<EdiscoveryReviewSetQuery>("value", ediscoveryReviewSetQueryCollectionResponse.value, serializeEdiscoveryReviewSetQuery);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeEdiscoveryReviewTag(writer: SerializationWriter, ediscoveryReviewTag: EdiscoveryReviewTag | undefined = {} as EdiscoveryReviewTag) : void {
    serializeTag(writer, ediscoveryReviewTag)
    writer.writeEnumValue<ChildSelectability>("childSelectability", ediscoveryReviewTag.childSelectability);
    writer.writeCollectionOfObjectValues<EdiscoveryReviewTag>("childTags", ediscoveryReviewTag.childTags, serializeEdiscoveryReviewTag);
    writer.writeObjectValue<EdiscoveryReviewTag>("parent", ediscoveryReviewTag.parent, serializeEdiscoveryReviewTag);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeEdiscoveryReviewTagCollectionResponse(writer: SerializationWriter, ediscoveryReviewTagCollectionResponse: EdiscoveryReviewTagCollectionResponse | undefined = {} as EdiscoveryReviewTagCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, ediscoveryReviewTagCollectionResponse)
    writer.writeCollectionOfObjectValues<EdiscoveryReviewTag>("value", ediscoveryReviewTagCollectionResponse.value, serializeEdiscoveryReviewTag);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeEdiscoverySearch(writer: SerializationWriter, ediscoverySearch: EdiscoverySearch | undefined = {} as EdiscoverySearch) : void {
    serializeSearch(writer, ediscoverySearch)
    writer.writeCollectionOfObjectValues<DataSource>("additionalSources", ediscoverySearch.additionalSources, serializeDataSource);
    writer.writeObjectValue<EdiscoveryAddToReviewSetOperation>("addToReviewSetOperation", ediscoverySearch.addToReviewSetOperation, serializeEdiscoveryAddToReviewSetOperation);
    writer.writeCollectionOfObjectValues<DataSource>("custodianSources", ediscoverySearch.custodianSources, serializeDataSource);
    writer.writeEnumValue<DataSourceScopes[]>("dataSourceScopes", ediscoverySearch.dataSourceScopes);
    writer.writeObjectValue<EdiscoveryEstimateOperation>("lastEstimateStatisticsOperation", ediscoverySearch.lastEstimateStatisticsOperation, serializeEdiscoveryEstimateOperation);
    writer.writeCollectionOfObjectValues<EdiscoveryNoncustodialDataSource>("noncustodialSources", ediscoverySearch.noncustodialSources, serializeEdiscoveryNoncustodialDataSource);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeEdiscoverySearchCollectionResponse(writer: SerializationWriter, ediscoverySearchCollectionResponse: EdiscoverySearchCollectionResponse | undefined = {} as EdiscoverySearchCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, ediscoverySearchCollectionResponse)
    writer.writeCollectionOfObjectValues<EdiscoverySearch>("value", ediscoverySearchCollectionResponse.value, serializeEdiscoverySearch);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeEdiscoverySearchExportOperation(writer: SerializationWriter, ediscoverySearchExportOperation: EdiscoverySearchExportOperation | undefined = {} as EdiscoverySearchExportOperation) : void {
    serializeCaseOperation(writer, ediscoverySearchExportOperation)
    writer.writeEnumValue<AdditionalOptions[]>("additionalOptions", ediscoverySearchExportOperation.additionalOptions);
    writer.writeStringValue("description", ediscoverySearchExportOperation.description);
    writer.writeStringValue("displayName", ediscoverySearchExportOperation.displayName);
    writer.writeEnumValue<ExportCriteria[]>("exportCriteria", ediscoverySearchExportOperation.exportCriteria);
    writer.writeCollectionOfObjectValues<ExportFileMetadata>("exportFileMetadata", ediscoverySearchExportOperation.exportFileMetadata, serializeExportFileMetadata);
    writer.writeEnumValue<ExportFormat>("exportFormat", ediscoverySearchExportOperation.exportFormat);
    writer.writeEnumValue<ExportLocation[]>("exportLocation", ediscoverySearchExportOperation.exportLocation);
    writer.writeBooleanValue("exportSingleItems", ediscoverySearchExportOperation.exportSingleItems);
    writer.writeObjectValue<EdiscoverySearch>("search", ediscoverySearchExportOperation.search, serializeEdiscoverySearch);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeEdiscoveryTagOperation(writer: SerializationWriter, ediscoveryTagOperation: EdiscoveryTagOperation | undefined = {} as EdiscoveryTagOperation) : void {
    serializeCaseOperation(writer, ediscoveryTagOperation)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeEmailContentThreatSubmission(writer: SerializationWriter, emailContentThreatSubmission: EmailContentThreatSubmission | undefined = {} as EmailContentThreatSubmission) : void {
    serializeEmailThreatSubmission(writer, emailContentThreatSubmission)
    writer.writeStringValue("fileContent", emailContentThreatSubmission.fileContent);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeEmailSender(writer: SerializationWriter, emailSender: EmailSender | undefined = {} as EmailSender) : void {
    writer.writeStringValue("displayName", emailSender.displayName);
    writer.writeStringValue("domainName", emailSender.domainName);
    writer.writeStringValue("emailAddress", emailSender.emailAddress);
    writer.writeStringValue("@odata.type", emailSender.odataType);
    writer.writeAdditionalData(emailSender.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeEmailThreatSubmission(writer: SerializationWriter, emailThreatSubmission: EmailThreatSubmission | undefined = {} as EmailThreatSubmission) : void {
    serializeThreatSubmission(writer, emailThreatSubmission)
    writer.writeObjectValue<AttackSimulationInfo>("attackSimulationInfo", emailThreatSubmission.attackSimulationInfo, serializeAttackSimulationInfo);
    writer.writeStringValue("internetMessageId", emailThreatSubmission.internetMessageId);
    writer.writeEnumValue<SubmissionCategory>("originalCategory", emailThreatSubmission.originalCategory);
    writer.writeDateValue("receivedDateTime", emailThreatSubmission.receivedDateTime);
    writer.writeStringValue("recipientEmailAddress", emailThreatSubmission.recipientEmailAddress);
    writer.writeStringValue("sender", emailThreatSubmission.sender);
    writer.writeStringValue("senderIP", emailThreatSubmission.senderIP);
    writer.writeStringValue("subject", emailThreatSubmission.subject);
    writer.writeObjectValue<TenantAllowOrBlockListAction>("tenantAllowOrBlockListAction", emailThreatSubmission.tenantAllowOrBlockListAction, serializeTenantAllowOrBlockListAction);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeEmailThreatSubmissionCollectionResponse(writer: SerializationWriter, emailThreatSubmissionCollectionResponse: EmailThreatSubmissionCollectionResponse | undefined = {} as EmailThreatSubmissionCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, emailThreatSubmissionCollectionResponse)
    writer.writeCollectionOfObjectValues<EmailThreatSubmission>("value", emailThreatSubmissionCollectionResponse.value, serializeEmailThreatSubmission);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeEmailThreatSubmissionPolicy(writer: SerializationWriter, emailThreatSubmissionPolicy: EmailThreatSubmissionPolicy | undefined = {} as EmailThreatSubmissionPolicy) : void {
    serializeEntity(writer, emailThreatSubmissionPolicy)
    writer.writeStringValue("customizedNotificationSenderEmailAddress", emailThreatSubmissionPolicy.customizedNotificationSenderEmailAddress);
    writer.writeStringValue("customizedReportRecipientEmailAddress", emailThreatSubmissionPolicy.customizedReportRecipientEmailAddress);
    writer.writeBooleanValue("isAlwaysReportEnabledForUsers", emailThreatSubmissionPolicy.isAlwaysReportEnabledForUsers);
    writer.writeBooleanValue("isAskMeEnabledForUsers", emailThreatSubmissionPolicy.isAskMeEnabledForUsers);
    writer.writeBooleanValue("isCustomizedMessageEnabled", emailThreatSubmissionPolicy.isCustomizedMessageEnabled);
    writer.writeBooleanValue("isCustomizedMessageEnabledForPhishing", emailThreatSubmissionPolicy.isCustomizedMessageEnabledForPhishing);
    writer.writeBooleanValue("isCustomizedNotificationSenderEnabled", emailThreatSubmissionPolicy.isCustomizedNotificationSenderEnabled);
    writer.writeBooleanValue("isNeverReportEnabledForUsers", emailThreatSubmissionPolicy.isNeverReportEnabledForUsers);
    writer.writeBooleanValue("isOrganizationBrandingEnabled", emailThreatSubmissionPolicy.isOrganizationBrandingEnabled);
    writer.writeBooleanValue("isReportFromQuarantineEnabled", emailThreatSubmissionPolicy.isReportFromQuarantineEnabled);
    writer.writeBooleanValue("isReportToCustomizedEmailAddressEnabled", emailThreatSubmissionPolicy.isReportToCustomizedEmailAddressEnabled);
    writer.writeBooleanValue("isReportToMicrosoftEnabled", emailThreatSubmissionPolicy.isReportToMicrosoftEnabled);
    writer.writeBooleanValue("isReviewEmailNotificationEnabled", emailThreatSubmissionPolicy.isReviewEmailNotificationEnabled);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeEmailThreatSubmissionPolicyCollectionResponse(writer: SerializationWriter, emailThreatSubmissionPolicyCollectionResponse: EmailThreatSubmissionPolicyCollectionResponse | undefined = {} as EmailThreatSubmissionPolicyCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, emailThreatSubmissionPolicyCollectionResponse)
    writer.writeCollectionOfObjectValues<EmailThreatSubmissionPolicy>("value", emailThreatSubmissionPolicyCollectionResponse.value, serializeEmailThreatSubmissionPolicy);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeEmailUrlThreatSubmission(writer: SerializationWriter, emailUrlThreatSubmission: EmailUrlThreatSubmission | undefined = {} as EmailUrlThreatSubmission) : void {
    serializeEmailThreatSubmission(writer, emailUrlThreatSubmission)
    writer.writeStringValue("messageUrl", emailUrlThreatSubmission.messageUrl);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeEventPropagationResult(writer: SerializationWriter, eventPropagationResult: EventPropagationResult | undefined = {} as EventPropagationResult) : void {
    writer.writeStringValue("location", eventPropagationResult.location);
    writer.writeStringValue("@odata.type", eventPropagationResult.odataType);
    writer.writeStringValue("serviceName", eventPropagationResult.serviceName);
    writer.writeEnumValue<EventPropagationStatus>("status", eventPropagationResult.status);
    writer.writeStringValue("statusInformation", eventPropagationResult.statusInformation);
    writer.writeAdditionalData(eventPropagationResult.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeEventQuery(writer: SerializationWriter, eventQuery: EventQuery | undefined = {} as EventQuery) : void {
    writer.writeStringValue("@odata.type", eventQuery.odataType);
    writer.writeStringValue("query", eventQuery.query);
    writer.writeEnumValue<QueryType>("queryType", eventQuery.queryType);
    writer.writeAdditionalData(eventQuery.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeExportFileMetadata(writer: SerializationWriter, exportFileMetadata: ExportFileMetadata | undefined = {} as ExportFileMetadata) : void {
    writer.writeStringValue("downloadUrl", exportFileMetadata.downloadUrl);
    writer.writeStringValue("fileName", exportFileMetadata.fileName);
    writer.writeStringValue("@odata.type", exportFileMetadata.odataType);
    writer.writeNumberValue("size", exportFileMetadata.size);
    writer.writeAdditionalData(exportFileMetadata.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeFile(writer: SerializationWriter, file: File | undefined = {} as File) : void {
    serializeEntity(writer, file)
    writer.writeStringValue("content", file.content);
    writer.writeDateValue("dateTime", file.dateTime);
    writer.writeStringValue("extension", file.extension);
    writer.writeStringValue("extractedTextContent", file.extractedTextContent);
    writer.writeStringValue("mediaType", file.mediaType);
    writer.writeStringValue("name", file.name);
    writer.writeObjectValue<StringValueDictionary>("otherProperties", file.otherProperties, serializeStringValueDictionary);
    writer.writeEnumValue<FileProcessingStatus>("processingStatus", file.processingStatus);
    writer.writeCollectionOfPrimitiveValues<string>("senderOrAuthors", file.senderOrAuthors);
    writer.writeNumberValue("size", file.size);
    writer.writeEnumValue<SourceType[]>("sourceType", file.sourceType);
    writer.writeStringValue("subjectTitle", file.subjectTitle);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeFileContentThreatSubmission(writer: SerializationWriter, fileContentThreatSubmission: FileContentThreatSubmission | undefined = {} as FileContentThreatSubmission) : void {
    serializeFileThreatSubmission(writer, fileContentThreatSubmission)
    writer.writeStringValue("fileContent", fileContentThreatSubmission.fileContent);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeFileDetails(writer: SerializationWriter, fileDetails: FileDetails | undefined = {} as FileDetails) : void {
    writer.writeStringValue("fileName", fileDetails.fileName);
    writer.writeStringValue("filePath", fileDetails.filePath);
    writer.writeStringValue("filePublisher", fileDetails.filePublisher);
    writer.writeNumberValue("fileSize", fileDetails.fileSize);
    writer.writeStringValue("issuer", fileDetails.issuer);
    writer.writeStringValue("@odata.type", fileDetails.odataType);
    writer.writeStringValue("sha1", fileDetails.sha1);
    writer.writeStringValue("sha256", fileDetails.sha256);
    writer.writeStringValue("signer", fileDetails.signer);
    writer.writeAdditionalData(fileDetails.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeFileEvidence(writer: SerializationWriter, fileEvidence: FileEvidence | undefined = {} as FileEvidence) : void {
    serializeAlertEvidence(writer, fileEvidence)
    writer.writeEnumValue<DetectionStatus>("detectionStatus", fileEvidence.detectionStatus);
    writer.writeObjectValue<FileDetails>("fileDetails", fileEvidence.fileDetails, serializeFileDetails);
    writer.writeStringValue("mdeDeviceId", fileEvidence.mdeDeviceId);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeFileHash(writer: SerializationWriter, fileHash: FileHash | undefined = {} as FileHash) : void {
    writer.writeEnumValue<FileHashAlgorithm>("algorithm", fileHash.algorithm);
    writer.writeStringValue("@odata.type", fileHash.odataType);
    writer.writeStringValue("value", fileHash.value);
    writer.writeAdditionalData(fileHash.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeFilePlanDescriptor(writer: SerializationWriter, filePlanDescriptor: FilePlanDescriptor | undefined = {} as FilePlanDescriptor) : void {
    serializeEntity(writer, filePlanDescriptor)
    writer.writeObjectValue<Authority>("authority", filePlanDescriptor.authority, serializeAuthority);
    writer.writeObjectValue<AuthorityTemplate>("authorityTemplate", filePlanDescriptor.authorityTemplate, serializeAuthorityTemplate);
    writer.writeObjectValue<AppliedCategory>("category", filePlanDescriptor.category, serializeAppliedCategory);
    writer.writeObjectValue<CategoryTemplate>("categoryTemplate", filePlanDescriptor.categoryTemplate, serializeCategoryTemplate);
    writer.writeObjectValue<Citation>("citation", filePlanDescriptor.citation, serializeCitation);
    writer.writeObjectValue<CitationTemplate>("citationTemplate", filePlanDescriptor.citationTemplate, serializeCitationTemplate);
    writer.writeObjectValue<Department>("department", filePlanDescriptor.department, serializeDepartment);
    writer.writeObjectValue<DepartmentTemplate>("departmentTemplate", filePlanDescriptor.departmentTemplate, serializeDepartmentTemplate);
    writer.writeObjectValue<FilePlanReference>("filePlanReference", filePlanDescriptor.filePlanReference, serializeFilePlanReference);
    writer.writeObjectValue<FilePlanReferenceTemplate>("filePlanReferenceTemplate", filePlanDescriptor.filePlanReferenceTemplate, serializeFilePlanReferenceTemplate);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeFilePlanDescriptorBase(writer: SerializationWriter, filePlanDescriptorBase: FilePlanDescriptorBase | undefined = {} as FilePlanDescriptorBase) : void {
    writer.writeStringValue("displayName", filePlanDescriptorBase.displayName);
    writer.writeStringValue("@odata.type", filePlanDescriptorBase.odataType);
    writer.writeAdditionalData(filePlanDescriptorBase.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeFilePlanDescriptorTemplate(writer: SerializationWriter, filePlanDescriptorTemplate: FilePlanDescriptorTemplate | undefined = {} as FilePlanDescriptorTemplate) : void {
    serializeEntity(writer, filePlanDescriptorTemplate)
    writer.writeObjectValue<IdentitySet>("createdBy", filePlanDescriptorTemplate.createdBy, serializeIdentitySet);
    writer.writeDateValue("createdDateTime", filePlanDescriptorTemplate.createdDateTime);
    writer.writeStringValue("displayName", filePlanDescriptorTemplate.displayName);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeFilePlanReference(writer: SerializationWriter, filePlanReference: FilePlanReference | undefined = {} as FilePlanReference) : void {
    serializeFilePlanDescriptorBase(writer, filePlanReference)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeFilePlanReferenceTemplate(writer: SerializationWriter, filePlanReferenceTemplate: FilePlanReferenceTemplate | undefined = {} as FilePlanReferenceTemplate) : void {
    serializeFilePlanDescriptorTemplate(writer, filePlanReferenceTemplate)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeFilePlanReferenceTemplateCollectionResponse(writer: SerializationWriter, filePlanReferenceTemplateCollectionResponse: FilePlanReferenceTemplateCollectionResponse | undefined = {} as FilePlanReferenceTemplateCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, filePlanReferenceTemplateCollectionResponse)
    writer.writeCollectionOfObjectValues<FilePlanReferenceTemplate>("value", filePlanReferenceTemplateCollectionResponse.value, serializeFilePlanReferenceTemplate);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeFileThreatSubmission(writer: SerializationWriter, fileThreatSubmission: FileThreatSubmission | undefined = {} as FileThreatSubmission) : void {
    serializeThreatSubmission(writer, fileThreatSubmission)
    writer.writeStringValue("fileName", fileThreatSubmission.fileName);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeFileThreatSubmissionCollectionResponse(writer: SerializationWriter, fileThreatSubmissionCollectionResponse: FileThreatSubmissionCollectionResponse | undefined = {} as FileThreatSubmissionCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, fileThreatSubmissionCollectionResponse)
    writer.writeCollectionOfObjectValues<FileThreatSubmission>("value", fileThreatSubmissionCollectionResponse.value, serializeFileThreatSubmission);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeFileUrlThreatSubmission(writer: SerializationWriter, fileUrlThreatSubmission: FileUrlThreatSubmission | undefined = {} as FileUrlThreatSubmission) : void {
    serializeFileThreatSubmission(writer, fileUrlThreatSubmission)
    writer.writeStringValue("fileUrl", fileUrlThreatSubmission.fileUrl);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeForceUserPasswordResetResponseAction(writer: SerializationWriter, forceUserPasswordResetResponseAction: ForceUserPasswordResetResponseAction | undefined = {} as ForceUserPasswordResetResponseAction) : void {
    serializeResponseAction(writer, forceUserPasswordResetResponseAction)
    writer.writeEnumValue<ForceUserPasswordResetEntityIdentifier[]>("identifier", forceUserPasswordResetResponseAction.identifier);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeFormattedContent(writer: SerializationWriter, formattedContent: FormattedContent | undefined = {} as FormattedContent) : void {
    writer.writeStringValue("content", formattedContent.content);
    writer.writeEnumValue<ContentFormat>("format", formattedContent.format);
    writer.writeStringValue("@odata.type", formattedContent.odataType);
    writer.writeAdditionalData(formattedContent.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeGitHubOrganizationEvidence(writer: SerializationWriter, gitHubOrganizationEvidence: GitHubOrganizationEvidence | undefined = {} as GitHubOrganizationEvidence) : void {
    serializeAlertEvidence(writer, gitHubOrganizationEvidence)
    writer.writeStringValue("company", gitHubOrganizationEvidence.company);
    writer.writeStringValue("displayName", gitHubOrganizationEvidence.displayName);
    writer.writeStringValue("email", gitHubOrganizationEvidence.email);
    writer.writeStringValue("login", gitHubOrganizationEvidence.login);
    writer.writeStringValue("orgId", gitHubOrganizationEvidence.orgId);
    writer.writeStringValue("webUrl", gitHubOrganizationEvidence.webUrl);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeGitHubRepoEvidence(writer: SerializationWriter, gitHubRepoEvidence: GitHubRepoEvidence | undefined = {} as GitHubRepoEvidence) : void {
    serializeAlertEvidence(writer, gitHubRepoEvidence)
    writer.writeStringValue("baseUrl", gitHubRepoEvidence.baseUrl);
    writer.writeStringValue("login", gitHubRepoEvidence.login);
    writer.writeStringValue("owner", gitHubRepoEvidence.owner);
    writer.writeStringValue("ownerType", gitHubRepoEvidence.ownerType);
    writer.writeStringValue("repoId", gitHubRepoEvidence.repoId);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeGitHubUserEvidence(writer: SerializationWriter, gitHubUserEvidence: GitHubUserEvidence | undefined = {} as GitHubUserEvidence) : void {
    serializeAlertEvidence(writer, gitHubUserEvidence)
    writer.writeStringValue("email", gitHubUserEvidence.email);
    writer.writeStringValue("login", gitHubUserEvidence.login);
    writer.writeStringValue("name", gitHubUserEvidence.name);
    writer.writeStringValue("userId", gitHubUserEvidence.userId);
    writer.writeStringValue("webUrl", gitHubUserEvidence.webUrl);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeGoogleCloudResourceEvidence(writer: SerializationWriter, googleCloudResourceEvidence: GoogleCloudResourceEvidence | undefined = {} as GoogleCloudResourceEvidence) : void {
    serializeAlertEvidence(writer, googleCloudResourceEvidence)
    writer.writeStringValue("location", googleCloudResourceEvidence.location);
    writer.writeEnumValue<GoogleCloudLocationType>("locationType", googleCloudResourceEvidence.locationType);
    writer.writeStringValue("projectId", googleCloudResourceEvidence.projectId);
    writer.writeNumberValue("projectNumber", googleCloudResourceEvidence.projectNumber);
    writer.writeStringValue("resourceName", googleCloudResourceEvidence.resourceName);
    writer.writeStringValue("resourceType", googleCloudResourceEvidence.resourceType);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeHardDeleteResponseAction(writer: SerializationWriter, hardDeleteResponseAction: HardDeleteResponseAction | undefined = {} as HardDeleteResponseAction) : void {
    serializeResponseAction(writer, hardDeleteResponseAction)
    writer.writeEnumValue<EmailEntityIdentifier[]>("identifier", hardDeleteResponseAction.identifier);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeHost(writer: SerializationWriter, host: Host | undefined = {} as Host) : void {
    serializeArtifact(writer, host)
    writer.writeCollectionOfObjectValues<HostPair>("childHostPairs", host.childHostPairs, serializeHostPair);
    writer.writeCollectionOfObjectValues<HostComponent>("components", host.components, serializeHostComponent);
    writer.writeCollectionOfObjectValues<HostCookie>("cookies", host.cookies, serializeHostCookie);
    writer.writeDateValue("firstSeenDateTime", host.firstSeenDateTime);
    writer.writeCollectionOfObjectValues<HostPair>("hostPairs", host.hostPairs, serializeHostPair);
    writer.writeDateValue("lastSeenDateTime", host.lastSeenDateTime);
    writer.writeCollectionOfObjectValues<HostPair>("parentHostPairs", host.parentHostPairs, serializeHostPair);
    writer.writeCollectionOfObjectValues<PassiveDnsRecord>("passiveDns", host.passiveDns, serializePassiveDnsRecord);
    writer.writeCollectionOfObjectValues<PassiveDnsRecord>("passiveDnsReverse", host.passiveDnsReverse, serializePassiveDnsRecord);
    writer.writeCollectionOfObjectValues<HostPort>("ports", host.ports, serializeHostPort);
    writer.writeObjectValue<HostReputation>("reputation", host.reputation, serializeHostReputation);
    writer.writeCollectionOfObjectValues<HostSslCertificate>("sslCertificates", host.sslCertificates, serializeHostSslCertificate);
    writer.writeCollectionOfObjectValues<Subdomain>("subdomains", host.subdomains, serializeSubdomain);
    writer.writeCollectionOfObjectValues<HostTracker>("trackers", host.trackers, serializeHostTracker);
    writer.writeObjectValue<WhoisRecord>("whois", host.whois, serializeWhoisRecord);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeHostCollectionResponse(writer: SerializationWriter, hostCollectionResponse: HostCollectionResponse | undefined = {} as HostCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, hostCollectionResponse)
    writer.writeCollectionOfObjectValues<Host>("value", hostCollectionResponse.value, serializeHost);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeHostComponent(writer: SerializationWriter, hostComponent: HostComponent | undefined = {} as HostComponent) : void {
    serializeArtifact(writer, hostComponent)
    writer.writeStringValue("category", hostComponent.category);
    writer.writeDateValue("firstSeenDateTime", hostComponent.firstSeenDateTime);
    writer.writeObjectValue<Host>("host", hostComponent.host, serializeHost);
    writer.writeDateValue("lastSeenDateTime", hostComponent.lastSeenDateTime);
    writer.writeStringValue("name", hostComponent.name);
    writer.writeStringValue("version", hostComponent.version);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeHostComponentCollectionResponse(writer: SerializationWriter, hostComponentCollectionResponse: HostComponentCollectionResponse | undefined = {} as HostComponentCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, hostComponentCollectionResponse)
    writer.writeCollectionOfObjectValues<HostComponent>("value", hostComponentCollectionResponse.value, serializeHostComponent);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeHostCookie(writer: SerializationWriter, hostCookie: HostCookie | undefined = {} as HostCookie) : void {
    serializeArtifact(writer, hostCookie)
    writer.writeStringValue("domain", hostCookie.domain);
    writer.writeDateValue("firstSeenDateTime", hostCookie.firstSeenDateTime);
    writer.writeObjectValue<Host>("host", hostCookie.host, serializeHost);
    writer.writeDateValue("lastSeenDateTime", hostCookie.lastSeenDateTime);
    writer.writeStringValue("name", hostCookie.name);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeHostCookieCollectionResponse(writer: SerializationWriter, hostCookieCollectionResponse: HostCookieCollectionResponse | undefined = {} as HostCookieCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, hostCookieCollectionResponse)
    writer.writeCollectionOfObjectValues<HostCookie>("value", hostCookieCollectionResponse.value, serializeHostCookie);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeHostLogonSessionEvidence(writer: SerializationWriter, hostLogonSessionEvidence: HostLogonSessionEvidence | undefined = {} as HostLogonSessionEvidence) : void {
    serializeAlertEvidence(writer, hostLogonSessionEvidence)
    writer.writeObjectValue<UserEvidence>("account", hostLogonSessionEvidence.account, serializeUserEvidence);
    writer.writeDateValue("endUtcDateTime", hostLogonSessionEvidence.endUtcDateTime);
    writer.writeObjectValue<DeviceEvidence>("host", hostLogonSessionEvidence.host, serializeDeviceEvidence);
    writer.writeStringValue("sessionId", hostLogonSessionEvidence.sessionId);
    writer.writeDateValue("startUtcDateTime", hostLogonSessionEvidence.startUtcDateTime);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeHostname(writer: SerializationWriter, hostname: Hostname | undefined = {} as Hostname) : void {
    serializeHost(writer, hostname)
    writer.writeStringValue("registrant", hostname.registrant);
    writer.writeStringValue("registrar", hostname.registrar);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeHostPair(writer: SerializationWriter, hostPair: HostPair | undefined = {} as HostPair) : void {
    serializeEntity(writer, hostPair)
    writer.writeObjectValue<Host>("childHost", hostPair.childHost, serializeHost);
    writer.writeDateValue("firstSeenDateTime", hostPair.firstSeenDateTime);
    writer.writeDateValue("lastSeenDateTime", hostPair.lastSeenDateTime);
    writer.writeStringValue("linkKind", hostPair.linkKind);
    writer.writeObjectValue<Host>("parentHost", hostPair.parentHost, serializeHost);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeHostPairCollectionResponse(writer: SerializationWriter, hostPairCollectionResponse: HostPairCollectionResponse | undefined = {} as HostPairCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, hostPairCollectionResponse)
    writer.writeCollectionOfObjectValues<HostPair>("value", hostPairCollectionResponse.value, serializeHostPair);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeHostPort(writer: SerializationWriter, hostPort: HostPort | undefined = {} as HostPort) : void {
    serializeEntity(writer, hostPort)
    writer.writeCollectionOfObjectValues<HostPortBanner>("banners", hostPort.banners, serializeHostPortBanner);
    writer.writeDateValue("firstSeenDateTime", hostPort.firstSeenDateTime);
    writer.writeObjectValue<Host>("host", hostPort.host, serializeHost);
    writer.writeDateValue("lastScanDateTime", hostPort.lastScanDateTime);
    writer.writeDateValue("lastSeenDateTime", hostPort.lastSeenDateTime);
    writer.writeObjectValue<SslCertificate>("mostRecentSslCertificate", hostPort.mostRecentSslCertificate, serializeSslCertificate);
    writer.writeNumberValue("port", hostPort.port);
    writer.writeEnumValue<HostPortProtocol>("protocol", hostPort.protocol);
    writer.writeCollectionOfObjectValues<HostPortComponent>("services", hostPort.services, serializeHostPortComponent);
    writer.writeEnumValue<HostPortStatus>("status", hostPort.status);
    writer.writeNumberValue("timesObserved", hostPort.timesObserved);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeHostPortBanner(writer: SerializationWriter, hostPortBanner: HostPortBanner | undefined = {} as HostPortBanner) : void {
    writer.writeStringValue("banner", hostPortBanner.banner);
    writer.writeDateValue("firstSeenDateTime", hostPortBanner.firstSeenDateTime);
    writer.writeDateValue("lastSeenDateTime", hostPortBanner.lastSeenDateTime);
    writer.writeStringValue("@odata.type", hostPortBanner.odataType);
    writer.writeStringValue("scanProtocol", hostPortBanner.scanProtocol);
    writer.writeNumberValue("timesObserved", hostPortBanner.timesObserved);
    writer.writeAdditionalData(hostPortBanner.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeHostPortCollectionResponse(writer: SerializationWriter, hostPortCollectionResponse: HostPortCollectionResponse | undefined = {} as HostPortCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, hostPortCollectionResponse)
    writer.writeCollectionOfObjectValues<HostPort>("value", hostPortCollectionResponse.value, serializeHostPort);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeHostPortComponent(writer: SerializationWriter, hostPortComponent: HostPortComponent | undefined = {} as HostPortComponent) : void {
    writer.writeObjectValue<HostComponent>("component", hostPortComponent.component, serializeHostComponent);
    writer.writeDateValue("firstSeenDateTime", hostPortComponent.firstSeenDateTime);
    writer.writeBooleanValue("isRecent", hostPortComponent.isRecent);
    writer.writeDateValue("lastSeenDateTime", hostPortComponent.lastSeenDateTime);
    writer.writeStringValue("@odata.type", hostPortComponent.odataType);
    writer.writeAdditionalData(hostPortComponent.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeHostReputation(writer: SerializationWriter, hostReputation: HostReputation | undefined = {} as HostReputation) : void {
    serializeEntity(writer, hostReputation)
    writer.writeEnumValue<HostReputationClassification>("classification", hostReputation.classification);
    writer.writeCollectionOfObjectValues<HostReputationRule>("rules", hostReputation.rules, serializeHostReputationRule);
    writer.writeNumberValue("score", hostReputation.score);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeHostReputationRule(writer: SerializationWriter, hostReputationRule: HostReputationRule | undefined = {} as HostReputationRule) : void {
    writer.writeStringValue("description", hostReputationRule.description);
    writer.writeStringValue("name", hostReputationRule.name);
    writer.writeStringValue("@odata.type", hostReputationRule.odataType);
    writer.writeStringValue("relatedDetailsUrl", hostReputationRule.relatedDetailsUrl);
    writer.writeEnumValue<HostReputationRuleSeverity>("severity", hostReputationRule.severity);
    writer.writeAdditionalData(hostReputationRule.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeHostSslCertificate(writer: SerializationWriter, hostSslCertificate: HostSslCertificate | undefined = {} as HostSslCertificate) : void {
    serializeArtifact(writer, hostSslCertificate)
    writer.writeDateValue("firstSeenDateTime", hostSslCertificate.firstSeenDateTime);
    writer.writeObjectValue<Host>("host", hostSslCertificate.host, serializeHost);
    writer.writeDateValue("lastSeenDateTime", hostSslCertificate.lastSeenDateTime);
    writer.writeCollectionOfObjectValues<HostSslCertificatePort>("ports", hostSslCertificate.ports, serializeHostSslCertificatePort);
    writer.writeObjectValue<SslCertificate>("sslCertificate", hostSslCertificate.sslCertificate, serializeSslCertificate);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeHostSslCertificateCollectionResponse(writer: SerializationWriter, hostSslCertificateCollectionResponse: HostSslCertificateCollectionResponse | undefined = {} as HostSslCertificateCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, hostSslCertificateCollectionResponse)
    writer.writeCollectionOfObjectValues<HostSslCertificate>("value", hostSslCertificateCollectionResponse.value, serializeHostSslCertificate);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeHostSslCertificatePort(writer: SerializationWriter, hostSslCertificatePort: HostSslCertificatePort | undefined = {} as HostSslCertificatePort) : void {
    writer.writeDateValue("firstSeenDateTime", hostSslCertificatePort.firstSeenDateTime);
    writer.writeDateValue("lastSeenDateTime", hostSslCertificatePort.lastSeenDateTime);
    writer.writeStringValue("@odata.type", hostSslCertificatePort.odataType);
    writer.writeNumberValue("port", hostSslCertificatePort.port);
    writer.writeAdditionalData(hostSslCertificatePort.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeHostTracker(writer: SerializationWriter, hostTracker: HostTracker | undefined = {} as HostTracker) : void {
    serializeArtifact(writer, hostTracker)
    writer.writeDateValue("firstSeenDateTime", hostTracker.firstSeenDateTime);
    writer.writeObjectValue<Host>("host", hostTracker.host, serializeHost);
    writer.writeStringValue("kind", hostTracker.kind);
    writer.writeDateValue("lastSeenDateTime", hostTracker.lastSeenDateTime);
    writer.writeStringValue("value", hostTracker.value);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeHostTrackerCollectionResponse(writer: SerializationWriter, hostTrackerCollectionResponse: HostTrackerCollectionResponse | undefined = {} as HostTrackerCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, hostTrackerCollectionResponse)
    writer.writeCollectionOfObjectValues<HostTracker>("value", hostTrackerCollectionResponse.value, serializeHostTracker);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeHuntingQueryResults(writer: SerializationWriter, huntingQueryResults: HuntingQueryResults | undefined = {} as HuntingQueryResults) : void {
    writer.writeStringValue("@odata.type", huntingQueryResults.odataType);
    writer.writeCollectionOfObjectValues<HuntingRowResult>("results", huntingQueryResults.results, serializeHuntingRowResult);
    writer.writeCollectionOfObjectValues<SinglePropertySchema>("schema", huntingQueryResults.schema, serializeSinglePropertySchema);
    writer.writeAdditionalData(huntingQueryResults.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeHuntingRowResult(writer: SerializationWriter, huntingRowResult: HuntingRowResult | undefined = {} as HuntingRowResult) : void {
    writer.writeStringValue("@odata.type", huntingRowResult.odataType);
    writer.writeAdditionalData(huntingRowResult.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeHyperlink(writer: SerializationWriter, hyperlink: Hyperlink | undefined = {} as Hyperlink) : void {
    writer.writeStringValue("name", hyperlink.name);
    writer.writeStringValue("@odata.type", hyperlink.odataType);
    writer.writeStringValue("url", hyperlink.url);
    writer.writeAdditionalData(hyperlink.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeImpactedAsset(writer: SerializationWriter, impactedAsset: ImpactedAsset | undefined = {} as ImpactedAsset) : void {
    writer.writeStringValue("@odata.type", impactedAsset.odataType);
    writer.writeAdditionalData(impactedAsset.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeImpactedDeviceAsset(writer: SerializationWriter, impactedDeviceAsset: ImpactedDeviceAsset | undefined = {} as ImpactedDeviceAsset) : void {
    serializeImpactedAsset(writer, impactedDeviceAsset)
    writer.writeEnumValue<DeviceAssetIdentifier>("identifier", impactedDeviceAsset.identifier);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeImpactedMailboxAsset(writer: SerializationWriter, impactedMailboxAsset: ImpactedMailboxAsset | undefined = {} as ImpactedMailboxAsset) : void {
    serializeImpactedAsset(writer, impactedMailboxAsset)
    writer.writeEnumValue<MailboxAssetIdentifier>("identifier", impactedMailboxAsset.identifier);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeImpactedUserAsset(writer: SerializationWriter, impactedUserAsset: ImpactedUserAsset | undefined = {} as ImpactedUserAsset) : void {
    serializeImpactedAsset(writer, impactedUserAsset)
    writer.writeEnumValue<UserAssetIdentifier>("identifier", impactedUserAsset.identifier);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeIncident(writer: SerializationWriter, incident: Incident | undefined = {} as Incident) : void {
    serializeEntity(writer, incident)
    writer.writeCollectionOfObjectValues<Alert>("alerts", incident.alerts, serializeAlert);
    writer.writeStringValue("assignedTo", incident.assignedTo);
    writer.writeEnumValue<AlertClassification>("classification", incident.classification);
    writer.writeCollectionOfObjectValues<AlertComment>("comments", incident.comments, serializeAlertComment);
    writer.writeDateValue("createdDateTime", incident.createdDateTime);
    writer.writeCollectionOfPrimitiveValues<string>("customTags", incident.customTags);
    writer.writeStringValue("description", incident.description);
    writer.writeEnumValue<AlertDetermination>("determination", incident.determination);
    writer.writeStringValue("displayName", incident.displayName);
    writer.writeStringValue("incidentWebUrl", incident.incidentWebUrl);
    writer.writeStringValue("lastModifiedBy", incident.lastModifiedBy);
    writer.writeDateValue("lastUpdateDateTime", incident.lastUpdateDateTime);
    writer.writeStringValue("recommendedActions", incident.recommendedActions);
    writer.writeCollectionOfObjectValues<RecommendedHuntingQuery>("recommendedHuntingQueries", incident.recommendedHuntingQueries, serializeRecommendedHuntingQuery);
    writer.writeStringValue("redirectIncidentId", incident.redirectIncidentId);
    writer.writeEnumValue<AlertSeverity>("severity", incident.severity);
    writer.writeEnumValue<IncidentStatus>("status", incident.status);
    writer.writeCollectionOfPrimitiveValues<string>("systemTags", incident.systemTags);
    writer.writeStringValue("tenantId", incident.tenantId);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeIncidentCollectionResponse(writer: SerializationWriter, incidentCollectionResponse: IncidentCollectionResponse | undefined = {} as IncidentCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, incidentCollectionResponse)
    writer.writeCollectionOfObjectValues<Incident>("value", incidentCollectionResponse.value, serializeIncident);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeIndicator(writer: SerializationWriter, indicator: Indicator | undefined = {} as Indicator) : void {
    serializeEntity(writer, indicator)
    writer.writeObjectValue<Artifact>("artifact", indicator.artifact, serializeArtifact);
    writer.writeEnumValue<IndicatorSource>("source", indicator.source);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeInformationProtection(writer: SerializationWriter, informationProtection: InformationProtection | undefined = {} as InformationProtection) : void {
    serializeEntity(writer, informationProtection)
    writer.writeObjectValue<InformationProtectionPolicySetting>("labelPolicySettings", informationProtection.labelPolicySettings, serializeInformationProtectionPolicySetting);
    writer.writeCollectionOfObjectValues<SensitivityLabel>("sensitivityLabels", informationProtection.sensitivityLabels, serializeSensitivityLabel);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeInformationProtectionAction(writer: SerializationWriter, informationProtectionAction: InformationProtectionAction | undefined = {} as InformationProtectionAction) : void {
    writer.writeStringValue("@odata.type", informationProtectionAction.odataType);
    writer.writeAdditionalData(informationProtectionAction.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeInformationProtectionPolicySetting(writer: SerializationWriter, informationProtectionPolicySetting: InformationProtectionPolicySetting | undefined = {} as InformationProtectionPolicySetting) : void {
    serializeEntity(writer, informationProtectionPolicySetting)
    writer.writeStringValue("defaultLabelId", informationProtectionPolicySetting.defaultLabelId);
    writer.writeBooleanValue("isDowngradeJustificationRequired", informationProtectionPolicySetting.isDowngradeJustificationRequired);
    writer.writeBooleanValue("isMandatory", informationProtectionPolicySetting.isMandatory);
    writer.writeStringValue("moreInfoUrl", informationProtectionPolicySetting.moreInfoUrl);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeInitiateInvestigationResponseAction(writer: SerializationWriter, initiateInvestigationResponseAction: InitiateInvestigationResponseAction | undefined = {} as InitiateInvestigationResponseAction) : void {
    serializeResponseAction(writer, initiateInvestigationResponseAction)
    writer.writeEnumValue<DeviceIdEntityIdentifier[]>("identifier", initiateInvestigationResponseAction.identifier);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeIntelligenceProfile(writer: SerializationWriter, intelligenceProfile: IntelligenceProfile | undefined = {} as IntelligenceProfile) : void {
    serializeEntity(writer, intelligenceProfile)
    writer.writeCollectionOfPrimitiveValues<string>("aliases", intelligenceProfile.aliases);
    writer.writeCollectionOfObjectValues<IntelligenceProfileCountryOrRegionOfOrigin>("countriesOrRegionsOfOrigin", intelligenceProfile.countriesOrRegionsOfOrigin, serializeIntelligenceProfileCountryOrRegionOfOrigin);
    writer.writeObjectValue<FormattedContent>("description", intelligenceProfile.description, serializeFormattedContent);
    writer.writeDateValue("firstActiveDateTime", intelligenceProfile.firstActiveDateTime);
    writer.writeCollectionOfObjectValues<IntelligenceProfileIndicator>("indicators", intelligenceProfile.indicators, serializeIntelligenceProfileIndicator);
    writer.writeEnumValue<IntelligenceProfileKind>("kind", intelligenceProfile.kind);
    writer.writeObjectValue<FormattedContent>("summary", intelligenceProfile.summary, serializeFormattedContent);
    writer.writeCollectionOfPrimitiveValues<string>("targets", intelligenceProfile.targets);
    writer.writeStringValue("title", intelligenceProfile.title);
    writer.writeObjectValue<FormattedContent>("tradecraft", intelligenceProfile.tradecraft, serializeFormattedContent);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeIntelligenceProfileCollectionResponse(writer: SerializationWriter, intelligenceProfileCollectionResponse: IntelligenceProfileCollectionResponse | undefined = {} as IntelligenceProfileCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, intelligenceProfileCollectionResponse)
    writer.writeCollectionOfObjectValues<IntelligenceProfile>("value", intelligenceProfileCollectionResponse.value, serializeIntelligenceProfile);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeIntelligenceProfileCountryOrRegionOfOrigin(writer: SerializationWriter, intelligenceProfileCountryOrRegionOfOrigin: IntelligenceProfileCountryOrRegionOfOrigin | undefined = {} as IntelligenceProfileCountryOrRegionOfOrigin) : void {
    writer.writeStringValue("code", intelligenceProfileCountryOrRegionOfOrigin.code);
    writer.writeStringValue("label", intelligenceProfileCountryOrRegionOfOrigin.label);
    writer.writeStringValue("@odata.type", intelligenceProfileCountryOrRegionOfOrigin.odataType);
    writer.writeAdditionalData(intelligenceProfileCountryOrRegionOfOrigin.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeIntelligenceProfileIndicator(writer: SerializationWriter, intelligenceProfileIndicator: IntelligenceProfileIndicator | undefined = {} as IntelligenceProfileIndicator) : void {
    serializeIndicator(writer, intelligenceProfileIndicator)
    writer.writeDateValue("firstSeenDateTime", intelligenceProfileIndicator.firstSeenDateTime);
    writer.writeDateValue("lastSeenDateTime", intelligenceProfileIndicator.lastSeenDateTime);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeIntelligenceProfileIndicatorCollectionResponse(writer: SerializationWriter, intelligenceProfileIndicatorCollectionResponse: IntelligenceProfileIndicatorCollectionResponse | undefined = {} as IntelligenceProfileIndicatorCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, intelligenceProfileIndicatorCollectionResponse)
    writer.writeCollectionOfObjectValues<IntelligenceProfileIndicator>("value", intelligenceProfileIndicatorCollectionResponse.value, serializeIntelligenceProfileIndicator);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeIoTDeviceEvidence(writer: SerializationWriter, ioTDeviceEvidence: IoTDeviceEvidence | undefined = {} as IoTDeviceEvidence) : void {
    serializeAlertEvidence(writer, ioTDeviceEvidence)
    writer.writeStringValue("deviceId", ioTDeviceEvidence.deviceId);
    writer.writeStringValue("deviceName", ioTDeviceEvidence.deviceName);
    writer.writeStringValue("devicePageLink", ioTDeviceEvidence.devicePageLink);
    writer.writeStringValue("deviceSubType", ioTDeviceEvidence.deviceSubType);
    writer.writeStringValue("deviceType", ioTDeviceEvidence.deviceType);
    writer.writeEnumValue<IoTDeviceImportanceType>("importance", ioTDeviceEvidence.importance);
    writer.writeObjectValue<AzureResourceEvidence>("ioTHub", ioTDeviceEvidence.ioTHub, serializeAzureResourceEvidence);
    writer.writeStringValue("ioTSecurityAgentId", ioTDeviceEvidence.ioTSecurityAgentId);
    writer.writeObjectValue<IpEvidence>("ipAddress", ioTDeviceEvidence.ipAddress, serializeIpEvidence);
    writer.writeBooleanValue("isAuthorized", ioTDeviceEvidence.isAuthorized);
    writer.writeBooleanValue("isProgramming", ioTDeviceEvidence.isProgramming);
    writer.writeBooleanValue("isScanner", ioTDeviceEvidence.isScanner);
    writer.writeStringValue("macAddress", ioTDeviceEvidence.macAddress);
    writer.writeStringValue("manufacturer", ioTDeviceEvidence.manufacturer);
    writer.writeStringValue("model", ioTDeviceEvidence.model);
    writer.writeObjectValue<NicEvidence>("nics", ioTDeviceEvidence.nics, serializeNicEvidence);
    writer.writeStringValue("operatingSystem", ioTDeviceEvidence.operatingSystem);
    writer.writeCollectionOfPrimitiveValues<string>("owners", ioTDeviceEvidence.owners);
    writer.writeCollectionOfPrimitiveValues<string>("protocols", ioTDeviceEvidence.protocols);
    writer.writeStringValue("purdueLayer", ioTDeviceEvidence.purdueLayer);
    writer.writeStringValue("sensor", ioTDeviceEvidence.sensor);
    writer.writeStringValue("serialNumber", ioTDeviceEvidence.serialNumber);
    writer.writeStringValue("site", ioTDeviceEvidence.site);
    writer.writeStringValue("source", ioTDeviceEvidence.source);
    writer.writeObjectValue<UrlEvidence>("sourceRef", ioTDeviceEvidence.sourceRef, serializeUrlEvidence);
    writer.writeStringValue("zone", ioTDeviceEvidence.zone);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeIpAddress(writer: SerializationWriter, ipAddress: IpAddress | undefined = {} as IpAddress) : void {
    serializeHost(writer, ipAddress)
    writer.writeObjectValue<AutonomousSystem>("autonomousSystem", ipAddress.autonomousSystem, serializeAutonomousSystem);
    writer.writeStringValue("countryOrRegion", ipAddress.countryOrRegion);
    writer.writeStringValue("hostingProvider", ipAddress.hostingProvider);
    writer.writeStringValue("netblock", ipAddress.netblock);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeIpEvidence(writer: SerializationWriter, ipEvidence: IpEvidence | undefined = {} as IpEvidence) : void {
    serializeAlertEvidence(writer, ipEvidence)
    writer.writeStringValue("countryLetterCode", ipEvidence.countryLetterCode);
    writer.writeStringValue("ipAddress", ipEvidence.ipAddress);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeIsolateDeviceResponseAction(writer: SerializationWriter, isolateDeviceResponseAction: IsolateDeviceResponseAction | undefined = {} as IsolateDeviceResponseAction) : void {
    serializeResponseAction(writer, isolateDeviceResponseAction)
    writer.writeEnumValue<DeviceIdEntityIdentifier[]>("identifier", isolateDeviceResponseAction.identifier);
    writer.writeEnumValue<IsolationType>("isolationType", isolateDeviceResponseAction.isolationType);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeJustifyAction(writer: SerializationWriter, justifyAction: JustifyAction | undefined = {} as JustifyAction) : void {
    serializeInformationProtectionAction(writer, justifyAction)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeKeyValuePair(writer: SerializationWriter, keyValuePair: KeyValuePair | undefined = {} as KeyValuePair) : void {
    writer.writeStringValue("name", keyValuePair.name);
    writer.writeStringValue("@odata.type", keyValuePair.odataType);
    writer.writeStringValue("value", keyValuePair.value);
    writer.writeAdditionalData(keyValuePair.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeKubernetesClusterEvidence(writer: SerializationWriter, kubernetesClusterEvidence: KubernetesClusterEvidence | undefined = {} as KubernetesClusterEvidence) : void {
    serializeAlertEvidence(writer, kubernetesClusterEvidence)
    writer.writeObjectValue<AlertEvidence>("cloudResource", kubernetesClusterEvidence.cloudResource, serializeAlertEvidence);
    writer.writeStringValue("distribution", kubernetesClusterEvidence.distribution);
    writer.writeStringValue("name", kubernetesClusterEvidence.name);
    writer.writeEnumValue<KubernetesPlatform>("platform", kubernetesClusterEvidence.platform);
    writer.writeStringValue("version", kubernetesClusterEvidence.version);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeKubernetesControllerEvidence(writer: SerializationWriter, kubernetesControllerEvidence: KubernetesControllerEvidence | undefined = {} as KubernetesControllerEvidence) : void {
    serializeAlertEvidence(writer, kubernetesControllerEvidence)
    writer.writeObjectValue<Dictionary>("labels", kubernetesControllerEvidence.labels, serializeDictionary);
    writer.writeStringValue("name", kubernetesControllerEvidence.name);
    writer.writeObjectValue<KubernetesNamespaceEvidence>("namespace", kubernetesControllerEvidence.namespace, serializeKubernetesNamespaceEvidence);
    writer.writeStringValue("type", kubernetesControllerEvidence.type);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeKubernetesNamespaceEvidence(writer: SerializationWriter, kubernetesNamespaceEvidence: KubernetesNamespaceEvidence | undefined = {} as KubernetesNamespaceEvidence) : void {
    serializeAlertEvidence(writer, kubernetesNamespaceEvidence)
    writer.writeObjectValue<KubernetesClusterEvidence>("cluster", kubernetesNamespaceEvidence.cluster, serializeKubernetesClusterEvidence);
    writer.writeObjectValue<Dictionary>("labels", kubernetesNamespaceEvidence.labels, serializeDictionary);
    writer.writeStringValue("name", kubernetesNamespaceEvidence.name);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeKubernetesPodEvidence(writer: SerializationWriter, kubernetesPodEvidence: KubernetesPodEvidence | undefined = {} as KubernetesPodEvidence) : void {
    serializeAlertEvidence(writer, kubernetesPodEvidence)
    writer.writeCollectionOfObjectValues<ContainerEvidence>("containers", kubernetesPodEvidence.containers, serializeContainerEvidence);
    writer.writeObjectValue<KubernetesControllerEvidence>("controller", kubernetesPodEvidence.controller, serializeKubernetesControllerEvidence);
    writer.writeCollectionOfObjectValues<ContainerEvidence>("ephemeralContainers", kubernetesPodEvidence.ephemeralContainers, serializeContainerEvidence);
    writer.writeCollectionOfObjectValues<ContainerEvidence>("initContainers", kubernetesPodEvidence.initContainers, serializeContainerEvidence);
    writer.writeObjectValue<Dictionary>("labels", kubernetesPodEvidence.labels, serializeDictionary);
    writer.writeStringValue("name", kubernetesPodEvidence.name);
    writer.writeObjectValue<KubernetesNamespaceEvidence>("namespace", kubernetesPodEvidence.namespace, serializeKubernetesNamespaceEvidence);
    writer.writeObjectValue<IpEvidence>("podIp", kubernetesPodEvidence.podIp, serializeIpEvidence);
    writer.writeObjectValue<KubernetesServiceAccountEvidence>("serviceAccount", kubernetesPodEvidence.serviceAccount, serializeKubernetesServiceAccountEvidence);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeKubernetesSecretEvidence(writer: SerializationWriter, kubernetesSecretEvidence: KubernetesSecretEvidence | undefined = {} as KubernetesSecretEvidence) : void {
    serializeAlertEvidence(writer, kubernetesSecretEvidence)
    writer.writeStringValue("name", kubernetesSecretEvidence.name);
    writer.writeObjectValue<KubernetesNamespaceEvidence>("namespace", kubernetesSecretEvidence.namespace, serializeKubernetesNamespaceEvidence);
    writer.writeStringValue("secretType", kubernetesSecretEvidence.secretType);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeKubernetesServiceAccountEvidence(writer: SerializationWriter, kubernetesServiceAccountEvidence: KubernetesServiceAccountEvidence | undefined = {} as KubernetesServiceAccountEvidence) : void {
    serializeAlertEvidence(writer, kubernetesServiceAccountEvidence)
    writer.writeStringValue("name", kubernetesServiceAccountEvidence.name);
    writer.writeObjectValue<KubernetesNamespaceEvidence>("namespace", kubernetesServiceAccountEvidence.namespace, serializeKubernetesNamespaceEvidence);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeKubernetesServiceEvidence(writer: SerializationWriter, kubernetesServiceEvidence: KubernetesServiceEvidence | undefined = {} as KubernetesServiceEvidence) : void {
    serializeAlertEvidence(writer, kubernetesServiceEvidence)
    writer.writeObjectValue<IpEvidence>("clusterIP", kubernetesServiceEvidence.clusterIP, serializeIpEvidence);
    writer.writeCollectionOfObjectValues<IpEvidence>("externalIPs", kubernetesServiceEvidence.externalIPs, serializeIpEvidence);
    writer.writeObjectValue<Dictionary>("labels", kubernetesServiceEvidence.labels, serializeDictionary);
    writer.writeStringValue("name", kubernetesServiceEvidence.name);
    writer.writeObjectValue<KubernetesNamespaceEvidence>("namespace", kubernetesServiceEvidence.namespace, serializeKubernetesNamespaceEvidence);
    writer.writeObjectValue<Dictionary>("selector", kubernetesServiceEvidence.selector, serializeDictionary);
    writer.writeCollectionOfObjectValues<KubernetesServicePort>("servicePorts", kubernetesServiceEvidence.servicePorts, serializeKubernetesServicePort);
    writer.writeEnumValue<KubernetesServiceType>("serviceType", kubernetesServiceEvidence.serviceType);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeKubernetesServicePort(writer: SerializationWriter, kubernetesServicePort: KubernetesServicePort | undefined = {} as KubernetesServicePort) : void {
    writer.writeStringValue("appProtocol", kubernetesServicePort.appProtocol);
    writer.writeStringValue("name", kubernetesServicePort.name);
    writer.writeNumberValue("nodePort", kubernetesServicePort.nodePort);
    writer.writeStringValue("@odata.type", kubernetesServicePort.odataType);
    writer.writeNumberValue("port", kubernetesServicePort.port);
    writer.writeEnumValue<ContainerPortProtocol>("protocol", kubernetesServicePort.protocol);
    writer.writeStringValue("targetPort", kubernetesServicePort.targetPort);
    writer.writeAdditionalData(kubernetesServicePort.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeLabelingOptions(writer: SerializationWriter, labelingOptions: LabelingOptions | undefined = {} as LabelingOptions) : void {
    writer.writeEnumValue<AssignmentMethod>("assignmentMethod", labelingOptions.assignmentMethod);
    writer.writeObjectValue<DowngradeJustification>("downgradeJustification", labelingOptions.downgradeJustification, serializeDowngradeJustification);
    writer.writeCollectionOfObjectValues<KeyValuePair>("extendedProperties", labelingOptions.extendedProperties, serializeKeyValuePair);
    writer.writeStringValue("labelId", labelingOptions.labelId);
    writer.writeStringValue("@odata.type", labelingOptions.odataType);
    writer.writeAdditionalData(labelingOptions.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeLabelsRoot(writer: SerializationWriter, labelsRoot: LabelsRoot | undefined = {} as LabelsRoot) : void {
    serializeEntity(writer, labelsRoot)
    writer.writeCollectionOfObjectValues<AuthorityTemplate>("authorities", labelsRoot.authorities, serializeAuthorityTemplate);
    writer.writeCollectionOfObjectValues<CategoryTemplate>("categories", labelsRoot.categories, serializeCategoryTemplate);
    writer.writeCollectionOfObjectValues<CitationTemplate>("citations", labelsRoot.citations, serializeCitationTemplate);
    writer.writeCollectionOfObjectValues<DepartmentTemplate>("departments", labelsRoot.departments, serializeDepartmentTemplate);
    writer.writeCollectionOfObjectValues<FilePlanReferenceTemplate>("filePlanReferences", labelsRoot.filePlanReferences, serializeFilePlanReferenceTemplate);
    writer.writeCollectionOfObjectValues<RetentionLabel>("retentionLabels", labelsRoot.retentionLabels, serializeRetentionLabel);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeLoggedOnUser(writer: SerializationWriter, loggedOnUser: LoggedOnUser | undefined = {} as LoggedOnUser) : void {
    writer.writeStringValue("accountName", loggedOnUser.accountName);
    writer.writeStringValue("domainName", loggedOnUser.domainName);
    writer.writeStringValue("@odata.type", loggedOnUser.odataType);
    writer.writeAdditionalData(loggedOnUser.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeMailboxEvidence(writer: SerializationWriter, mailboxEvidence: MailboxEvidence | undefined = {} as MailboxEvidence) : void {
    serializeAlertEvidence(writer, mailboxEvidence)
    writer.writeStringValue("displayName", mailboxEvidence.displayName);
    writer.writeStringValue("primaryAddress", mailboxEvidence.primaryAddress);
    writer.writeObjectValue<UserAccount>("userAccount", mailboxEvidence.userAccount, serializeUserAccount);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeMailClusterEvidence(writer: SerializationWriter, mailClusterEvidence: MailClusterEvidence | undefined = {} as MailClusterEvidence) : void {
    serializeAlertEvidence(writer, mailClusterEvidence)
    writer.writeStringValue("clusterBy", mailClusterEvidence.clusterBy);
    writer.writeStringValue("clusterByValue", mailClusterEvidence.clusterByValue);
    writer.writeNumberValue("emailCount", mailClusterEvidence.emailCount);
    writer.writeCollectionOfPrimitiveValues<string>("networkMessageIds", mailClusterEvidence.networkMessageIds);
    writer.writeStringValue("query", mailClusterEvidence.query);
    writer.writeStringValue("urn", mailClusterEvidence.urn);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeMalwareEvidence(writer: SerializationWriter, malwareEvidence: MalwareEvidence | undefined = {} as MalwareEvidence) : void {
    serializeAlertEvidence(writer, malwareEvidence)
    writer.writeStringValue("category", malwareEvidence.category);
    writer.writeCollectionOfObjectValues<FileEvidence>("files", malwareEvidence.files, serializeFileEvidence);
    writer.writeStringValue("name", malwareEvidence.name);
    writer.writeCollectionOfObjectValues<ProcessEvidence>("processes", malwareEvidence.processes, serializeProcessEvidence);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeMarkUserAsCompromisedResponseAction(writer: SerializationWriter, markUserAsCompromisedResponseAction: MarkUserAsCompromisedResponseAction | undefined = {} as MarkUserAsCompromisedResponseAction) : void {
    serializeResponseAction(writer, markUserAsCompromisedResponseAction)
    writer.writeEnumValue<MarkUserAsCompromisedEntityIdentifier[]>("identifier", markUserAsCompromisedResponseAction.identifier);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeMetadataAction(writer: SerializationWriter, metadataAction: MetadataAction | undefined = {} as MetadataAction) : void {
    serializeInformationProtectionAction(writer, metadataAction)
    writer.writeCollectionOfObjectValues<KeyValuePair>("metadataToAdd", metadataAction.metadataToAdd, serializeKeyValuePair);
    writer.writeCollectionOfPrimitiveValues<string>("metadataToRemove", metadataAction.metadataToRemove);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeMoveToDeletedItemsResponseAction(writer: SerializationWriter, moveToDeletedItemsResponseAction: MoveToDeletedItemsResponseAction | undefined = {} as MoveToDeletedItemsResponseAction) : void {
    serializeResponseAction(writer, moveToDeletedItemsResponseAction)
    writer.writeEnumValue<EmailEntityIdentifier[]>("identifier", moveToDeletedItemsResponseAction.identifier);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeMoveToInboxResponseAction(writer: SerializationWriter, moveToInboxResponseAction: MoveToInboxResponseAction | undefined = {} as MoveToInboxResponseAction) : void {
    serializeResponseAction(writer, moveToInboxResponseAction)
    writer.writeEnumValue<EmailEntityIdentifier[]>("identifier", moveToInboxResponseAction.identifier);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeMoveToJunkResponseAction(writer: SerializationWriter, moveToJunkResponseAction: MoveToJunkResponseAction | undefined = {} as MoveToJunkResponseAction) : void {
    serializeResponseAction(writer, moveToJunkResponseAction)
    writer.writeEnumValue<EmailEntityIdentifier[]>("identifier", moveToJunkResponseAction.identifier);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeNetworkConnectionEvidence(writer: SerializationWriter, networkConnectionEvidence: NetworkConnectionEvidence | undefined = {} as NetworkConnectionEvidence) : void {
    serializeAlertEvidence(writer, networkConnectionEvidence)
    writer.writeObjectValue<IpEvidence>("destinationAddress", networkConnectionEvidence.destinationAddress, serializeIpEvidence);
    writer.writeNumberValue("destinationPort", networkConnectionEvidence.destinationPort);
    writer.writeEnumValue<ProtocolType>("protocol", networkConnectionEvidence.protocol);
    writer.writeObjectValue<IpEvidence>("sourceAddress", networkConnectionEvidence.sourceAddress, serializeIpEvidence);
    writer.writeNumberValue("sourcePort", networkConnectionEvidence.sourcePort);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeNicEvidence(writer: SerializationWriter, nicEvidence: NicEvidence | undefined = {} as NicEvidence) : void {
    serializeAlertEvidence(writer, nicEvidence)
    writer.writeObjectValue<IpEvidence>("ipAddress", nicEvidence.ipAddress, serializeIpEvidence);
    writer.writeStringValue("macAddress", nicEvidence.macAddress);
    writer.writeCollectionOfPrimitiveValues<string>("vlans", nicEvidence.vlans);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeOauthApplicationEvidence(writer: SerializationWriter, oauthApplicationEvidence: OauthApplicationEvidence | undefined = {} as OauthApplicationEvidence) : void {
    serializeAlertEvidence(writer, oauthApplicationEvidence)
    writer.writeStringValue("appId", oauthApplicationEvidence.appId);
    writer.writeStringValue("displayName", oauthApplicationEvidence.displayName);
    writer.writeStringValue("objectId", oauthApplicationEvidence.objectId);
    writer.writeStringValue("publisher", oauthApplicationEvidence.publisher);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeOcrSettings(writer: SerializationWriter, ocrSettings: OcrSettings | undefined = {} as OcrSettings) : void {
    writer.writeBooleanValue("isEnabled", ocrSettings.isEnabled);
    writer.writeNumberValue("maxImageSize", ocrSettings.maxImageSize);
    writer.writeStringValue("@odata.type", ocrSettings.odataType);
    writer.writeDurationValue("timeout", ocrSettings.timeout);
    writer.writeAdditionalData(ocrSettings.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeOrganizationalScope(writer: SerializationWriter, organizationalScope: OrganizationalScope | undefined = {} as OrganizationalScope) : void {
    writer.writeStringValue("@odata.type", organizationalScope.odataType);
    writer.writeCollectionOfPrimitiveValues<string>("scopeNames", organizationalScope.scopeNames);
    writer.writeEnumValue<ScopeType>("scopeType", organizationalScope.scopeType);
    writer.writeAdditionalData(organizationalScope.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializePassiveDnsRecord(writer: SerializationWriter, passiveDnsRecord: PassiveDnsRecord | undefined = {} as PassiveDnsRecord) : void {
    serializeArtifact(writer, passiveDnsRecord)
    writer.writeObjectValue<Artifact>("artifact", passiveDnsRecord.artifact, serializeArtifact);
    writer.writeDateValue("collectedDateTime", passiveDnsRecord.collectedDateTime);
    writer.writeDateValue("firstSeenDateTime", passiveDnsRecord.firstSeenDateTime);
    writer.writeDateValue("lastSeenDateTime", passiveDnsRecord.lastSeenDateTime);
    writer.writeObjectValue<Host>("parentHost", passiveDnsRecord.parentHost, serializeHost);
    writer.writeStringValue("recordType", passiveDnsRecord.recordType);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializePassiveDnsRecordCollectionResponse(writer: SerializationWriter, passiveDnsRecordCollectionResponse: PassiveDnsRecordCollectionResponse | undefined = {} as PassiveDnsRecordCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, passiveDnsRecordCollectionResponse)
    writer.writeCollectionOfObjectValues<PassiveDnsRecord>("value", passiveDnsRecordCollectionResponse.value, serializePassiveDnsRecord);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializePolicyBase(writer: SerializationWriter, policyBase: PolicyBase | undefined = {} as PolicyBase) : void {
    serializeEntity(writer, policyBase)
    writer.writeObjectValue<IdentitySet>("createdBy", policyBase.createdBy, serializeIdentitySet);
    writer.writeDateValue("createdDateTime", policyBase.createdDateTime);
    writer.writeStringValue("description", policyBase.description);
    writer.writeStringValue("displayName", policyBase.displayName);
    writer.writeObjectValue<IdentitySet>("lastModifiedBy", policyBase.lastModifiedBy, serializeIdentitySet);
    writer.writeDateValue("lastModifiedDateTime", policyBase.lastModifiedDateTime);
    writer.writeEnumValue<PolicyStatus>("status", policyBase.status);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeProcessEvidence(writer: SerializationWriter, processEvidence: ProcessEvidence | undefined = {} as ProcessEvidence) : void {
    serializeAlertEvidence(writer, processEvidence)
    writer.writeEnumValue<DetectionStatus>("detectionStatus", processEvidence.detectionStatus);
    writer.writeObjectValue<FileDetails>("imageFile", processEvidence.imageFile, serializeFileDetails);
    writer.writeStringValue("mdeDeviceId", processEvidence.mdeDeviceId);
    writer.writeDateValue("parentProcessCreationDateTime", processEvidence.parentProcessCreationDateTime);
    writer.writeNumberValue("parentProcessId", processEvidence.parentProcessId);
    writer.writeObjectValue<FileDetails>("parentProcessImageFile", processEvidence.parentProcessImageFile, serializeFileDetails);
    writer.writeStringValue("processCommandLine", processEvidence.processCommandLine);
    writer.writeDateValue("processCreationDateTime", processEvidence.processCreationDateTime);
    writer.writeNumberValue("processId", processEvidence.processId);
    writer.writeObjectValue<UserAccount>("userAccount", processEvidence.userAccount, serializeUserAccount);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeProtectAdhocAction(writer: SerializationWriter, protectAdhocAction: ProtectAdhocAction | undefined = {} as ProtectAdhocAction) : void {
    serializeInformationProtectionAction(writer, protectAdhocAction)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeProtectByTemplateAction(writer: SerializationWriter, protectByTemplateAction: ProtectByTemplateAction | undefined = {} as ProtectByTemplateAction) : void {
    serializeInformationProtectionAction(writer, protectByTemplateAction)
    writer.writeStringValue("templateId", protectByTemplateAction.templateId);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeProtectDoNotForwardAction(writer: SerializationWriter, protectDoNotForwardAction: ProtectDoNotForwardAction | undefined = {} as ProtectDoNotForwardAction) : void {
    serializeInformationProtectionAction(writer, protectDoNotForwardAction)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeProtectionRule(writer: SerializationWriter, protectionRule: ProtectionRule | undefined = {} as ProtectionRule) : void {
    serializeEntity(writer, protectionRule)
    writer.writeStringValue("createdBy", protectionRule.createdBy);
    writer.writeDateValue("createdDateTime", protectionRule.createdDateTime);
    writer.writeStringValue("displayName", protectionRule.displayName);
    writer.writeBooleanValue("isEnabled", protectionRule.isEnabled);
    writer.writeStringValue("lastModifiedBy", protectionRule.lastModifiedBy);
    writer.writeDateValue("lastModifiedDateTime", protectionRule.lastModifiedDateTime);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeQueryCondition(writer: SerializationWriter, queryCondition: QueryCondition | undefined = {} as QueryCondition) : void {
    writer.writeDateValue("lastModifiedDateTime", queryCondition.lastModifiedDateTime);
    writer.writeStringValue("@odata.type", queryCondition.odataType);
    writer.writeStringValue("queryText", queryCondition.queryText);
    writer.writeAdditionalData(queryCondition.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRecommendedHuntingQuery(writer: SerializationWriter, recommendedHuntingQuery: RecommendedHuntingQuery | undefined = {} as RecommendedHuntingQuery) : void {
    writer.writeStringValue("kqlText", recommendedHuntingQuery.kqlText);
    writer.writeStringValue("@odata.type", recommendedHuntingQuery.odataType);
    writer.writeAdditionalData(recommendedHuntingQuery.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRecommendLabelAction(writer: SerializationWriter, recommendLabelAction: RecommendLabelAction | undefined = {} as RecommendLabelAction) : void {
    serializeInformationProtectionAction(writer, recommendLabelAction)
    writer.writeCollectionOfObjectValues<InformationProtectionAction>("actions", recommendLabelAction.actions, serializeInformationProtectionAction);
    writer.writeEnumValue<ActionSource>("actionSource", recommendLabelAction.actionSource);
    writer.writeCollectionOfPrimitiveValues<string>("responsibleSensitiveTypeIds", recommendLabelAction.responsibleSensitiveTypeIds);
    writer.writeStringValue("sensitivityLabelId", recommendLabelAction.sensitivityLabelId);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRedundancyDetectionSettings(writer: SerializationWriter, redundancyDetectionSettings: RedundancyDetectionSettings | undefined = {} as RedundancyDetectionSettings) : void {
    writer.writeBooleanValue("isEnabled", redundancyDetectionSettings.isEnabled);
    writer.writeNumberValue("maxWords", redundancyDetectionSettings.maxWords);
    writer.writeNumberValue("minWords", redundancyDetectionSettings.minWords);
    writer.writeStringValue("@odata.type", redundancyDetectionSettings.odataType);
    writer.writeNumberValue("similarityThreshold", redundancyDetectionSettings.similarityThreshold);
    writer.writeAdditionalData(redundancyDetectionSettings.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRegistryKeyEvidence(writer: SerializationWriter, registryKeyEvidence: RegistryKeyEvidence | undefined = {} as RegistryKeyEvidence) : void {
    serializeAlertEvidence(writer, registryKeyEvidence)
    writer.writeStringValue("registryHive", registryKeyEvidence.registryHive);
    writer.writeStringValue("registryKey", registryKeyEvidence.registryKey);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRegistryValueEvidence(writer: SerializationWriter, registryValueEvidence: RegistryValueEvidence | undefined = {} as RegistryValueEvidence) : void {
    serializeAlertEvidence(writer, registryValueEvidence)
    writer.writeStringValue("mdeDeviceId", registryValueEvidence.mdeDeviceId);
    writer.writeStringValue("registryHive", registryValueEvidence.registryHive);
    writer.writeStringValue("registryKey", registryValueEvidence.registryKey);
    writer.writeStringValue("registryValue", registryValueEvidence.registryValue);
    writer.writeStringValue("registryValueName", registryValueEvidence.registryValueName);
    writer.writeStringValue("registryValueType", registryValueEvidence.registryValueType);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRemoveContentFooterAction(writer: SerializationWriter, removeContentFooterAction: RemoveContentFooterAction | undefined = {} as RemoveContentFooterAction) : void {
    serializeInformationProtectionAction(writer, removeContentFooterAction)
    writer.writeCollectionOfPrimitiveValues<string>("uiElementNames", removeContentFooterAction.uiElementNames);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRemoveContentHeaderAction(writer: SerializationWriter, removeContentHeaderAction: RemoveContentHeaderAction | undefined = {} as RemoveContentHeaderAction) : void {
    serializeInformationProtectionAction(writer, removeContentHeaderAction)
    writer.writeCollectionOfPrimitiveValues<string>("uiElementNames", removeContentHeaderAction.uiElementNames);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRemoveProtectionAction(writer: SerializationWriter, removeProtectionAction: RemoveProtectionAction | undefined = {} as RemoveProtectionAction) : void {
    serializeInformationProtectionAction(writer, removeProtectionAction)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRemoveWatermarkAction(writer: SerializationWriter, removeWatermarkAction: RemoveWatermarkAction | undefined = {} as RemoveWatermarkAction) : void {
    serializeInformationProtectionAction(writer, removeWatermarkAction)
    writer.writeCollectionOfPrimitiveValues<string>("uiElementNames", removeWatermarkAction.uiElementNames);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeResponseAction(writer: SerializationWriter, responseAction: ResponseAction | undefined = {} as ResponseAction) : void {
    writer.writeStringValue("@odata.type", responseAction.odataType);
    writer.writeAdditionalData(responseAction.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRestrictAppExecutionResponseAction(writer: SerializationWriter, restrictAppExecutionResponseAction: RestrictAppExecutionResponseAction | undefined = {} as RestrictAppExecutionResponseAction) : void {
    serializeResponseAction(writer, restrictAppExecutionResponseAction)
    writer.writeEnumValue<DeviceIdEntityIdentifier[]>("identifier", restrictAppExecutionResponseAction.identifier);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRetentionDuration(writer: SerializationWriter, retentionDuration: RetentionDuration | undefined = {} as RetentionDuration) : void {
    writer.writeStringValue("@odata.type", retentionDuration.odataType);
    writer.writeAdditionalData(retentionDuration.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRetentionDurationForever(writer: SerializationWriter, retentionDurationForever: RetentionDurationForever | undefined = {} as RetentionDurationForever) : void {
    serializeRetentionDuration(writer, retentionDurationForever)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRetentionDurationInDays(writer: SerializationWriter, retentionDurationInDays: RetentionDurationInDays | undefined = {} as RetentionDurationInDays) : void {
    serializeRetentionDuration(writer, retentionDurationInDays)
    writer.writeNumberValue("days", retentionDurationInDays.days);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRetentionEvent(writer: SerializationWriter, retentionEvent: RetentionEvent | undefined = {} as RetentionEvent) : void {
    serializeEntity(writer, retentionEvent)
    writer.writeObjectValue<IdentitySet>("createdBy", retentionEvent.createdBy, serializeIdentitySet);
    writer.writeDateValue("createdDateTime", retentionEvent.createdDateTime);
    writer.writeStringValue("description", retentionEvent.description);
    writer.writeStringValue("displayName", retentionEvent.displayName);
    writer.writeCollectionOfObjectValues<EventPropagationResult>("eventPropagationResults", retentionEvent.eventPropagationResults, serializeEventPropagationResult);
    writer.writeCollectionOfObjectValues<EventQuery>("eventQueries", retentionEvent.eventQueries, serializeEventQuery);
    writer.writeObjectValue<RetentionEventStatus>("eventStatus", retentionEvent.eventStatus, serializeRetentionEventStatus);
    writer.writeDateValue("eventTriggerDateTime", retentionEvent.eventTriggerDateTime);
    writer.writeObjectValue<IdentitySet>("lastModifiedBy", retentionEvent.lastModifiedBy, serializeIdentitySet);
    writer.writeDateValue("lastModifiedDateTime", retentionEvent.lastModifiedDateTime);
    writer.writeDateValue("lastStatusUpdateDateTime", retentionEvent.lastStatusUpdateDateTime);
    writer.writeObjectValue<RetentionEventType>("retentionEventType", retentionEvent.retentionEventType, serializeRetentionEventType);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRetentionEventCollectionResponse(writer: SerializationWriter, retentionEventCollectionResponse: RetentionEventCollectionResponse | undefined = {} as RetentionEventCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, retentionEventCollectionResponse)
    writer.writeCollectionOfObjectValues<RetentionEvent>("value", retentionEventCollectionResponse.value, serializeRetentionEvent);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRetentionEventStatus(writer: SerializationWriter, retentionEventStatus: RetentionEventStatus | undefined = {} as RetentionEventStatus) : void {
    writer.writeObjectValue<PublicError>("error", retentionEventStatus.errorEscaped, serializePublicError);
    writer.writeStringValue("@odata.type", retentionEventStatus.odataType);
    writer.writeEnumValue<EventStatusType>("status", retentionEventStatus.status);
    writer.writeAdditionalData(retentionEventStatus.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRetentionEventType(writer: SerializationWriter, retentionEventType: RetentionEventType | undefined = {} as RetentionEventType) : void {
    serializeEntity(writer, retentionEventType)
    writer.writeObjectValue<IdentitySet>("createdBy", retentionEventType.createdBy, serializeIdentitySet);
    writer.writeDateValue("createdDateTime", retentionEventType.createdDateTime);
    writer.writeStringValue("description", retentionEventType.description);
    writer.writeStringValue("displayName", retentionEventType.displayName);
    writer.writeObjectValue<IdentitySet>("lastModifiedBy", retentionEventType.lastModifiedBy, serializeIdentitySet);
    writer.writeDateValue("lastModifiedDateTime", retentionEventType.lastModifiedDateTime);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRetentionEventTypeCollectionResponse(writer: SerializationWriter, retentionEventTypeCollectionResponse: RetentionEventTypeCollectionResponse | undefined = {} as RetentionEventTypeCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, retentionEventTypeCollectionResponse)
    writer.writeCollectionOfObjectValues<RetentionEventType>("value", retentionEventTypeCollectionResponse.value, serializeRetentionEventType);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRetentionLabel(writer: SerializationWriter, retentionLabel: RetentionLabel | undefined = {} as RetentionLabel) : void {
    serializeEntity(writer, retentionLabel)
    writer.writeEnumValue<ActionAfterRetentionPeriod>("actionAfterRetentionPeriod", retentionLabel.actionAfterRetentionPeriod);
    writer.writeEnumValue<BehaviorDuringRetentionPeriod>("behaviorDuringRetentionPeriod", retentionLabel.behaviorDuringRetentionPeriod);
    writer.writeObjectValue<IdentitySet>("createdBy", retentionLabel.createdBy, serializeIdentitySet);
    writer.writeDateValue("createdDateTime", retentionLabel.createdDateTime);
    writer.writeEnumValue<DefaultRecordBehavior>("defaultRecordBehavior", retentionLabel.defaultRecordBehavior);
    writer.writeStringValue("descriptionForAdmins", retentionLabel.descriptionForAdmins);
    writer.writeStringValue("descriptionForUsers", retentionLabel.descriptionForUsers);
    writer.writeObjectValue<FilePlanDescriptor>("descriptors", retentionLabel.descriptors, serializeFilePlanDescriptor);
    writer.writeStringValue("displayName", retentionLabel.displayName);
    writer.writeCollectionOfObjectValues<DispositionReviewStage>("dispositionReviewStages", retentionLabel.dispositionReviewStages, serializeDispositionReviewStage);
    writer.writeBooleanValue("isInUse", retentionLabel.isInUse);
    writer.writeStringValue("labelToBeApplied", retentionLabel.labelToBeApplied);
    writer.writeObjectValue<IdentitySet>("lastModifiedBy", retentionLabel.lastModifiedBy, serializeIdentitySet);
    writer.writeDateValue("lastModifiedDateTime", retentionLabel.lastModifiedDateTime);
    writer.writeObjectValue<RetentionDuration>("retentionDuration", retentionLabel.retentionDuration, serializeRetentionDuration);
    writer.writeObjectValue<RetentionEventType>("retentionEventType", retentionLabel.retentionEventType, serializeRetentionEventType);
    writer.writeEnumValue<RetentionTrigger>("retentionTrigger", retentionLabel.retentionTrigger);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRetentionLabelCollectionResponse(writer: SerializationWriter, retentionLabelCollectionResponse: RetentionLabelCollectionResponse | undefined = {} as RetentionLabelCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, retentionLabelCollectionResponse)
    writer.writeCollectionOfObjectValues<RetentionLabel>("value", retentionLabelCollectionResponse.value, serializeRetentionLabel);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRuleSchedule(writer: SerializationWriter, ruleSchedule: RuleSchedule | undefined = {} as RuleSchedule) : void {
    writer.writeDateValue("nextRunDateTime", ruleSchedule.nextRunDateTime);
    writer.writeStringValue("@odata.type", ruleSchedule.odataType);
    writer.writeStringValue("period", ruleSchedule.period);
    writer.writeAdditionalData(ruleSchedule.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRunAntivirusScanResponseAction(writer: SerializationWriter, runAntivirusScanResponseAction: RunAntivirusScanResponseAction | undefined = {} as RunAntivirusScanResponseAction) : void {
    serializeResponseAction(writer, runAntivirusScanResponseAction)
    writer.writeEnumValue<DeviceIdEntityIdentifier[]>("identifier", runAntivirusScanResponseAction.identifier);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRunDetails(writer: SerializationWriter, runDetails: RunDetails | undefined = {} as RunDetails) : void {
    writer.writeEnumValue<HuntingRuleErrorCode>("errorCode", runDetails.errorCode);
    writer.writeStringValue("failureReason", runDetails.failureReason);
    writer.writeDateValue("lastRunDateTime", runDetails.lastRunDateTime);
    writer.writeStringValue("@odata.type", runDetails.odataType);
    writer.writeEnumValue<HuntingRuleRunStatus>("status", runDetails.status);
    writer.writeAdditionalData(runDetails.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeSasTokenEvidence(writer: SerializationWriter, sasTokenEvidence: SasTokenEvidence | undefined = {} as SasTokenEvidence) : void {
    serializeAlertEvidence(writer, sasTokenEvidence)
    writer.writeStringValue("allowedIpAddresses", sasTokenEvidence.allowedIpAddresses);
    writer.writeCollectionOfPrimitiveValues<string>("allowedResourceTypes", sasTokenEvidence.allowedResourceTypes);
    writer.writeCollectionOfPrimitiveValues<string>("allowedServices", sasTokenEvidence.allowedServices);
    writer.writeDateValue("expiryDateTime", sasTokenEvidence.expiryDateTime);
    writer.writeCollectionOfPrimitiveValues<string>("permissions", sasTokenEvidence.permissions);
    writer.writeStringValue("protocol", sasTokenEvidence.protocol);
    writer.writeStringValue("signatureHash", sasTokenEvidence.signatureHash);
    writer.writeStringValue("signedWith", sasTokenEvidence.signedWith);
    writer.writeDateValue("startDateTime", sasTokenEvidence.startDateTime);
    writer.writeObjectValue<AzureResourceEvidence>("storageResource", sasTokenEvidence.storageResource, serializeAzureResourceEvidence);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeSearch(writer: SerializationWriter, search: Search | undefined = {} as Search) : void {
    serializeEntity(writer, search)
    writer.writeStringValue("contentQuery", search.contentQuery);
    writer.writeObjectValue<IdentitySet>("createdBy", search.createdBy, serializeIdentitySet);
    writer.writeDateValue("createdDateTime", search.createdDateTime);
    writer.writeStringValue("description", search.description);
    writer.writeStringValue("displayName", search.displayName);
    writer.writeObjectValue<IdentitySet>("lastModifiedBy", search.lastModifiedBy, serializeIdentitySet);
    writer.writeDateValue("lastModifiedDateTime", search.lastModifiedDateTime);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeSecurity(writer: SerializationWriter, security: Security | undefined = {} as Security) : void {
    serializeEntity(writer, security)
    writer.writeObjectValue<InformationProtection>("informationProtection", security.informationProtection, serializeInformationProtection);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeSecurityGroupEvidence(writer: SerializationWriter, securityGroupEvidence: SecurityGroupEvidence | undefined = {} as SecurityGroupEvidence) : void {
    serializeAlertEvidence(writer, securityGroupEvidence)
    writer.writeStringValue("displayName", securityGroupEvidence.displayName);
    writer.writeStringValue("securityGroupId", securityGroupEvidence.securityGroupId);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeSensitivityLabel(writer: SerializationWriter, sensitivityLabel: SensitivityLabel | undefined = {} as SensitivityLabel) : void {
    serializeEntity(writer, sensitivityLabel)
    writer.writeStringValue("color", sensitivityLabel.color);
    writer.writeCollectionOfPrimitiveValues<string>("contentFormats", sensitivityLabel.contentFormats);
    writer.writeStringValue("description", sensitivityLabel.description);
    writer.writeBooleanValue("hasProtection", sensitivityLabel.hasProtection);
    writer.writeBooleanValue("isActive", sensitivityLabel.isActive);
    writer.writeBooleanValue("isAppliable", sensitivityLabel.isAppliable);
    writer.writeStringValue("name", sensitivityLabel.name);
    writer.writeObjectValue<SensitivityLabel>("parent", sensitivityLabel.parent, serializeSensitivityLabel);
    writer.writeNumberValue("sensitivity", sensitivityLabel.sensitivity);
    writer.writeStringValue("tooltip", sensitivityLabel.tooltip);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeSensitivityLabelCollectionResponse(writer: SerializationWriter, sensitivityLabelCollectionResponse: SensitivityLabelCollectionResponse | undefined = {} as SensitivityLabelCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, sensitivityLabelCollectionResponse)
    writer.writeCollectionOfObjectValues<SensitivityLabel>("value", sensitivityLabelCollectionResponse.value, serializeSensitivityLabel);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeServicePrincipalEvidence(writer: SerializationWriter, servicePrincipalEvidence: ServicePrincipalEvidence | undefined = {} as ServicePrincipalEvidence) : void {
    serializeAlertEvidence(writer, servicePrincipalEvidence)
    writer.writeStringValue("appId", servicePrincipalEvidence.appId);
    writer.writeStringValue("appOwnerTenantId", servicePrincipalEvidence.appOwnerTenantId);
    writer.writeStringValue("servicePrincipalName", servicePrincipalEvidence.servicePrincipalName);
    writer.writeStringValue("servicePrincipalObjectId", servicePrincipalEvidence.servicePrincipalObjectId);
    writer.writeEnumValue<ServicePrincipalType>("servicePrincipalType", servicePrincipalEvidence.servicePrincipalType);
    writer.writeStringValue("tenantId", servicePrincipalEvidence.tenantId);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeSinglePropertySchema(writer: SerializationWriter, singlePropertySchema: SinglePropertySchema | undefined = {} as SinglePropertySchema) : void {
    writer.writeStringValue("name", singlePropertySchema.name);
    writer.writeStringValue("@odata.type", singlePropertySchema.odataType);
    writer.writeStringValue("type", singlePropertySchema.type);
    writer.writeAdditionalData(singlePropertySchema.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeSiteSource(writer: SerializationWriter, siteSource: SiteSource | undefined = {} as SiteSource) : void {
    serializeDataSource(writer, siteSource)
    writer.writeObjectValue<Site>("site", siteSource.site, serializeSite);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeSiteSourceCollectionResponse(writer: SerializationWriter, siteSourceCollectionResponse: SiteSourceCollectionResponse | undefined = {} as SiteSourceCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, siteSourceCollectionResponse)
    writer.writeCollectionOfObjectValues<SiteSource>("value", siteSourceCollectionResponse.value, serializeSiteSource);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeSoftDeleteResponseAction(writer: SerializationWriter, softDeleteResponseAction: SoftDeleteResponseAction | undefined = {} as SoftDeleteResponseAction) : void {
    serializeResponseAction(writer, softDeleteResponseAction)
    writer.writeEnumValue<EmailEntityIdentifier[]>("identifier", softDeleteResponseAction.identifier);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeSslCertificate(writer: SerializationWriter, sslCertificate: SslCertificate | undefined = {} as SslCertificate) : void {
    serializeArtifact(writer, sslCertificate)
    writer.writeDateValue("expirationDateTime", sslCertificate.expirationDateTime);
    writer.writeStringValue("fingerprint", sslCertificate.fingerprint);
    writer.writeDateValue("firstSeenDateTime", sslCertificate.firstSeenDateTime);
    writer.writeDateValue("issueDateTime", sslCertificate.issueDateTime);
    writer.writeObjectValue<SslCertificateEntity>("issuer", sslCertificate.issuer, serializeSslCertificateEntity);
    writer.writeDateValue("lastSeenDateTime", sslCertificate.lastSeenDateTime);
    writer.writeCollectionOfObjectValues<Host>("relatedHosts", sslCertificate.relatedHosts, serializeHost);
    writer.writeStringValue("serialNumber", sslCertificate.serialNumber);
    writer.writeStringValue("sha1", sslCertificate.sha1);
    writer.writeObjectValue<SslCertificateEntity>("subject", sslCertificate.subject, serializeSslCertificateEntity);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeSslCertificateCollectionResponse(writer: SerializationWriter, sslCertificateCollectionResponse: SslCertificateCollectionResponse | undefined = {} as SslCertificateCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, sslCertificateCollectionResponse)
    writer.writeCollectionOfObjectValues<SslCertificate>("value", sslCertificateCollectionResponse.value, serializeSslCertificate);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeSslCertificateEntity(writer: SerializationWriter, sslCertificateEntity: SslCertificateEntity | undefined = {} as SslCertificateEntity) : void {
    writer.writeObjectValue<PhysicalAddress>("address", sslCertificateEntity.address, serializePhysicalAddress);
    writer.writeCollectionOfPrimitiveValues<string>("alternateNames", sslCertificateEntity.alternateNames);
    writer.writeStringValue("commonName", sslCertificateEntity.commonName);
    writer.writeStringValue("email", sslCertificateEntity.email);
    writer.writeStringValue("givenName", sslCertificateEntity.givenName);
    writer.writeStringValue("@odata.type", sslCertificateEntity.odataType);
    writer.writeStringValue("organizationName", sslCertificateEntity.organizationName);
    writer.writeStringValue("organizationUnitName", sslCertificateEntity.organizationUnitName);
    writer.writeStringValue("serialNumber", sslCertificateEntity.serialNumber);
    writer.writeStringValue("surname", sslCertificateEntity.surname);
    writer.writeAdditionalData(sslCertificateEntity.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeStopAndQuarantineFileResponseAction(writer: SerializationWriter, stopAndQuarantineFileResponseAction: StopAndQuarantineFileResponseAction | undefined = {} as StopAndQuarantineFileResponseAction) : void {
    serializeResponseAction(writer, stopAndQuarantineFileResponseAction)
    writer.writeEnumValue<StopAndQuarantineFileEntityIdentifier[]>("identifier", stopAndQuarantineFileResponseAction.identifier);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeStringValueDictionary(writer: SerializationWriter, stringValueDictionary: StringValueDictionary | undefined = {} as StringValueDictionary) : void {
    writer.writeStringValue("@odata.type", stringValueDictionary.odataType);
    writer.writeAdditionalData(stringValueDictionary.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeSubCategory(writer: SerializationWriter, subCategory: SubCategory | undefined = {} as SubCategory) : void {
    serializeFilePlanDescriptorBase(writer, subCategory)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeSubCategoryTemplate(writer: SerializationWriter, subCategoryTemplate: SubCategoryTemplate | undefined = {} as SubCategoryTemplate) : void {
    serializeFilePlanDescriptorTemplate(writer, subCategoryTemplate)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeSubCategoryTemplateCollectionResponse(writer: SerializationWriter, subCategoryTemplateCollectionResponse: SubCategoryTemplateCollectionResponse | undefined = {} as SubCategoryTemplateCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, subCategoryTemplateCollectionResponse)
    writer.writeCollectionOfObjectValues<SubCategoryTemplate>("value", subCategoryTemplateCollectionResponse.value, serializeSubCategoryTemplate);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeSubdomain(writer: SerializationWriter, subdomain: Subdomain | undefined = {} as Subdomain) : void {
    serializeEntity(writer, subdomain)
    writer.writeDateValue("firstSeenDateTime", subdomain.firstSeenDateTime);
    writer.writeObjectValue<Host>("host", subdomain.host, serializeHost);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeSubdomainCollectionResponse(writer: SerializationWriter, subdomainCollectionResponse: SubdomainCollectionResponse | undefined = {} as SubdomainCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, subdomainCollectionResponse)
    writer.writeCollectionOfObjectValues<Subdomain>("value", subdomainCollectionResponse.value, serializeSubdomain);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeSubmissionAdminReview(writer: SerializationWriter, submissionAdminReview: SubmissionAdminReview | undefined = {} as SubmissionAdminReview) : void {
    writer.writeStringValue("@odata.type", submissionAdminReview.odataType);
    writer.writeStringValue("reviewBy", submissionAdminReview.reviewBy);
    writer.writeDateValue("reviewDateTime", submissionAdminReview.reviewDateTime);
    writer.writeEnumValue<SubmissionResultCategory>("reviewResult", submissionAdminReview.reviewResult);
    writer.writeAdditionalData(submissionAdminReview.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeSubmissionDetectedFile(writer: SerializationWriter, submissionDetectedFile: SubmissionDetectedFile | undefined = {} as SubmissionDetectedFile) : void {
    writer.writeStringValue("fileHash", submissionDetectedFile.fileHash);
    writer.writeStringValue("fileName", submissionDetectedFile.fileName);
    writer.writeStringValue("@odata.type", submissionDetectedFile.odataType);
    writer.writeAdditionalData(submissionDetectedFile.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeSubmissionMailEvidence(writer: SerializationWriter, submissionMailEvidence: SubmissionMailEvidence | undefined = {} as SubmissionMailEvidence) : void {
    serializeAlertEvidence(writer, submissionMailEvidence)
    writer.writeStringValue("networkMessageId", submissionMailEvidence.networkMessageId);
    writer.writeStringValue("recipient", submissionMailEvidence.recipient);
    writer.writeStringValue("reportType", submissionMailEvidence.reportType);
    writer.writeStringValue("sender", submissionMailEvidence.sender);
    writer.writeStringValue("senderIp", submissionMailEvidence.senderIp);
    writer.writeStringValue("subject", submissionMailEvidence.subject);
    writer.writeDateValue("submissionDateTime", submissionMailEvidence.submissionDateTime);
    writer.writeStringValue("submissionId", submissionMailEvidence.submissionId);
    writer.writeStringValue("submitter", submissionMailEvidence.submitter);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeSubmissionResult(writer: SerializationWriter, submissionResult: SubmissionResult | undefined = {} as SubmissionResult) : void {
    writer.writeEnumValue<SubmissionResultCategory>("category", submissionResult.category);
    writer.writeEnumValue<SubmissionResultDetail>("detail", submissionResult.detail);
    writer.writeCollectionOfObjectValues<SubmissionDetectedFile>("detectedFiles", submissionResult.detectedFiles, serializeSubmissionDetectedFile);
    writer.writeCollectionOfPrimitiveValues<string>("detectedUrls", submissionResult.detectedUrls);
    writer.writeStringValue("@odata.type", submissionResult.odataType);
    writer.writeEnumValue<UserMailboxSetting[]>("userMailboxSetting", submissionResult.userMailboxSetting);
    writer.writeAdditionalData(submissionResult.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeSubmissionUserIdentity(writer: SerializationWriter, submissionUserIdentity: SubmissionUserIdentity | undefined = {} as SubmissionUserIdentity) : void {
    serializeIdentity(writer, submissionUserIdentity)
    writer.writeStringValue("email", submissionUserIdentity.email);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeTag(writer: SerializationWriter, tag: Tag | undefined = {} as Tag) : void {
    serializeEntity(writer, tag)
    writer.writeObjectValue<IdentitySet>("createdBy", tag.createdBy, serializeIdentitySet);
    writer.writeStringValue("description", tag.description);
    writer.writeStringValue("displayName", tag.displayName);
    writer.writeDateValue("lastModifiedDateTime", tag.lastModifiedDateTime);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeTenantAllowBlockListEntryResult(writer: SerializationWriter, tenantAllowBlockListEntryResult: TenantAllowBlockListEntryResult | undefined = {} as TenantAllowBlockListEntryResult) : void {
    writer.writeEnumValue<TenantAllowBlockListEntryType>("entryType", tenantAllowBlockListEntryResult.entryType);
    writer.writeDateValue("expirationDateTime", tenantAllowBlockListEntryResult.expirationDateTime);
    writer.writeStringValue("identity", tenantAllowBlockListEntryResult.identity);
    writer.writeStringValue("@odata.type", tenantAllowBlockListEntryResult.odataType);
    writer.writeEnumValue<LongRunningOperationStatus>("status", tenantAllowBlockListEntryResult.status);
    writer.writeStringValue("value", tenantAllowBlockListEntryResult.value);
    writer.writeAdditionalData(tenantAllowBlockListEntryResult.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeTenantAllowOrBlockListAction(writer: SerializationWriter, tenantAllowOrBlockListAction: TenantAllowOrBlockListAction | undefined = {} as TenantAllowOrBlockListAction) : void {
    writer.writeEnumValue<TenantAllowBlockListAction>("action", tenantAllowOrBlockListAction.action);
    writer.writeDateValue("expirationDateTime", tenantAllowOrBlockListAction.expirationDateTime);
    writer.writeStringValue("note", tenantAllowOrBlockListAction.note);
    writer.writeStringValue("@odata.type", tenantAllowOrBlockListAction.odataType);
    writer.writeCollectionOfObjectValues<TenantAllowBlockListEntryResult>("results", tenantAllowOrBlockListAction.results, serializeTenantAllowBlockListEntryResult);
    writer.writeAdditionalData(tenantAllowOrBlockListAction.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeThreatIntelligence(writer: SerializationWriter, threatIntelligence: ThreatIntelligence | undefined = {} as ThreatIntelligence) : void {
    serializeEntity(writer, threatIntelligence)
    writer.writeCollectionOfObjectValues<ArticleIndicator>("articleIndicators", threatIntelligence.articleIndicators, serializeArticleIndicator);
    writer.writeCollectionOfObjectValues<Article>("articles", threatIntelligence.articles, serializeArticle);
    writer.writeCollectionOfObjectValues<HostComponent>("hostComponents", threatIntelligence.hostComponents, serializeHostComponent);
    writer.writeCollectionOfObjectValues<HostCookie>("hostCookies", threatIntelligence.hostCookies, serializeHostCookie);
    writer.writeCollectionOfObjectValues<HostPair>("hostPairs", threatIntelligence.hostPairs, serializeHostPair);
    writer.writeCollectionOfObjectValues<HostPort>("hostPorts", threatIntelligence.hostPorts, serializeHostPort);
    writer.writeCollectionOfObjectValues<Host>("hosts", threatIntelligence.hosts, serializeHost);
    writer.writeCollectionOfObjectValues<HostSslCertificate>("hostSslCertificates", threatIntelligence.hostSslCertificates, serializeHostSslCertificate);
    writer.writeCollectionOfObjectValues<HostTracker>("hostTrackers", threatIntelligence.hostTrackers, serializeHostTracker);
    writer.writeCollectionOfObjectValues<IntelligenceProfileIndicator>("intelligenceProfileIndicators", threatIntelligence.intelligenceProfileIndicators, serializeIntelligenceProfileIndicator);
    writer.writeCollectionOfObjectValues<IntelligenceProfile>("intelProfiles", threatIntelligence.intelProfiles, serializeIntelligenceProfile);
    writer.writeCollectionOfObjectValues<PassiveDnsRecord>("passiveDnsRecords", threatIntelligence.passiveDnsRecords, serializePassiveDnsRecord);
    writer.writeCollectionOfObjectValues<SslCertificate>("sslCertificates", threatIntelligence.sslCertificates, serializeSslCertificate);
    writer.writeCollectionOfObjectValues<Subdomain>("subdomains", threatIntelligence.subdomains, serializeSubdomain);
    writer.writeCollectionOfObjectValues<Vulnerability>("vulnerabilities", threatIntelligence.vulnerabilities, serializeVulnerability);
    writer.writeCollectionOfObjectValues<WhoisHistoryRecord>("whoisHistoryRecords", threatIntelligence.whoisHistoryRecords, serializeWhoisHistoryRecord);
    writer.writeCollectionOfObjectValues<WhoisRecord>("whoisRecords", threatIntelligence.whoisRecords, serializeWhoisRecord);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeThreatSubmission(writer: SerializationWriter, threatSubmission: ThreatSubmission | undefined = {} as ThreatSubmission) : void {
    serializeEntity(writer, threatSubmission)
    writer.writeObjectValue<SubmissionAdminReview>("adminReview", threatSubmission.adminReview, serializeSubmissionAdminReview);
    writer.writeEnumValue<SubmissionCategory>("category", threatSubmission.category);
    writer.writeEnumValue<SubmissionClientSource>("clientSource", threatSubmission.clientSource);
    writer.writeEnumValue<SubmissionContentType>("contentType", threatSubmission.contentType);
    writer.writeObjectValue<SubmissionUserIdentity>("createdBy", threatSubmission.createdBy, serializeSubmissionUserIdentity);
    writer.writeDateValue("createdDateTime", threatSubmission.createdDateTime);
    writer.writeObjectValue<SubmissionResult>("result", threatSubmission.result, serializeSubmissionResult);
    writer.writeEnumValue<SubmissionSource>("source", threatSubmission.source);
    writer.writeEnumValue<LongRunningOperationStatus>("status", threatSubmission.status);
    writer.writeStringValue("tenantId", threatSubmission.tenantId);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeThreatSubmissionRoot(writer: SerializationWriter, threatSubmissionRoot: ThreatSubmissionRoot | undefined = {} as ThreatSubmissionRoot) : void {
    serializeEntity(writer, threatSubmissionRoot)
    writer.writeCollectionOfObjectValues<EmailThreatSubmission>("emailThreats", threatSubmissionRoot.emailThreats, serializeEmailThreatSubmission);
    writer.writeCollectionOfObjectValues<EmailThreatSubmissionPolicy>("emailThreatSubmissionPolicies", threatSubmissionRoot.emailThreatSubmissionPolicies, serializeEmailThreatSubmissionPolicy);
    writer.writeCollectionOfObjectValues<FileThreatSubmission>("fileThreats", threatSubmissionRoot.fileThreats, serializeFileThreatSubmission);
    writer.writeCollectionOfObjectValues<UrlThreatSubmission>("urlThreats", threatSubmissionRoot.urlThreats, serializeUrlThreatSubmission);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeTopicModelingSettings(writer: SerializationWriter, topicModelingSettings: TopicModelingSettings | undefined = {} as TopicModelingSettings) : void {
    writer.writeBooleanValue("dynamicallyAdjustTopicCount", topicModelingSettings.dynamicallyAdjustTopicCount);
    writer.writeBooleanValue("ignoreNumbers", topicModelingSettings.ignoreNumbers);
    writer.writeBooleanValue("isEnabled", topicModelingSettings.isEnabled);
    writer.writeStringValue("@odata.type", topicModelingSettings.odataType);
    writer.writeNumberValue("topicCount", topicModelingSettings.topicCount);
    writer.writeAdditionalData(topicModelingSettings.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeTriggersRoot(writer: SerializationWriter, triggersRoot: TriggersRoot | undefined = {} as TriggersRoot) : void {
    serializeEntity(writer, triggersRoot)
    writer.writeCollectionOfObjectValues<RetentionEvent>("retentionEvents", triggersRoot.retentionEvents, serializeRetentionEvent);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeTriggerTypesRoot(writer: SerializationWriter, triggerTypesRoot: TriggerTypesRoot | undefined = {} as TriggerTypesRoot) : void {
    serializeEntity(writer, triggerTypesRoot)
    writer.writeCollectionOfObjectValues<RetentionEventType>("retentionEventTypes", triggerTypesRoot.retentionEventTypes, serializeRetentionEventType);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeUnclassifiedArtifact(writer: SerializationWriter, unclassifiedArtifact: UnclassifiedArtifact | undefined = {} as UnclassifiedArtifact) : void {
    serializeArtifact(writer, unclassifiedArtifact)
    writer.writeStringValue("kind", unclassifiedArtifact.kind);
    writer.writeStringValue("value", unclassifiedArtifact.value);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeUnifiedGroupSource(writer: SerializationWriter, unifiedGroupSource: UnifiedGroupSource | undefined = {} as UnifiedGroupSource) : void {
    serializeDataSource(writer, unifiedGroupSource)
    writer.writeObjectValue<Group>("group", unifiedGroupSource.group, serializeGroup);
    writer.writeEnumValue<SourceType[]>("includedSources", unifiedGroupSource.includedSources);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeUnifiedGroupSourceCollectionResponse(writer: SerializationWriter, unifiedGroupSourceCollectionResponse: UnifiedGroupSourceCollectionResponse | undefined = {} as UnifiedGroupSourceCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, unifiedGroupSourceCollectionResponse)
    writer.writeCollectionOfObjectValues<UnifiedGroupSource>("value", unifiedGroupSourceCollectionResponse.value, serializeUnifiedGroupSource);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeUrlEvidence(writer: SerializationWriter, urlEvidence: UrlEvidence | undefined = {} as UrlEvidence) : void {
    serializeAlertEvidence(writer, urlEvidence)
    writer.writeStringValue("url", urlEvidence.url);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeUrlThreatSubmission(writer: SerializationWriter, urlThreatSubmission: UrlThreatSubmission | undefined = {} as UrlThreatSubmission) : void {
    serializeThreatSubmission(writer, urlThreatSubmission)
    writer.writeStringValue("webUrl", urlThreatSubmission.webUrl);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeUrlThreatSubmissionCollectionResponse(writer: SerializationWriter, urlThreatSubmissionCollectionResponse: UrlThreatSubmissionCollectionResponse | undefined = {} as UrlThreatSubmissionCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, urlThreatSubmissionCollectionResponse)
    writer.writeCollectionOfObjectValues<UrlThreatSubmission>("value", urlThreatSubmissionCollectionResponse.value, serializeUrlThreatSubmission);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeUserAccount(writer: SerializationWriter, userAccount: UserAccount | undefined = {} as UserAccount) : void {
    writer.writeStringValue("accountName", userAccount.accountName);
    writer.writeStringValue("azureAdUserId", userAccount.azureAdUserId);
    writer.writeStringValue("displayName", userAccount.displayName);
    writer.writeStringValue("domainName", userAccount.domainName);
    writer.writeStringValue("@odata.type", userAccount.odataType);
    writer.writeStringValue("userPrincipalName", userAccount.userPrincipalName);
    writer.writeStringValue("userSid", userAccount.userSid);
    writer.writeAdditionalData(userAccount.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeUserEvidence(writer: SerializationWriter, userEvidence: UserEvidence | undefined = {} as UserEvidence) : void {
    serializeAlertEvidence(writer, userEvidence)
    writer.writeObjectValue<UserAccount>("userAccount", userEvidence.userAccount, serializeUserAccount);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeUserSource(writer: SerializationWriter, userSource: UserSource | undefined = {} as UserSource) : void {
    serializeDataSource(writer, userSource)
    writer.writeStringValue("email", userSource.email);
    writer.writeEnumValue<SourceType[]>("includedSources", userSource.includedSources);
    writer.writeStringValue("siteWebUrl", userSource.siteWebUrl);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeUserSourceCollectionResponse(writer: SerializationWriter, userSourceCollectionResponse: UserSourceCollectionResponse | undefined = {} as UserSourceCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, userSourceCollectionResponse)
    writer.writeCollectionOfObjectValues<UserSource>("value", userSourceCollectionResponse.value, serializeUserSource);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeVmMetadata(writer: SerializationWriter, vmMetadata: VmMetadata | undefined = {} as VmMetadata) : void {
    writer.writeEnumValue<VmCloudProvider>("cloudProvider", vmMetadata.cloudProvider);
    writer.writeStringValue("@odata.type", vmMetadata.odataType);
    writer.writeStringValue("resourceId", vmMetadata.resourceId);
    writer.writeStringValue("subscriptionId", vmMetadata.subscriptionId);
    writer.writeStringValue("vmId", vmMetadata.vmId);
    writer.writeAdditionalData(vmMetadata.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeVulnerability(writer: SerializationWriter, vulnerability: Vulnerability | undefined = {} as Vulnerability) : void {
    serializeEntity(writer, vulnerability)
    writer.writeBooleanValue("activeExploitsObserved", vulnerability.activeExploitsObserved);
    writer.writeCollectionOfObjectValues<Article>("articles", vulnerability.articles, serializeArticle);
    writer.writeCollectionOfPrimitiveValues<string>("commonWeaknessEnumerationIds", vulnerability.commonWeaknessEnumerationIds);
    writer.writeCollectionOfObjectValues<VulnerabilityComponent>("components", vulnerability.components, serializeVulnerabilityComponent);
    writer.writeDateValue("createdDateTime", vulnerability.createdDateTime);
    writer.writeObjectValue<CvssSummary>("cvss2Summary", vulnerability.cvss2Summary, serializeCvssSummary);
    writer.writeObjectValue<CvssSummary>("cvss3Summary", vulnerability.cvss3Summary, serializeCvssSummary);
    writer.writeObjectValue<FormattedContent>("description", vulnerability.description, serializeFormattedContent);
    writer.writeCollectionOfObjectValues<Hyperlink>("exploits", vulnerability.exploits, serializeHyperlink);
    writer.writeBooleanValue("exploitsAvailable", vulnerability.exploitsAvailable);
    writer.writeBooleanValue("hasChatter", vulnerability.hasChatter);
    writer.writeDateValue("lastModifiedDateTime", vulnerability.lastModifiedDateTime);
    writer.writeNumberValue("priorityScore", vulnerability.priorityScore);
    writer.writeDateValue("publishedDateTime", vulnerability.publishedDateTime);
    writer.writeCollectionOfObjectValues<Hyperlink>("references", vulnerability.references, serializeHyperlink);
    writer.writeObjectValue<FormattedContent>("remediation", vulnerability.remediation, serializeFormattedContent);
    writer.writeEnumValue<VulnerabilitySeverity>("severity", vulnerability.severity);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeVulnerabilityCollectionResponse(writer: SerializationWriter, vulnerabilityCollectionResponse: VulnerabilityCollectionResponse | undefined = {} as VulnerabilityCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, vulnerabilityCollectionResponse)
    writer.writeCollectionOfObjectValues<Vulnerability>("value", vulnerabilityCollectionResponse.value, serializeVulnerability);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeVulnerabilityComponent(writer: SerializationWriter, vulnerabilityComponent: VulnerabilityComponent | undefined = {} as VulnerabilityComponent) : void {
    serializeEntity(writer, vulnerabilityComponent)
    writer.writeStringValue("name", vulnerabilityComponent.name);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeVulnerabilityComponentCollectionResponse(writer: SerializationWriter, vulnerabilityComponentCollectionResponse: VulnerabilityComponentCollectionResponse | undefined = {} as VulnerabilityComponentCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, vulnerabilityComponentCollectionResponse)
    writer.writeCollectionOfObjectValues<VulnerabilityComponent>("value", vulnerabilityComponentCollectionResponse.value, serializeVulnerabilityComponent);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWhoisBaseRecord(writer: SerializationWriter, whoisBaseRecord: WhoisBaseRecord | undefined = {} as WhoisBaseRecord) : void {
    serializeEntity(writer, whoisBaseRecord)
    writer.writeObjectValue<WhoisContact>("abuse", whoisBaseRecord.abuse, serializeWhoisContact);
    writer.writeObjectValue<WhoisContact>("admin", whoisBaseRecord.admin, serializeWhoisContact);
    writer.writeObjectValue<WhoisContact>("billing", whoisBaseRecord.billing, serializeWhoisContact);
    writer.writeStringValue("domainStatus", whoisBaseRecord.domainStatus);
    writer.writeDateValue("expirationDateTime", whoisBaseRecord.expirationDateTime);
    writer.writeDateValue("firstSeenDateTime", whoisBaseRecord.firstSeenDateTime);
    writer.writeObjectValue<Host>("host", whoisBaseRecord.host, serializeHost);
    writer.writeDateValue("lastSeenDateTime", whoisBaseRecord.lastSeenDateTime);
    writer.writeDateValue("lastUpdateDateTime", whoisBaseRecord.lastUpdateDateTime);
    writer.writeCollectionOfObjectValues<WhoisNameserver>("nameservers", whoisBaseRecord.nameservers, serializeWhoisNameserver);
    writer.writeObjectValue<WhoisContact>("noc", whoisBaseRecord.noc, serializeWhoisContact);
    writer.writeStringValue("rawWhoisText", whoisBaseRecord.rawWhoisText);
    writer.writeObjectValue<WhoisContact>("registrant", whoisBaseRecord.registrant, serializeWhoisContact);
    writer.writeObjectValue<WhoisContact>("registrar", whoisBaseRecord.registrar, serializeWhoisContact);
    writer.writeDateValue("registrationDateTime", whoisBaseRecord.registrationDateTime);
    writer.writeObjectValue<WhoisContact>("technical", whoisBaseRecord.technical, serializeWhoisContact);
    writer.writeStringValue("whoisServer", whoisBaseRecord.whoisServer);
    writer.writeObjectValue<WhoisContact>("zone", whoisBaseRecord.zone, serializeWhoisContact);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWhoisContact(writer: SerializationWriter, whoisContact: WhoisContact | undefined = {} as WhoisContact) : void {
    writer.writeObjectValue<PhysicalAddress>("address", whoisContact.address, serializePhysicalAddress);
    writer.writeStringValue("email", whoisContact.email);
    writer.writeStringValue("fax", whoisContact.fax);
    writer.writeStringValue("name", whoisContact.name);
    writer.writeStringValue("@odata.type", whoisContact.odataType);
    writer.writeStringValue("organization", whoisContact.organization);
    writer.writeStringValue("telephone", whoisContact.telephone);
    writer.writeAdditionalData(whoisContact.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWhoisHistoryRecord(writer: SerializationWriter, whoisHistoryRecord: WhoisHistoryRecord | undefined = {} as WhoisHistoryRecord) : void {
    serializeWhoisBaseRecord(writer, whoisHistoryRecord)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWhoisHistoryRecordCollectionResponse(writer: SerializationWriter, whoisHistoryRecordCollectionResponse: WhoisHistoryRecordCollectionResponse | undefined = {} as WhoisHistoryRecordCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, whoisHistoryRecordCollectionResponse)
    writer.writeCollectionOfObjectValues<WhoisHistoryRecord>("value", whoisHistoryRecordCollectionResponse.value, serializeWhoisHistoryRecord);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWhoisNameserver(writer: SerializationWriter, whoisNameserver: WhoisNameserver | undefined = {} as WhoisNameserver) : void {
    writer.writeDateValue("firstSeenDateTime", whoisNameserver.firstSeenDateTime);
    writer.writeObjectValue<Host>("host", whoisNameserver.host, serializeHost);
    writer.writeDateValue("lastSeenDateTime", whoisNameserver.lastSeenDateTime);
    writer.writeStringValue("@odata.type", whoisNameserver.odataType);
    writer.writeAdditionalData(whoisNameserver.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWhoisRecord(writer: SerializationWriter, whoisRecord: WhoisRecord | undefined = {} as WhoisRecord) : void {
    serializeWhoisBaseRecord(writer, whoisRecord)
    writer.writeCollectionOfObjectValues<WhoisHistoryRecord>("history", whoisRecord.history, serializeWhoisHistoryRecord);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWhoisRecordCollectionResponse(writer: SerializationWriter, whoisRecordCollectionResponse: WhoisRecordCollectionResponse | undefined = {} as WhoisRecordCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, whoisRecordCollectionResponse)
    writer.writeCollectionOfObjectValues<WhoisRecord>("value", whoisRecordCollectionResponse.value, serializeWhoisRecord);
}
export interface ServicePrincipalEvidence extends AlertEvidence, Parsable {
    /**
     * The appId property
     */
    appId?: string;
    /**
     * The appOwnerTenantId property
     */
    appOwnerTenantId?: string;
    /**
     * The servicePrincipalName property
     */
    servicePrincipalName?: string;
    /**
     * The servicePrincipalObjectId property
     */
    servicePrincipalObjectId?: string;
    /**
     * The servicePrincipalType property
     */
    servicePrincipalType?: ServicePrincipalType;
    /**
     * The tenantId property
     */
    tenantId?: string;
}
export type ServicePrincipalType = (typeof ServicePrincipalTypeObject)[keyof typeof ServicePrincipalTypeObject];
export type ServiceSource = (typeof ServiceSourceObject)[keyof typeof ServiceSourceObject];
export interface SinglePropertySchema extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The name of the property.
     */
    name?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The type of the property.
     */
    type?: string;
}
export interface SiteSource extends DataSource, Parsable {
    /**
     * The site property
     */
    site?: Site;
}
export interface SiteSourceCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: SiteSource[];
}
export interface SoftDeleteResponseAction extends Parsable, ResponseAction {
    /**
     * The identifier property
     */
    identifier?: EmailEntityIdentifier[];
}
export type SourceType = (typeof SourceTypeObject)[keyof typeof SourceTypeObject];
export interface SslCertificate extends Artifact, Parsable {
    /**
     * The date and time when a certificate expires. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    expirationDateTime?: Date;
    /**
     * A hash of the certificate calculated on the data and signature.
     */
    fingerprint?: string;
    /**
     * The first date and time when this sslCertificate was observed. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    firstSeenDateTime?: Date;
    /**
     * The date and time when a certificate was issued. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    issueDateTime?: Date;
    /**
     * The entity that grants this certificate.
     */
    issuer?: SslCertificateEntity;
    /**
     * The most recent date and time when this sslCertificate was observed. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    lastSeenDateTime?: Date;
    /**
     * The hosts related with this sslCertificate.
     */
    relatedHosts?: Host[];
    /**
     * The serial number associated with an SSL certificate.
     */
    serialNumber?: string;
    /**
     * A SHA-1 hash of the certificate. Note: This is not the signature.
     */
    sha1?: string;
    /**
     * The person, site, machine, and so on, this certificate is for.
     */
    subject?: SslCertificateEntity;
}
export interface SslCertificateCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: SslCertificate[];
}
export interface SslCertificateEntity extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * A physical address of the entity.
     */
    address?: PhysicalAddress;
    /**
     * Alternate names for this entity that are part of the certificate.
     */
    alternateNames?: string[];
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * A common name for this entity.
     */
    commonName?: string;
    /**
     * An email for this entity.
     */
    email?: string;
    /**
     * If the entity is a person, this is the person's given name (first name).
     */
    givenName?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * If the entity is an organization, this is the name of the organization.
     */
    organizationName?: string;
    /**
     * If the entity is an organization, this communicates if a unit in the organization is named on the entity.
     */
    organizationUnitName?: string;
    /**
     * A serial number assigned to the entity; usually only available if the entity is the issuer.
     */
    serialNumber?: string;
    /**
     * If the entity is a person, this is the person's surname (last name).
     */
    surname?: string;
}
export type StopAndQuarantineFileEntityIdentifier = (typeof StopAndQuarantineFileEntityIdentifierObject)[keyof typeof StopAndQuarantineFileEntityIdentifierObject];
export interface StopAndQuarantineFileResponseAction extends Parsable, ResponseAction {
    /**
     * The identifier property
     */
    identifier?: StopAndQuarantineFileEntityIdentifier[];
}
export interface StringValueDictionary extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export interface SubCategory extends FilePlanDescriptorBase, Parsable {
}
export interface SubCategoryTemplate extends FilePlanDescriptorTemplate, Parsable {
}
export interface SubCategoryTemplateCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: SubCategoryTemplate[];
}
export interface Subdomain extends Entity, Parsable {
    /**
     * The first date and time when Microsoft Defender Threat Intelligence observed the subdomain. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z.
     */
    firstSeenDateTime?: Date;
    /**
     * The host property
     */
    host?: Host;
}
export interface SubdomainCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: Subdomain[];
}
export interface SubmissionAdminReview extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Specifies who reviewed the email. The identification is an email ID or other identity strings.
     */
    reviewBy?: string;
    /**
     * Specifies the date time when the review occurred.
     */
    reviewDateTime?: Date;
    /**
     * Specifies what the review result was. The possible values are: notJunk, spam, phishing, malware, allowedByPolicy, blockedByPolicy, spoof, unknown, noResultAvailable, and unknownFutureValue.
     */
    reviewResult?: SubmissionResultCategory;
}
export type SubmissionCategory = (typeof SubmissionCategoryObject)[keyof typeof SubmissionCategoryObject];
export type SubmissionClientSource = (typeof SubmissionClientSourceObject)[keyof typeof SubmissionClientSourceObject];
export type SubmissionContentType = (typeof SubmissionContentTypeObject)[keyof typeof SubmissionContentTypeObject];
export interface SubmissionDetectedFile extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The file hash.
     */
    fileHash?: string;
    /**
     * The file name.
     */
    fileName?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export interface SubmissionMailEvidence extends AlertEvidence, Parsable {
    /**
     * The networkMessageId property
     */
    networkMessageId?: string;
    /**
     * The recipient property
     */
    recipient?: string;
    /**
     * The reportType property
     */
    reportType?: string;
    /**
     * The sender property
     */
    sender?: string;
    /**
     * The senderIp property
     */
    senderIp?: string;
    /**
     * The subject property
     */
    subject?: string;
    /**
     * The submissionDateTime property
     */
    submissionDateTime?: Date;
    /**
     * The submissionId property
     */
    submissionId?: string;
    /**
     * The submitter property
     */
    submitter?: string;
}
export interface SubmissionResult extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The submission result category. The possible values are: notJunk, spam, phishing, malware, allowedByPolicy, blockedByPolicy, spoof, unknown, noResultAvailable and unkownFutureValue.
     */
    category?: SubmissionResultCategory;
    /**
     * Specifies the extra details provided by Microsoft to substantiate their analysis result.
     */
    detail?: SubmissionResultDetail;
    /**
     * Specifies the files detected by Microsoft in the submitted emails.
     */
    detectedFiles?: SubmissionDetectedFile[];
    /**
     * Specifies the URLs detected by Microsoft in the submitted email.
     */
    detectedUrls?: string[];
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Specifies the setting for user mailbox denoted by a comma-separated string.
     */
    userMailboxSetting?: UserMailboxSetting[];
}
export type SubmissionResultCategory = (typeof SubmissionResultCategoryObject)[keyof typeof SubmissionResultCategoryObject];
export type SubmissionResultDetail = (typeof SubmissionResultDetailObject)[keyof typeof SubmissionResultDetailObject];
export type SubmissionSource = (typeof SubmissionSourceObject)[keyof typeof SubmissionSourceObject];
export interface SubmissionUserIdentity extends Identity, Parsable {
    /**
     * The email of user who is making the submission when logged in (delegated token case).
     */
    email?: string;
}
export interface Tag extends Entity, Parsable {
    /**
     * The createdBy property
     */
    createdBy?: IdentitySet;
    /**
     * The description property
     */
    description?: string;
    /**
     * The displayName property
     */
    displayName?: string;
    /**
     * The lastModifiedDateTime property
     */
    lastModifiedDateTime?: Date;
}
export type TenantAllowBlockListAction = (typeof TenantAllowBlockListActionObject)[keyof typeof TenantAllowBlockListActionObject];
export interface TenantAllowBlockListEntryResult extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The tenant allow-block list entry type. The possible values are: url, fileHash, sender, recipient and unkownFutureValue.
     */
    entryType?: TenantAllowBlockListEntryType;
    /**
     * Specifies the date and time when the entry expires.
     */
    expirationDateTime?: Date;
    /**
     * Specifies the identity of the entry generated by the tenant allow block list system.
     */
    identity?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Specifies whether the tenant allow block list entry creation operation was successful. The possible values are: notStarted, running, succeeded, failed, skipped and unkownFutureValue.
     */
    status?: LongRunningOperationStatus;
    /**
     * Specifies the value of the created tenant allow block list entry.
     */
    value?: string;
}
export type TenantAllowBlockListEntryType = (typeof TenantAllowBlockListEntryTypeObject)[keyof typeof TenantAllowBlockListEntryTypeObject];
export interface TenantAllowOrBlockListAction extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Specifies whether the tenant allow-or-block list is an allow or block. The possible values are: allow, block, and unkownFutureValue.
     */
    action?: TenantAllowBlockListAction;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * Specifies when the tenant allow-block-list expires in date time.
     */
    expirationDateTime?: Date;
    /**
     * Specifies the note added to the tenant allow-or-block list entry in the format of string.
     */
    note?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Contains the result of the submission that lead to the tenant allow-block-list entry creation.
     */
    results?: TenantAllowBlockListEntryResult[];
}
export interface ThreatIntelligence extends Entity, Parsable {
    /**
     * Refers to indicators of threat or compromise highlighted in an article.Note: List retrieval is not yet supported.
     */
    articleIndicators?: ArticleIndicator[];
    /**
     * A list of article objects.
     */
    articles?: Article[];
    /**
     * Retrieve details about hostComponent objects.Note: List retrieval is not yet supported.
     */
    hostComponents?: HostComponent[];
    /**
     * Retrieve details about hostCookie objects.Note: List retrieval is not yet supported.
     */
    hostCookies?: HostCookie[];
    /**
     * Retrieve details about hostTracker objects.Note: List retrieval is not yet supported.
     */
    hostPairs?: HostPair[];
    /**
     * Retrieve details about hostPort objects.Note: List retrieval is not yet supported.
     */
    hostPorts?: HostPort[];
    /**
     * Refers to host objects that Microsoft Threat Intelligence has observed.Note: List retrieval is not yet supported.
     */
    hosts?: Host[];
    /**
     * Retrieve details about hostSslCertificate objects.Note: List retrieval is not yet supported.
     */
    hostSslCertificates?: HostSslCertificate[];
    /**
     * Retrieve details about hostTracker objects.Note: List retrieval is not yet supported.
     */
    hostTrackers?: HostTracker[];
    /**
     * The intelligenceProfileIndicators property
     */
    intelligenceProfileIndicators?: IntelligenceProfileIndicator[];
    /**
     * A list of intelligenceProfile objects.
     */
    intelProfiles?: IntelligenceProfile[];
    /**
     * Retrieve details about passiveDnsRecord objects.Note: List retrieval is not yet supported.
     */
    passiveDnsRecords?: PassiveDnsRecord[];
    /**
     * Retrieve details about sslCertificate objects.Note: List retrieval is not yet supported.
     */
    sslCertificates?: SslCertificate[];
    /**
     * Retrieve details about the subdomain.Note: List retrieval is not yet supported.
     */
    subdomains?: Subdomain[];
    /**
     * Retrieve details about vulnerabilities.Note: List retrieval is not yet supported.
     */
    vulnerabilities?: Vulnerability[];
    /**
     * Retrieve details about whoisHistoryRecord objects.Note: List retrieval is not yet supported.
     */
    whoisHistoryRecords?: WhoisHistoryRecord[];
    /**
     * A list of whoisRecord objects.
     */
    whoisRecords?: WhoisRecord[];
}
export interface ThreatSubmission extends Entity, Parsable {
    /**
     * Specifies the admin review property that constitutes of who reviewed the user submission, when and what was it identified as.
     */
    adminReview?: SubmissionAdminReview;
    /**
     * The category property
     */
    category?: SubmissionCategory;
    /**
     * Specifies the source of the submission. The possible values are: microsoft,  other and unkownFutureValue.
     */
    clientSource?: SubmissionClientSource;
    /**
     * Specifies the type of content being submitted. The possible values are: email, url, file, app and unkownFutureValue.
     */
    contentType?: SubmissionContentType;
    /**
     * Specifies who submitted the email as a threat. Supports $filter = createdBy/email eq 'value'.
     */
    createdBy?: SubmissionUserIdentity;
    /**
     * Specifies when the threat submission was created. Supports $filter = createdDateTime ge 2022-01-01T00:00:00Z and createdDateTime lt 2022-01-02T00:00:00Z.
     */
    createdDateTime?: Date;
    /**
     * Specifies the result of the analysis performed by Microsoft.
     */
    result?: SubmissionResult;
    /**
     * Specifies the role of the submitter. Supports $filter = source eq 'value'. The possible values are: administrator,  user and unkownFutureValue.
     */
    source?: SubmissionSource;
    /**
     * Indicates whether the threat submission has been analyzed by Microsoft. Supports $filter = status eq 'value'. The possible values are: notStarted, running, succeeded, failed, skipped and unkownFutureValue.
     */
    status?: LongRunningOperationStatus;
    /**
     * Indicates the tenant id of the submitter. Not required when created using a POST operation. It's extracted from the token of the post API call.
     */
    tenantId?: string;
}
export interface ThreatSubmissionRoot extends Entity, Parsable {
    /**
     * The emailThreats property
     */
    emailThreats?: EmailThreatSubmission[];
    /**
     * The emailThreatSubmissionPolicies property
     */
    emailThreatSubmissionPolicies?: EmailThreatSubmissionPolicy[];
    /**
     * The fileThreats property
     */
    fileThreats?: FileThreatSubmission[];
    /**
     * The urlThreats property
     */
    urlThreats?: UrlThreatSubmission[];
}
export type ThreatType = (typeof ThreatTypeObject)[keyof typeof ThreatTypeObject];
export interface TopicModelingSettings extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * Indicates whether the themes model should dynamically optimize the number of generated topics. To learn more, see Adjust maximum number of themes dynamically.
     */
    dynamicallyAdjustTopicCount?: boolean;
    /**
     * Indicates whether the themes model should exclude numbers while parsing document texts. To learn more, see Include numbers in themes.
     */
    ignoreNumbers?: boolean;
    /**
     * Indicates whether themes model is enabled for the case.
     */
    isEnabled?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The total number of topics that the themes model will generate for a review set. To learn more, see Maximum number of themes.
     */
    topicCount?: number;
}
export interface TriggersRoot extends Entity, Parsable {
    /**
     * The retentionEvents property
     */
    retentionEvents?: RetentionEvent[];
}
export interface TriggerTypesRoot extends Entity, Parsable {
    /**
     * The retentionEventTypes property
     */
    retentionEventTypes?: RetentionEventType[];
}
export interface UnclassifiedArtifact extends Artifact, Parsable {
    /**
     * The kind for this unclassifiedArtifact resource, describing what this value means.
     */
    kind?: string;
    /**
     * The value for this unclassifiedArtifact.
     */
    value?: string;
}
export interface UnifiedGroupSource extends DataSource, Parsable {
    /**
     * The group property
     */
    group?: Group;
    /**
     * Specifies which sources are included in this group. Possible values are: mailbox, site.
     */
    includedSources?: SourceType[];
}
export interface UnifiedGroupSourceCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: UnifiedGroupSource[];
}
export interface UrlEvidence extends AlertEvidence, Parsable {
    /**
     * The Unique Resource Locator (URL).
     */
    url?: string;
}
export interface UrlThreatSubmission extends Parsable, ThreatSubmission {
    /**
     * Denotes the webUrl that needs to be submitted.
     */
    webUrl?: string;
}
export interface UrlThreatSubmissionCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: UrlThreatSubmission[];
}
export interface UserAccount extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * The displayed name of the user account.
     */
    accountName?: string;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The user object identifier in Microsoft Entra ID.
     */
    azureAdUserId?: string;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The user display name in Microsoft Entra ID.
     */
    displayName?: string;
    /**
     * The name of the Active Directory domain of which the user is a member.
     */
    domainName?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The user principal name of the account in Microsoft Entra ID.
     */
    userPrincipalName?: string;
    /**
     * The local security identifier of the user account.
     */
    userSid?: string;
}
export type UserAssetIdentifier = (typeof UserAssetIdentifierObject)[keyof typeof UserAssetIdentifierObject];
export interface UserEvidence extends AlertEvidence, Parsable {
    /**
     * The user account details.
     */
    userAccount?: UserAccount;
}
export type UserMailboxSetting = (typeof UserMailboxSettingObject)[keyof typeof UserMailboxSettingObject];
export interface UserSource extends DataSource, Parsable {
    /**
     * Email address of the user's mailbox.
     */
    email?: string;
    /**
     * Specifies which sources are included in this group. Possible values are: mailbox, site.
     */
    includedSources?: SourceType[];
    /**
     * The URL of the user's OneDrive for Business site. Read-only.
     */
    siteWebUrl?: string;
}
export interface UserSourceCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: UserSource[];
}
export type VmCloudProvider = (typeof VmCloudProviderObject)[keyof typeof VmCloudProviderObject];
export interface VmMetadata extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The cloudProvider property
     */
    cloudProvider?: VmCloudProvider;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Unique identifier of the Azure resource.
     */
    resourceId?: string;
    /**
     * Unique identifier of the Azure subscription the customer tenant belongs to.
     */
    subscriptionId?: string;
    /**
     * Unique identifier of the virtual machine instance.
     */
    vmId?: string;
}
export interface Vulnerability extends Entity, Parsable {
    /**
     * Indicates whether this vulnerability has any known exploits associated to known bad actors.
     */
    activeExploitsObserved?: boolean;
    /**
     * Articles related to this vulnerability.
     */
    articles?: Article[];
    /**
     * Community-defined common weakness enumerations (CWE).
     */
    commonWeaknessEnumerationIds?: string[];
    /**
     * Components related to this vulnerability article.
     */
    components?: VulnerabilityComponent[];
    /**
     * The date and time when this vulnerability article was first created.
     */
    createdDateTime?: Date;
    /**
     * The cvss2Summary property
     */
    cvss2Summary?: CvssSummary;
    /**
     * The cvss3Summary property
     */
    cvss3Summary?: CvssSummary;
    /**
     * The description property
     */
    description?: FormattedContent;
    /**
     * Known exploits for this vulnerability.
     */
    exploits?: Hyperlink[];
    /**
     * Indicates whether this vulnerability has exploits in public sources (such as Packetstorm or Exploit-DB) online.
     */
    exploitsAvailable?: boolean;
    /**
     * Indicates whether chatter about this vulnerability has been discovered online.
     */
    hasChatter?: boolean;
    /**
     * The date and time when this vulnerability article was most recently updated.
     */
    lastModifiedDateTime?: Date;
    /**
     * A unique algorithm that reflects the priority of a vulnerability based on the CVSS score, exploits, chatter, and linkage to malware. This property also evaluates the recency of these components so users can understand which vulnerability should be remediated first.
     */
    priorityScore?: number;
    /**
     * The date and time when this vulnerability article was published.
     */
    publishedDateTime?: Date;
    /**
     * Reference links where further information can be learned about this vulnerability.
     */
    references?: Hyperlink[];
    /**
     * Any known remediation steps.
     */
    remediation?: FormattedContent;
    /**
     * The severity property
     */
    severity?: VulnerabilitySeverity;
}
export interface VulnerabilityCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: Vulnerability[];
}
export interface VulnerabilityComponent extends Entity, Parsable {
    /**
     * The name of this vulnerability component.
     */
    name?: string;
}
export interface VulnerabilityComponentCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: VulnerabilityComponent[];
}
export type VulnerabilitySeverity = (typeof VulnerabilitySeverityObject)[keyof typeof VulnerabilitySeverityObject];
export type WatermarkLayout = (typeof WatermarkLayoutObject)[keyof typeof WatermarkLayoutObject];
export interface WhoisBaseRecord extends Entity, Parsable {
    /**
     * The contact information for the abuse contact.
     */
    abuse?: WhoisContact;
    /**
     * The contact information for the admin contact.
     */
    admin?: WhoisContact;
    /**
     * The contact information for the billing contact.
     */
    billing?: WhoisContact;
    /**
     * The domain status for this WHOIS object.
     */
    domainStatus?: string;
    /**
     * The date and time when this WHOIS record expires with the registrar. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    expirationDateTime?: Date;
    /**
     * The first seen date and time of this WHOIS record. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    firstSeenDateTime?: Date;
    /**
     * The host property
     */
    host?: Host;
    /**
     * The last seen date and time of this WHOIS record. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    lastSeenDateTime?: Date;
    /**
     * The date and time when this WHOIS record was last modified. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    lastUpdateDateTime?: Date;
    /**
     * The nameservers for this WHOIS object.
     */
    nameservers?: WhoisNameserver[];
    /**
     * The contact information for the noc contact.
     */
    noc?: WhoisContact;
    /**
     * The raw WHOIS details for this WHOIS object.
     */
    rawWhoisText?: string;
    /**
     * The contact information for the registrant contact.
     */
    registrant?: WhoisContact;
    /**
     * The contact information for the registrar contact.
     */
    registrar?: WhoisContact;
    /**
     * The date and time when this WHOIS record was registered with a registrar. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    registrationDateTime?: Date;
    /**
     * The contact information for the technical contact.
     */
    technical?: WhoisContact;
    /**
     * The WHOIS server that provides the details.
     */
    whoisServer?: string;
    /**
     * The contact information for the zone contact.
     */
    zone?: WhoisContact;
}
export interface WhoisContact extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The physical address of the entity.
     */
    address?: PhysicalAddress;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The email of this WHOIS contact.
     */
    email?: string;
    /**
     * The fax of this WHOIS contact. No format is guaranteed.
     */
    fax?: string;
    /**
     * The name of this WHOIS contact.
     */
    name?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The organization of this WHOIS contact.
     */
    organization?: string;
    /**
     * The telephone of this WHOIS contact. No format is guaranteed.
     */
    telephone?: string;
}
export interface WhoisHistoryRecord extends Parsable, WhoisBaseRecord {
}
export interface WhoisHistoryRecordCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: WhoisHistoryRecord[];
}
export interface WhoisNameserver extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The first seen date and time of this WHOIS contact. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    firstSeenDateTime?: Date;
    /**
     * The host property
     */
    host?: Host;
    /**
     * The last seen date and time of this WHOIS contact. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    lastSeenDateTime?: Date;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export interface WhoisRecord extends Parsable, WhoisBaseRecord {
    /**
     * The collection of historical records associated to this WHOIS object.
     */
    history?: WhoisHistoryRecord[];
}
export interface WhoisRecordCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: WhoisRecord[];
}
export const ActionAfterRetentionPeriodObject = {
    None: "none",
    Delete: "delete",
    StartDispositionReview: "startDispositionReview",
    Relabel: "relabel",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const ActionSourceObject = {
    Manual: "manual",
    Automatic: "automatic",
    Recommended: "recommended",
    DefaultEscaped: "default",
}  as const;
export const AdditionalDataOptionsObject = {
    AllVersions: "allVersions",
    LinkedFiles: "linkedFiles",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const AdditionalOptionsObject = {
    None: "none",
    TeamsAndYammerConversations: "teamsAndYammerConversations",
    CloudAttachments: "cloudAttachments",
    AllDocumentVersions: "allDocumentVersions",
    SubfolderContents: "subfolderContents",
    ListAttachments: "listAttachments",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const AlertClassificationObject = {
    Unknown: "unknown",
    FalsePositive: "falsePositive",
    TruePositive: "truePositive",
    InformationalExpectedActivity: "informationalExpectedActivity",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const AlertDeterminationObject = {
    Unknown: "unknown",
    Apt: "apt",
    Malware: "malware",
    SecurityPersonnel: "securityPersonnel",
    SecurityTesting: "securityTesting",
    UnwantedSoftware: "unwantedSoftware",
    Other: "other",
    MultiStagedAttack: "multiStagedAttack",
    CompromisedAccount: "compromisedAccount",
    Phishing: "phishing",
    MaliciousUserActivity: "maliciousUserActivity",
    NotMalicious: "notMalicious",
    NotEnoughDataToValidate: "notEnoughDataToValidate",
    ConfirmedActivity: "confirmedActivity",
    LineOfBusinessApplication: "lineOfBusinessApplication",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const AlertSeverityObject = {
    Unknown: "unknown",
    Informational: "informational",
    Low: "low",
    Medium: "medium",
    High: "high",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const AlertStatusObject = {
    Unknown: "unknown",
    NewEscaped: "new",
    InProgress: "inProgress",
    Resolved: "resolved",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const AntispamDirectionalityObject = {
    Unknown: "unknown",
    Inbound: "inbound",
    Outbound: "outbound",
    IntraOrg: "intraOrg",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const AssignmentMethodObject = {
    Standard: "standard",
    Privileged: "privileged",
    Auto: "auto",
}  as const;
export const AuditLogQueryStatusObject = {
    NotStarted: "notStarted",
    Running: "running",
    Succeeded: "succeeded",
    Failed: "failed",
    Cancelled: "cancelled",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const AuditLogRecordTypeObject = {
    ExchangeAdmin: "ExchangeAdmin",
    ExchangeItem: "ExchangeItem",
    ExchangeItemGroup: "ExchangeItemGroup",
    SharePoint: "SharePoint",
    SyntheticProbe: "SyntheticProbe",
    SharePointFileOperation: "SharePointFileOperation",
    OneDrive: "OneDrive",
    AzureActiveDirectory: "AzureActiveDirectory",
    AzureActiveDirectoryAccountLogon: "AzureActiveDirectoryAccountLogon",
    DataCenterSecurityCmdlet: "DataCenterSecurityCmdlet",
    ComplianceDLPSharePoint: "ComplianceDLPSharePoint",
    Sway: "Sway",
    ComplianceDLPExchange: "ComplianceDLPExchange",
    SharePointSharingOperation: "SharePointSharingOperation",
    AzureActiveDirectoryStsLogon: "AzureActiveDirectoryStsLogon",
    SkypeForBusinessPSTNUsage: "SkypeForBusinessPSTNUsage",
    SkypeForBusinessUsersBlocked: "SkypeForBusinessUsersBlocked",
    SecurityComplianceCenterEOPCmdlet: "SecurityComplianceCenterEOPCmdlet",
    ExchangeAggregatedOperation: "ExchangeAggregatedOperation",
    PowerBIAudit: "PowerBIAudit",
    CRM: "CRM",
    Yammer: "Yammer",
    SkypeForBusinessCmdlets: "SkypeForBusinessCmdlets",
    Discovery: "Discovery",
    MicrosoftTeams: "MicrosoftTeams",
    ThreatIntelligence: "ThreatIntelligence",
    MailSubmission: "MailSubmission",
    MicrosoftFlow: "MicrosoftFlow",
    AeD: "AeD",
    MicrosoftStream: "MicrosoftStream",
    ComplianceDLPSharePointClassification: "ComplianceDLPSharePointClassification",
    ThreatFinder: "ThreatFinder",
    Project: "Project",
    SharePointListOperation: "SharePointListOperation",
    SharePointCommentOperation: "SharePointCommentOperation",
    DataGovernance: "DataGovernance",
    Kaizala: "Kaizala",
    SecurityComplianceAlerts: "SecurityComplianceAlerts",
    ThreatIntelligenceUrl: "ThreatIntelligenceUrl",
    SecurityComplianceInsights: "SecurityComplianceInsights",
    MIPLabel: "MIPLabel",
    WorkplaceAnalytics: "WorkplaceAnalytics",
    PowerAppsApp: "PowerAppsApp",
    PowerAppsPlan: "PowerAppsPlan",
    ThreatIntelligenceAtpContent: "ThreatIntelligenceAtpContent",
    LabelContentExplorer: "LabelContentExplorer",
    TeamsHealthcare: "TeamsHealthcare",
    ExchangeItemAggregated: "ExchangeItemAggregated",
    HygieneEvent: "HygieneEvent",
    DataInsightsRestApiAudit: "DataInsightsRestApiAudit",
    InformationBarrierPolicyApplication: "InformationBarrierPolicyApplication",
    SharePointListItemOperation: "SharePointListItemOperation",
    SharePointContentTypeOperation: "SharePointContentTypeOperation",
    SharePointFieldOperation: "SharePointFieldOperation",
    MicrosoftTeamsAdmin: "MicrosoftTeamsAdmin",
    HRSignal: "HRSignal",
    MicrosoftTeamsDevice: "MicrosoftTeamsDevice",
    MicrosoftTeamsAnalytics: "MicrosoftTeamsAnalytics",
    InformationWorkerProtection: "InformationWorkerProtection",
    Campaign: "Campaign",
    DLPEndpoint: "DLPEndpoint",
    AirInvestigation: "AirInvestigation",
    Quarantine: "Quarantine",
    MicrosoftForms: "MicrosoftForms",
    ApplicationAudit: "ApplicationAudit",
    ComplianceSupervisionExchange: "ComplianceSupervisionExchange",
    CustomerKeyServiceEncryption: "CustomerKeyServiceEncryption",
    OfficeNative: "OfficeNative",
    MipAutoLabelSharePointItem: "MipAutoLabelSharePointItem",
    MipAutoLabelSharePointPolicyLocation: "MipAutoLabelSharePointPolicyLocation",
    MicrosoftTeamsShifts: "MicrosoftTeamsShifts",
    SecureScore: "SecureScore",
    MipAutoLabelExchangeItem: "MipAutoLabelExchangeItem",
    CortanaBriefing: "CortanaBriefing",
    Search: "Search",
    WDATPAlerts: "WDATPAlerts",
    PowerPlatformAdminDlp: "PowerPlatformAdminDlp",
    PowerPlatformAdminEnvironment: "PowerPlatformAdminEnvironment",
    MDATPAudit: "MDATPAudit",
    SensitivityLabelPolicyMatch: "SensitivityLabelPolicyMatch",
    SensitivityLabelAction: "SensitivityLabelAction",
    SensitivityLabeledFileAction: "SensitivityLabeledFileAction",
    AttackSim: "AttackSim",
    AirManualInvestigation: "AirManualInvestigation",
    SecurityComplianceRBAC: "SecurityComplianceRBAC",
    UserTraining: "UserTraining",
    AirAdminActionInvestigation: "AirAdminActionInvestigation",
    MSTIC: "MSTIC",
    PhysicalBadgingSignal: "PhysicalBadgingSignal",
    TeamsEasyApprovals: "TeamsEasyApprovals",
    AipDiscover: "AipDiscover",
    AipSensitivityLabelAction: "AipSensitivityLabelAction",
    AipProtectionAction: "AipProtectionAction",
    AipFileDeleted: "AipFileDeleted",
    AipHeartBeat: "AipHeartBeat",
    MCASAlerts: "MCASAlerts",
    OnPremisesFileShareScannerDlp: "OnPremisesFileShareScannerDlp",
    OnPremisesSharePointScannerDlp: "OnPremisesSharePointScannerDlp",
    ExchangeSearch: "ExchangeSearch",
    SharePointSearch: "SharePointSearch",
    PrivacyDataMinimization: "PrivacyDataMinimization",
    LabelAnalyticsAggregate: "LabelAnalyticsAggregate",
    MyAnalyticsSettings: "MyAnalyticsSettings",
    SecurityComplianceUserChange: "SecurityComplianceUserChange",
    ComplianceDLPExchangeClassification: "ComplianceDLPExchangeClassification",
    ComplianceDLPEndpoint: "ComplianceDLPEndpoint",
    MipExactDataMatch: "MipExactDataMatch",
    MSDEResponseActions: "MSDEResponseActions",
    MSDEGeneralSettings: "MSDEGeneralSettings",
    MSDEIndicatorsSettings: "MSDEIndicatorsSettings",
    MS365DCustomDetection: "MS365DCustomDetection",
    MSDERolesSettings: "MSDERolesSettings",
    MAPGAlerts: "MAPGAlerts",
    MAPGPolicy: "MAPGPolicy",
    MAPGRemediation: "MAPGRemediation",
    PrivacyRemediationAction: "PrivacyRemediationAction",
    PrivacyDigestEmail: "PrivacyDigestEmail",
    MipAutoLabelSimulationProgress: "MipAutoLabelSimulationProgress",
    MipAutoLabelSimulationCompletion: "MipAutoLabelSimulationCompletion",
    MipAutoLabelProgressFeedback: "MipAutoLabelProgressFeedback",
    DlpSensitiveInformationType: "DlpSensitiveInformationType",
    MipAutoLabelSimulationStatistics: "MipAutoLabelSimulationStatistics",
    LargeContentMetadata: "LargeContentMetadata",
    Microsoft365Group: "Microsoft365Group",
    CDPMlInferencingResult: "CDPMlInferencingResult",
    FilteringMailMetadata: "FilteringMailMetadata",
    CDPClassificationMailItem: "CDPClassificationMailItem",
    CDPClassificationDocument: "CDPClassificationDocument",
    OfficeScriptsRunAction: "OfficeScriptsRunAction",
    FilteringPostMailDeliveryAction: "FilteringPostMailDeliveryAction",
    CDPUnifiedFeedback: "CDPUnifiedFeedback",
    TenantAllowBlockList: "TenantAllowBlockList",
    ConsumptionResource: "ConsumptionResource",
    HealthcareSignal: "HealthcareSignal",
    DlpImportResult: "DlpImportResult",
    CDPCompliancePolicyExecution: "CDPCompliancePolicyExecution",
    MultiStageDisposition: "MultiStageDisposition",
    PrivacyDataMatch: "PrivacyDataMatch",
    FilteringDocMetadata: "FilteringDocMetadata",
    FilteringEmailFeatures: "FilteringEmailFeatures",
    PowerBIDlp: "PowerBIDlp",
    FilteringUrlInfo: "FilteringUrlInfo",
    FilteringAttachmentInfo: "FilteringAttachmentInfo",
    CoreReportingSettings: "CoreReportingSettings",
    ComplianceConnector: "ComplianceConnector",
    PowerPlatformLockboxResourceAccessRequest: "PowerPlatformLockboxResourceAccessRequest",
    PowerPlatformLockboxResourceCommand: "PowerPlatformLockboxResourceCommand",
    CDPPredictiveCodingLabel: "CDPPredictiveCodingLabel",
    CDPCompliancePolicyUserFeedback: "CDPCompliancePolicyUserFeedback",
    WebpageActivityEndpoint: "WebpageActivityEndpoint",
    OMEPortal: "OMEPortal",
    CMImprovementActionChange: "CMImprovementActionChange",
    FilteringUrlClick: "FilteringUrlClick",
    MipLabelAnalyticsAuditRecord: "MipLabelAnalyticsAuditRecord",
    FilteringEntityEvent: "FilteringEntityEvent",
    FilteringRuleHits: "FilteringRuleHits",
    FilteringMailSubmission: "FilteringMailSubmission",
    LabelExplorer: "LabelExplorer",
    MicrosoftManagedServicePlatform: "MicrosoftManagedServicePlatform",
    PowerPlatformServiceActivity: "PowerPlatformServiceActivity",
    ScorePlatformGenericAuditRecord: "ScorePlatformGenericAuditRecord",
    FilteringTimeTravelDocMetadata: "FilteringTimeTravelDocMetadata",
    Alert: "Alert",
    AlertStatus: "AlertStatus",
    AlertIncident: "AlertIncident",
    IncidentStatus: "IncidentStatus",
    CaseEscaped: "Case",
    CaseInvestigation: "CaseInvestigation",
    RecordsManagement: "RecordsManagement",
    PrivacyRemediation: "PrivacyRemediation",
    DataShareOperation: "DataShareOperation",
    CdpDlpSensitive: "CdpDlpSensitive",
    EHRConnector: "EHRConnector",
    FilteringMailGradingResult: "FilteringMailGradingResult",
    PublicFolder: "PublicFolder",
    PrivacyTenantAuditHistoryRecord: "PrivacyTenantAuditHistoryRecord",
    AipScannerDiscoverEvent: "AipScannerDiscoverEvent",
    EduDataLakeDownloadOperation: "EduDataLakeDownloadOperation",
    M365ComplianceConnector: "M365ComplianceConnector",
    MicrosoftGraphDataConnectOperation: "MicrosoftGraphDataConnectOperation",
    MicrosoftPurview: "MicrosoftPurview",
    FilteringEmailContentFeatures: "FilteringEmailContentFeatures",
    PowerPagesSite: "PowerPagesSite",
    PowerAppsResource: "PowerAppsResource",
    PlannerPlan: "PlannerPlan",
    PlannerCopyPlan: "PlannerCopyPlan",
    PlannerTask: "PlannerTask",
    PlannerRoster: "PlannerRoster",
    PlannerPlanList: "PlannerPlanList",
    PlannerTaskList: "PlannerTaskList",
    PlannerTenantSettings: "PlannerTenantSettings",
    ProjectForTheWebProject: "ProjectForTheWebProject",
    ProjectForTheWebTask: "ProjectForTheWebTask",
    ProjectForTheWebRoadmap: "ProjectForTheWebRoadmap",
    ProjectForTheWebRoadmapItem: "ProjectForTheWebRoadmapItem",
    ProjectForTheWebProjectSettings: "ProjectForTheWebProjectSettings",
    ProjectForTheWebRoadmapSettings: "ProjectForTheWebRoadmapSettings",
    QuarantineMetadata: "QuarantineMetadata",
    MicrosoftTodoAudit: "MicrosoftTodoAudit",
    TimeTravelFilteringDocMetadata: "TimeTravelFilteringDocMetadata",
    TeamsQuarantineMetadata: "TeamsQuarantineMetadata",
    SharePointAppPermissionOperation: "SharePointAppPermissionOperation",
    MicrosoftTeamsSensitivityLabelAction: "MicrosoftTeamsSensitivityLabelAction",
    FilteringTeamsMetadata: "FilteringTeamsMetadata",
    FilteringTeamsUrlInfo: "FilteringTeamsUrlInfo",
    FilteringTeamsPostDeliveryAction: "FilteringTeamsPostDeliveryAction",
    MDCAssessments: "MDCAssessments",
    MDCRegulatoryComplianceStandards: "MDCRegulatoryComplianceStandards",
    MDCRegulatoryComplianceControls: "MDCRegulatoryComplianceControls",
    MDCRegulatoryComplianceAssessments: "MDCRegulatoryComplianceAssessments",
    MDCSecurityConnectors: "MDCSecurityConnectors",
    MDADataSecuritySignal: "MDADataSecuritySignal",
    VivaGoals: "VivaGoals",
    FilteringRuntimeInfo: "FilteringRuntimeInfo",
    AttackSimAdmin: "AttackSimAdmin",
    MicrosoftGraphDataConnectConsent: "MicrosoftGraphDataConnectConsent",
    FilteringAtpDetonationInfo: "FilteringAtpDetonationInfo",
    PrivacyPortal: "PrivacyPortal",
    ManagedTenants: "ManagedTenants",
    UnifiedSimulationMatchedItem: "UnifiedSimulationMatchedItem",
    UnifiedSimulationSummary: "UnifiedSimulationSummary",
    UpdateQuarantineMetadata: "UpdateQuarantineMetadata",
    MS365DSuppressionRule: "MS365DSuppressionRule",
    PurviewDataMapOperation: "PurviewDataMapOperation",
    FilteringUrlPostClickAction: "FilteringUrlPostClickAction",
    IrmUserDefinedDetectionSignal: "IrmUserDefinedDetectionSignal",
    TeamsUpdates: "TeamsUpdates",
    PlannerRosterSensitivityLabel: "PlannerRosterSensitivityLabel",
    MS365DIncident: "MS365DIncident",
    FilteringDelistingMetadata: "FilteringDelistingMetadata",
    ComplianceDLPSharePointClassificationExtended: "ComplianceDLPSharePointClassificationExtended",
    MicrosoftDefenderForIdentityAudit: "MicrosoftDefenderForIdentityAudit",
    SupervisoryReviewDayXInsight: "SupervisoryReviewDayXInsight",
    DefenderExpertsforXDRAdmin: "DefenderExpertsforXDRAdmin",
    CDPEdgeBlockedMessage: "CDPEdgeBlockedMessage",
    HostedRpa: "HostedRpa",
    CdpContentExplorerAggregateRecord: "CdpContentExplorerAggregateRecord",
    CDPHygieneAttachmentInfo: "CDPHygieneAttachmentInfo",
    CDPHygieneSummary: "CDPHygieneSummary",
    CDPPostMailDeliveryAction: "CDPPostMailDeliveryAction",
    CDPEmailFeatures: "CDPEmailFeatures",
    CDPHygieneUrlInfo: "CDPHygieneUrlInfo",
    CDPUrlClick: "CDPUrlClick",
    CDPPackageManagerHygieneEvent: "CDPPackageManagerHygieneEvent",
    FilteringDocScan: "FilteringDocScan",
    TimeTravelFilteringDocScan: "TimeTravelFilteringDocScan",
    MAPGOnboard: "MAPGOnboard",
    VfamCreatePolicy: "VfamCreatePolicy",
    VfamUpdatePolicy: "VfamUpdatePolicy",
    VfamDeletePolicy: "VfamDeletePolicy",
    M365DAAD: "M365DAAD",
    CdpColdCrawlStatus: "CdpColdCrawlStatus",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const AuditLogUserTypeObject = {
    Regular: "Regular",
    Reserved: "Reserved",
    Admin: "Admin",
    DcAdmin: "DcAdmin",
    System: "System",
    Application: "Application",
    ServicePrincipal: "ServicePrincipal",
    CustomPolicy: "CustomPolicy",
    SystemPolicy: "SystemPolicy",
    PartnerTechnician: "PartnerTechnician",
    Guest: "Guest",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const BehaviorDuringRetentionPeriodObject = {
    DoNotRetain: "doNotRetain",
    Retain: "retain",
    RetainAsRecord: "retainAsRecord",
    RetainAsRegulatoryRecord: "retainAsRegulatoryRecord",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const CaseActionObject = {
    ContentExport: "contentExport",
    ApplyTags: "applyTags",
    ConvertToPdf: "convertToPdf",
    Index: "index",
    EstimateStatistics: "estimateStatistics",
    AddToReviewSet: "addToReviewSet",
    HoldUpdate: "holdUpdate",
    UnknownFutureValue: "unknownFutureValue",
    PurgeData: "purgeData",
    ExportReport: "exportReport",
    ExportResult: "exportResult",
}  as const;
export const CaseOperationStatusObject = {
    NotStarted: "notStarted",
    SubmissionFailed: "submissionFailed",
    Running: "running",
    Succeeded: "succeeded",
    PartiallySucceeded: "partiallySucceeded",
    Failed: "failed",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const CaseStatusObject = {
    Unknown: "unknown",
    Active: "active",
    PendingDelete: "pendingDelete",
    Closing: "closing",
    Closed: "closed",
    ClosedWithError: "closedWithError",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const ChildSelectabilityObject = {
    One: "One",
    Many: "Many",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const ContainerPortProtocolObject = {
    Udp: "udp",
    Tcp: "tcp",
    Sctp: "sctp",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const ContentAlignmentObject = {
    Left: "left",
    Right: "right",
    Center: "center",
}  as const;
export const ContentFormatObject = {
    Text: "text",
    Html: "html",
    Markdown: "markdown",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const ContentStateObject = {
    Rest: "rest",
    Motion: "motion",
    Use: "use",
}  as const;
export const DataSourceContainerStatusObject = {
    Active: "active",
    Released: "released",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const DataSourceHoldStatusObject = {
    NotApplied: "notApplied",
    Applied: "applied",
    Applying: "applying",
    Removing: "removing",
    Partial: "partial",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const DataSourceScopesObject = {
    None: "none",
    AllTenantMailboxes: "allTenantMailboxes",
    AllTenantSites: "allTenantSites",
    AllCaseCustodians: "allCaseCustodians",
    AllCaseNoncustodialDataSources: "allCaseNoncustodialDataSources",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const DefaultRecordBehaviorObject = {
    StartLocked: "startLocked",
    StartUnlocked: "startUnlocked",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const DefenderAvStatusObject = {
    NotReporting: "notReporting",
    Disabled: "disabled",
    NotUpdated: "notUpdated",
    Updated: "updated",
    Unknown: "unknown",
    NotSupported: "notSupported",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const DeliveryActionObject = {
    Unknown: "unknown",
    DeliveredToJunk: "deliveredToJunk",
    Delivered: "delivered",
    Blocked: "blocked",
    Replaced: "replaced",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const DeliveryLocationObject = {
    Unknown: "unknown",
    Inbox_folder: "inbox_folder",
    JunkFolder: "junkFolder",
    DeletedFolder: "deletedFolder",
    Quarantine: "quarantine",
    Onprem_external: "onprem_external",
    Failed: "failed",
    Dropped: "dropped",
    Others: "others",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const DetectionSourceObject = {
    Unknown: "unknown",
    MicrosoftDefenderForEndpoint: "microsoftDefenderForEndpoint",
    Antivirus: "antivirus",
    SmartScreen: "smartScreen",
    CustomTi: "customTi",
    MicrosoftDefenderForOffice365: "microsoftDefenderForOffice365",
    AutomatedInvestigation: "automatedInvestigation",
    MicrosoftThreatExperts: "microsoftThreatExperts",
    CustomDetection: "customDetection",
    MicrosoftDefenderForIdentity: "microsoftDefenderForIdentity",
    CloudAppSecurity: "cloudAppSecurity",
    Microsoft365Defender: "microsoft365Defender",
    AzureAdIdentityProtection: "azureAdIdentityProtection",
    Manual: "manual",
    MicrosoftDataLossPrevention: "microsoftDataLossPrevention",
    AppGovernancePolicy: "appGovernancePolicy",
    AppGovernanceDetection: "appGovernanceDetection",
    UnknownFutureValue: "unknownFutureValue",
    MicrosoftDefenderForCloud: "microsoftDefenderForCloud",
    MicrosoftDefenderForIoT: "microsoftDefenderForIoT",
    MicrosoftDefenderForServers: "microsoftDefenderForServers",
    MicrosoftDefenderForStorage: "microsoftDefenderForStorage",
    MicrosoftDefenderForDNS: "microsoftDefenderForDNS",
    MicrosoftDefenderForDatabases: "microsoftDefenderForDatabases",
    MicrosoftDefenderForContainers: "microsoftDefenderForContainers",
    MicrosoftDefenderForNetwork: "microsoftDefenderForNetwork",
    MicrosoftDefenderForAppService: "microsoftDefenderForAppService",
    MicrosoftDefenderForKeyVault: "microsoftDefenderForKeyVault",
    MicrosoftDefenderForResourceManager: "microsoftDefenderForResourceManager",
    MicrosoftDefenderForApiManagement: "microsoftDefenderForApiManagement",
    NrtAlerts: "nrtAlerts",
    ScheduledAlerts: "scheduledAlerts",
    MicrosoftDefenderThreatIntelligenceAnalytics: "microsoftDefenderThreatIntelligenceAnalytics",
    BuiltInMl: "builtInMl",
    MicrosoftSentinel: "microsoftSentinel",
}  as const;
export const DetectionStatusObject = {
    Detected: "detected",
    Blocked: "blocked",
    Prevented: "prevented",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const DeviceAssetIdentifierObject = {
    DeviceId: "deviceId",
    DeviceName: "deviceName",
    RemoteDeviceName: "remoteDeviceName",
    TargetDeviceName: "targetDeviceName",
    DestinationDeviceName: "destinationDeviceName",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const DeviceHealthStatusObject = {
    Active: "active",
    Inactive: "inactive",
    ImpairedCommunication: "impairedCommunication",
    NoSensorData: "noSensorData",
    NoSensorDataImpairedCommunication: "noSensorDataImpairedCommunication",
    Unknown: "unknown",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const DeviceIdEntityIdentifierObject = {
    DeviceId: "deviceId",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const DeviceRiskScoreObject = {
    None: "none",
    Informational: "informational",
    Low: "low",
    Medium: "medium",
    High: "high",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const DisableUserEntityIdentifierObject = {
    AccountSid: "accountSid",
    InitiatingProcessAccountSid: "initiatingProcessAccountSid",
    RequestAccountSid: "requestAccountSid",
    OnPremSid: "onPremSid",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const EmailEntityIdentifierObject = {
    NetworkMessageId: "networkMessageId",
    RecipientEmailAddress: "recipientEmailAddress",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const EventPropagationStatusObject = {
    None: "none",
    InProcessing: "inProcessing",
    Failed: "failed",
    Success: "success",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const EventStatusTypeObject = {
    Pending: "pending",
    ErrorEscaped: "error",
    Success: "success",
    NotAvaliable: "notAvaliable",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const EvidenceRemediationStatusObject = {
    None: "none",
    Remediated: "remediated",
    Prevented: "prevented",
    Blocked: "blocked",
    NotFound: "notFound",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const EvidenceRoleObject = {
    Unknown: "unknown",
    Contextual: "contextual",
    Scanned: "scanned",
    Source: "source",
    Destination: "destination",
    Created: "created",
    Added: "added",
    Compromised: "compromised",
    Edited: "edited",
    Attacked: "attacked",
    Attacker: "attacker",
    CommandAndControl: "commandAndControl",
    Loaded: "loaded",
    Suspicious: "suspicious",
    PolicyViolator: "policyViolator",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const EvidenceVerdictObject = {
    Unknown: "unknown",
    Suspicious: "suspicious",
    Malicious: "malicious",
    NoThreatsFound: "noThreatsFound",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const ExportCriteriaObject = {
    SearchHits: "searchHits",
    PartiallyIndexed: "partiallyIndexed",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const ExportFileStructureObject = {
    None: "none",
    Directory: "directory",
    Pst: "pst",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const ExportFormatObject = {
    Pst: "pst",
    Msg: "msg",
    Eml: "eml",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const ExportLocationObject = {
    ResponsiveLocations: "responsiveLocations",
    NonresponsiveLocations: "nonresponsiveLocations",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const ExportOptionsObject = {
    OriginalFiles: "originalFiles",
    Text: "text",
    PdfReplacement: "pdfReplacement",
    FileInfo: "fileInfo",
    Tags: "tags",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const FileEntityIdentifierObject = {
    Sha1: "sha1",
    InitiatingProcessSHA1: "initiatingProcessSHA1",
    Sha256: "sha256",
    InitiatingProcessSHA256: "initiatingProcessSHA256",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const FileHashAlgorithmObject = {
    Unknown: "unknown",
    Md5: "md5",
    Sha1: "sha1",
    Sha256: "sha256",
    Sha256ac: "sha256ac",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const FileProcessingStatusObject = {
    Success: "success",
    InternalError: "internalError",
    UnknownError: "unknownError",
    ProcessingTimeout: "processingTimeout",
    InvalidFileId: "invalidFileId",
    FileSizeIsZero: "fileSizeIsZero",
    FileSizeIsTooLarge: "fileSizeIsTooLarge",
    FileDepthLimitExceeded: "fileDepthLimitExceeded",
    FileBodyIsTooLong: "fileBodyIsTooLong",
    FileTypeIsUnknown: "fileTypeIsUnknown",
    FileTypeIsNotSupported: "fileTypeIsNotSupported",
    MalformedFile: "malformedFile",
    ProtectedFile: "protectedFile",
    PoisonFile: "poisonFile",
    NoReviewSetSummaryGenerated: "noReviewSetSummaryGenerated",
    ExtractionException: "extractionException",
    OcrProcessingTimeout: "ocrProcessingTimeout",
    OcrFileSizeExceedsLimit: "ocrFileSizeExceedsLimit",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const ForceUserPasswordResetEntityIdentifierObject = {
    AccountSid: "accountSid",
    InitiatingProcessAccountSid: "initiatingProcessAccountSid",
    RequestAccountSid: "requestAccountSid",
    OnPremSid: "onPremSid",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const GoogleCloudLocationTypeObject = {
    Unknown: "unknown",
    Regional: "regional",
    Zonal: "zonal",
    Global: "global",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const HostPortProtocolObject = {
    Tcp: "tcp",
    Udp: "udp",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const HostPortStatusObject = {
    Open: "open",
    Filtered: "filtered",
    Closed: "closed",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const HostReputationClassificationObject = {
    Unknown: "unknown",
    Neutral: "neutral",
    Suspicious: "suspicious",
    Malicious: "malicious",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const HostReputationRuleSeverityObject = {
    Unknown: "unknown",
    Low: "low",
    Medium: "medium",
    High: "high",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const HuntingRuleErrorCodeObject = {
    QueryExecutionFailed: "queryExecutionFailed",
    QueryExecutionThrottling: "queryExecutionThrottling",
    QueryExceededResultSize: "queryExceededResultSize",
    QueryLimitsExceeded: "queryLimitsExceeded",
    QueryTimeout: "queryTimeout",
    AlertCreationFailed: "alertCreationFailed",
    AlertReportNotFound: "alertReportNotFound",
    PartialRowsFailed: "partialRowsFailed",
    UnknownFutureValue: "unknownFutureValue",
    NoImpactedEntity: "noImpactedEntity",
}  as const;
export const HuntingRuleRunStatusObject = {
    Running: "running",
    Completed: "completed",
    Failed: "failed",
    PartiallyFailed: "partiallyFailed",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const IncidentStatusObject = {
    Active: "active",
    Resolved: "resolved",
    InProgress: "inProgress",
    Redirected: "redirected",
    UnknownFutureValue: "unknownFutureValue",
    AwaitingAction: "awaitingAction",
}  as const;
export const IndicatorSourceObject = {
    Microsoft: "microsoft",
    Osint: "osint",
    Public: "public",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const IntelligenceProfileKindObject = {
    Actor: "actor",
    Tool: "tool",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const IoTDeviceImportanceTypeObject = {
    Unknown: "unknown",
    Low: "low",
    Normal: "normal",
    High: "high",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const IsolationTypeObject = {
    Full: "full",
    Selective: "selective",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const KubernetesPlatformObject = {
    Unknown: "unknown",
    Aks: "aks",
    Eks: "eks",
    Gke: "gke",
    Arc: "arc",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const KubernetesServiceTypeObject = {
    Unknown: "unknown",
    ClusterIP: "clusterIP",
    ExternalName: "externalName",
    NodePort: "nodePort",
    LoadBalancer: "loadBalancer",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const LongRunningOperationStatusObject = {
    NotStarted: "notStarted",
    Running: "running",
    Succeeded: "succeeded",
    Failed: "failed",
    Skipped: "skipped",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const MailboxAssetIdentifierObject = {
    AccountUpn: "accountUpn",
    FileOwnerUpn: "fileOwnerUpn",
    InitiatingProcessAccountUpn: "initiatingProcessAccountUpn",
    LastModifyingAccountUpn: "lastModifyingAccountUpn",
    TargetAccountUpn: "targetAccountUpn",
    SenderFromAddress: "senderFromAddress",
    SenderDisplayName: "senderDisplayName",
    RecipientEmailAddress: "recipientEmailAddress",
    SenderMailFromAddress: "senderMailFromAddress",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const MarkUserAsCompromisedEntityIdentifierObject = {
    AccountObjectId: "accountObjectId",
    InitiatingProcessAccountObjectId: "initiatingProcessAccountObjectId",
    ServicePrincipalId: "servicePrincipalId",
    RecipientObjectId: "recipientObjectId",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const OnboardingStatusObject = {
    InsufficientInfo: "insufficientInfo",
    Onboarded: "onboarded",
    CanBeOnboarded: "canBeOnboarded",
    Unsupported: "unsupported",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const PolicyStatusObject = {
    Pending: "pending",
    ErrorEscaped: "error",
    Success: "success",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const ProtocolTypeObject = {
    Tcp: "tcp",
    Udp: "udp",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const PurgeAreasObject = {
    Mailboxes: "mailboxes",
    TeamsMessages: "teamsMessages",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const PurgeTypeObject = {
    Recoverable: "recoverable",
    PermanentlyDeleted: "permanentlyDeleted",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const QueryTypeObject = {
    Files: "files",
    Messages: "messages",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const RemediationActionObject = {
    MoveToJunk: "moveToJunk",
    MoveToInbox: "moveToInbox",
    HardDelete: "hardDelete",
    SoftDelete: "softDelete",
    MoveToDeletedItems: "moveToDeletedItems",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const RemediationSeverityObject = {
    Low: "low",
    Medium: "medium",
    High: "high",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const RetentionTriggerObject = {
    DateLabeled: "dateLabeled",
    DateCreated: "dateCreated",
    DateModified: "dateModified",
    DateOfEvent: "dateOfEvent",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const ScopeTypeObject = {
    DeviceGroup: "deviceGroup",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const ServicePrincipalTypeObject = {
    Unknown: "unknown",
    Application: "application",
    ManagedIdentity: "managedIdentity",
    Legacy: "legacy",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const ServiceSourceObject = {
    Unknown: "unknown",
    MicrosoftDefenderForEndpoint: "microsoftDefenderForEndpoint",
    MicrosoftDefenderForIdentity: "microsoftDefenderForIdentity",
    MicrosoftDefenderForCloudApps: "microsoftDefenderForCloudApps",
    MicrosoftDefenderForOffice365: "microsoftDefenderForOffice365",
    Microsoft365Defender: "microsoft365Defender",
    AzureAdIdentityProtection: "azureAdIdentityProtection",
    MicrosoftAppGovernance: "microsoftAppGovernance",
    DataLossPrevention: "dataLossPrevention",
    UnknownFutureValue: "unknownFutureValue",
    MicrosoftDefenderForCloud: "microsoftDefenderForCloud",
    MicrosoftSentinel: "microsoftSentinel",
}  as const;
export const SourceTypeObject = {
    Mailbox: "mailbox",
    Site: "site",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const StopAndQuarantineFileEntityIdentifierObject = {
    DeviceId: "deviceId",
    Sha1: "sha1",
    InitiatingProcessSHA1: "initiatingProcessSHA1",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const SubmissionCategoryObject = {
    NotJunk: "notJunk",
    Spam: "spam",
    Phishing: "phishing",
    Malware: "malware",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const SubmissionClientSourceObject = {
    Microsoft: "microsoft",
    Other: "other",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const SubmissionContentTypeObject = {
    Email: "email",
    Url: "url",
    File: "file",
    App: "app",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const SubmissionResultCategoryObject = {
    NotJunk: "notJunk",
    Spam: "spam",
    Phishing: "phishing",
    Malware: "malware",
    AllowedByPolicy: "allowedByPolicy",
    BlockedByPolicy: "blockedByPolicy",
    Spoof: "spoof",
    Unknown: "unknown",
    NoResultAvailable: "noResultAvailable",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const SubmissionResultDetailObject = {
    None: "none",
    UnderInvestigation: "underInvestigation",
    SimulatedThreat: "simulatedThreat",
    AllowedBySecOps: "allowedBySecOps",
    AllowedByThirdPartyFilters: "allowedByThirdPartyFilters",
    MessageNotFound: "messageNotFound",
    UrlFileShouldNotBeBlocked: "urlFileShouldNotBeBlocked",
    UrlFileShouldBeBlocked: "urlFileShouldBeBlocked",
    UrlFileCannotMakeDecision: "urlFileCannotMakeDecision",
    DomainImpersonation: "domainImpersonation",
    UserImpersonation: "userImpersonation",
    BrandImpersonation: "brandImpersonation",
    OutboundShouldNotBeBlocked: "outboundShouldNotBeBlocked",
    OutboundShouldBeBlocked: "outboundShouldBeBlocked",
    OutboundBulk: "outboundBulk",
    OutboundCannotMakeDecision: "outboundCannotMakeDecision",
    OutboundNotRescanned: "outboundNotRescanned",
    ZeroHourAutoPurgeAllowed: "zeroHourAutoPurgeAllowed",
    ZeroHourAutoPurgeBlocked: "zeroHourAutoPurgeBlocked",
    ZeroHourAutoPurgeQuarantineReleased: "zeroHourAutoPurgeQuarantineReleased",
    OnPremisesSkip: "onPremisesSkip",
    AllowedByTenantAllowBlockList: "allowedByTenantAllowBlockList",
    BlockedByTenantAllowBlockList: "blockedByTenantAllowBlockList",
    AllowedUrlByTenantAllowBlockList: "allowedUrlByTenantAllowBlockList",
    AllowedFileByTenantAllowBlockList: "allowedFileByTenantAllowBlockList",
    AllowedSenderByTenantAllowBlockList: "allowedSenderByTenantAllowBlockList",
    AllowedRecipientByTenantAllowBlockList: "allowedRecipientByTenantAllowBlockList",
    BlockedUrlByTenantAllowBlockList: "blockedUrlByTenantAllowBlockList",
    BlockedFileByTenantAllowBlockList: "blockedFileByTenantAllowBlockList",
    BlockedSenderByTenantAllowBlockList: "blockedSenderByTenantAllowBlockList",
    BlockedRecipientByTenantAllowBlockList: "blockedRecipientByTenantAllowBlockList",
    AllowedByConnection: "allowedByConnection",
    BlockedByConnection: "blockedByConnection",
    AllowedByExchangeTransportRule: "allowedByExchangeTransportRule",
    BlockedByExchangeTransportRule: "blockedByExchangeTransportRule",
    QuarantineReleased: "quarantineReleased",
    QuarantineReleasedThenBlocked: "quarantineReleasedThenBlocked",
    JunkMailRuleDisabled: "junkMailRuleDisabled",
    AllowedByUserSetting: "allowedByUserSetting",
    BlockedByUserSetting: "blockedByUserSetting",
    AllowedByTenant: "allowedByTenant",
    BlockedByTenant: "blockedByTenant",
    InvalidFalsePositive: "invalidFalsePositive",
    InvalidFalseNegative: "invalidFalseNegative",
    SpoofBlocked: "spoofBlocked",
    GoodReclassifiedAsBad: "goodReclassifiedAsBad",
    GoodReclassifiedAsBulk: "goodReclassifiedAsBulk",
    GoodReclassifiedAsGood: "goodReclassifiedAsGood",
    GoodReclassifiedAsCannotMakeDecision: "goodReclassifiedAsCannotMakeDecision",
    BadReclassifiedAsGood: "badReclassifiedAsGood",
    BadReclassifiedAsBulk: "badReclassifiedAsBulk",
    BadReclassifiedAsBad: "badReclassifiedAsBad",
    BadReclassifiedAsCannotMakeDecision: "badReclassifiedAsCannotMakeDecision",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const SubmissionSourceObject = {
    User: "user",
    Administrator: "administrator",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const TenantAllowBlockListActionObject = {
    Allow: "allow",
    Block: "block",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const TenantAllowBlockListEntryTypeObject = {
    Url: "url",
    FileHash: "fileHash",
    Sender: "sender",
    Recipient: "recipient",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const ThreatTypeObject = {
    Unknown: "unknown",
    Spam: "spam",
    Malware: "malware",
    Phishing: "phishing",
    None: "none",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const UserAssetIdentifierObject = {
    AccountObjectId: "accountObjectId",
    AccountSid: "accountSid",
    AccountUpn: "accountUpn",
    AccountName: "accountName",
    AccountDomain: "accountDomain",
    AccountId: "accountId",
    RequestAccountSid: "requestAccountSid",
    RequestAccountName: "requestAccountName",
    RequestAccountDomain: "requestAccountDomain",
    RecipientObjectId: "recipientObjectId",
    ProcessAccountObjectId: "processAccountObjectId",
    InitiatingAccountSid: "initiatingAccountSid",
    InitiatingProcessAccountUpn: "initiatingProcessAccountUpn",
    InitiatingAccountName: "initiatingAccountName",
    InitiatingAccountDomain: "initiatingAccountDomain",
    ServicePrincipalId: "servicePrincipalId",
    ServicePrincipalName: "servicePrincipalName",
    TargetAccountUpn: "targetAccountUpn",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const UserMailboxSettingObject = {
    None: "none",
    JunkMailDeletion: "junkMailDeletion",
    IsFromAddressInAddressBook: "isFromAddressInAddressBook",
    IsFromAddressInAddressSafeList: "isFromAddressInAddressSafeList",
    IsFromAddressInAddressBlockList: "isFromAddressInAddressBlockList",
    IsFromAddressInAddressImplicitSafeList: "isFromAddressInAddressImplicitSafeList",
    IsFromAddressInAddressImplicitJunkList: "isFromAddressInAddressImplicitJunkList",
    IsFromDomainInDomainSafeList: "isFromDomainInDomainSafeList",
    IsFromDomainInDomainBlockList: "isFromDomainInDomainBlockList",
    IsRecipientInRecipientSafeList: "isRecipientInRecipientSafeList",
    CustomRule: "customRule",
    JunkMailRule: "junkMailRule",
    SenderPraPresent: "senderPraPresent",
    FromFirstTimeSender: "fromFirstTimeSender",
    Exclusive: "exclusive",
    PriorSeenPass: "priorSeenPass",
    SenderAuthenticationSucceeded: "senderAuthenticationSucceeded",
    IsJunkMailRuleEnabled: "isJunkMailRuleEnabled",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const VmCloudProviderObject = {
    Unknown: "unknown",
    Azure: "azure",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const VulnerabilitySeverityObject = {
    None: "none",
    Low: "low",
    Medium: "medium",
    High: "high",
    Critical: "critical",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const WatermarkLayoutObject = {
    Horizontal: "horizontal",
    Diagonal: "diagonal",
}  as const;
/* tslint:enable */
/* eslint-enable */
