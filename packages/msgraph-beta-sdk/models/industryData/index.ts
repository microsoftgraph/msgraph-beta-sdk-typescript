/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createLongRunningOperationFromDiscriminatorValue, createPublicErrorFromDiscriminatorValue, deserializeIntoBaseCollectionPaginationCountResponse, deserializeIntoEntity, deserializeIntoLongRunningOperation, serializeBaseCollectionPaginationCountResponse, serializeEntity, serializeLongRunningOperation, serializePublicError, type BaseCollectionPaginationCountResponse, type Entity, type LongRunningOperation, type PublicError } from '../';
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type DateOnly, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AggregatedInboundStatistics extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The aggregate count of errors encountered by activities during this run.
     */
    errors?: number;
    /**
     * The aggregate count of active inbound groups processed during the run.
     */
    groups?: number;
    /**
     * The aggregate count of active people matched to a Microsoft Entra user, by role.
     */
    matchedPeopleByRole?: IndustryDataRunRoleCountMetric[];
    /**
     * The aggregate count of active inbound memberships processed during the run.
     */
    memberships?: number;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The aggregate count of active inbound organizations processed during the run.
     */
    organizations?: number;
    /**
     * The aggregate count of active inbound people processed during the run.
     */
    people?: number;
    /**
     * The aggregate count of active people not matched to a Microsoft Entra user, by role.
     */
    unmatchedPeopleByRole?: IndustryDataRunRoleCountMetric[];
    /**
     * The aggregate count of warnings generated by activities during this run.
     */
    warnings?: number;
}
export interface AzureDataLakeConnector extends FileDataConnector, Parsable {
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AggregatedInboundStatistics}
 */
export function createAggregatedInboundStatisticsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAggregatedInboundStatistics;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AzureDataLakeConnector}
 */
export function createAzureDataLakeConnectorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAzureDataLakeConnector;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {FileDataConnector}
 */
export function createFileDataConnectorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.industryData.azureDataLakeConnector":
                    return deserializeIntoAzureDataLakeConnector;
            }
        }
    }
    return deserializeIntoFileDataConnector;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {FileValidateOperation}
 */
export function createFileValidateOperationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoFileValidateOperation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {IdentifierTypeReferenceValue}
 */
export function createIdentifierTypeReferenceValueFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoIdentifierTypeReferenceValue;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {InboundActivityResults}
 */
export function createInboundActivityResultsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoInboundActivityResults;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {InboundFileFlow}
 */
export function createInboundFileFlowFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoInboundFileFlow;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {InboundFlowActivity}
 */
export function createInboundFlowActivityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoInboundFlowActivity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {InboundFlowCollectionResponse}
 */
export function createInboundFlowCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoInboundFlowCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {InboundFlow}
 */
export function createInboundFlowFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.industryData.inboundFileFlow":
                    return deserializeIntoInboundFileFlow;
            }
        }
    }
    return deserializeIntoInboundFlow;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {IndustryDataActivity}
 */
export function createIndustryDataActivityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.industryData.inboundFileFlow":
                    return deserializeIntoInboundFileFlow;
                case "#microsoft.graph.industryData.inboundFlow":
                    return deserializeIntoInboundFlow;
            }
        }
    }
    return deserializeIntoIndustryDataActivity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {IndustryDataActivityStatistics}
 */
export function createIndustryDataActivityStatisticsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.industryData.inboundActivityResults":
                    return deserializeIntoInboundActivityResults;
            }
        }
    }
    return deserializeIntoIndustryDataActivityStatistics;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {IndustryDataConnectorCollectionResponse}
 */
export function createIndustryDataConnectorCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoIndustryDataConnectorCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {IndustryDataConnector}
 */
export function createIndustryDataConnectorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.industryData.azureDataLakeConnector":
                    return deserializeIntoAzureDataLakeConnector;
                case "#microsoft.graph.industryData.fileDataConnector":
                    return deserializeIntoFileDataConnector;
            }
        }
    }
    return deserializeIntoIndustryDataConnector;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {IndustryDataRoot}
 */
export function createIndustryDataRootFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoIndustryDataRoot;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {IndustryDataRunActivityCollectionResponse}
 */
export function createIndustryDataRunActivityCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoIndustryDataRunActivityCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {IndustryDataRunActivity}
 */
export function createIndustryDataRunActivityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.industryData.inboundFlowActivity":
                    return deserializeIntoInboundFlowActivity;
                case "#microsoft.graph.industryData.outboundFlowActivity":
                    return deserializeIntoOutboundFlowActivity;
            }
        }
    }
    return deserializeIntoIndustryDataRunActivity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {IndustryDataRunCollectionResponse}
 */
export function createIndustryDataRunCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoIndustryDataRunCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {IndustryDataRunEntityCountMetric}
 */
export function createIndustryDataRunEntityCountMetricFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoIndustryDataRunEntityCountMetric;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {IndustryDataRun}
 */
export function createIndustryDataRunFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoIndustryDataRun;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {IndustryDataRunRoleCountMetric}
 */
export function createIndustryDataRunRoleCountMetricFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoIndustryDataRunRoleCountMetric;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {IndustryDataRunStatistics}
 */
export function createIndustryDataRunStatisticsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoIndustryDataRunStatistics;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {OutboundFlowActivity}
 */
export function createOutboundFlowActivityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoOutboundFlowActivity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ReferenceDefinitionCollectionResponse}
 */
export function createReferenceDefinitionCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoReferenceDefinitionCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ReferenceDefinition}
 */
export function createReferenceDefinitionFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoReferenceDefinition;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ReferenceValue}
 */
export function createReferenceValueFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.industryData.identifierTypeReferenceValue":
                    return deserializeIntoIdentifierTypeReferenceValue;
                case "#microsoft.graph.industryData.roleReferenceValue":
                    return deserializeIntoRoleReferenceValue;
                case "#microsoft.graph.industryData.userMatchTargetReferenceValue":
                    return deserializeIntoUserMatchTargetReferenceValue;
                case "#microsoft.graph.industryData.yearReferenceValue":
                    return deserializeIntoYearReferenceValue;
            }
        }
    }
    return deserializeIntoReferenceValue;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RoleGroupCollectionResponse}
 */
export function createRoleGroupCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRoleGroupCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RoleGroup}
 */
export function createRoleGroupFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRoleGroup;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RoleReferenceValue}
 */
export function createRoleReferenceValueFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRoleReferenceValue;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SourceSystemDefinitionCollectionResponse}
 */
export function createSourceSystemDefinitionCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSourceSystemDefinitionCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SourceSystemDefinition}
 */
export function createSourceSystemDefinitionFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSourceSystemDefinition;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UserMatchingSetting}
 */
export function createUserMatchingSettingFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUserMatchingSetting;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UserMatchTargetReferenceValue}
 */
export function createUserMatchTargetReferenceValueFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUserMatchTargetReferenceValue;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ValidateOperation}
 */
export function createValidateOperationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.industryData.fileValidateOperation":
                    return deserializeIntoFileValidateOperation;
            }
        }
    }
    return deserializeIntoValidateOperation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {YearReferenceValue}
 */
export function createYearReferenceValueFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoYearReferenceValue;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {YearTimePeriodDefinitionCollectionResponse}
 */
export function createYearTimePeriodDefinitionCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoYearTimePeriodDefinitionCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {YearTimePeriodDefinition}
 */
export function createYearTimePeriodDefinitionFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoYearTimePeriodDefinition;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoAggregatedInboundStatistics(aggregatedInboundStatistics: Partial<AggregatedInboundStatistics> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { aggregatedInboundStatistics.backingStoreEnabled = true; },
        "errors": n => { aggregatedInboundStatistics.errors = n.getNumberValue(); },
        "groups": n => { aggregatedInboundStatistics.groups = n.getNumberValue(); },
        "matchedPeopleByRole": n => { aggregatedInboundStatistics.matchedPeopleByRole = n.getCollectionOfObjectValues<IndustryDataRunRoleCountMetric>(createIndustryDataRunRoleCountMetricFromDiscriminatorValue); },
        "memberships": n => { aggregatedInboundStatistics.memberships = n.getNumberValue(); },
        "@odata.type": n => { aggregatedInboundStatistics.odataType = n.getStringValue(); },
        "organizations": n => { aggregatedInboundStatistics.organizations = n.getNumberValue(); },
        "people": n => { aggregatedInboundStatistics.people = n.getNumberValue(); },
        "unmatchedPeopleByRole": n => { aggregatedInboundStatistics.unmatchedPeopleByRole = n.getCollectionOfObjectValues<IndustryDataRunRoleCountMetric>(createIndustryDataRunRoleCountMetricFromDiscriminatorValue); },
        "warnings": n => { aggregatedInboundStatistics.warnings = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoAzureDataLakeConnector(azureDataLakeConnector: Partial<AzureDataLakeConnector> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoFileDataConnector(azureDataLakeConnector),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoFileDataConnector(fileDataConnector: Partial<FileDataConnector> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIndustryDataConnector(fileDataConnector),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoFileValidateOperation(fileValidateOperation: Partial<FileValidateOperation> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoValidateOperation(fileValidateOperation),
        "validatedFiles": n => { fileValidateOperation.validatedFiles = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoIdentifierTypeReferenceValue(identifierTypeReferenceValue: Partial<IdentifierTypeReferenceValue> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoReferenceValue(identifierTypeReferenceValue),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoInboundActivityResults(inboundActivityResults: Partial<InboundActivityResults> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIndustryDataActivityStatistics(inboundActivityResults),
        "errors": n => { inboundActivityResults.errors = n.getNumberValue(); },
        "groups": n => { inboundActivityResults.groups = n.getObjectValue<IndustryDataRunEntityCountMetric>(createIndustryDataRunEntityCountMetricFromDiscriminatorValue); },
        "matchedPeopleByRole": n => { inboundActivityResults.matchedPeopleByRole = n.getCollectionOfObjectValues<IndustryDataRunRoleCountMetric>(createIndustryDataRunRoleCountMetricFromDiscriminatorValue); },
        "memberships": n => { inboundActivityResults.memberships = n.getObjectValue<IndustryDataRunEntityCountMetric>(createIndustryDataRunEntityCountMetricFromDiscriminatorValue); },
        "organizations": n => { inboundActivityResults.organizations = n.getObjectValue<IndustryDataRunEntityCountMetric>(createIndustryDataRunEntityCountMetricFromDiscriminatorValue); },
        "people": n => { inboundActivityResults.people = n.getObjectValue<IndustryDataRunEntityCountMetric>(createIndustryDataRunEntityCountMetricFromDiscriminatorValue); },
        "unmatchedPeopleByRole": n => { inboundActivityResults.unmatchedPeopleByRole = n.getCollectionOfObjectValues<IndustryDataRunRoleCountMetric>(createIndustryDataRunRoleCountMetricFromDiscriminatorValue); },
        "warnings": n => { inboundActivityResults.warnings = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoInboundFileFlow(inboundFileFlow: Partial<InboundFileFlow> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoInboundFlow(inboundFileFlow),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoInboundFlow(inboundFlow: Partial<InboundFlow> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIndustryDataActivity(inboundFlow),
        "dataConnector": n => { inboundFlow.dataConnector = n.getObjectValue<IndustryDataConnector>(createIndustryDataConnectorFromDiscriminatorValue); },
        "dataDomain": n => { inboundFlow.dataDomain = n.getEnumValue<InboundDomain>(InboundDomainObject); },
        "effectiveDateTime": n => { inboundFlow.effectiveDateTime = n.getDateValue(); },
        "expirationDateTime": n => { inboundFlow.expirationDateTime = n.getDateValue(); },
        "year": n => { inboundFlow.year = n.getObjectValue<YearTimePeriodDefinition>(createYearTimePeriodDefinitionFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoInboundFlowActivity(inboundFlowActivity: Partial<InboundFlowActivity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIndustryDataRunActivity(inboundFlowActivity),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoInboundFlowCollectionResponse(inboundFlowCollectionResponse: Partial<InboundFlowCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(inboundFlowCollectionResponse),
        "value": n => { inboundFlowCollectionResponse.value = n.getCollectionOfObjectValues<InboundFlow>(createInboundFlowFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoIndustryDataActivity(industryDataActivity: Partial<IndustryDataActivity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(industryDataActivity),
        "displayName": n => { industryDataActivity.displayName = n.getStringValue(); },
        "readinessStatus": n => { industryDataActivity.readinessStatus = n.getEnumValue<ReadinessStatus>(ReadinessStatusObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoIndustryDataActivityStatistics(industryDataActivityStatistics: Partial<IndustryDataActivityStatistics> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "activityId": n => { industryDataActivityStatistics.activityId = n.getStringValue(); },
        "backingStoreEnabled": n => { industryDataActivityStatistics.backingStoreEnabled = true; },
        "displayName": n => { industryDataActivityStatistics.displayName = n.getStringValue(); },
        "@odata.type": n => { industryDataActivityStatistics.odataType = n.getStringValue(); },
        "status": n => { industryDataActivityStatistics.status = n.getEnumValue<IndustryDataActivityStatus>(IndustryDataActivityStatusObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoIndustryDataConnector(industryDataConnector: Partial<IndustryDataConnector> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(industryDataConnector),
        "displayName": n => { industryDataConnector.displayName = n.getStringValue(); },
        "sourceSystem": n => { industryDataConnector.sourceSystem = n.getObjectValue<SourceSystemDefinition>(createSourceSystemDefinitionFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoIndustryDataConnectorCollectionResponse(industryDataConnectorCollectionResponse: Partial<IndustryDataConnectorCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(industryDataConnectorCollectionResponse),
        "value": n => { industryDataConnectorCollectionResponse.value = n.getCollectionOfObjectValues<IndustryDataConnector>(createIndustryDataConnectorFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoIndustryDataRoot(industryDataRoot: Partial<IndustryDataRoot> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(industryDataRoot),
        "dataConnectors": n => { industryDataRoot.dataConnectors = n.getCollectionOfObjectValues<IndustryDataConnector>(createIndustryDataConnectorFromDiscriminatorValue); },
        "inboundFlows": n => { industryDataRoot.inboundFlows = n.getCollectionOfObjectValues<InboundFlow>(createInboundFlowFromDiscriminatorValue); },
        "operations": n => { industryDataRoot.operations = n.getCollectionOfObjectValues<LongRunningOperation>(createLongRunningOperationFromDiscriminatorValue); },
        "referenceDefinitions": n => { industryDataRoot.referenceDefinitions = n.getCollectionOfObjectValues<ReferenceDefinition>(createReferenceDefinitionFromDiscriminatorValue); },
        "roleGroups": n => { industryDataRoot.roleGroups = n.getCollectionOfObjectValues<RoleGroup>(createRoleGroupFromDiscriminatorValue); },
        "runs": n => { industryDataRoot.runs = n.getCollectionOfObjectValues<IndustryDataRun>(createIndustryDataRunFromDiscriminatorValue); },
        "sourceSystems": n => { industryDataRoot.sourceSystems = n.getCollectionOfObjectValues<SourceSystemDefinition>(createSourceSystemDefinitionFromDiscriminatorValue); },
        "years": n => { industryDataRoot.years = n.getCollectionOfObjectValues<YearTimePeriodDefinition>(createYearTimePeriodDefinitionFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoIndustryDataRun(industryDataRun: Partial<IndustryDataRun> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(industryDataRun),
        "activities": n => { industryDataRun.activities = n.getCollectionOfObjectValues<IndustryDataRunActivity>(createIndustryDataRunActivityFromDiscriminatorValue); },
        "blockingError": n => { industryDataRun.blockingError = n.getObjectValue<PublicError>(createPublicErrorFromDiscriminatorValue); },
        "displayName": n => { industryDataRun.displayName = n.getStringValue(); },
        "endDateTime": n => { industryDataRun.endDateTime = n.getDateValue(); },
        "startDateTime": n => { industryDataRun.startDateTime = n.getDateValue(); },
        "status": n => { industryDataRun.status = n.getEnumValue<IndustryDataRunStatus>(IndustryDataRunStatusObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoIndustryDataRunActivity(industryDataRunActivity: Partial<IndustryDataRunActivity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(industryDataRunActivity),
        "activity": n => { industryDataRunActivity.activity = n.getObjectValue<IndustryDataActivity>(createIndustryDataActivityFromDiscriminatorValue); },
        "blockingError": n => { industryDataRunActivity.blockingError = n.getObjectValue<PublicError>(createPublicErrorFromDiscriminatorValue); },
        "displayName": n => { industryDataRunActivity.displayName = n.getStringValue(); },
        "status": n => { industryDataRunActivity.status = n.getEnumValue<IndustryDataActivityStatus>(IndustryDataActivityStatusObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoIndustryDataRunActivityCollectionResponse(industryDataRunActivityCollectionResponse: Partial<IndustryDataRunActivityCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(industryDataRunActivityCollectionResponse),
        "value": n => { industryDataRunActivityCollectionResponse.value = n.getCollectionOfObjectValues<IndustryDataRunActivity>(createIndustryDataRunActivityFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoIndustryDataRunCollectionResponse(industryDataRunCollectionResponse: Partial<IndustryDataRunCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(industryDataRunCollectionResponse),
        "value": n => { industryDataRunCollectionResponse.value = n.getCollectionOfObjectValues<IndustryDataRun>(createIndustryDataRunFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoIndustryDataRunEntityCountMetric(industryDataRunEntityCountMetric: Partial<IndustryDataRunEntityCountMetric> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "active": n => { industryDataRunEntityCountMetric.active = n.getNumberValue(); },
        "backingStoreEnabled": n => { industryDataRunEntityCountMetric.backingStoreEnabled = true; },
        "inactive": n => { industryDataRunEntityCountMetric.inactive = n.getNumberValue(); },
        "@odata.type": n => { industryDataRunEntityCountMetric.odataType = n.getStringValue(); },
        "total": n => { industryDataRunEntityCountMetric.total = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoIndustryDataRunRoleCountMetric(industryDataRunRoleCountMetric: Partial<IndustryDataRunRoleCountMetric> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { industryDataRunRoleCountMetric.backingStoreEnabled = true; },
        "count": n => { industryDataRunRoleCountMetric.count = n.getNumberValue(); },
        "@odata.type": n => { industryDataRunRoleCountMetric.odataType = n.getStringValue(); },
        "role": n => { industryDataRunRoleCountMetric.role = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoIndustryDataRunStatistics(industryDataRunStatistics: Partial<IndustryDataRunStatistics> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "activityStatistics": n => { industryDataRunStatistics.activityStatistics = n.getCollectionOfObjectValues<IndustryDataActivityStatistics>(createIndustryDataActivityStatisticsFromDiscriminatorValue); },
        "backingStoreEnabled": n => { industryDataRunStatistics.backingStoreEnabled = true; },
        "inboundTotals": n => { industryDataRunStatistics.inboundTotals = n.getObjectValue<AggregatedInboundStatistics>(createAggregatedInboundStatisticsFromDiscriminatorValue); },
        "@odata.type": n => { industryDataRunStatistics.odataType = n.getStringValue(); },
        "runId": n => { industryDataRunStatistics.runId = n.getStringValue(); },
        "status": n => { industryDataRunStatistics.status = n.getEnumValue<IndustryDataRunStatus>(IndustryDataRunStatusObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoOutboundFlowActivity(outboundFlowActivity: Partial<OutboundFlowActivity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIndustryDataRunActivity(outboundFlowActivity),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoReferenceDefinition(referenceDefinition: Partial<ReferenceDefinition> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(referenceDefinition),
        "code": n => { referenceDefinition.code = n.getStringValue(); },
        "createdDateTime": n => { referenceDefinition.createdDateTime = n.getDateValue(); },
        "isDisabled": n => { referenceDefinition.isDisabled = n.getBooleanValue(); },
        "lastModifiedDateTime": n => { referenceDefinition.lastModifiedDateTime = n.getDateValue(); },
        "referenceType": n => { referenceDefinition.referenceType = n.getStringValue(); },
        "sortIndex": n => { referenceDefinition.sortIndex = n.getNumberValue(); },
        "source": n => { referenceDefinition.source = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoReferenceDefinitionCollectionResponse(referenceDefinitionCollectionResponse: Partial<ReferenceDefinitionCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(referenceDefinitionCollectionResponse),
        "value": n => { referenceDefinitionCollectionResponse.value = n.getCollectionOfObjectValues<ReferenceDefinition>(createReferenceDefinitionFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoReferenceValue(referenceValue: Partial<ReferenceValue> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { referenceValue.backingStoreEnabled = true; },
        "code": n => { referenceValue.code = n.getStringValue(); },
        "@odata.type": n => { referenceValue.odataType = n.getStringValue(); },
        "value": n => { referenceValue.value = n.getObjectValue<ReferenceDefinition>(createReferenceDefinitionFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoRoleGroup(roleGroup: Partial<RoleGroup> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(roleGroup),
        "displayName": n => { roleGroup.displayName = n.getStringValue(); },
        "roles": n => { roleGroup.roles = n.getCollectionOfObjectValues<RoleReferenceValue>(createRoleReferenceValueFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoRoleGroupCollectionResponse(roleGroupCollectionResponse: Partial<RoleGroupCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(roleGroupCollectionResponse),
        "value": n => { roleGroupCollectionResponse.value = n.getCollectionOfObjectValues<RoleGroup>(createRoleGroupFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoRoleReferenceValue(roleReferenceValue: Partial<RoleReferenceValue> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoReferenceValue(roleReferenceValue),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoSourceSystemDefinition(sourceSystemDefinition: Partial<SourceSystemDefinition> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(sourceSystemDefinition),
        "displayName": n => { sourceSystemDefinition.displayName = n.getStringValue(); },
        "userMatchingSettings": n => { sourceSystemDefinition.userMatchingSettings = n.getCollectionOfObjectValues<UserMatchingSetting>(createUserMatchingSettingFromDiscriminatorValue); },
        "vendor": n => { sourceSystemDefinition.vendor = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoSourceSystemDefinitionCollectionResponse(sourceSystemDefinitionCollectionResponse: Partial<SourceSystemDefinitionCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(sourceSystemDefinitionCollectionResponse),
        "value": n => { sourceSystemDefinitionCollectionResponse.value = n.getCollectionOfObjectValues<SourceSystemDefinition>(createSourceSystemDefinitionFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoUserMatchingSetting(userMatchingSetting: Partial<UserMatchingSetting> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { userMatchingSetting.backingStoreEnabled = true; },
        "matchTarget": n => { userMatchingSetting.matchTarget = n.getObjectValue<UserMatchTargetReferenceValue>(createUserMatchTargetReferenceValueFromDiscriminatorValue); },
        "@odata.type": n => { userMatchingSetting.odataType = n.getStringValue(); },
        "priorityOrder": n => { userMatchingSetting.priorityOrder = n.getNumberValue(); },
        "roleGroup": n => { userMatchingSetting.roleGroup = n.getObjectValue<RoleGroup>(createRoleGroupFromDiscriminatorValue); },
        "sourceIdentifier": n => { userMatchingSetting.sourceIdentifier = n.getObjectValue<IdentifierTypeReferenceValue>(createIdentifierTypeReferenceValueFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoUserMatchTargetReferenceValue(userMatchTargetReferenceValue: Partial<UserMatchTargetReferenceValue> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoReferenceValue(userMatchTargetReferenceValue),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoValidateOperation(validateOperation: Partial<ValidateOperation> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoLongRunningOperation(validateOperation),
        "errors": n => { validateOperation.errors = n.getCollectionOfObjectValues<PublicError>(createPublicErrorFromDiscriminatorValue); },
        "warnings": n => { validateOperation.warnings = n.getCollectionOfObjectValues<PublicError>(createPublicErrorFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoYearReferenceValue(yearReferenceValue: Partial<YearReferenceValue> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoReferenceValue(yearReferenceValue),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoYearTimePeriodDefinition(yearTimePeriodDefinition: Partial<YearTimePeriodDefinition> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(yearTimePeriodDefinition),
        "displayName": n => { yearTimePeriodDefinition.displayName = n.getStringValue(); },
        "endDate": n => { yearTimePeriodDefinition.endDate = n.getDateOnlyValue(); },
        "startDate": n => { yearTimePeriodDefinition.startDate = n.getDateOnlyValue(); },
        "year": n => { yearTimePeriodDefinition.year = n.getObjectValue<YearReferenceValue>(createYearReferenceValueFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoYearTimePeriodDefinitionCollectionResponse(yearTimePeriodDefinitionCollectionResponse: Partial<YearTimePeriodDefinitionCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(yearTimePeriodDefinitionCollectionResponse),
        "value": n => { yearTimePeriodDefinitionCollectionResponse.value = n.getCollectionOfObjectValues<YearTimePeriodDefinition>(createYearTimePeriodDefinitionFromDiscriminatorValue); },
    }
}
export interface FileDataConnector extends IndustryDataConnector, Parsable {
}
export interface FileValidateOperation extends Parsable, ValidateOperation {
    /**
     * Set of files validated by the validate operation.
     */
    validatedFiles?: string[];
}
export interface IdentifierTypeReferenceValue extends Parsable, ReferenceValue {
}
export interface InboundActivityResults extends IndustryDataActivityStatistics, Parsable {
    /**
     * Number of errors encountered while processing the inbound flow.
     */
    errors?: number;
    /**
     * Counts of active and inactive groups processed by the inbound flow.
     */
    groups?: IndustryDataRunEntityCountMetric;
    /**
     * Number of people matched to a Microsoft Entra user, by role.
     */
    matchedPeopleByRole?: IndustryDataRunRoleCountMetric[];
    /**
     * Counts of active and inactive memberships processed by the inbound flow.
     */
    memberships?: IndustryDataRunEntityCountMetric;
    /**
     * Counts of active and inactive organizations processed by the inbound flow.
     */
    organizations?: IndustryDataRunEntityCountMetric;
    /**
     * Counts of active and inactive people processed by the inbound flow.
     */
    people?: IndustryDataRunEntityCountMetric;
    /**
     * Number of people not matched to a Microsoft Entra user, by role.
     */
    unmatchedPeopleByRole?: IndustryDataRunRoleCountMetric[];
    /**
     * Number of warnings encountered while processing the inbound flow.
     */
    warnings?: number;
}
export type InboundDomain = (typeof InboundDomainObject)[keyof typeof InboundDomainObject];
export interface InboundFileFlow extends InboundFlow, Parsable {
}
export interface InboundFlow extends IndustryDataActivity, Parsable {
    /**
     * The dataConnector property
     */
    dataConnector?: IndustryDataConnector;
    /**
     * The dataDomain property
     */
    dataDomain?: InboundDomain;
    /**
     * The start of the time window when the flow is allowed to run. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    effectiveDateTime?: Date;
    /**
     * The end of the time window when the flow is allowed to run. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    expirationDateTime?: Date;
    /**
     * The year property
     */
    year?: YearTimePeriodDefinition;
}
export interface InboundFlowActivity extends IndustryDataRunActivity, Parsable {
}
export interface InboundFlowCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: InboundFlow[];
}
export interface IndustryDataActivity extends Entity, Parsable {
    /**
     * The name of the activity. Maximum supported length is 100 characters.
     */
    displayName?: string;
    /**
     * The readinessStatus property
     */
    readinessStatus?: ReadinessStatus;
}
export interface IndustryDataActivityStatistics extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * The identifier for the activity that is being reported on.
     */
    activityId?: string;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The display name of the underlying flow.
     */
    displayName?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The status property
     */
    status?: IndustryDataActivityStatus;
}
export type IndustryDataActivityStatus = (typeof IndustryDataActivityStatusObject)[keyof typeof IndustryDataActivityStatusObject];
export interface IndustryDataConnector extends Entity, Parsable {
    /**
     * The name of the data connector. Maximum supported length is 100 characters.
     */
    displayName?: string;
    /**
     * The sourceSystem property
     */
    sourceSystem?: SourceSystemDefinition;
}
export interface IndustryDataConnectorCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: IndustryDataConnector[];
}
export interface IndustryDataRoot extends Entity, Parsable {
    /**
     * Set of connectors for importing data from source systems.
     */
    dataConnectors?: IndustryDataConnector[];
    /**
     * Set of data import flow activities to bring data into the canonical store via a connector.
     */
    inboundFlows?: InboundFlow[];
    /**
     * Set of ephemeral operations that the system runs currently. Read-only.
     */
    operations?: LongRunningOperation[];
    /**
     * Set of user modifiable system picker types.
     */
    referenceDefinitions?: ReferenceDefinition[];
    /**
     * Set of groups of individual roles that makes role-based admin simpler.
     */
    roleGroups?: RoleGroup[];
    /**
     * Set of ephemeral runs which present the point-in-time that diagnostic state of activities performed by the system. Read-only.
     */
    runs?: IndustryDataRun[];
    /**
     * Set of source definitions that represents real-world external systems.
     */
    sourceSystems?: SourceSystemDefinition[];
    /**
     * Set of years represented in the system.
     */
    years?: YearTimePeriodDefinition[];
}
export interface IndustryDataRun extends Entity, Parsable {
    /**
     * The set of activities performed during the run.
     */
    activities?: IndustryDataRunActivity[];
    /**
     * An error object to diagnose critical failures in the run.
     */
    blockingError?: PublicError;
    /**
     * The name of the run for rendering in a user interface.
     */
    displayName?: string;
    /**
     * The date and time when the run finished or null if the run is still in-progress. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    endDateTime?: Date;
    /**
     * The date and time when the run started. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    startDateTime?: Date;
    /**
     * The status property
     */
    status?: IndustryDataRunStatus;
}
export interface IndustryDataRunActivity extends Entity, Parsable {
    /**
     * The flow that was run by this activity.
     */
    activity?: IndustryDataActivity;
    /**
     * An error object to diagnose critical failures in an activity.
     */
    blockingError?: PublicError;
    /**
     * The name of the running flow.
     */
    displayName?: string;
    /**
     * The status property
     */
    status?: IndustryDataActivityStatus;
}
export interface IndustryDataRunActivityCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: IndustryDataRunActivity[];
}
export interface IndustryDataRunCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: IndustryDataRun[];
}
export interface IndustryDataRunEntityCountMetric extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * The count of entries for the entity marked as Active.
     */
    active?: number;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The count of entries for the entity marked as Inactive.
     */
    inactive?: number;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Total count of the entity.
     */
    total?: number;
}
export interface IndustryDataRunRoleCountMetric extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The number of people in this role.
     */
    count?: number;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The role that is being measured.
     */
    role?: string;
}
export interface IndustryDataRunStatistics extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * The collection of statistics for each activity included in this run.
     */
    activityStatistics?: IndustryDataActivityStatistics[];
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The aggregate statistics for all inbound flows.
     */
    inboundTotals?: AggregatedInboundStatistics;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The ID of the underlying run for the statistics.
     */
    runId?: string;
    /**
     * The status property
     */
    status?: IndustryDataRunStatus;
}
export type IndustryDataRunStatus = (typeof IndustryDataRunStatusObject)[keyof typeof IndustryDataRunStatusObject];
export interface OutboundFlowActivity extends IndustryDataRunActivity, Parsable {
}
export type ReadinessStatus = (typeof ReadinessStatusObject)[keyof typeof ReadinessStatusObject];
export interface ReferenceDefinition extends Entity, Parsable {
    /**
     * The code value for the definition that must be unique within the referenceType.
     */
    code?: string;
    /**
     * The date and time when the definition was created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    createdDateTime?: Date;
    /**
     * Indicates whether the definition has been disabled.
     */
    isDisabled?: boolean;
    /**
     * The date and time when the definition was most recently changed. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    lastModifiedDateTime?: Date;
    /**
     * The categorical type for a collection of enumerated values.
     */
    referenceType?: string;
    /**
     * The ordering index to present the definitions within a type consistently in user interfaces.
     */
    sortIndex?: number;
    /**
     * The standards body or organization source which defined the code.
     */
    source?: string;
}
export interface ReferenceDefinitionCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: ReferenceDefinition[];
}
export interface ReferenceValue extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The code of the desired referenceDefinition entry.
     */
    code?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The value property
     */
    value?: ReferenceDefinition;
}
export interface RoleGroup extends Entity, Parsable {
    /**
     * The name of the role group.
     */
    displayName?: string;
    /**
     * The set of roles included in the role group.
     */
    roles?: RoleReferenceValue[];
}
export interface RoleGroupCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: RoleGroup[];
}
export interface RoleReferenceValue extends Parsable, ReferenceValue {
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAggregatedInboundStatistics(writer: SerializationWriter, aggregatedInboundStatistics: Partial<AggregatedInboundStatistics> | undefined = {}) : void {
    writer.writeStringValue("@odata.type", aggregatedInboundStatistics.odataType);
    writer.writeAdditionalData(aggregatedInboundStatistics.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAzureDataLakeConnector(writer: SerializationWriter, azureDataLakeConnector: Partial<AzureDataLakeConnector> | undefined = {}) : void {
    serializeFileDataConnector(writer, azureDataLakeConnector)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeFileDataConnector(writer: SerializationWriter, fileDataConnector: Partial<FileDataConnector> | undefined = {}) : void {
    serializeIndustryDataConnector(writer, fileDataConnector)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeFileValidateOperation(writer: SerializationWriter, fileValidateOperation: Partial<FileValidateOperation> | undefined = {}) : void {
    serializeValidateOperation(writer, fileValidateOperation)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeIdentifierTypeReferenceValue(writer: SerializationWriter, identifierTypeReferenceValue: Partial<IdentifierTypeReferenceValue> | undefined = {}) : void {
    serializeReferenceValue(writer, identifierTypeReferenceValue)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeInboundActivityResults(writer: SerializationWriter, inboundActivityResults: Partial<InboundActivityResults> | undefined = {}) : void {
    serializeIndustryDataActivityStatistics(writer, inboundActivityResults)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeInboundFileFlow(writer: SerializationWriter, inboundFileFlow: Partial<InboundFileFlow> | undefined = {}) : void {
    serializeInboundFlow(writer, inboundFileFlow)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeInboundFlow(writer: SerializationWriter, inboundFlow: Partial<InboundFlow> | undefined = {}) : void {
    serializeIndustryDataActivity(writer, inboundFlow)
    writer.writeObjectValue<IndustryDataConnector>("dataConnector", inboundFlow.dataConnector, serializeIndustryDataConnector);
    writer.writeEnumValue<InboundDomain>("dataDomain", inboundFlow.dataDomain);
    writer.writeDateValue("effectiveDateTime", inboundFlow.effectiveDateTime);
    writer.writeDateValue("expirationDateTime", inboundFlow.expirationDateTime);
    writer.writeObjectValue<YearTimePeriodDefinition>("year", inboundFlow.year, serializeYearTimePeriodDefinition);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeInboundFlowActivity(writer: SerializationWriter, inboundFlowActivity: Partial<InboundFlowActivity> | undefined = {}) : void {
    serializeIndustryDataRunActivity(writer, inboundFlowActivity)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeInboundFlowCollectionResponse(writer: SerializationWriter, inboundFlowCollectionResponse: Partial<InboundFlowCollectionResponse> | undefined = {}) : void {
    serializeBaseCollectionPaginationCountResponse(writer, inboundFlowCollectionResponse)
    writer.writeCollectionOfObjectValues<InboundFlow>("value", inboundFlowCollectionResponse.value, serializeInboundFlow);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeIndustryDataActivity(writer: SerializationWriter, industryDataActivity: Partial<IndustryDataActivity> | undefined = {}) : void {
    serializeEntity(writer, industryDataActivity)
    writer.writeStringValue("displayName", industryDataActivity.displayName);
    writer.writeEnumValue<ReadinessStatus>("readinessStatus", industryDataActivity.readinessStatus);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeIndustryDataActivityStatistics(writer: SerializationWriter, industryDataActivityStatistics: Partial<IndustryDataActivityStatistics> | undefined = {}) : void {
    writer.writeStringValue("@odata.type", industryDataActivityStatistics.odataType);
    writer.writeEnumValue<IndustryDataActivityStatus>("status", industryDataActivityStatistics.status);
    writer.writeAdditionalData(industryDataActivityStatistics.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeIndustryDataConnector(writer: SerializationWriter, industryDataConnector: Partial<IndustryDataConnector> | undefined = {}) : void {
    serializeEntity(writer, industryDataConnector)
    writer.writeStringValue("displayName", industryDataConnector.displayName);
    writer.writeObjectValue<SourceSystemDefinition>("sourceSystem", industryDataConnector.sourceSystem, serializeSourceSystemDefinition);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeIndustryDataConnectorCollectionResponse(writer: SerializationWriter, industryDataConnectorCollectionResponse: Partial<IndustryDataConnectorCollectionResponse> | undefined = {}) : void {
    serializeBaseCollectionPaginationCountResponse(writer, industryDataConnectorCollectionResponse)
    writer.writeCollectionOfObjectValues<IndustryDataConnector>("value", industryDataConnectorCollectionResponse.value, serializeIndustryDataConnector);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeIndustryDataRoot(writer: SerializationWriter, industryDataRoot: Partial<IndustryDataRoot> | undefined = {}) : void {
    serializeEntity(writer, industryDataRoot)
    writer.writeCollectionOfObjectValues<IndustryDataConnector>("dataConnectors", industryDataRoot.dataConnectors, serializeIndustryDataConnector);
    writer.writeCollectionOfObjectValues<InboundFlow>("inboundFlows", industryDataRoot.inboundFlows, serializeInboundFlow);
    writer.writeCollectionOfObjectValues<LongRunningOperation>("operations", industryDataRoot.operations, serializeLongRunningOperation);
    writer.writeCollectionOfObjectValues<ReferenceDefinition>("referenceDefinitions", industryDataRoot.referenceDefinitions, serializeReferenceDefinition);
    writer.writeCollectionOfObjectValues<RoleGroup>("roleGroups", industryDataRoot.roleGroups, serializeRoleGroup);
    writer.writeCollectionOfObjectValues<IndustryDataRun>("runs", industryDataRoot.runs, serializeIndustryDataRun);
    writer.writeCollectionOfObjectValues<SourceSystemDefinition>("sourceSystems", industryDataRoot.sourceSystems, serializeSourceSystemDefinition);
    writer.writeCollectionOfObjectValues<YearTimePeriodDefinition>("years", industryDataRoot.years, serializeYearTimePeriodDefinition);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeIndustryDataRun(writer: SerializationWriter, industryDataRun: Partial<IndustryDataRun> | undefined = {}) : void {
    serializeEntity(writer, industryDataRun)
    writer.writeCollectionOfObjectValues<IndustryDataRunActivity>("activities", industryDataRun.activities, serializeIndustryDataRunActivity);
    writer.writeEnumValue<IndustryDataRunStatus>("status", industryDataRun.status);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeIndustryDataRunActivity(writer: SerializationWriter, industryDataRunActivity: Partial<IndustryDataRunActivity> | undefined = {}) : void {
    serializeEntity(writer, industryDataRunActivity)
    writer.writeObjectValue<IndustryDataActivity>("activity", industryDataRunActivity.activity, serializeIndustryDataActivity);
    writer.writeEnumValue<IndustryDataActivityStatus>("status", industryDataRunActivity.status);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeIndustryDataRunActivityCollectionResponse(writer: SerializationWriter, industryDataRunActivityCollectionResponse: Partial<IndustryDataRunActivityCollectionResponse> | undefined = {}) : void {
    serializeBaseCollectionPaginationCountResponse(writer, industryDataRunActivityCollectionResponse)
    writer.writeCollectionOfObjectValues<IndustryDataRunActivity>("value", industryDataRunActivityCollectionResponse.value, serializeIndustryDataRunActivity);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeIndustryDataRunCollectionResponse(writer: SerializationWriter, industryDataRunCollectionResponse: Partial<IndustryDataRunCollectionResponse> | undefined = {}) : void {
    serializeBaseCollectionPaginationCountResponse(writer, industryDataRunCollectionResponse)
    writer.writeCollectionOfObjectValues<IndustryDataRun>("value", industryDataRunCollectionResponse.value, serializeIndustryDataRun);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeIndustryDataRunEntityCountMetric(writer: SerializationWriter, industryDataRunEntityCountMetric: Partial<IndustryDataRunEntityCountMetric> | undefined = {}) : void {
    writer.writeStringValue("@odata.type", industryDataRunEntityCountMetric.odataType);
    writer.writeAdditionalData(industryDataRunEntityCountMetric.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeIndustryDataRunRoleCountMetric(writer: SerializationWriter, industryDataRunRoleCountMetric: Partial<IndustryDataRunRoleCountMetric> | undefined = {}) : void {
    writer.writeStringValue("@odata.type", industryDataRunRoleCountMetric.odataType);
    writer.writeAdditionalData(industryDataRunRoleCountMetric.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeIndustryDataRunStatistics(writer: SerializationWriter, industryDataRunStatistics: Partial<IndustryDataRunStatistics> | undefined = {}) : void {
    writer.writeStringValue("@odata.type", industryDataRunStatistics.odataType);
    writer.writeEnumValue<IndustryDataRunStatus>("status", industryDataRunStatistics.status);
    writer.writeAdditionalData(industryDataRunStatistics.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeOutboundFlowActivity(writer: SerializationWriter, outboundFlowActivity: Partial<OutboundFlowActivity> | undefined = {}) : void {
    serializeIndustryDataRunActivity(writer, outboundFlowActivity)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeReferenceDefinition(writer: SerializationWriter, referenceDefinition: Partial<ReferenceDefinition> | undefined = {}) : void {
    serializeEntity(writer, referenceDefinition)
    writer.writeStringValue("code", referenceDefinition.code);
    writer.writeBooleanValue("isDisabled", referenceDefinition.isDisabled);
    writer.writeStringValue("referenceType", referenceDefinition.referenceType);
    writer.writeNumberValue("sortIndex", referenceDefinition.sortIndex);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeReferenceDefinitionCollectionResponse(writer: SerializationWriter, referenceDefinitionCollectionResponse: Partial<ReferenceDefinitionCollectionResponse> | undefined = {}) : void {
    serializeBaseCollectionPaginationCountResponse(writer, referenceDefinitionCollectionResponse)
    writer.writeCollectionOfObjectValues<ReferenceDefinition>("value", referenceDefinitionCollectionResponse.value, serializeReferenceDefinition);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeReferenceValue(writer: SerializationWriter, referenceValue: Partial<ReferenceValue> | undefined = {}) : void {
    writer.writeStringValue("code", referenceValue.code);
    writer.writeStringValue("@odata.type", referenceValue.odataType);
    writer.writeObjectValue<ReferenceDefinition>("value", referenceValue.value, serializeReferenceDefinition);
    writer.writeAdditionalData(referenceValue.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRoleGroup(writer: SerializationWriter, roleGroup: Partial<RoleGroup> | undefined = {}) : void {
    serializeEntity(writer, roleGroup)
    writer.writeStringValue("displayName", roleGroup.displayName);
    writer.writeCollectionOfObjectValues<RoleReferenceValue>("roles", roleGroup.roles, serializeRoleReferenceValue);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRoleGroupCollectionResponse(writer: SerializationWriter, roleGroupCollectionResponse: Partial<RoleGroupCollectionResponse> | undefined = {}) : void {
    serializeBaseCollectionPaginationCountResponse(writer, roleGroupCollectionResponse)
    writer.writeCollectionOfObjectValues<RoleGroup>("value", roleGroupCollectionResponse.value, serializeRoleGroup);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRoleReferenceValue(writer: SerializationWriter, roleReferenceValue: Partial<RoleReferenceValue> | undefined = {}) : void {
    serializeReferenceValue(writer, roleReferenceValue)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeSourceSystemDefinition(writer: SerializationWriter, sourceSystemDefinition: Partial<SourceSystemDefinition> | undefined = {}) : void {
    serializeEntity(writer, sourceSystemDefinition)
    writer.writeStringValue("displayName", sourceSystemDefinition.displayName);
    writer.writeCollectionOfObjectValues<UserMatchingSetting>("userMatchingSettings", sourceSystemDefinition.userMatchingSettings, serializeUserMatchingSetting);
    writer.writeStringValue("vendor", sourceSystemDefinition.vendor);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeSourceSystemDefinitionCollectionResponse(writer: SerializationWriter, sourceSystemDefinitionCollectionResponse: Partial<SourceSystemDefinitionCollectionResponse> | undefined = {}) : void {
    serializeBaseCollectionPaginationCountResponse(writer, sourceSystemDefinitionCollectionResponse)
    writer.writeCollectionOfObjectValues<SourceSystemDefinition>("value", sourceSystemDefinitionCollectionResponse.value, serializeSourceSystemDefinition);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeUserMatchingSetting(writer: SerializationWriter, userMatchingSetting: Partial<UserMatchingSetting> | undefined = {}) : void {
    writer.writeObjectValue<UserMatchTargetReferenceValue>("matchTarget", userMatchingSetting.matchTarget, serializeUserMatchTargetReferenceValue);
    writer.writeStringValue("@odata.type", userMatchingSetting.odataType);
    writer.writeNumberValue("priorityOrder", userMatchingSetting.priorityOrder);
    writer.writeObjectValue<RoleGroup>("roleGroup", userMatchingSetting.roleGroup, serializeRoleGroup);
    writer.writeObjectValue<IdentifierTypeReferenceValue>("sourceIdentifier", userMatchingSetting.sourceIdentifier, serializeIdentifierTypeReferenceValue);
    writer.writeAdditionalData(userMatchingSetting.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeUserMatchTargetReferenceValue(writer: SerializationWriter, userMatchTargetReferenceValue: Partial<UserMatchTargetReferenceValue> | undefined = {}) : void {
    serializeReferenceValue(writer, userMatchTargetReferenceValue)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeValidateOperation(writer: SerializationWriter, validateOperation: Partial<ValidateOperation> | undefined = {}) : void {
    serializeLongRunningOperation(writer, validateOperation)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeYearReferenceValue(writer: SerializationWriter, yearReferenceValue: Partial<YearReferenceValue> | undefined = {}) : void {
    serializeReferenceValue(writer, yearReferenceValue)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeYearTimePeriodDefinition(writer: SerializationWriter, yearTimePeriodDefinition: Partial<YearTimePeriodDefinition> | undefined = {}) : void {
    serializeEntity(writer, yearTimePeriodDefinition)
    writer.writeStringValue("displayName", yearTimePeriodDefinition.displayName);
    writer.writeDateOnlyValue("endDate", yearTimePeriodDefinition.endDate);
    writer.writeDateOnlyValue("startDate", yearTimePeriodDefinition.startDate);
    writer.writeObjectValue<YearReferenceValue>("year", yearTimePeriodDefinition.year, serializeYearReferenceValue);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeYearTimePeriodDefinitionCollectionResponse(writer: SerializationWriter, yearTimePeriodDefinitionCollectionResponse: Partial<YearTimePeriodDefinitionCollectionResponse> | undefined = {}) : void {
    serializeBaseCollectionPaginationCountResponse(writer, yearTimePeriodDefinitionCollectionResponse)
    writer.writeCollectionOfObjectValues<YearTimePeriodDefinition>("value", yearTimePeriodDefinitionCollectionResponse.value, serializeYearTimePeriodDefinition);
}
export interface SourceSystemDefinition extends Entity, Parsable {
    /**
     * The name of the source system. Maximum supported length is 100 characters.
     */
    displayName?: string;
    /**
     * A collection of user matching settings by roleGroup.
     */
    userMatchingSettings?: UserMatchingSetting[];
    /**
     * The name of the vendor who supplies the source system. Maximum supported length is 100 characters.
     */
    vendor?: string;
}
export interface SourceSystemDefinitionCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: SourceSystemDefinition[];
}
export interface UserMatchingSetting extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The RefUserMatchTarget for matching a user from the source with a Microsoft Entra user object.
     */
    matchTarget?: UserMatchTargetReferenceValue;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The priority order to apply when a user has multiple RefRole codes assigned.
     */
    priorityOrder?: number;
    /**
     * The roleGroup property
     */
    roleGroup?: RoleGroup;
    /**
     * The sourceIdentifier property
     */
    sourceIdentifier?: IdentifierTypeReferenceValue;
}
export interface UserMatchTargetReferenceValue extends Parsable, ReferenceValue {
}
export interface ValidateOperation extends LongRunningOperation, Parsable {
    /**
     * Set of errors discovered through validation.
     */
    errors?: PublicError[];
    /**
     * Set of warnings discovered through validation.
     */
    warnings?: PublicError[];
}
export interface YearReferenceValue extends Parsable, ReferenceValue {
}
export interface YearTimePeriodDefinition extends Entity, Parsable {
    /**
     * The name of the year. Maximum supported length is 100 characters.
     */
    displayName?: string;
    /**
     * The last day of the year using ISO 8601 format for date.
     */
    endDate?: DateOnly;
    /**
     * The first day of the year using ISO 8601 format for date.
     */
    startDate?: DateOnly;
    /**
     * The year property
     */
    year?: YearReferenceValue;
}
export interface YearTimePeriodDefinitionCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: YearTimePeriodDefinition[];
}
export const InboundDomainObject = {
    EducationRostering: "educationRostering",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const IndustryDataActivityStatusObject = {
    InProgress: "inProgress",
    Skipped: "skipped",
    Failed: "failed",
    Completed: "completed",
    CompletedWithErrors: "completedWithErrors",
    CompletedWithWarnings: "completedWithWarnings",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const IndustryDataRunStatusObject = {
    Running: "running",
    Failed: "failed",
    Completed: "completed",
    CompletedWithErrors: "completedWithErrors",
    CompletedWithWarnings: "completedWithWarnings",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const ReadinessStatusObject = {
    NotReady: "notReady",
    Ready: "ready",
    Failed: "failed",
    Disabled: "disabled",
    Expired: "expired",
    UnknownFutureValue: "unknownFutureValue",
} as const;
/* tslint:enable */
/* eslint-enable */
