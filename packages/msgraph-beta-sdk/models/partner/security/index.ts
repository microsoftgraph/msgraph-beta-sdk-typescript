/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { deserializeIntoBaseCollectionPaginationCountResponse, deserializeIntoDictionary, deserializeIntoEntity, serializeBaseCollectionPaginationCountResponse, serializeDictionary, serializeEntity, type BaseCollectionPaginationCountResponse, type Dictionary, type Entity } from '../../index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ActivityLog extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * The statusFrom property
     */
    statusFrom?: SecurityAlertStatus | null;
    /**
     * The statusTo property
     */
    statusTo?: SecurityAlertStatus | null;
    /**
     * The UPN of the partner user who did the status update activity. This attribute is set by the system.
     */
    updatedBy?: string | null;
    /**
     * The date and time for the status update activity. This attribute is set by the system. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    updatedDateTime?: Date | null;
}
export interface AdditionalDataDictionary extends Dictionary, Parsable {
}
export interface AffectedResource extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * The resource path of the resource affected by the security alert.
     */
    resourceId?: string | null;
    /**
     * The type of resource.
     */
    resourceType?: string | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ActivityLog}
 */
// @ts-ignore
export function createActivityLogFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoActivityLog;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AdditionalDataDictionary}
 */
// @ts-ignore
export function createAdditionalDataDictionaryFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAdditionalDataDictionary;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AffectedResource}
 */
// @ts-ignore
export function createAffectedResourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAffectedResource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PartnerSecurityAlertCollectionResponse}
 */
// @ts-ignore
export function createPartnerSecurityAlertCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPartnerSecurityAlertCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PartnerSecurityAlert}
 */
// @ts-ignore
export function createPartnerSecurityAlertFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPartnerSecurityAlert;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PartnerSecurity}
 */
// @ts-ignore
export function createPartnerSecurityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPartnerSecurity;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoActivityLog(activityLog: Partial<ActivityLog> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { activityLog.backingStoreEnabled = true; },
        "@odata.type": n => { activityLog.odataType = n.getStringValue(); },
        "statusFrom": n => { activityLog.statusFrom = n.getEnumValue<SecurityAlertStatus>(SecurityAlertStatusObject); },
        "statusTo": n => { activityLog.statusTo = n.getEnumValue<SecurityAlertStatus>(SecurityAlertStatusObject); },
        "updatedBy": n => { activityLog.updatedBy = n.getStringValue(); },
        "updatedDateTime": n => { activityLog.updatedDateTime = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAdditionalDataDictionary(additionalDataDictionary: Partial<AdditionalDataDictionary> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoDictionary(additionalDataDictionary),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAffectedResource(affectedResource: Partial<AffectedResource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { affectedResource.backingStoreEnabled = true; },
        "@odata.type": n => { affectedResource.odataType = n.getStringValue(); },
        "resourceId": n => { affectedResource.resourceId = n.getStringValue(); },
        "resourceType": n => { affectedResource.resourceType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPartnerSecurity(partnerSecurity: Partial<PartnerSecurity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(partnerSecurity),
        "securityAlerts": n => { partnerSecurity.securityAlerts = n.getCollectionOfObjectValues<PartnerSecurityAlert>(createPartnerSecurityAlertFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPartnerSecurityAlert(partnerSecurityAlert: Partial<PartnerSecurityAlert> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(partnerSecurityAlert),
        "activityLogs": n => { partnerSecurityAlert.activityLogs = n.getCollectionOfObjectValues<ActivityLog>(createActivityLogFromDiscriminatorValue); },
        "additionalDetails": n => { partnerSecurityAlert.additionalDetails = n.getObjectValue<AdditionalDataDictionary>(createAdditionalDataDictionaryFromDiscriminatorValue); },
        "affectedResources": n => { partnerSecurityAlert.affectedResources = n.getCollectionOfObjectValues<AffectedResource>(createAffectedResourceFromDiscriminatorValue); },
        "alertType": n => { partnerSecurityAlert.alertType = n.getStringValue(); },
        "catalogOfferId": n => { partnerSecurityAlert.catalogOfferId = n.getStringValue(); },
        "confidenceLevel": n => { partnerSecurityAlert.confidenceLevel = n.getEnumValue<SecurityAlertConfidence>(SecurityAlertConfidenceObject); },
        "customerTenantId": n => { partnerSecurityAlert.customerTenantId = n.getStringValue(); },
        "description": n => { partnerSecurityAlert.description = n.getStringValue(); },
        "detectedDateTime": n => { partnerSecurityAlert.detectedDateTime = n.getDateValue(); },
        "displayName": n => { partnerSecurityAlert.displayName = n.getStringValue(); },
        "firstObservedDateTime": n => { partnerSecurityAlert.firstObservedDateTime = n.getDateValue(); },
        "isTest": n => { partnerSecurityAlert.isTest = n.getBooleanValue(); },
        "lastObservedDateTime": n => { partnerSecurityAlert.lastObservedDateTime = n.getDateValue(); },
        "resolvedBy": n => { partnerSecurityAlert.resolvedBy = n.getStringValue(); },
        "resolvedOnDateTime": n => { partnerSecurityAlert.resolvedOnDateTime = n.getDateValue(); },
        "resolvedReason": n => { partnerSecurityAlert.resolvedReason = n.getEnumValue<SecurityAlertResolvedReason>(SecurityAlertResolvedReasonObject); },
        "severity": n => { partnerSecurityAlert.severity = n.getEnumValue<SecurityAlertSeverity>(SecurityAlertSeverityObject); },
        "status": n => { partnerSecurityAlert.status = n.getEnumValue<SecurityAlertStatus>(SecurityAlertStatusObject); },
        "subscriptionId": n => { partnerSecurityAlert.subscriptionId = n.getStringValue(); },
        "valueAddedResellerTenantId": n => { partnerSecurityAlert.valueAddedResellerTenantId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPartnerSecurityAlertCollectionResponse(partnerSecurityAlertCollectionResponse: Partial<PartnerSecurityAlertCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(partnerSecurityAlertCollectionResponse),
        "value": n => { partnerSecurityAlertCollectionResponse.value = n.getCollectionOfObjectValues<PartnerSecurityAlert>(createPartnerSecurityAlertFromDiscriminatorValue); },
    }
}
export interface PartnerSecurity extends Entity, Parsable {
    /**
     * The security alerts or a vulnerability of a CSP partner's customer that the partner must be made aware of for further action.
     */
    securityAlerts?: PartnerSecurityAlert[] | null;
}
export interface PartnerSecurityAlert extends Entity, Parsable {
    /**
     * Represents the activity by a partner and includes details of state transitions, who performed them, and when they occurred.
     */
    activityLogs?: ActivityLog[] | null;
    /**
     * A bag of name-value pairs that contain more details about an alert.
     */
    additionalDetails?: AdditionalDataDictionary | null;
    /**
     * Contains details of the resources affected by the security alert.
     */
    affectedResources?: AffectedResource[] | null;
    /**
     * The type of vulnerability that impacts the customer due to this alert. For more information, see Security alerts reference guide.
     */
    alertType?: string | null;
    /**
     * The modern offer category ID of the subscription.
     */
    catalogOfferId?: string | null;
    /**
     * The confidenceLevel property
     */
    confidenceLevel?: SecurityAlertConfidence | null;
    /**
     * The impacted customer tenant associated with the alert.
     */
    customerTenantId?: string | null;
    /**
     * The description for each alert.
     */
    description?: string | null;
    /**
     * Time when the alert was detected or created. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    detectedDateTime?: Date | null;
    /**
     * The display name of the alert.
     */
    displayName?: string | null;
    /**
     * Time of the first activity associated with the alert. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    firstObservedDateTime?: Date | null;
    /**
     * Indicates whether an alert is a test alert.
     */
    isTest?: boolean | null;
    /**
     * Time of the latest activity associated with the alert. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    lastObservedDateTime?: Date | null;
    /**
     * The UPN of the partner user who resolved the alert.
     */
    resolvedBy?: string | null;
    /**
     * Time when the alert was resolved. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    resolvedOnDateTime?: Date | null;
    /**
     * The reason provided by the partner for addressing the alert. The possible values are: legitimate, ignore, fraud, unknownFutureValue.
     */
    resolvedReason?: SecurityAlertResolvedReason | null;
    /**
     * The severity property
     */
    severity?: SecurityAlertSeverity | null;
    /**
     * The status property
     */
    status?: SecurityAlertStatus | null;
    /**
     * The subscription associated with the alert for the customer.
     */
    subscriptionId?: string | null;
    /**
     * The value-added reseller tenant associated with the partner tenant and customer tenant.
     */
    valueAddedResellerTenantId?: string | null;
}
export interface PartnerSecurityAlertCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: PartnerSecurityAlert[] | null;
}
export type SecurityAlertConfidence = (typeof SecurityAlertConfidenceObject)[keyof typeof SecurityAlertConfidenceObject];
export type SecurityAlertResolvedReason = (typeof SecurityAlertResolvedReasonObject)[keyof typeof SecurityAlertResolvedReasonObject];
export type SecurityAlertSeverity = (typeof SecurityAlertSeverityObject)[keyof typeof SecurityAlertSeverityObject];
export type SecurityAlertStatus = (typeof SecurityAlertStatusObject)[keyof typeof SecurityAlertStatusObject];
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeActivityLog(writer: SerializationWriter, activityLog: Partial<ActivityLog> | undefined | null = {}) : void {
    if (activityLog) {
        writer.writeStringValue("@odata.type", activityLog.odataType);
        writer.writeEnumValue<SecurityAlertStatus>("statusFrom", activityLog.statusFrom);
        writer.writeEnumValue<SecurityAlertStatus>("statusTo", activityLog.statusTo);
        writer.writeStringValue("updatedBy", activityLog.updatedBy);
        writer.writeDateValue("updatedDateTime", activityLog.updatedDateTime);
        writer.writeAdditionalData(activityLog.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAdditionalDataDictionary(writer: SerializationWriter, additionalDataDictionary: Partial<AdditionalDataDictionary> | undefined | null = {}) : void {
    if (additionalDataDictionary) {
        serializeDictionary(writer, additionalDataDictionary)
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAffectedResource(writer: SerializationWriter, affectedResource: Partial<AffectedResource> | undefined | null = {}) : void {
    if (affectedResource) {
        writer.writeStringValue("@odata.type", affectedResource.odataType);
        writer.writeStringValue("resourceId", affectedResource.resourceId);
        writer.writeStringValue("resourceType", affectedResource.resourceType);
        writer.writeAdditionalData(affectedResource.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePartnerSecurity(writer: SerializationWriter, partnerSecurity: Partial<PartnerSecurity> | undefined | null = {}) : void {
    if (partnerSecurity) {
        serializeEntity(writer, partnerSecurity)
        writer.writeCollectionOfObjectValues<PartnerSecurityAlert>("securityAlerts", partnerSecurity.securityAlerts, serializePartnerSecurityAlert);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePartnerSecurityAlert(writer: SerializationWriter, partnerSecurityAlert: Partial<PartnerSecurityAlert> | undefined | null = {}) : void {
    if (partnerSecurityAlert) {
        serializeEntity(writer, partnerSecurityAlert)
        writer.writeCollectionOfObjectValues<ActivityLog>("activityLogs", partnerSecurityAlert.activityLogs, serializeActivityLog);
        writer.writeObjectValue<AdditionalDataDictionary>("additionalDetails", partnerSecurityAlert.additionalDetails, serializeAdditionalDataDictionary);
        writer.writeCollectionOfObjectValues<AffectedResource>("affectedResources", partnerSecurityAlert.affectedResources, serializeAffectedResource);
        writer.writeStringValue("alertType", partnerSecurityAlert.alertType);
        writer.writeStringValue("catalogOfferId", partnerSecurityAlert.catalogOfferId);
        writer.writeEnumValue<SecurityAlertConfidence>("confidenceLevel", partnerSecurityAlert.confidenceLevel);
        writer.writeStringValue("customerTenantId", partnerSecurityAlert.customerTenantId);
        writer.writeStringValue("description", partnerSecurityAlert.description);
        writer.writeDateValue("detectedDateTime", partnerSecurityAlert.detectedDateTime);
        writer.writeStringValue("displayName", partnerSecurityAlert.displayName);
        writer.writeDateValue("firstObservedDateTime", partnerSecurityAlert.firstObservedDateTime);
        writer.writeBooleanValue("isTest", partnerSecurityAlert.isTest);
        writer.writeDateValue("lastObservedDateTime", partnerSecurityAlert.lastObservedDateTime);
        writer.writeStringValue("resolvedBy", partnerSecurityAlert.resolvedBy);
        writer.writeDateValue("resolvedOnDateTime", partnerSecurityAlert.resolvedOnDateTime);
        writer.writeEnumValue<SecurityAlertResolvedReason>("resolvedReason", partnerSecurityAlert.resolvedReason);
        writer.writeEnumValue<SecurityAlertSeverity>("severity", partnerSecurityAlert.severity);
        writer.writeEnumValue<SecurityAlertStatus>("status", partnerSecurityAlert.status);
        writer.writeStringValue("subscriptionId", partnerSecurityAlert.subscriptionId);
        writer.writeStringValue("valueAddedResellerTenantId", partnerSecurityAlert.valueAddedResellerTenantId);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePartnerSecurityAlertCollectionResponse(writer: SerializationWriter, partnerSecurityAlertCollectionResponse: Partial<PartnerSecurityAlertCollectionResponse> | undefined | null = {}) : void {
    if (partnerSecurityAlertCollectionResponse) {
        serializeBaseCollectionPaginationCountResponse(writer, partnerSecurityAlertCollectionResponse)
        writer.writeCollectionOfObjectValues<PartnerSecurityAlert>("value", partnerSecurityAlertCollectionResponse.value, serializePartnerSecurityAlert);
    }
}
export const SecurityAlertConfidenceObject = {
    Low: "low",
    Medium: "medium",
    High: "high",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const SecurityAlertResolvedReasonObject = {
    Legitimate: "legitimate",
    Ignore: "ignore",
    Fraud: "fraud",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const SecurityAlertSeverityObject = {
    Informational: "informational",
    High: "high",
    Medium: "medium",
    Low: "low",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const SecurityAlertStatusObject = {
    Active: "active",
    Resolved: "resolved",
    Investigating: "investigating",
    UnknownFutureValue: "unknownFutureValue",
} as const;
/* tslint:enable */
/* eslint-enable */
