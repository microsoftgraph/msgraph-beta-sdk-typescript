/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { deserializeIntoBaseCollectionPaginationCountResponse, deserializeIntoDictionary, deserializeIntoEntity, serializeBaseCollectionPaginationCountResponse, serializeDictionary, serializeEntity, type BaseCollectionPaginationCountResponse, type Dictionary, type Entity } from '../../';
// @ts-ignore
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ActivityLog extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The statusFrom property
     */
    statusFrom?: SecurityAlertStatus;
    /**
     * The statusTo property
     */
    statusTo?: SecurityAlertStatus;
    /**
     * The updatedBy property
     */
    updatedBy?: string;
    /**
     * The updatedDateTime property
     */
    updatedDateTime?: Date;
}
export interface AdditionalDataDictionary extends Dictionary, Parsable {
}
export interface AffectedResource extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The resourceId property
     */
    resourceId?: string;
    /**
     * The resourceType property
     */
    resourceType?: string;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ActivityLog}
 */
export function createActivityLogFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoActivityLog;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AdditionalDataDictionary}
 */
export function createAdditionalDataDictionaryFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAdditionalDataDictionary;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AffectedResource}
 */
export function createAffectedResourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAffectedResource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PartnerSecurityAlertCollectionResponse}
 */
export function createPartnerSecurityAlertCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPartnerSecurityAlertCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PartnerSecurityAlert}
 */
export function createPartnerSecurityAlertFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPartnerSecurityAlert;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PartnerSecurity}
 */
export function createPartnerSecurityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPartnerSecurity;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoActivityLog(activityLog: Partial<ActivityLog> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { activityLog.backingStoreEnabled = true; },
        "@odata.type": n => { activityLog.odataType = n.getStringValue(); },
        "statusFrom": n => { activityLog.statusFrom = n.getEnumValue<SecurityAlertStatus>(SecurityAlertStatusObject); },
        "statusTo": n => { activityLog.statusTo = n.getEnumValue<SecurityAlertStatus>(SecurityAlertStatusObject); },
        "updatedBy": n => { activityLog.updatedBy = n.getStringValue(); },
        "updatedDateTime": n => { activityLog.updatedDateTime = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoAdditionalDataDictionary(additionalDataDictionary: Partial<AdditionalDataDictionary> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoDictionary(additionalDataDictionary),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoAffectedResource(affectedResource: Partial<AffectedResource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { affectedResource.backingStoreEnabled = true; },
        "@odata.type": n => { affectedResource.odataType = n.getStringValue(); },
        "resourceId": n => { affectedResource.resourceId = n.getStringValue(); },
        "resourceType": n => { affectedResource.resourceType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoPartnerSecurity(partnerSecurity: Partial<PartnerSecurity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(partnerSecurity),
        "securityAlerts": n => { partnerSecurity.securityAlerts = n.getCollectionOfObjectValues<PartnerSecurityAlert>(createPartnerSecurityAlertFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoPartnerSecurityAlert(partnerSecurityAlert: Partial<PartnerSecurityAlert> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(partnerSecurityAlert),
        "activityLogs": n => { partnerSecurityAlert.activityLogs = n.getCollectionOfObjectValues<ActivityLog>(createActivityLogFromDiscriminatorValue); },
        "additionalDetails": n => { partnerSecurityAlert.additionalDetails = n.getObjectValue<AdditionalDataDictionary>(createAdditionalDataDictionaryFromDiscriminatorValue); },
        "affectedResources": n => { partnerSecurityAlert.affectedResources = n.getCollectionOfObjectValues<AffectedResource>(createAffectedResourceFromDiscriminatorValue); },
        "alertType": n => { partnerSecurityAlert.alertType = n.getStringValue(); },
        "catalogOfferId": n => { partnerSecurityAlert.catalogOfferId = n.getStringValue(); },
        "confidenceLevel": n => { partnerSecurityAlert.confidenceLevel = n.getEnumValue<SecurityAlertConfidence>(SecurityAlertConfidenceObject); },
        "customerTenantId": n => { partnerSecurityAlert.customerTenantId = n.getStringValue(); },
        "description": n => { partnerSecurityAlert.description = n.getStringValue(); },
        "detectedDateTime": n => { partnerSecurityAlert.detectedDateTime = n.getDateValue(); },
        "displayName": n => { partnerSecurityAlert.displayName = n.getStringValue(); },
        "firstObservedDateTime": n => { partnerSecurityAlert.firstObservedDateTime = n.getDateValue(); },
        "isTest": n => { partnerSecurityAlert.isTest = n.getBooleanValue(); },
        "lastObservedDateTime": n => { partnerSecurityAlert.lastObservedDateTime = n.getDateValue(); },
        "resolvedBy": n => { partnerSecurityAlert.resolvedBy = n.getStringValue(); },
        "resolvedOnDateTime": n => { partnerSecurityAlert.resolvedOnDateTime = n.getDateValue(); },
        "resolvedReason": n => { partnerSecurityAlert.resolvedReason = n.getEnumValue<SecurityAlertResolvedReason>(SecurityAlertResolvedReasonObject); },
        "severity": n => { partnerSecurityAlert.severity = n.getEnumValue<SecurityAlertSeverity>(SecurityAlertSeverityObject); },
        "status": n => { partnerSecurityAlert.status = n.getEnumValue<SecurityAlertStatus>(SecurityAlertStatusObject); },
        "subscriptionId": n => { partnerSecurityAlert.subscriptionId = n.getStringValue(); },
        "valueAddedResellerTenantId": n => { partnerSecurityAlert.valueAddedResellerTenantId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoPartnerSecurityAlertCollectionResponse(partnerSecurityAlertCollectionResponse: Partial<PartnerSecurityAlertCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(partnerSecurityAlertCollectionResponse),
        "value": n => { partnerSecurityAlertCollectionResponse.value = n.getCollectionOfObjectValues<PartnerSecurityAlert>(createPartnerSecurityAlertFromDiscriminatorValue); },
    }
}
export interface PartnerSecurity extends Entity, Parsable {
    /**
     * The securityAlerts property
     */
    securityAlerts?: PartnerSecurityAlert[];
}
export interface PartnerSecurityAlert extends Entity, Parsable {
    /**
     * The activityLogs property
     */
    activityLogs?: ActivityLog[];
    /**
     * The additionalDetails property
     */
    additionalDetails?: AdditionalDataDictionary;
    /**
     * The affectedResources property
     */
    affectedResources?: AffectedResource[];
    /**
     * The alertType property
     */
    alertType?: string;
    /**
     * The catalogOfferId property
     */
    catalogOfferId?: string;
    /**
     * The confidenceLevel property
     */
    confidenceLevel?: SecurityAlertConfidence;
    /**
     * The customerTenantId property
     */
    customerTenantId?: string;
    /**
     * The description property
     */
    description?: string;
    /**
     * The detectedDateTime property
     */
    detectedDateTime?: Date;
    /**
     * The displayName property
     */
    displayName?: string;
    /**
     * The firstObservedDateTime property
     */
    firstObservedDateTime?: Date;
    /**
     * The isTest property
     */
    isTest?: boolean;
    /**
     * The lastObservedDateTime property
     */
    lastObservedDateTime?: Date;
    /**
     * The resolvedBy property
     */
    resolvedBy?: string;
    /**
     * The resolvedOnDateTime property
     */
    resolvedOnDateTime?: Date;
    /**
     * The resolvedReason property
     */
    resolvedReason?: SecurityAlertResolvedReason;
    /**
     * The severity property
     */
    severity?: SecurityAlertSeverity;
    /**
     * The status property
     */
    status?: SecurityAlertStatus;
    /**
     * The subscriptionId property
     */
    subscriptionId?: string;
    /**
     * The valueAddedResellerTenantId property
     */
    valueAddedResellerTenantId?: string;
}
export interface PartnerSecurityAlertCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: PartnerSecurityAlert[];
}
export type SecurityAlertConfidence = (typeof SecurityAlertConfidenceObject)[keyof typeof SecurityAlertConfidenceObject];
export type SecurityAlertResolvedReason = (typeof SecurityAlertResolvedReasonObject)[keyof typeof SecurityAlertResolvedReasonObject];
export type SecurityAlertSeverity = (typeof SecurityAlertSeverityObject)[keyof typeof SecurityAlertSeverityObject];
export type SecurityAlertStatus = (typeof SecurityAlertStatusObject)[keyof typeof SecurityAlertStatusObject];
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeActivityLog(writer: SerializationWriter, activityLog: Partial<ActivityLog> | undefined = {}) : void {
    writer.writeStringValue("@odata.type", activityLog.odataType);
    writer.writeEnumValue<SecurityAlertStatus>("statusFrom", activityLog.statusFrom);
    writer.writeEnumValue<SecurityAlertStatus>("statusTo", activityLog.statusTo);
    writer.writeStringValue("updatedBy", activityLog.updatedBy);
    writer.writeDateValue("updatedDateTime", activityLog.updatedDateTime);
    writer.writeAdditionalData(activityLog.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAdditionalDataDictionary(writer: SerializationWriter, additionalDataDictionary: Partial<AdditionalDataDictionary> | undefined = {}) : void {
    serializeDictionary(writer, additionalDataDictionary)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAffectedResource(writer: SerializationWriter, affectedResource: Partial<AffectedResource> | undefined = {}) : void {
    writer.writeStringValue("@odata.type", affectedResource.odataType);
    writer.writeStringValue("resourceId", affectedResource.resourceId);
    writer.writeStringValue("resourceType", affectedResource.resourceType);
    writer.writeAdditionalData(affectedResource.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializePartnerSecurity(writer: SerializationWriter, partnerSecurity: Partial<PartnerSecurity> | undefined = {}) : void {
    serializeEntity(writer, partnerSecurity)
    writer.writeCollectionOfObjectValues<PartnerSecurityAlert>("securityAlerts", partnerSecurity.securityAlerts, serializePartnerSecurityAlert);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializePartnerSecurityAlert(writer: SerializationWriter, partnerSecurityAlert: Partial<PartnerSecurityAlert> | undefined = {}) : void {
    serializeEntity(writer, partnerSecurityAlert)
    writer.writeCollectionOfObjectValues<ActivityLog>("activityLogs", partnerSecurityAlert.activityLogs, serializeActivityLog);
    writer.writeObjectValue<AdditionalDataDictionary>("additionalDetails", partnerSecurityAlert.additionalDetails, serializeAdditionalDataDictionary);
    writer.writeCollectionOfObjectValues<AffectedResource>("affectedResources", partnerSecurityAlert.affectedResources, serializeAffectedResource);
    writer.writeStringValue("alertType", partnerSecurityAlert.alertType);
    writer.writeStringValue("catalogOfferId", partnerSecurityAlert.catalogOfferId);
    writer.writeEnumValue<SecurityAlertConfidence>("confidenceLevel", partnerSecurityAlert.confidenceLevel);
    writer.writeStringValue("customerTenantId", partnerSecurityAlert.customerTenantId);
    writer.writeStringValue("description", partnerSecurityAlert.description);
    writer.writeDateValue("detectedDateTime", partnerSecurityAlert.detectedDateTime);
    writer.writeStringValue("displayName", partnerSecurityAlert.displayName);
    writer.writeDateValue("firstObservedDateTime", partnerSecurityAlert.firstObservedDateTime);
    writer.writeBooleanValue("isTest", partnerSecurityAlert.isTest);
    writer.writeDateValue("lastObservedDateTime", partnerSecurityAlert.lastObservedDateTime);
    writer.writeStringValue("resolvedBy", partnerSecurityAlert.resolvedBy);
    writer.writeDateValue("resolvedOnDateTime", partnerSecurityAlert.resolvedOnDateTime);
    writer.writeEnumValue<SecurityAlertResolvedReason>("resolvedReason", partnerSecurityAlert.resolvedReason);
    writer.writeEnumValue<SecurityAlertSeverity>("severity", partnerSecurityAlert.severity);
    writer.writeEnumValue<SecurityAlertStatus>("status", partnerSecurityAlert.status);
    writer.writeStringValue("subscriptionId", partnerSecurityAlert.subscriptionId);
    writer.writeStringValue("valueAddedResellerTenantId", partnerSecurityAlert.valueAddedResellerTenantId);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializePartnerSecurityAlertCollectionResponse(writer: SerializationWriter, partnerSecurityAlertCollectionResponse: Partial<PartnerSecurityAlertCollectionResponse> | undefined = {}) : void {
    serializeBaseCollectionPaginationCountResponse(writer, partnerSecurityAlertCollectionResponse)
    writer.writeCollectionOfObjectValues<PartnerSecurityAlert>("value", partnerSecurityAlertCollectionResponse.value, serializePartnerSecurityAlert);
}
export const SecurityAlertConfidenceObject = {
    Low: "low",
    Medium: "medium",
    High: "high",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const SecurityAlertResolvedReasonObject = {
    Legitimate: "legitimate",
    Ignore: "ignore",
    Fraud: "fraud",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const SecurityAlertSeverityObject = {
    Informational: "informational",
    High: "high",
    Medium: "medium",
    Low: "low",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const SecurityAlertStatusObject = {
    Active: "active",
    Resolved: "resolved",
    Investigating: "investigating",
    UnknownFutureValue: "unknownFutureValue",
} as const;
/* tslint:enable */
/* eslint-enable */
