/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { deserializeIntoEntity, serializeEntity, type Entity } from '../index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type Guid, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export type AssigneeTypes = (typeof AssigneeTypesObject)[keyof typeof AssigneeTypesObject];
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {GroupCloudLicensing}
 */
// @ts-ignore
export function createGroupCloudLicensingFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoGroupCloudLicensing;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Service}
 */
// @ts-ignore
export function createServiceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoService;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UsageRight}
 */
// @ts-ignore
export function createUsageRightFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUsageRight;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UserCloudLicensing}
 */
// @ts-ignore
export function createUserCloudLicensingFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUserCloudLicensing;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoGroupCloudLicensing(groupCloudLicensing: Partial<GroupCloudLicensing> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { groupCloudLicensing.backingStoreEnabled = true; },
        "@odata.type": n => { groupCloudLicensing.odataType = n.getStringValue(); },
        "usageRights": n => { groupCloudLicensing.usageRights = n.getCollectionOfObjectValues<UsageRight>(createUsageRightFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoService(service: Partial<Service> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "assignableTo": n => { service.assignableTo = n.getCollectionOfEnumValues<AssigneeTypes>(AssigneeTypesObject); },
        "backingStoreEnabled": n => { service.backingStoreEnabled = true; },
        "@odata.type": n => { service.odataType = n.getStringValue(); },
        "planId": n => { service.planId = n.getGuidValue(); },
        "planName": n => { service.planName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUsageRight(usageRight: Partial<UsageRight> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(usageRight),
        "services": n => { usageRight.services = n.getCollectionOfObjectValues<Service>(createServiceFromDiscriminatorValue); },
        "skuId": n => { usageRight.skuId = n.getGuidValue(); },
        "skuPartNumber": n => { usageRight.skuPartNumber = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUserCloudLicensing(userCloudLicensing: Partial<UserCloudLicensing> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { userCloudLicensing.backingStoreEnabled = true; },
        "@odata.type": n => { userCloudLicensing.odataType = n.getStringValue(); },
        "usageRights": n => { userCloudLicensing.usageRights = n.getCollectionOfObjectValues<UsageRight>(createUsageRightFromDiscriminatorValue); },
    }
}
export interface GroupCloudLicensing extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * The usageRights property
     */
    usageRights?: UsageRight[] | null;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeGroupCloudLicensing(writer: SerializationWriter, groupCloudLicensing: Partial<GroupCloudLicensing> | undefined | null = {}) : void {
    if (groupCloudLicensing) {
        writer.writeStringValue("@odata.type", groupCloudLicensing.odataType);
        writer.writeCollectionOfObjectValues<UsageRight>("usageRights", groupCloudLicensing.usageRights, serializeUsageRight);
        writer.writeAdditionalData(groupCloudLicensing.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeService(writer: SerializationWriter, service: Partial<Service> | undefined | null = {}) : void {
    if (service) {
        writer.writeEnumValue<AssigneeTypes[]>("assignableTo", service.assignableTo);
        writer.writeStringValue("@odata.type", service.odataType);
        writer.writeGuidValue("planId", service.planId);
        writer.writeStringValue("planName", service.planName);
        writer.writeAdditionalData(service.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUsageRight(writer: SerializationWriter, usageRight: Partial<UsageRight> | undefined | null = {}) : void {
    if (usageRight) {
        serializeEntity(writer, usageRight)
        writer.writeCollectionOfObjectValues<Service>("services", usageRight.services, serializeService);
        writer.writeGuidValue("skuId", usageRight.skuId);
        writer.writeStringValue("skuPartNumber", usageRight.skuPartNumber);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUserCloudLicensing(writer: SerializationWriter, userCloudLicensing: Partial<UserCloudLicensing> | undefined | null = {}) : void {
    if (userCloudLicensing) {
        writer.writeStringValue("@odata.type", userCloudLicensing.odataType);
        writer.writeCollectionOfObjectValues<UsageRight>("usageRights", userCloudLicensing.usageRights, serializeUsageRight);
        writer.writeAdditionalData(userCloudLicensing.additionalData);
    }
}
export interface Service extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The assignableTo property
     */
    assignableTo?: AssigneeTypes[] | null;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * The unique identifier of the service plan that is equal to the servicePlanId property on the related servicePlanInfo objects.
     */
    planId?: Guid | null;
    /**
     * The name of the service plan that is equal to the servicePlanName property on the related servicePlanInfo objects.
     */
    planName?: string | null;
}
export interface UsageRight extends Entity, Parsable {
    /**
     * Information about the services associated with the usageRight. Not nullable. Read-only. Supports $filter on the planId property.
     */
    services?: Service[] | null;
    /**
     * Unique identifier (GUID) for the service SKU that is equal to the skuId property on the related subscribedSku object. Read-only. Supports $filter.
     */
    skuId?: Guid | null;
    /**
     * Unique SKU display name that is equal to the skuPartNumber on the related subscribedSku object; for example, AAD_Premium. Read-only.
     */
    skuPartNumber?: string | null;
}
export interface UserCloudLicensing extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * The usageRights property
     */
    usageRights?: UsageRight[] | null;
}
export const AssigneeTypesObject = {
    None: "none",
    User: "user",
    Group: "group",
    Device: "device",
    UnknownFutureValue: "unknownFutureValue",
} as const;
/* tslint:enable */
/* eslint-enable */
