/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createRiskDetectionCollectionResponseFromDiscriminatorValue, createRiskDetectionFromDiscriminatorValue, serializeRiskDetection, type RiskDetection, type RiskDetectionCollectionResponse } from '@microsoft/msgraph-beta-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-beta-sdk/models/oDataErrors/';
import { RiskDetectionItemRequestBuilderRequestsMetadata, type RiskDetectionItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the collection of riskDetection entities.
 */
export interface RiskDetectionsRequestBuilder extends BaseRequestBuilder<RiskDetectionsRequestBuilder> {
    /**
     * Provides operations to manage the collection of riskDetection entities.
     * @param riskDetectionId The unique identifier of riskDetection
     * @returns {RiskDetectionItemRequestBuilder}
     */
     byRiskDetectionId(riskDetectionId: string) : RiskDetectionItemRequestBuilder;
    /**
     * Retrieve the properties of a collection of riskDetection objects.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<RiskDetectionCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/riskdetection-list?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<RiskDetectionsRequestBuilderGetQueryParameters> | undefined) : Promise<RiskDetectionCollectionResponse | undefined>;
    /**
     * Add new entity to riskDetections
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<RiskDetection>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: RiskDetection, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<RiskDetection | undefined>;
    /**
     * Retrieve the properties of a collection of riskDetection objects.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<RiskDetectionsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Add new entity to riskDetections
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: RiskDetection, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Retrieve the properties of a collection of riskDetection objects.
 */
export interface RiskDetectionsRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: string[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: string[];
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Uri template for the request builder.
 */
export const RiskDetectionsRequestBuilderUriTemplate = "{+baseurl}/riskDetections{?%24expand,%24filter,%24orderby,%24search,%24select,%24top}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const RiskDetectionsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const RiskDetectionsRequestBuilderNavigationMetadata: Record<Exclude<keyof RiskDetectionsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byRiskDetectionId: {
        requestsMetadata: RiskDetectionItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["riskDetection%2Did"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const RiskDetectionsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: RiskDetectionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createRiskDetectionCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: RiskDetectionsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: RiskDetectionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createRiskDetectionFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeRiskDetection,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
